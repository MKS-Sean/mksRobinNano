###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:06:18
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl_motion.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl_motion.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\ubl_motion.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\ubl_motion.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl_motion.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          #include "MarlinConfig.h"

  #define UNUSED(x) ((void)(x))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Inc\mks_cfg.h",613  Warning[Pe083]: 
          type qualifier specified more than once
     23          
     24          #if 1//ENABLED(AUTO_BED_LEVELING_UBL)
     25          
     26            #include "Marlin.h"

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void set_current_from_destination()
   \                     _Z28set_current_from_destinationv: (+1)
   \   00000000   0x2210             MOVS     R2,#+16
   \   00000002   0x4902             LDR.N    R1,??set_current_from_destination_0
   \   00000004   0x4802             LDR.N    R0,??set_current_from_destination_0+0x4
   \   00000006   0x.... 0x....      B.W      memcpy
   \   0000000A   0xBF00             Nop      
   \                     ??set_current_from_destination_0:
   \   0000000C   0x........         DC32     destination
   \   00000010   0x........         DC32     current_position

   \                                 In section .text, align 4
   \   __interwork __softfp bool position_is_reachable_IS_KINEMATIC(float const &, float const &)
   \                     _Z34position_is_reachable_IS_KINEMATICRKfS0_: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4859             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0
   \   0000000A   0xF9B0 0x1058      LDRSH    R1,[R0, #+88]
   \   0000000E   0x078A             LSLS     R2,R1,#+30
   \   00000010   0xD54E             BPL.N    ??position_is_reachable_IS_KINEMATIC_1
   \   00000012   0xF8D0 0x8054      LDR      R8,[R0, #+84]
   \   00000016   0xF04F 0x0902      MOV      R9,#+2
   \   0000001A   0xF04F 0x567E      MOV      R6,#+1065353216
   \   0000001E   0x4637             MOV      R7,R6
   \   00000020   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_2
   \                     ??position_is_reachable_IS_KINEMATIC_3: (+1)
   \   00000022   0x4640             MOV      R0,R8
   \   00000024   0x4641             MOV      R1,R8
   \   00000026   0x.... 0x....      BL       __aeabi_fmul
   \   0000002A   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_2: (+1)
   \   0000002C   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000030   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_4
   \   00000032   0x4638             MOV      R0,R7
   \   00000034   0x4641             MOV      R1,R8
   \   00000036   0x.... 0x....      BL       __aeabi_fmul
   \   0000003A   0x4607             MOV      R7,R0
   \                     ??position_is_reachable_IS_KINEMATIC_4: (+1)
   \   0000003C   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   00000040   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_3
   \   00000042   0xF8D5 0x8000      LDR      R8,[R5, #+0]
   \   00000046   0xF04F 0x0902      MOV      R9,#+2
   \   0000004A   0x4635             MOV      R5,R6
   \   0000004C   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_5
   \                     ??position_is_reachable_IS_KINEMATIC_6: (+1)
   \   0000004E   0x4640             MOV      R0,R8
   \   00000050   0x4641             MOV      R1,R8
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_5: (+1)
   \   00000058   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000005C   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_7
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x4641             MOV      R1,R8
   \   00000062   0x.... 0x....      BL       __aeabi_fmul
   \   00000066   0x4605             MOV      R5,R0
   \                     ??position_is_reachable_IS_KINEMATIC_7: (+1)
   \   00000068   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   0000006C   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_6
   \   0000006E   0x6824             LDR      R4,[R4, #+0]
   \   00000070   0xF04F 0x0802      MOV      R8,#+2
   \   00000074   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_8
   \                     ??position_is_reachable_IS_KINEMATIC_9: (+1)
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x4621             MOV      R1,R4
   \   0000007A   0x.... 0x....      BL       __aeabi_fmul
   \   0000007E   0x4604             MOV      R4,R0
   \                     ??position_is_reachable_IS_KINEMATIC_8: (+1)
   \   00000080   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \   00000084   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_10
   \   00000086   0x4630             MOV      R0,R6
   \   00000088   0x4621             MOV      R1,R4
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x4606             MOV      R6,R0
   \                     ??position_is_reachable_IS_KINEMATIC_10: (+1)
   \   00000090   0xEA5F 0x0858      LSRS     R8,R8,#+1
   \   00000094   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_9
   \   00000096   0x4628             MOV      R0,R5
   \   00000098   0x4631             MOV      R1,R6
   \   0000009A   0x.... 0x....      BL       __aeabi_fadd
   \   0000009E   0x4601             MOV      R1,R0
   \   000000A0   0x4638             MOV      R0,R7
   \   000000A2   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000A6   0xD801             BHI.N    ??position_is_reachable_IS_KINEMATIC_11
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xE05F             B.N      ??position_is_reachable_IS_KINEMATIC_12
   \                     ??position_is_reachable_IS_KINEMATIC_11: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xE05D             B.N      ??position_is_reachable_IS_KINEMATIC_12
   \                     ??position_is_reachable_IS_KINEMATIC_1: (+1)
   \   000000B0   0xF44F 0x7040      MOV      R0,#+768
   \   000000B4   0x4201             TST      R1,R0
   \   000000B6   0xD059             BEQ.N    ??position_is_reachable_IS_KINEMATIC_12
   \   000000B8   0x482E             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x4
   \   000000BA   0x6801             LDR      R1,[R0, #+0]
   \   000000BC   0x482E             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x8
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x.... 0x....      BL       __aeabi_fadd
   \   000000C4   0x4680             MOV      R8,R0
   \   000000C6   0xF04F 0x0902      MOV      R9,#+2
   \   000000CA   0xF04F 0x567E      MOV      R6,#+1065353216
   \   000000CE   0x4637             MOV      R7,R6
   \   000000D0   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_13
   \                     ??position_is_reachable_IS_KINEMATIC_14: (+1)
   \   000000D2   0x4640             MOV      R0,R8
   \   000000D4   0x4641             MOV      R1,R8
   \   000000D6   0x.... 0x....      BL       __aeabi_fmul
   \   000000DA   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_13: (+1)
   \   000000DC   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000000E0   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_15
   \   000000E2   0x4638             MOV      R0,R7
   \   000000E4   0x4641             MOV      R1,R8
   \   000000E6   0x.... 0x....      BL       __aeabi_fmul
   \   000000EA   0x4607             MOV      R7,R0
   \                     ??position_is_reachable_IS_KINEMATIC_15: (+1)
   \   000000EC   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   000000F0   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_14
   \   000000F2   0x6829             LDR      R1,[R5, #+0]
   \   000000F4   0x4821             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0xC  ;; 0xc2c80000
   \   000000F6   0x.... 0x....      BL       __aeabi_fadd
   \   000000FA   0x4680             MOV      R8,R0
   \   000000FC   0xF04F 0x0902      MOV      R9,#+2
   \   00000100   0x4635             MOV      R5,R6
   \   00000102   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_16
   \                     ??position_is_reachable_IS_KINEMATIC_17: (+1)
   \   00000104   0x4640             MOV      R0,R8
   \   00000106   0x4641             MOV      R1,R8
   \   00000108   0x.... 0x....      BL       __aeabi_fmul
   \   0000010C   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_16: (+1)
   \   0000010E   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000112   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_18
   \   00000114   0x4628             MOV      R0,R5
   \   00000116   0x4641             MOV      R1,R8
   \   00000118   0x.... 0x....      BL       __aeabi_fmul
   \   0000011C   0x4605             MOV      R5,R0
   \                     ??position_is_reachable_IS_KINEMATIC_18: (+1)
   \   0000011E   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   00000122   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_17
   \   00000124   0x6821             LDR      R1,[R4, #+0]
   \   00000126   0x4816             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x10  ;; 0x42600000
   \   00000128   0x.... 0x....      BL       __aeabi_fadd
   \   0000012C   0x4604             MOV      R4,R0
   \   0000012E   0xF04F 0x0802      MOV      R8,#+2
   \   00000132   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_19
   \                     ??position_is_reachable_IS_KINEMATIC_20: (+1)
   \   00000134   0x4620             MOV      R0,R4
   \   00000136   0x4621             MOV      R1,R4
   \   00000138   0x.... 0x....      BL       __aeabi_fmul
   \   0000013C   0x4604             MOV      R4,R0
   \                     ??position_is_reachable_IS_KINEMATIC_19: (+1)
   \   0000013E   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \   00000142   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_21
   \   00000144   0x4630             MOV      R0,R6
   \   00000146   0x4621             MOV      R1,R4
   \   00000148   0x.... 0x....      BL       __aeabi_fmul
   \   0000014C   0x4606             MOV      R6,R0
   \                     ??position_is_reachable_IS_KINEMATIC_21: (+1)
   \   0000014E   0xEA5F 0x0858      LSRS     R8,R8,#+1
   \   00000152   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_20
   \   00000154   0x4628             MOV      R0,R5
   \   00000156   0x4631             MOV      R1,R6
   \   00000158   0x.... 0x....      BL       __aeabi_fadd
   \   0000015C   0x4601             MOV      R1,R0
   \   0000015E   0x4638             MOV      R0,R7
   \   00000160   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000164   0xD801             BHI.N    ??position_is_reachable_IS_KINEMATIC_22
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0xE000             B.N      ??position_is_reachable_IS_KINEMATIC_12
   \                     ??position_is_reachable_IS_KINEMATIC_22: (+1)
   \   0000016A   0x2000             MOVS     R0,#+0

    }
    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
   \                     ??position_is_reachable_IS_KINEMATIC_12: (+1)
   \   0000016C   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??position_is_reachable_IS_KINEMATIC_0:
   \   00000170   0x........         DC32     mksCfg
   \   00000174   0x........         DC32     L1
   \   00000178   0x........         DC32     L2
   \   0000017C   0xC2C80000         DC32     0xc2c80000
   \   00000180   0x42600000         DC32     0x42600000

   \                                 In section .text, align 4
   \   __interwork __softfp bool position_is_reachable_IS_CARTESIAN(float const &, float const &)
   \                     _Z34position_is_reachable_IS_CARTESIANRKfS0_: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x468B             MOV      R11,R1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       __aeabi_f2d
   \   0000000C   0x4604             MOV      R4,R0
   \   0000000E   0x460D             MOV      R5,R1
   \   00000010   0xF8DF 0x8094      LDR.W    R8,??position_is_reachable_IS_CARTESIAN_0  ;; 0xd2f1a9fc
   \   00000014   0xF8DF 0x9094      LDR.W    R9,??position_is_reachable_IS_CARTESIAN_0+0x4  ;; 0xbf50624d
   \   00000018   0xF8DF 0xA094      LDR.W    R10,??position_is_reachable_IS_CARTESIAN_0+0x8
   \   0000001C   0xF8DA 0x0008      LDR      R0,[R10, #+8]
   \   00000020   0x.... 0x....      BL       __aeabi_f2d
   \   00000024   0x4642             MOV      R2,R8
   \   00000026   0x464B             MOV      R3,R9
   \   00000028   0x.... 0x....      BL       __aeabi_dadd
   \   0000002C   0x4602             MOV      R2,R0
   \   0000002E   0x460B             MOV      R3,R1
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000038   0xD832             BHI.N    ??position_is_reachable_IS_CARTESIAN_1
   \   0000003A   0x4646             MOV      R6,R8
   \   0000003C   0x4F1D             LDR.N    R7,??position_is_reachable_IS_CARTESIAN_0+0xC  ;; 0x3f50624d
   \   0000003E   0xF8DA 0x0014      LDR      R0,[R10, #+20]
   \   00000042   0x.... 0x....      BL       __aeabi_f2d
   \   00000046   0x4632             MOV      R2,R6
   \   00000048   0x463B             MOV      R3,R7
   \   0000004A   0x.... 0x....      BL       __aeabi_dadd
   \   0000004E   0x4622             MOV      R2,R4
   \   00000050   0x462B             MOV      R3,R5
   \   00000052   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000056   0xD823             BHI.N    ??position_is_reachable_IS_CARTESIAN_1
   \   00000058   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   0000005C   0x.... 0x....      BL       __aeabi_f2d
   \   00000060   0x4604             MOV      R4,R0
   \   00000062   0x460D             MOV      R5,R1
   \   00000064   0xF8DA 0x000C      LDR      R0,[R10, #+12]
   \   00000068   0x.... 0x....      BL       __aeabi_f2d
   \   0000006C   0x4642             MOV      R2,R8
   \   0000006E   0x464B             MOV      R3,R9
   \   00000070   0x.... 0x....      BL       __aeabi_dadd
   \   00000074   0x4602             MOV      R2,R0
   \   00000076   0x460B             MOV      R3,R1
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000080   0xD80E             BHI.N    ??position_is_reachable_IS_CARTESIAN_1
   \   00000082   0xF8DA 0x0018      LDR      R0,[R10, #+24]
   \   00000086   0x.... 0x....      BL       __aeabi_f2d
   \   0000008A   0x4632             MOV      R2,R6
   \   0000008C   0x463B             MOV      R3,R7
   \   0000008E   0x.... 0x....      BL       __aeabi_dadd
   \   00000092   0x4622             MOV      R2,R4
   \   00000094   0x462B             MOV      R3,R5
   \   00000096   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000009A   0xD801             BHI.N    ??position_is_reachable_IS_CARTESIAN_1
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0xE000             B.N      ??position_is_reachable_IS_CARTESIAN_2
   \                     ??position_is_reachable_IS_CARTESIAN_1: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??position_is_reachable_IS_CARTESIAN_2: (+1)
   \   000000A2   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \   000000A6   0xBF00             Nop      
   \                     ??position_is_reachable_IS_CARTESIAN_0:
   \   000000A8   0xD2F1A9FC         DC32     0xd2f1a9fc
   \   000000AC   0xBF50624D         DC32     0xbf50624d
   \   000000B0   0x........         DC32     mksCfg
   \   000000B4   0x3F50624D         DC32     0x3f50624d
     27            #include "ubl.h"

   \                                 In section .text, align 4
   \   __interwork __softfp float Planner::fade_scaling_factor_for_z(float const &)
   \                     _ZN7Planner25fade_scaling_factor_for_zERKf: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4602             MOV      R2,R0
   \   00000004   0x4813             LDR.N    R0,??fade_scaling_factor_for_z_0
   \   00000006   0x6803             LDR      R3,[R0, #+0]
   \   00000008   0x4618             MOV      R0,R3
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000010   0xD01C             BEQ.N    ??fade_scaling_factor_for_z_1
   \   00000012   0x6814             LDR      R4,[R2, #+0]
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x4619             MOV      R1,R3
   \   00000018   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000001C   0xD801             BHI.N    ??fade_scaling_factor_for_z_2
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??fade_scaling_factor_for_z_2: (+1)
   \   00000022   0x4D0D             LDR.N    R5,??fade_scaling_factor_for_z_0+0x4
   \   00000024   0x4B0D             LDR.N    R3,??fade_scaling_factor_for_z_0+0x8
   \   00000026   0x6818             LDR      R0,[R3, #+0]
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000002E   0xD00B             BEQ.N    ??fade_scaling_factor_for_z_3
   \   00000030   0x601C             STR      R4,[R3, #+0]
   \   00000032   0x6811             LDR      R1,[R2, #+0]
   \   00000034   0x480A             LDR.N    R0,??fade_scaling_factor_for_z_0+0xC
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x.... 0x....      BL       __aeabi_fmul
   \   0000003C   0x4601             MOV      R1,R0
   \   0000003E   0xF04F 0x507E      MOV      R0,#+1065353216
   \   00000042   0x.... 0x....      BL       __aeabi_fsub
   \   00000046   0x6028             STR      R0,[R5, #+0]
   \                     ??fade_scaling_factor_for_z_3: (+1)
   \   00000048   0x6828             LDR      R0,[R5, #+0]
   \   0000004A   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??fade_scaling_factor_for_z_1: (+1)
   \   0000004C   0xF04F 0x507E      MOV      R0,#+1065353216
   \   00000050   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   00000052   0xBF00             Nop      
   \                     ??fade_scaling_factor_for_z_0:
   \   00000054   0x........         DC32     _ZN7Planner13z_fade_heightE
   \   00000058   0x........         DC32     _ZZN7Planner25fade_scaling_factor_for_zERKfE13z_fade_factor
   \   0000005C   0x........         DC32     _ZN7Planner11last_fade_zE
   \   00000060   0x........         DC32     _ZN7Planner21inverse_z_fade_heightE

   \                                 In section .data, align 4
   \   __absolute float Planner::fade_scaling_factor_for_z(float const &)::z_fade_factor
   \                     _ZZN7Planner25fade_scaling_factor_for_zERKfE13z_fade_factor:
   \   00000000   0x3F800000         DC32 3F800000H

   \                                 In section .text, align 4
   \   __interwork __softfp bool Planner::leveling_active_at_z(float const &)
   \                     _ZN7Planner20leveling_active_at_zERKf: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x4602             MOV      R2,R0
   \   00000004   0x4807             LDR.N    R0,??leveling_active_at_z_0
   \   00000006   0x6803             LDR      R3,[R0, #+0]
   \   00000008   0x4618             MOV      R0,R3
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000010   0xD004             BEQ.N    ??leveling_active_at_z_1
   \   00000012   0x6810             LDR      R0,[R2, #+0]
   \   00000014   0x4619             MOV      R1,R3
   \   00000016   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000001A   0xD201             BCS.N    ??leveling_active_at_z_2
   \                     ??leveling_active_at_z_1: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xBD02             POP      {R1,PC}
   \                     ??leveling_active_at_z_2: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
   \                     ??leveling_active_at_z_0:
   \   00000024   0x........         DC32     _ZN7Planner13z_fade_heightE

      static constexpr int8_t next_block_index(const int8_t block_index) { return BLOCK_MOD(block_index + 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\planner.h",627  Warning[Pe815]: 
          type qualifier on return type is meaningless

      static constexpr int8_t prev_block_index(const int8_t block_index) { return BLOCK_MOD(block_index - 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\planner.h",628  Warning[Pe815]: 
          type qualifier on return type is meaningless

   \                                 In section .text, align 2
   \   __interwork __softfp void debug_current_and_destination(char const *)
   \                     _Z29debug_current_and_destinationPKc: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp int8_t unified_bed_leveling::get_cell_index_x(float const &)
   \                     _ZN20unified_bed_leveling16get_cell_index_xERKf: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4E55             LDR.N    R6,??get_cell_index_x_0
   \   00000008   0xF896 0x0098      LDRB     R0,[R6, #+152]
   \   0000000C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000010   0x4607             MOV      R7,R0
   \   00000012   0xF106 0x0008      ADD      R0,R6,#+8
   \   00000016   0xF8B0 0x1050      LDRH     R1,[R0, #+80]
   \   0000001A   0xF240 0x3202      MOVW     R2,#+770
   \   0000001E   0x4211             TST      R1,R2
   \   00000020   0xD030             BEQ.N    ??get_cell_index_x_1

          	cx = (x - (MESH_MIN_X_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
          	   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",182  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \   00000022   0xF8DF 0x813C      LDR.W    R8,??get_cell_index_x_0+0x4
   \   00000026   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   0000002A   0x4639             MOV      R1,R7
   \   0000002C   0x.... 0x....      BL       __aeabi_fadd
   \   00000030   0x4681             MOV      R9,R0
   \   00000032   0x6820             LDR      R0,[R4, #+0]
   \   00000034   0x4649             MOV      R1,R9
   \   00000036   0x.... 0x....      BL       __aeabi_fsub
   \   0000003A   0x.... 0x....      BL       __aeabi_f2d
   \   0000003E   0x4604             MOV      R4,R0
   \   00000040   0x460D             MOV      R5,R1
   \   00000042   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000046   0x4639             MOV      R1,R7
   \   00000048   0x.... 0x....      BL       __aeabi_fsub
   \   0000004C   0x4649             MOV      R1,R9
   \   0000004E   0x.... 0x....      BL       __aeabi_fsub
   \   00000052   0x4607             MOV      R7,R0
   \   00000054   0xF896 0x0060      LDRB     R0,[R6, #+96]
   \   00000058   0x1E40             SUBS     R0,R0,#+1
   \   0000005A   0x.... 0x....      BL       __aeabi_i2f
   \   0000005E   0x4601             MOV      R1,R0
   \   00000060   0x4638             MOV      R0,R7
   \   00000062   0x.... 0x....      BL       __aeabi_fdiv
   \   00000066   0x.... 0x....      BL       __aeabi_f2d
   \   0000006A   0x4602             MOV      R2,R0
   \   0000006C   0x460B             MOV      R3,R1
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x493C             LDR.N    R1,??get_cell_index_x_0+0x8  ;; 0x3ff00000
   \   00000072   0x.... 0x....      BL       __aeabi_ddiv
   \   00000076   0x4622             MOV      R2,R4
   \   00000078   0x462B             MOV      R3,R5
   \   0000007A   0x.... 0x....      BL       __aeabi_dmul
   \   0000007E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000082   0xE05C             B.N      ??get_cell_index_x_2

  					cx = (x - (MESH_MIN_X_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",184  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \                     ??get_cell_index_x_1: (+1)
   \   00000084   0xF8D0 0x900C      LDR      R9,[R0, #+12]
   \   00000088   0xF04F 0x507C      MOV      R0,#+1056964608
   \   0000008C   0x4649             MOV      R1,R9
   \   0000008E   0x.... 0x....      BL       __aeabi_fmul
   \   00000092   0x4683             MOV      R11,R0
   \   00000094   0x4659             MOV      R1,R11
   \   00000096   0x.... 0x....      BL       __aeabi_fsub
   \   0000009A   0x4639             MOV      R1,R7
   \   0000009C   0x.... 0x....      BL       __aeabi_fadd
   \   000000A0   0x4680             MOV      R8,R0
   \   000000A2   0xF106 0x0060      ADD      R0,R6,#+96
   \   000000A6   0xF8D0 0xA00C      LDR      R10,[R0, #+12]
   \   000000AA   0x68B0             LDR      R0,[R6, #+8]
   \   000000AC   0x4651             MOV      R1,R10
   \   000000AE   0x.... 0x....      BL       __aeabi_fadd
   \   000000B2   0x4605             MOV      R5,R0
   \   000000B4   0x4641             MOV      R1,R8
   \   000000B6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000BA   0xD202             BCS.N    ??get_cell_index_x_3
   \   000000BC   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   000000C0   0xE000             B.N      ??get_cell_index_x_4
   \                     ??get_cell_index_x_3: (+1)
   \   000000C2   0x9500             STR      R5,[SP, #+0]
   \                     ??get_cell_index_x_4: (+1)
   \   000000C4   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000C8   0x4659             MOV      R1,R11
   \   000000CA   0x.... 0x....      BL       __aeabi_fmul
   \   000000CE   0x4639             MOV      R1,R7
   \   000000D0   0x.... 0x....      BL       __aeabi_fsub
   \   000000D4   0x4607             MOV      R7,R0
   \   000000D6   0x4648             MOV      R0,R9
   \   000000D8   0x4651             MOV      R1,R10
   \   000000DA   0x.... 0x....      BL       __aeabi_fadd
   \   000000DE   0x4601             MOV      R1,R0
   \   000000E0   0x4638             MOV      R0,R7
   \   000000E2   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000E6   0xD300             BCC.N    ??get_cell_index_x_5
   \   000000E8   0x460F             MOV      R7,R1
   \                     ??get_cell_index_x_5: (+1)
   \   000000EA   0x4628             MOV      R0,R5
   \   000000EC   0x4641             MOV      R1,R8
   \   000000EE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000F2   0xD300             BCC.N    ??get_cell_index_x_6
   \   000000F4   0x46A8             MOV      R8,R5
   \                     ??get_cell_index_x_6: (+1)
   \   000000F6   0x6820             LDR      R0,[R4, #+0]
   \   000000F8   0x9900             LDR      R1,[SP, #+0]
   \   000000FA   0x.... 0x....      BL       __aeabi_fsub
   \   000000FE   0x.... 0x....      BL       __aeabi_f2d
   \   00000102   0x4604             MOV      R4,R0
   \   00000104   0x460D             MOV      R5,R1
   \   00000106   0x4638             MOV      R0,R7
   \   00000108   0x4641             MOV      R1,R8
   \   0000010A   0x.... 0x....      BL       __aeabi_fsub
   \   0000010E   0x4607             MOV      R7,R0
   \   00000110   0xF896 0x0060      LDRB     R0,[R6, #+96]
   \   00000114   0x1E40             SUBS     R0,R0,#+1
   \   00000116   0x.... 0x....      BL       __aeabi_i2f
   \   0000011A   0x4601             MOV      R1,R0
   \   0000011C   0x4638             MOV      R0,R7
   \   0000011E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000122   0x.... 0x....      BL       __aeabi_f2d
   \   00000126   0x4602             MOV      R2,R0
   \   00000128   0x460B             MOV      R3,R1
   \   0000012A   0x2000             MOVS     R0,#+0
   \   0000012C   0x490D             LDR.N    R1,??get_cell_index_x_0+0x8  ;; 0x3ff00000
   \   0000012E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000132   0x4622             MOV      R2,R4
   \   00000134   0x462B             MOV      R3,R5
   \   00000136   0x.... 0x....      BL       __aeabi_dmul
   \   0000013A   0x.... 0x....      BL       __aeabi_d2iz
   \                     ??get_cell_index_x_2: (+1)
   \   0000013E   0xB240             SXTB     R0,R0
   \   00000140   0x0001             MOVS     R1,R0
   \   00000142   0xD501             BPL.N    ??get_cell_index_x_7
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0xE005             B.N      ??get_cell_index_x_8
   \                     ??get_cell_index_x_7: (+1)
   \   00000148   0xF896 0x2060      LDRB     R2,[R6, #+96]
   \   0000014C   0x1E53             SUBS     R3,R2,#+1
   \   0000014E   0x428B             CMP      R3,R1
   \   00000150   0xDA00             BGE.N    ??get_cell_index_x_8
   \   00000152   0x1E50             SUBS     R0,R2,#+1
   \                     ??get_cell_index_x_8: (+1)
   \   00000154   0xB240             SXTB     R0,R0
   \   00000156   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \   0000015A   0xBF00             Nop      
   \                     ??get_cell_index_x_0:
   \   0000015C   0x........         DC32     mksCfg
   \   00000160   0x........         DC32     mksTmp
   \   00000164   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4
   \   __interwork __softfp int8_t unified_bed_leveling::get_cell_index_y(float const &)
   \                     _ZN20unified_bed_leveling16get_cell_index_yERKf: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4E54             LDR.N    R6,??get_cell_index_y_0
   \   00000008   0xF896 0x0098      LDRB     R0,[R6, #+152]
   \   0000000C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000010   0x4607             MOV      R7,R0
   \   00000012   0xF106 0x000C      ADD      R0,R6,#+12
   \   00000016   0xF8B0 0x104C      LDRH     R1,[R0, #+76]
   \   0000001A   0xF240 0x3202      MOVW     R2,#+770
   \   0000001E   0x4211             TST      R1,R2
   \   00000020   0xD030             BEQ.N    ??get_cell_index_y_1

  					cy = (y - (MESH_MIN_Y_IS_KINEMATIC)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",195  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \   00000022   0xF8DF 0x8138      LDR.W    R8,??get_cell_index_y_0+0x4
   \   00000026   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   0000002A   0x4639             MOV      R1,R7
   \   0000002C   0x.... 0x....      BL       __aeabi_fadd
   \   00000030   0x4681             MOV      R9,R0
   \   00000032   0x6820             LDR      R0,[R4, #+0]
   \   00000034   0x4649             MOV      R1,R9
   \   00000036   0x.... 0x....      BL       __aeabi_fsub
   \   0000003A   0x.... 0x....      BL       __aeabi_f2d
   \   0000003E   0x4604             MOV      R4,R0
   \   00000040   0x460D             MOV      R5,R1
   \   00000042   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   00000046   0x4639             MOV      R1,R7
   \   00000048   0x.... 0x....      BL       __aeabi_fsub
   \   0000004C   0x4649             MOV      R1,R9
   \   0000004E   0x.... 0x....      BL       __aeabi_fsub
   \   00000052   0x4607             MOV      R7,R0
   \   00000054   0xF896 0x0061      LDRB     R0,[R6, #+97]
   \   00000058   0x1E40             SUBS     R0,R0,#+1
   \   0000005A   0x.... 0x....      BL       __aeabi_i2f
   \   0000005E   0x4601             MOV      R1,R0
   \   00000060   0x4638             MOV      R0,R7
   \   00000062   0x.... 0x....      BL       __aeabi_fdiv
   \   00000066   0x.... 0x....      BL       __aeabi_f2d
   \   0000006A   0x4602             MOV      R2,R0
   \   0000006C   0x460B             MOV      R3,R1
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x493B             LDR.N    R1,??get_cell_index_y_0+0x8  ;; 0x3ff00000
   \   00000072   0x.... 0x....      BL       __aeabi_ddiv
   \   00000076   0x4622             MOV      R2,R4
   \   00000078   0x462B             MOV      R3,R5
   \   0000007A   0x.... 0x....      BL       __aeabi_dmul
   \   0000007E   0x.... 0x....      BL       __aeabi_d2iz
   \   00000082   0xE05A             B.N      ??get_cell_index_y_2

  					cy = (y - (MESH_MIN_Y_IS_Cartesian)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",197  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \                     ??get_cell_index_y_1: (+1)
   \   00000084   0xF8D0 0x900C      LDR      R9,[R0, #+12]
   \   00000088   0xF04F 0x507C      MOV      R0,#+1056964608
   \   0000008C   0x4649             MOV      R1,R9
   \   0000008E   0x.... 0x....      BL       __aeabi_fmul
   \   00000092   0x4683             MOV      R11,R0
   \   00000094   0x4659             MOV      R1,R11
   \   00000096   0x.... 0x....      BL       __aeabi_fsub
   \   0000009A   0x4639             MOV      R1,R7
   \   0000009C   0x.... 0x....      BL       __aeabi_fadd
   \   000000A0   0x4680             MOV      R8,R0
   \   000000A2   0xF8D6 0xA070      LDR      R10,[R6, #+112]
   \   000000A6   0x68F0             LDR      R0,[R6, #+12]
   \   000000A8   0x4651             MOV      R1,R10
   \   000000AA   0x.... 0x....      BL       __aeabi_fadd
   \   000000AE   0x4605             MOV      R5,R0
   \   000000B0   0x4641             MOV      R1,R8
   \   000000B2   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000B6   0xD202             BCS.N    ??get_cell_index_y_3
   \   000000B8   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   000000BC   0xE000             B.N      ??get_cell_index_y_4
   \                     ??get_cell_index_y_3: (+1)
   \   000000BE   0x9500             STR      R5,[SP, #+0]
   \                     ??get_cell_index_y_4: (+1)
   \   000000C0   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000C4   0x4659             MOV      R1,R11
   \   000000C6   0x.... 0x....      BL       __aeabi_fmul
   \   000000CA   0x4639             MOV      R1,R7
   \   000000CC   0x.... 0x....      BL       __aeabi_fsub
   \   000000D0   0x4607             MOV      R7,R0
   \   000000D2   0x4648             MOV      R0,R9
   \   000000D4   0x4651             MOV      R1,R10
   \   000000D6   0x.... 0x....      BL       __aeabi_fadd
   \   000000DA   0x4601             MOV      R1,R0
   \   000000DC   0x4638             MOV      R0,R7
   \   000000DE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000E2   0xD300             BCC.N    ??get_cell_index_y_5
   \   000000E4   0x460F             MOV      R7,R1
   \                     ??get_cell_index_y_5: (+1)
   \   000000E6   0x4628             MOV      R0,R5
   \   000000E8   0x4641             MOV      R1,R8
   \   000000EA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000EE   0xD300             BCC.N    ??get_cell_index_y_6
   \   000000F0   0x46A8             MOV      R8,R5
   \                     ??get_cell_index_y_6: (+1)
   \   000000F2   0x6820             LDR      R0,[R4, #+0]
   \   000000F4   0x9900             LDR      R1,[SP, #+0]
   \   000000F6   0x.... 0x....      BL       __aeabi_fsub
   \   000000FA   0x.... 0x....      BL       __aeabi_f2d
   \   000000FE   0x4604             MOV      R4,R0
   \   00000100   0x460D             MOV      R5,R1
   \   00000102   0x4638             MOV      R0,R7
   \   00000104   0x4641             MOV      R1,R8
   \   00000106   0x.... 0x....      BL       __aeabi_fsub
   \   0000010A   0x4607             MOV      R7,R0
   \   0000010C   0xF896 0x0061      LDRB     R0,[R6, #+97]
   \   00000110   0x1E40             SUBS     R0,R0,#+1
   \   00000112   0x.... 0x....      BL       __aeabi_i2f
   \   00000116   0x4601             MOV      R1,R0
   \   00000118   0x4638             MOV      R0,R7
   \   0000011A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000011E   0x.... 0x....      BL       __aeabi_f2d
   \   00000122   0x4602             MOV      R2,R0
   \   00000124   0x460B             MOV      R3,R1
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x490D             LDR.N    R1,??get_cell_index_y_0+0x8  ;; 0x3ff00000
   \   0000012A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000012E   0x4622             MOV      R2,R4
   \   00000130   0x462B             MOV      R3,R5
   \   00000132   0x.... 0x....      BL       __aeabi_dmul
   \   00000136   0x.... 0x....      BL       __aeabi_d2iz
   \                     ??get_cell_index_y_2: (+1)
   \   0000013A   0xB240             SXTB     R0,R0
   \   0000013C   0x0001             MOVS     R1,R0
   \   0000013E   0xD501             BPL.N    ??get_cell_index_y_7
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0xE005             B.N      ??get_cell_index_y_8
   \                     ??get_cell_index_y_7: (+1)
   \   00000144   0xF896 0x2061      LDRB     R2,[R6, #+97]
   \   00000148   0x1E53             SUBS     R3,R2,#+1
   \   0000014A   0x428B             CMP      R3,R1
   \   0000014C   0xDA00             BGE.N    ??get_cell_index_y_8
   \   0000014E   0x1E50             SUBS     R0,R2,#+1
   \                     ??get_cell_index_y_8: (+1)
   \   00000150   0xB240             SXTB     R0,R0
   \   00000152   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \   00000156   0xBF00             Nop      
   \                     ??get_cell_index_y_0:
   \   00000158   0x........         DC32     mksCfg
   \   0000015C   0x........         DC32     mksTmp
   \   00000160   0x3FF00000         DC32     0x3ff00000

  					px= (x - (MESH_MIN_X_IS_KINEMATIC) + (MESH_X_DIST_IS_KINEMATIC) * 0.5) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
  					  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",208  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					px= (x - (MESH_MIN_X_IS_Cartesian) + (MESH_X_DIST_IS_Cartesian) * 0.5) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  					  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",210  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					py = (y - (MESH_MIN_Y_IS_KINEMATIC) + (MESH_Y_DIST_IS_KINEMATIC) * 0.5) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",219  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					py = (y - (MESH_MIN_Y_IS_Cartesian) + (MESH_Y_DIST_IS_Cartesian) * 0.5) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",221  Warning[Pa093]: 
          implicit conversion from floating point to integer

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::z_correction_for_x_on_horizontal_mesh_line(float const &, int, int)
   \                     _ZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfii: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4681             MOV      R9,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD40F             BMI.N    ??z_correction_for_x_on_horizontal_mesh_line_0
   \   00000010   0x4F66             LDR.N    R7,??z_correction_for_x_on_horizontal_mesh_line_1
   \   00000012   0xF897 0x0060      LDRB     R0,[R7, #+96]
   \   00000016   0x1E40             SUBS     R0,R0,#+1
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x42A8             CMP      R0,R5
   \   0000001C   0xDB08             BLT.N    ??z_correction_for_x_on_horizontal_mesh_line_0
   \   0000001E   0x2E00             CMP      R6,#+0
   \   00000020   0xD406             BMI.N    ??z_correction_for_x_on_horizontal_mesh_line_0
   \   00000022   0xF107 0x0060      ADD      R0,R7,#+96
   \   00000026   0x9002             STR      R0,[SP, #+8]
   \   00000028   0x7840             LDRB     R0,[R0, #+1]
   \   0000002A   0x1E40             SUBS     R0,R0,#+1
   \   0000002C   0x42B0             CMP      R0,R6
   \   0000002E   0xDA02             BGE.N    ??z_correction_for_x_on_horizontal_mesh_line_2
   \                     ??z_correction_for_x_on_horizontal_mesh_line_0: (+1)
   \   00000030   0xF06F 0x4000      MVN      R0,#-2147483648
   \   00000034   0xE0B7             B.N      ??z_correction_for_x_on_horizontal_mesh_line_3
   \                     ??z_correction_for_x_on_horizontal_mesh_line_2: (+1)
   \   00000036   0xF107 0x0408      ADD      R4,R7,#+8
   \   0000003A   0xF8B4 0x0050      LDRH     R0,[R4, #+80]
   \   0000003E   0xF240 0x3102      MOVW     R1,#+770
   \   00000042   0x4208             TST      R0,R1
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0xB2C0             UXTB     R0,R0
   \   00000048   0xD036             BEQ.N    ??z_correction_for_x_on_horizontal_mesh_line_4
   \   0000004A   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000004E   0x4682             MOV      R10,R0
   \   00000050   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   00000054   0x.... 0x....      BL       __aeabi_ui2f
   \   00000058   0x4680             MOV      R8,R0
   \   0000005A   0x4C55             LDR.N    R4,??z_correction_for_x_on_horizontal_mesh_line_1+0x4
   \   0000005C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000060   0x4651             MOV      R1,R10
   \   00000062   0x.... 0x....      BL       __aeabi_fsub
   \   00000066   0x.... 0x....      BL       __aeabi_f2d
   \   0000006A   0x4682             MOV      R10,R0
   \   0000006C   0x468B             MOV      R11,R1
   \   0000006E   0x6860             LDR      R0,[R4, #+4]
   \   00000070   0x4641             MOV      R1,R8
   \   00000072   0x.... 0x....      BL       __aeabi_fsub
   \   00000076   0x4681             MOV      R9,R0
   \   00000078   0x6820             LDR      R0,[R4, #+0]
   \   0000007A   0x4641             MOV      R1,R8
   \   0000007C   0x.... 0x....      BL       __aeabi_fadd
   \   00000080   0x4601             MOV      R1,R0
   \   00000082   0x4648             MOV      R0,R9
   \   00000084   0x.... 0x....      BL       __aeabi_fsub
   \   00000088   0x4604             MOV      R4,R0
   \   0000008A   0x9800             LDR      R0,[SP, #+0]
   \   0000008C   0x.... 0x....      BL       __aeabi_i2f
   \   00000090   0x4601             MOV      R1,R0
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       __aeabi_fdiv
   \   00000098   0x.... 0x....      BL       __aeabi_f2d
   \   0000009C   0x4602             MOV      R2,R0
   \   0000009E   0x460B             MOV      R3,R1
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x4944             LDR.N    R1,??z_correction_for_x_on_horizontal_mesh_line_1+0x8  ;; 0x3ff00000
   \   000000A4   0x.... 0x....      BL       __aeabi_ddiv
   \   000000A8   0x4652             MOV      R2,R10
   \   000000AA   0x465B             MOV      R3,R11
   \   000000AC   0x.... 0x....      BL       __aeabi_dmul
   \   000000B0   0x.... 0x....      BL       __aeabi_d2f
   \   000000B4   0x4604             MOV      R4,R0
   \   000000B6   0xE059             B.N      ??z_correction_for_x_on_horizontal_mesh_line_5
   \                     ??z_correction_for_x_on_horizontal_mesh_line_4: (+1)
   \   000000B8   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000000BC   0x9003             STR      R0,[SP, #+12]
   \   000000BE   0xF8D4 0xB00C      LDR      R11,[R4, #+12]
   \   000000C2   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000000C6   0x4659             MOV      R1,R11
   \   000000C8   0x.... 0x....      BL       __aeabi_fmul
   \   000000CC   0x4682             MOV      R10,R0
   \   000000CE   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   000000D2   0x.... 0x....      BL       __aeabi_ui2f
   \   000000D6   0x4680             MOV      R8,R0
   \   000000D8   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000DC   0x4651             MOV      R1,R10
   \   000000DE   0x.... 0x....      BL       __aeabi_fmul
   \   000000E2   0x4641             MOV      R1,R8
   \   000000E4   0x.... 0x....      BL       __aeabi_fsub
   \   000000E8   0x4604             MOV      R4,R0
   \   000000EA   0x9802             LDR      R0,[SP, #+8]
   \   000000EC   0x68C0             LDR      R0,[R0, #+12]
   \   000000EE   0x9001             STR      R0,[SP, #+4]
   \   000000F0   0x4659             MOV      R1,R11
   \   000000F2   0x.... 0x....      BL       __aeabi_fadd
   \   000000F6   0x4601             MOV      R1,R0
   \   000000F8   0x4620             MOV      R0,R4
   \   000000FA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000FE   0xD300             BCC.N    ??z_correction_for_x_on_horizontal_mesh_line_6
   \   00000100   0x460C             MOV      R4,R1
   \                     ??z_correction_for_x_on_horizontal_mesh_line_6: (+1)
   \   00000102   0x4650             MOV      R0,R10
   \   00000104   0x4651             MOV      R1,R10
   \   00000106   0x.... 0x....      BL       __aeabi_fsub
   \   0000010A   0x4641             MOV      R1,R8
   \   0000010C   0x.... 0x....      BL       __aeabi_fadd
   \   00000110   0x4680             MOV      R8,R0
   \   00000112   0x68B9             LDR      R1,[R7, #+8]
   \   00000114   0x9801             LDR      R0,[SP, #+4]
   \   00000116   0x.... 0x....      BL       __aeabi_fadd
   \   0000011A   0x4641             MOV      R1,R8
   \   0000011C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000120   0xD300             BCC.N    ??z_correction_for_x_on_horizontal_mesh_line_7
   \   00000122   0x4680             MOV      R8,R0
   \                     ??z_correction_for_x_on_horizontal_mesh_line_7: (+1)
   \   00000124   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000128   0x9903             LDR      R1,[SP, #+12]
   \   0000012A   0x.... 0x....      BL       __aeabi_fsub
   \   0000012E   0x.... 0x....      BL       __aeabi_f2d
   \   00000132   0x4682             MOV      R10,R0
   \   00000134   0x468B             MOV      R11,R1
   \   00000136   0x4620             MOV      R0,R4
   \   00000138   0x4641             MOV      R1,R8
   \   0000013A   0x.... 0x....      BL       __aeabi_fsub
   \   0000013E   0x4604             MOV      R4,R0
   \   00000140   0x9800             LDR      R0,[SP, #+0]
   \   00000142   0x.... 0x....      BL       __aeabi_i2f
   \   00000146   0x4601             MOV      R1,R0
   \   00000148   0x4620             MOV      R0,R4
   \   0000014A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000014E   0x.... 0x....      BL       __aeabi_f2d
   \   00000152   0x4602             MOV      R2,R0
   \   00000154   0x460B             MOV      R3,R1
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0x4916             LDR.N    R1,??z_correction_for_x_on_horizontal_mesh_line_1+0x8  ;; 0x3ff00000
   \   0000015A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000015E   0x4652             MOV      R2,R10
   \   00000160   0x465B             MOV      R3,R11
   \   00000162   0x.... 0x....      BL       __aeabi_dmul
   \   00000166   0x.... 0x....      BL       __aeabi_d2f
   \   0000016A   0x4604             MOV      R4,R0
   \                     ??z_correction_for_x_on_horizontal_mesh_line_5: (+1)
   \   0000016C   0x2030             MOVS     R0,#+48
   \   0000016E   0x4912             LDR.N    R1,??z_correction_for_x_on_horizontal_mesh_line_1+0xC
   \   00000170   0xFB00 0x1205      MLA      R2,R0,R5,R1
   \   00000174   0xF852 0x8026      LDR      R8,[R2, R6, LSL #+2]
   \   00000178   0xF897 0x2060      LDRB     R2,[R7, #+96]
   \   0000017C   0x1E92             SUBS     R2,R2,#+2
   \   0000017E   0x4295             CMP      R5,R2
   \   00000180   0xDD00             BLE.N    ??z_correction_for_x_on_horizontal_mesh_line_8
   \   00000182   0x4615             MOV      R5,R2
   \                     ??z_correction_for_x_on_horizontal_mesh_line_8: (+1)
   \   00000184   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   00000188   0xEB00 0x0086      ADD      R0,R0,R6, LSL #+2
   \   0000018C   0x6B00             LDR      R0,[R0, #+48]
   \   0000018E   0x4641             MOV      R1,R8
   \   00000190   0x.... 0x....      BL       __aeabi_fsub
   \   00000194   0x4621             MOV      R1,R4
   \   00000196   0x.... 0x....      BL       __aeabi_fmul
   \   0000019A   0x4641             MOV      R1,R8
   \   0000019C   0xB005             ADD      SP,SP,#+20
   \   0000019E   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   000001A2   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??z_correction_for_x_on_horizontal_mesh_line_3: (+1)
   \   000001A6   0xB005             ADD      SP,SP,#+20
   \   000001A8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??z_correction_for_x_on_horizontal_mesh_line_1:
   \   000001AC   0x........         DC32     mksCfg
   \   000001B0   0x........         DC32     mksTmp
   \   000001B4   0x3FF00000         DC32     0x3ff00000
   \   000001B8   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::z_correction_for_y_on_vertical_mesh_line(float const &, int, int)
   \                     _ZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfii: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4617             MOV      R7,R2
   \   0000000C   0x2E00             CMP      R6,#+0
   \   0000000E   0xD410             BMI.N    ??z_correction_for_y_on_vertical_mesh_line_0
   \   00000010   0x4D6C             LDR.N    R5,??z_correction_for_y_on_vertical_mesh_line_1
   \   00000012   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   00000016   0x1E40             SUBS     R0,R0,#+1
   \   00000018   0x42B0             CMP      R0,R6
   \   0000001A   0xDB0A             BLT.N    ??z_correction_for_y_on_vertical_mesh_line_0
   \   0000001C   0x2F00             CMP      R7,#+0
   \   0000001E   0xD408             BMI.N    ??z_correction_for_y_on_vertical_mesh_line_0
   \   00000020   0xF105 0x0060      ADD      R0,R5,#+96
   \   00000024   0x9003             STR      R0,[SP, #+12]
   \   00000026   0x7840             LDRB     R0,[R0, #+1]
   \   00000028   0x9002             STR      R0,[SP, #+8]
   \   0000002A   0x1E40             SUBS     R0,R0,#+1
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x42B8             CMP      R0,R7
   \   00000030   0xDA02             BGE.N    ??z_correction_for_y_on_vertical_mesh_line_2
   \                     ??z_correction_for_y_on_vertical_mesh_line_0: (+1)
   \   00000032   0xF06F 0x4000      MVN      R0,#-2147483648
   \   00000036   0xE0C1             B.N      ??z_correction_for_y_on_vertical_mesh_line_3
   \                     ??z_correction_for_y_on_vertical_mesh_line_2: (+1)
   \   00000038   0xF105 0x080C      ADD      R8,R5,#+12
   \   0000003C   0xF9B8 0x004C      LDRSH    R0,[R8, #+76]
   \   00000040   0xF240 0x3102      MOVW     R1,#+770
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0x4638             MOV      R0,R7
   \   00000048   0xB2C0             UXTB     R0,R0
   \   0000004A   0xD13F             BNE.N    ??z_correction_for_y_on_vertical_mesh_line_4
   \   0000004C   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000050   0x4682             MOV      R10,R0
   \   00000052   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   00000056   0x.... 0x....      BL       __aeabi_ui2f
   \   0000005A   0x4681             MOV      R9,R0
   \   0000005C   0xF8DF 0x8168      LDR.W    R8,??z_correction_for_y_on_vertical_mesh_line_1+0x4
   \   00000060   0x6820             LDR      R0,[R4, #+0]
   \   00000062   0x4651             MOV      R1,R10
   \   00000064   0x.... 0x....      BL       __aeabi_fsub
   \   00000068   0x.... 0x....      BL       __aeabi_f2d
   \   0000006C   0x4604             MOV      R4,R0
   \   0000006E   0x460D             MOV      R5,R1
   \   00000070   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   00000074   0x4649             MOV      R1,R9
   \   00000076   0x.... 0x....      BL       __aeabi_fsub
   \   0000007A   0x4682             MOV      R10,R0
   \   0000007C   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   00000080   0x4649             MOV      R1,R9
   \   00000082   0x.... 0x....      BL       __aeabi_fadd
   \   00000086   0x4601             MOV      R1,R0
   \   00000088   0x4650             MOV      R0,R10
   \   0000008A   0x.... 0x....      BL       __aeabi_fsub
   \   0000008E   0x4680             MOV      R8,R0
   \   00000090   0x9800             LDR      R0,[SP, #+0]
   \   00000092   0x.... 0x....      BL       __aeabi_i2f
   \   00000096   0x4601             MOV      R1,R0
   \   00000098   0x4640             MOV      R0,R8
   \   0000009A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000009E   0x.... 0x....      BL       __aeabi_f2d
   \   000000A2   0x4602             MOV      R2,R0
   \   000000A4   0x460B             MOV      R3,R1
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0x4948             LDR.N    R1,??z_correction_for_y_on_vertical_mesh_line_1+0x8  ;; 0x3ff00000
   \   000000AA   0x.... 0x....      BL       __aeabi_ddiv
   \   000000AE   0x4622             MOV      R2,R4
   \   000000B0   0x462B             MOV      R3,R5
   \   000000B2   0x.... 0x....      BL       __aeabi_dmul
   \   000000B6   0x.... 0x....      BL       __aeabi_d2f
   \   000000BA   0x4604             MOV      R4,R0
   \   000000BC   0xEB06 0x0046      ADD      R0,R6,R6, LSL #+1
   \   000000C0   0x4943             LDR.N    R1,??z_correction_for_y_on_vertical_mesh_line_1+0xC
   \   000000C2   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   000000C6   0xF850 0x5027      LDR      R5,[R0, R7, LSL #+2]
   \   000000CA   0xE05F             B.N      ??z_correction_for_y_on_vertical_mesh_line_5
   \                     ??z_correction_for_y_on_vertical_mesh_line_4: (+1)
   \   000000CC   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000000D0   0x9004             STR      R0,[SP, #+16]
   \   000000D2   0xF8D8 0xB00C      LDR      R11,[R8, #+12]
   \   000000D6   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000000DA   0x4659             MOV      R1,R11
   \   000000DC   0x.... 0x....      BL       __aeabi_fmul
   \   000000E0   0x4682             MOV      R10,R0
   \   000000E2   0xF895 0x0098      LDRB     R0,[R5, #+152]
   \   000000E6   0x.... 0x....      BL       __aeabi_ui2f
   \   000000EA   0x4681             MOV      R9,R0
   \   000000EC   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000F0   0x4651             MOV      R1,R10
   \   000000F2   0x.... 0x....      BL       __aeabi_fmul
   \   000000F6   0x4649             MOV      R1,R9
   \   000000F8   0x.... 0x....      BL       __aeabi_fsub
   \   000000FC   0x4680             MOV      R8,R0
   \   000000FE   0x9803             LDR      R0,[SP, #+12]
   \   00000100   0x6900             LDR      R0,[R0, #+16]
   \   00000102   0x9001             STR      R0,[SP, #+4]
   \   00000104   0x4659             MOV      R1,R11
   \   00000106   0x.... 0x....      BL       __aeabi_fadd
   \   0000010A   0x4601             MOV      R1,R0
   \   0000010C   0x4640             MOV      R0,R8
   \   0000010E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000112   0xD300             BCC.N    ??z_correction_for_y_on_vertical_mesh_line_6
   \   00000114   0x4688             MOV      R8,R1
   \                     ??z_correction_for_y_on_vertical_mesh_line_6: (+1)
   \   00000116   0x4650             MOV      R0,R10
   \   00000118   0x4651             MOV      R1,R10
   \   0000011A   0x.... 0x....      BL       __aeabi_fsub
   \   0000011E   0x4649             MOV      R1,R9
   \   00000120   0x.... 0x....      BL       __aeabi_fadd
   \   00000124   0x4681             MOV      R9,R0
   \   00000126   0x68E9             LDR      R1,[R5, #+12]
   \   00000128   0x9801             LDR      R0,[SP, #+4]
   \   0000012A   0x.... 0x....      BL       __aeabi_fadd
   \   0000012E   0x4649             MOV      R1,R9
   \   00000130   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000134   0xD300             BCC.N    ??z_correction_for_y_on_vertical_mesh_line_7
   \   00000136   0x4681             MOV      R9,R0
   \                     ??z_correction_for_y_on_vertical_mesh_line_7: (+1)
   \   00000138   0x6820             LDR      R0,[R4, #+0]
   \   0000013A   0x9904             LDR      R1,[SP, #+16]
   \   0000013C   0x.... 0x....      BL       __aeabi_fsub
   \   00000140   0x.... 0x....      BL       __aeabi_f2d
   \   00000144   0x4604             MOV      R4,R0
   \   00000146   0x460D             MOV      R5,R1
   \   00000148   0x4640             MOV      R0,R8
   \   0000014A   0x4649             MOV      R1,R9
   \   0000014C   0x.... 0x....      BL       __aeabi_fsub
   \   00000150   0x4680             MOV      R8,R0
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x.... 0x....      BL       __aeabi_i2f
   \   00000158   0x4601             MOV      R1,R0
   \   0000015A   0x4640             MOV      R0,R8
   \   0000015C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000160   0x.... 0x....      BL       __aeabi_f2d
   \   00000164   0x4602             MOV      R2,R0
   \   00000166   0x460B             MOV      R3,R1
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0x4918             LDR.N    R1,??z_correction_for_y_on_vertical_mesh_line_1+0x8  ;; 0x3ff00000
   \   0000016C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000170   0x4622             MOV      R2,R4
   \   00000172   0x462B             MOV      R3,R5
   \   00000174   0x.... 0x....      BL       __aeabi_dmul
   \   00000178   0x.... 0x....      BL       __aeabi_d2f
   \   0000017C   0x4604             MOV      R4,R0
   \   0000017E   0xEB06 0x0046      ADD      R0,R6,R6, LSL #+1
   \   00000182   0x4913             LDR.N    R1,??z_correction_for_y_on_vertical_mesh_line_1+0xC
   \   00000184   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   00000188   0xF850 0x5027      LDR      R5,[R0, R7, LSL #+2]
   \                     ??z_correction_for_y_on_vertical_mesh_line_5: (+1)
   \   0000018C   0x9802             LDR      R0,[SP, #+8]
   \   0000018E   0x1E80             SUBS     R0,R0,#+2
   \   00000190   0x4287             CMP      R7,R0
   \   00000192   0xDD00             BLE.N    ??z_correction_for_y_on_vertical_mesh_line_8
   \   00000194   0x4607             MOV      R7,R0
   \                     ??z_correction_for_y_on_vertical_mesh_line_8: (+1)
   \   00000196   0xEB06 0x0046      ADD      R0,R6,R6, LSL #+1
   \   0000019A   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   0000019E   0xEB00 0x0087      ADD      R0,R0,R7, LSL #+2
   \   000001A2   0x6840             LDR      R0,[R0, #+4]
   \   000001A4   0x4629             MOV      R1,R5
   \   000001A6   0x.... 0x....      BL       __aeabi_fsub
   \   000001AA   0x4621             MOV      R1,R4
   \   000001AC   0x.... 0x....      BL       __aeabi_fmul
   \   000001B0   0x4629             MOV      R1,R5
   \   000001B2   0xB005             ADD      SP,SP,#+20
   \   000001B4   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   000001B8   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??z_correction_for_y_on_vertical_mesh_line_3: (+1)
   \   000001BC   0xB005             ADD      SP,SP,#+20
   \   000001BE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   000001C2   0xBF00             Nop      
   \                     ??z_correction_for_y_on_vertical_mesh_line_1:
   \   000001C4   0x........         DC32     mksCfg
   \   000001C8   0x........         DC32     mksTmp
   \   000001CC   0x3FF00000         DC32     0x3ff00000
   \   000001D0   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::mesh_index_to_xpos(uint8_t)
   \                     _ZN20unified_bed_leveling18mesh_index_to_xposEh: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4F4A             LDR.N    R7,??mesh_index_to_xpos_0
   \   00000008   0xF897 0x6060      LDRB     R6,[R7, #+96]
   \   0000000C   0xF107 0x0008      ADD      R0,R7,#+8
   \   00000010   0xF8B0 0x1050      LDRH     R1,[R0, #+80]
   \   00000014   0xF240 0x3202      MOVW     R2,#+770
   \   00000018   0x4211             TST      R1,R2
   \   0000001A   0xD02B             BEQ.N    ??mesh_index_to_xpos_1
   \   0000001C   0x42B5             CMP      R5,R6
   \   0000001E   0xD203             BCS.N    ??mesh_index_to_xpos_2
   \   00000020   0x4844             LDR.N    R0,??mesh_index_to_xpos_0+0x4
   \   00000022   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000026   0xE081             B.N      ??mesh_index_to_xpos_3
   \                     ??mesh_index_to_xpos_2: (+1)
   \   00000028   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   0000002C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000030   0x4682             MOV      R10,R0
   \   00000032   0x4C41             LDR.N    R4,??mesh_index_to_xpos_0+0x8
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x4651             MOV      R1,R10
   \   00000038   0x.... 0x....      BL       __aeabi_fadd
   \   0000003C   0x4607             MOV      R7,R0
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       __aeabi_ui2f
   \   00000044   0x4605             MOV      R5,R0
   \   00000046   0x6860             LDR      R0,[R4, #+4]
   \   00000048   0x4651             MOV      R1,R10
   \   0000004A   0x.... 0x....      BL       __aeabi_fsub
   \   0000004E   0x4639             MOV      R1,R7
   \   00000050   0x.... 0x....      BL       __aeabi_fsub
   \   00000054   0x4604             MOV      R4,R0
   \   00000056   0x1E70             SUBS     R0,R6,#+1
   \   00000058   0x.... 0x....      BL       __aeabi_i2f
   \   0000005C   0x4601             MOV      R1,R0
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       __aeabi_fdiv
   \   00000064   0x4629             MOV      R1,R5
   \   00000066   0x.... 0x....      BL       __aeabi_fmul
   \   0000006A   0x4639             MOV      R1,R7
   \   0000006C   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000070   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_xpos_1: (+1)
   \   00000074   0x42B5             CMP      R5,R6
   \   00000076   0xD203             BCS.N    ??mesh_index_to_xpos_4
   \   00000078   0x482E             LDR.N    R0,??mesh_index_to_xpos_0+0x4
   \   0000007A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000007E   0xE055             B.N      ??mesh_index_to_xpos_3
   \                     ??mesh_index_to_xpos_4: (+1)
   \   00000080   0xF8D0 0x800C      LDR      R8,[R0, #+12]
   \   00000084   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000088   0x4641             MOV      R1,R8
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x4681             MOV      R9,R0
   \   00000090   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   00000094   0x.... 0x....      BL       __aeabi_ui2f
   \   00000098   0x4682             MOV      R10,R0
   \   0000009A   0x4648             MOV      R0,R9
   \   0000009C   0x4649             MOV      R1,R9
   \   0000009E   0x.... 0x....      BL       __aeabi_fsub
   \   000000A2   0x4651             MOV      R1,R10
   \   000000A4   0x.... 0x....      BL       __aeabi_fadd
   \   000000A8   0x4604             MOV      R4,R0
   \   000000AA   0xF107 0x0060      ADD      R0,R7,#+96
   \   000000AE   0xF8D0 0xB00C      LDR      R11,[R0, #+12]
   \   000000B2   0x68B8             LDR      R0,[R7, #+8]
   \   000000B4   0x4659             MOV      R1,R11
   \   000000B6   0x.... 0x....      BL       __aeabi_fadd
   \   000000BA   0x4607             MOV      R7,R0
   \   000000BC   0x4621             MOV      R1,R4
   \   000000BE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000C2   0xD201             BCS.N    ??mesh_index_to_xpos_5
   \   000000C4   0x9400             STR      R4,[SP, #+0]
   \   000000C6   0xE000             B.N      ??mesh_index_to_xpos_6
   \                     ??mesh_index_to_xpos_5: (+1)
   \   000000C8   0x9700             STR      R7,[SP, #+0]
   \                     ??mesh_index_to_xpos_6: (+1)
   \   000000CA   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000CE   0x4649             MOV      R1,R9
   \   000000D0   0x.... 0x....      BL       __aeabi_fmul
   \   000000D4   0x4651             MOV      R1,R10
   \   000000D6   0x.... 0x....      BL       __aeabi_fsub
   \   000000DA   0x4681             MOV      R9,R0
   \   000000DC   0x4640             MOV      R0,R8
   \   000000DE   0x4659             MOV      R1,R11
   \   000000E0   0x.... 0x....      BL       __aeabi_fadd
   \   000000E4   0x4601             MOV      R1,R0
   \   000000E6   0x4648             MOV      R0,R9
   \   000000E8   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000EC   0xD300             BCC.N    ??mesh_index_to_xpos_7
   \   000000EE   0x4689             MOV      R9,R1
   \                     ??mesh_index_to_xpos_7: (+1)
   \   000000F0   0x4638             MOV      R0,R7
   \   000000F2   0x4621             MOV      R1,R4
   \   000000F4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000F8   0xD300             BCC.N    ??mesh_index_to_xpos_8
   \   000000FA   0x463C             MOV      R4,R7
   \                     ??mesh_index_to_xpos_8: (+1)
   \   000000FC   0x4628             MOV      R0,R5
   \   000000FE   0x.... 0x....      BL       __aeabi_ui2f
   \   00000102   0x4605             MOV      R5,R0
   \   00000104   0x4648             MOV      R0,R9
   \   00000106   0x4621             MOV      R1,R4
   \   00000108   0x.... 0x....      BL       __aeabi_fsub
   \   0000010C   0x4604             MOV      R4,R0
   \   0000010E   0x1E70             SUBS     R0,R6,#+1
   \   00000110   0x.... 0x....      BL       __aeabi_i2f
   \   00000114   0x4601             MOV      R1,R0
   \   00000116   0x4620             MOV      R0,R4
   \   00000118   0x.... 0x....      BL       __aeabi_fdiv
   \   0000011C   0x4629             MOV      R1,R5
   \   0000011E   0x.... 0x....      BL       __aeabi_fmul
   \   00000122   0x9900             LDR      R1,[SP, #+0]
   \   00000124   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000128   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_xpos_3: (+1)
   \   0000012C   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \                     ??mesh_index_to_xpos_0:
   \   00000130   0x........         DC32     mksCfg
   \   00000134   0x........         DC32     _ZN20unified_bed_leveling19_mesh_index_to_xposE
   \   00000138   0x........         DC32     mksTmp

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::mesh_index_to_ypos(uint8_t)
   \                     _ZN20unified_bed_leveling18mesh_index_to_yposEh: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4F49             LDR.N    R7,??mesh_index_to_ypos_0
   \   00000008   0xF897 0x6061      LDRB     R6,[R7, #+97]
   \   0000000C   0xF107 0x000C      ADD      R0,R7,#+12
   \   00000010   0xF8B0 0x104C      LDRH     R1,[R0, #+76]
   \   00000014   0xF240 0x3202      MOVW     R2,#+770
   \   00000018   0x4211             TST      R1,R2
   \   0000001A   0xD02B             BEQ.N    ??mesh_index_to_ypos_1
   \   0000001C   0x42B5             CMP      R5,R6
   \   0000001E   0xD203             BCS.N    ??mesh_index_to_ypos_2
   \   00000020   0x4843             LDR.N    R0,??mesh_index_to_ypos_0+0x4
   \   00000022   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000026   0xE07F             B.N      ??mesh_index_to_ypos_3
   \                     ??mesh_index_to_ypos_2: (+1)
   \   00000028   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   0000002C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000030   0x4682             MOV      R10,R0
   \   00000032   0x4C40             LDR.N    R4,??mesh_index_to_ypos_0+0x8
   \   00000034   0x68A0             LDR      R0,[R4, #+8]
   \   00000036   0x4651             MOV      R1,R10
   \   00000038   0x.... 0x....      BL       __aeabi_fadd
   \   0000003C   0x4607             MOV      R7,R0
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       __aeabi_ui2f
   \   00000044   0x4605             MOV      R5,R0
   \   00000046   0x68E0             LDR      R0,[R4, #+12]
   \   00000048   0x4651             MOV      R1,R10
   \   0000004A   0x.... 0x....      BL       __aeabi_fsub
   \   0000004E   0x4639             MOV      R1,R7
   \   00000050   0x.... 0x....      BL       __aeabi_fsub
   \   00000054   0x4604             MOV      R4,R0
   \   00000056   0x1E70             SUBS     R0,R6,#+1
   \   00000058   0x.... 0x....      BL       __aeabi_i2f
   \   0000005C   0x4601             MOV      R1,R0
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       __aeabi_fdiv
   \   00000064   0x4629             MOV      R1,R5
   \   00000066   0x.... 0x....      BL       __aeabi_fmul
   \   0000006A   0x4639             MOV      R1,R7
   \   0000006C   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000070   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_ypos_1: (+1)
   \   00000074   0x42B5             CMP      R5,R6
   \   00000076   0xD203             BCS.N    ??mesh_index_to_ypos_4
   \   00000078   0x482D             LDR.N    R0,??mesh_index_to_ypos_0+0x4
   \   0000007A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000007E   0xE053             B.N      ??mesh_index_to_ypos_3
   \                     ??mesh_index_to_ypos_4: (+1)
   \   00000080   0xF8D0 0x800C      LDR      R8,[R0, #+12]
   \   00000084   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000088   0x4641             MOV      R1,R8
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x4681             MOV      R9,R0
   \   00000090   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   00000094   0x.... 0x....      BL       __aeabi_ui2f
   \   00000098   0x4682             MOV      R10,R0
   \   0000009A   0x4648             MOV      R0,R9
   \   0000009C   0x4649             MOV      R1,R9
   \   0000009E   0x.... 0x....      BL       __aeabi_fsub
   \   000000A2   0x4651             MOV      R1,R10
   \   000000A4   0x.... 0x....      BL       __aeabi_fadd
   \   000000A8   0x4604             MOV      R4,R0
   \   000000AA   0xF8D7 0xB070      LDR      R11,[R7, #+112]
   \   000000AE   0x68F8             LDR      R0,[R7, #+12]
   \   000000B0   0x4659             MOV      R1,R11
   \   000000B2   0x.... 0x....      BL       __aeabi_fadd
   \   000000B6   0x4607             MOV      R7,R0
   \   000000B8   0x4621             MOV      R1,R4
   \   000000BA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000BE   0xD201             BCS.N    ??mesh_index_to_ypos_5
   \   000000C0   0x9400             STR      R4,[SP, #+0]
   \   000000C2   0xE000             B.N      ??mesh_index_to_ypos_6
   \                     ??mesh_index_to_ypos_5: (+1)
   \   000000C4   0x9700             STR      R7,[SP, #+0]
   \                     ??mesh_index_to_ypos_6: (+1)
   \   000000C6   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000CA   0x4649             MOV      R1,R9
   \   000000CC   0x.... 0x....      BL       __aeabi_fmul
   \   000000D0   0x4651             MOV      R1,R10
   \   000000D2   0x.... 0x....      BL       __aeabi_fsub
   \   000000D6   0x4681             MOV      R9,R0
   \   000000D8   0x4640             MOV      R0,R8
   \   000000DA   0x4659             MOV      R1,R11
   \   000000DC   0x.... 0x....      BL       __aeabi_fadd
   \   000000E0   0x4601             MOV      R1,R0
   \   000000E2   0x4648             MOV      R0,R9
   \   000000E4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000E8   0xD300             BCC.N    ??mesh_index_to_ypos_7
   \   000000EA   0x4689             MOV      R9,R1
   \                     ??mesh_index_to_ypos_7: (+1)
   \   000000EC   0x4638             MOV      R0,R7
   \   000000EE   0x4621             MOV      R1,R4
   \   000000F0   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000F4   0xD300             BCC.N    ??mesh_index_to_ypos_8
   \   000000F6   0x463C             MOV      R4,R7
   \                     ??mesh_index_to_ypos_8: (+1)
   \   000000F8   0x4628             MOV      R0,R5
   \   000000FA   0x.... 0x....      BL       __aeabi_ui2f
   \   000000FE   0x4605             MOV      R5,R0
   \   00000100   0x4648             MOV      R0,R9
   \   00000102   0x4621             MOV      R1,R4
   \   00000104   0x.... 0x....      BL       __aeabi_fsub
   \   00000108   0x4604             MOV      R4,R0
   \   0000010A   0x1E70             SUBS     R0,R6,#+1
   \   0000010C   0x.... 0x....      BL       __aeabi_i2f
   \   00000110   0x4601             MOV      R1,R0
   \   00000112   0x4620             MOV      R0,R4
   \   00000114   0x.... 0x....      BL       __aeabi_fdiv
   \   00000118   0x4629             MOV      R1,R5
   \   0000011A   0x.... 0x....      BL       __aeabi_fmul
   \   0000011E   0x9900             LDR      R1,[SP, #+0]
   \   00000120   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000124   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_ypos_3: (+1)
   \   00000128   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \                     ??mesh_index_to_ypos_0:
   \   0000012C   0x........         DC32     mksCfg
   \   00000130   0x........         DC32     _ZN20unified_bed_leveling19_mesh_index_to_yposE
   \   00000134   0x........         DC32     mksTmp
     28            #include "planner.h"
     29            #include "stepper.h"

   \                                 In section .text, align 2
   \   __interwork __softfp float Stepper::get_axis_position_degrees(AxisEnum)
   \                     _ZN7Stepper25get_axis_position_degreesE8AxisEnum: (+1)
   \   00000000   0x.... 0x....      B.W      _ZN7Stepper20get_axis_position_mmE8AxisEnum
     30            //#include <avr/io.h>
     31            #include <math.h>
     32          
     33            #if AVR_AT90USB1286_FAMILY  // Teensyduino & Printrboard IDE extensions have compile errors without this
     34              inline void set_current_from_destination() { COPY(current_position, destination); }
     35            #else
     36              extern void set_current_from_destination();
     37            #endif
     38          
     39            #if 1//!UBL_SEGMENTED
     40          

   \                                 In section .text, align 2, keep-with-next
     41              void unified_bed_leveling::line_to_destination_cartesian(const float &feed_rate, const uint8_t extruder) {
   \                     _ZN20unified_bed_leveling29line_to_destination_cartesianERKfh: (+1)
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB095             SUB      SP,SP,#+84
     42                /**
     43                 * Much of the nozzle movement will be within the same cell. So we will do as little computation
     44                 * as possible to determine if this is the case. If this move is within the same cell, we will
     45                 * just do the required Z-Height correction, call the Planner's buffer_line() routine, and leave
     46                 */
     47                #if ENABLED(SKEW_CORRECTION)
     48                  // For skew correction just adjust the destination point and we're done
     49                  float start[XYZE] = { current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS] },
     50                        end[XYZE] = { destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination[E_AXIS] };
     51                  planner.skew(start[X_AXIS], start[Y_AXIS], start[Z_AXIS]);
     52                  planner.skew(end[X_AXIS], end[Y_AXIS], end[Z_AXIS]);
     53                #else
     54                  const float (&start)[XYZE] = current_position,
     55                                (&end)[XYZE] = destination;
     56                #endif
     57          
     58                const int cell_start_xi = get_cell_index_x(start[X_AXIS]),
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable10
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_xERKf
   \   00000010   0x4607             MOV      R7,R0
     59                          cell_start_yi = get_cell_index_y(start[Y_AXIS]),
   \   00000012   0x1D28             ADDS     R0,R5,#+4
   \   00000014   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_yERKf
   \   00000018   0x4606             MOV      R6,R0
     60                          cell_dest_xi  = get_cell_index_x(end[X_AXIS]),
   \   0000001A   0x.... 0x....      LDR.W    R4,??DataTable10_1
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_xERKf
   \   00000024   0x9004             STR      R0,[SP, #+16]
     61                          cell_dest_yi  = get_cell_index_y(end[Y_AXIS]);
   \   00000026   0x1D20             ADDS     R0,R4,#+4
   \   00000028   0x.... 0x....      BL       _ZN20unified_bed_leveling16get_cell_index_yERKf
   \   0000002C   0x9003             STR      R0,[SP, #+12]
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD021             BEQ.N    ??line_to_destination_cartesian_0
     62          
     63                if (g26_debug_flag) {
     64                  SERIAL_ECHOPAIR(" ubl.line_to_destination_cartesian(xe=", destination[X_AXIS]);
   \   00000038   0x6821             LDR      R1,[R4, #+0]
   \   0000003A   0x.... 0x....      ADR.W    R0,`?<Constant " ubl.line_to_destinat...">`
   \   0000003E   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
     65                  SERIAL_ECHOPAIR(", ye=", destination[Y_AXIS]);
   \   00000042   0x6861             LDR      R1,[R4, #+4]
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant ", ye=">`
   \   00000048   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
     66                  SERIAL_ECHOPAIR(", ze=", destination[Z_AXIS]);
   \   0000004C   0x68A1             LDR      R1,[R4, #+8]
   \   0000004E   0x.... 0x....      ADR.W    R0,`?<Constant ", ze=">`
   \   00000052   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
     67                  SERIAL_ECHOPAIR(", ee=", destination[E_AXIS]);
   \   00000056   0x68E1             LDR      R1,[R4, #+12]
   \   00000058   0x.... 0x....      ADR.W    R0,`?<Constant ", ee=">`
   \   0000005C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
     68                  SERIAL_CHAR(')');
   \   00000060   0x.... 0x....      LDR.W    R8,??DataTable10_3
   \   00000064   0x2129             MOVS     R1,#+41
   \   00000066   0x4640             MOV      R0,R8
   \   00000068   0x.... 0x....      BL       _ZN10USARTClass5writeEh
     69                  SERIAL_EOL();
   \   0000006C   0x210A             MOVS     R1,#+10
   \   0000006E   0x4640             MOV      R0,R8
   \   00000070   0x.... 0x....      BL       _ZN10USARTClass5writeEh
     70                  debug_current_and_destination(PSTR("Start of ubl.line_to_destination_cartesian()"));
   \   00000074   0x.... 0x....      ADR.W    R0,`?<Constant "Start of ubl.line_to_...">`
   \   00000078   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \                     ??line_to_destination_cartesian_0: (+1)
   \   0000007C   0x9804             LDR      R0,[SP, #+16]
   \   0000007E   0x4287             CMP      R7,R0
   \   00000080   0xF040 0x81FB      BNE.W    ??line_to_destination_cartesian_1
   \   00000084   0x9803             LDR      R0,[SP, #+12]
   \   00000086   0x4286             CMP      R6,R0
   \   00000088   0xF040 0x81F7      BNE.W    ??line_to_destination_cartesian_1
     71                }
     72          
     73                if (cell_start_xi == cell_dest_xi && cell_start_yi == cell_dest_yi) { // if the whole move is within the same cell,
     74                  /**
     75                   * we don't need to break up the move
     76                   *
     77                   * If we are moving off the print bed, we are going to allow the move at this level.
     78                   * But we detect it and isolate it. For now, we just pass along the request.
     79                   */
     80          
     81                  if (!WITHIN(cell_dest_xi, 0, GRID_MAX_POINTS_X - 1) || !WITHIN(cell_dest_yi, 0, GRID_MAX_POINTS_Y - 1)) {
   \   0000008C   0x9804             LDR      R0,[SP, #+16]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD411             BMI.N    ??line_to_destination_cartesian_2
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000096   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   0000009A   0x1E40             SUBS     R0,R0,#+1
   \   0000009C   0x9904             LDR      R1,[SP, #+16]
   \   0000009E   0x4288             CMP      R0,R1
   \   000000A0   0xDB09             BLT.N    ??line_to_destination_cartesian_2
   \   000000A2   0x9803             LDR      R0,[SP, #+12]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD406             BMI.N    ??line_to_destination_cartesian_2
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   000000AC   0x7840             LDRB     R0,[R0, #+1]
   \   000000AE   0x1E40             SUBS     R0,R0,#+1
   \   000000B0   0x9903             LDR      R1,[SP, #+12]
   \   000000B2   0x4288             CMP      R0,R1
   \   000000B4   0xDA1A             BGE.N    ??line_to_destination_cartesian_3
     82          
     83                    // Note: There is no Z Correction in this case. We are off the grid and don't know what
     84                    // a reasonable correction would be.
     85          
     86                    planner.buffer_segment(end[X_AXIS], end[Y_AXIS], end[Z_AXIS], end[E_AXIS], feed_rate, extruder);
   \                     ??line_to_destination_cartesian_2: (+1)
   \   000000B6   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   000000BA   0x9001             STR      R0,[SP, #+4]
   \   000000BC   0x9815             LDR      R0,[SP, #+84]
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0xF104 0x030C      ADD      R3,R4,#+12
   \   000000C4   0xF104 0x0208      ADD      R2,R4,#+8
   \   000000C8   0x1D21             ADDS     R1,R4,#+4
   \   000000CA   0x4620             MOV      R0,R4
   \   000000CC   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
     87                    set_current_from_destination();
   \   000000D0   0x.... 0x....      BL       _Z28set_current_from_destinationv
     88          
     89                    if (g26_debug_flag)
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   000000D8   0x7800             LDRB     R0,[R0, #+0]
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xF000 0x8435      BEQ.W    ??line_to_destination_cartesian_4
     90                      debug_current_and_destination(PSTR("out of bounds in ubl.line_to_destination_cartesian()"));
   \   000000E0   0x.... 0x....      ADR.W    R0,`?<Constant "out of bounds in ubl....">`
   \   000000E4   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
     91          
     92                    return;
   \   000000E8   0xF000 0xBC2F      B.W      ??line_to_destination_cartesian_4
     93                  }
     94          
     95                  FINAL_MOVE:
     96          
     97                  /**
     98                   * Optimize some floating point operations here. We could call float get_z_correction(float x0, float y0) to
     99                   * generate the correction for us. But we can lighten the load on the CPU by doing a modified version of the function.
    100                   * We are going to only calculate the amount we are from the first mesh line towards the second mesh line once.
    101                   * We will use this fraction in both of the original two Z Height calculations for the bi-linear interpolation. And,
    102                   * instead of doing a generic divide of the distance, we know the distance is MESH_X_DIST so we can use the preprocessor
    103                   * to create a 1-over number for us. That will allow us to do a floating point multiply instead of a floating point divide.
    104                   */
    105          
    106                  //const 
    107                  float xratio;
    108                  if(MACHINETPYE & IS_KINEMATIC)
   \                     ??line_to_destination_cartesian_3: (+1)
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable10_6
   \   000000F0   0x9001             STR      R0,[SP, #+4]
   \   000000F2   0xF9B0 0xA050      LDRSH    R10,[R0, #+80]
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable10_5
   \   000000FA   0x9000             STR      R0,[SP, #+0]
   \   000000FC   0xF240 0x3502      MOVW     R5,#+770
   \   00000100   0xEA1A 0x0F05      TST      R10,R5
   \   00000104   0x9804             LDR      R0,[SP, #+16]
   \   00000106   0xB2C0             UXTB     R0,R0
   \   00000108   0xD03F             BEQ.N    ??line_to_destination_cartesian_5
    109                      xratio = (end[X_AXIS] - mesh_index_to_xpos(cell_dest_xi)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
   \   0000010A   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000010E   0x4606             MOV      R6,R0
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000114   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000118   0x.... 0x....      BL       __aeabi_ui2f
   \   0000011C   0x4680             MOV      R8,R0
   \   0000011E   0x.... 0x....      LDR.W    R9,??DataTable10_7
   \   00000122   0x6820             LDR      R0,[R4, #+0]
   \   00000124   0x4631             MOV      R1,R6
   \   00000126   0x.... 0x....      BL       __aeabi_fsub
   \   0000012A   0x.... 0x....      BL       __aeabi_f2d
   \   0000012E   0x4606             MOV      R6,R0
   \   00000130   0x460F             MOV      R7,R1
   \   00000132   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \   00000136   0x4641             MOV      R1,R8
   \   00000138   0x.... 0x....      BL       __aeabi_fsub
   \   0000013C   0x4683             MOV      R11,R0
   \   0000013E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000142   0x4641             MOV      R1,R8
   \   00000144   0x.... 0x....      BL       __aeabi_fadd
   \   00000148   0x4601             MOV      R1,R0
   \   0000014A   0x4658             MOV      R0,R11
   \   0000014C   0x.... 0x....      BL       __aeabi_fsub
   \   00000150   0x4680             MOV      R8,R0
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000156   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   0000015A   0x1E40             SUBS     R0,R0,#+1
   \   0000015C   0x.... 0x....      BL       __aeabi_i2f
   \   00000160   0x4601             MOV      R1,R0
   \   00000162   0x4640             MOV      R0,R8
   \   00000164   0x.... 0x....      BL       __aeabi_fdiv
   \   00000168   0x.... 0x....      BL       __aeabi_f2d
   \   0000016C   0x4602             MOV      R2,R0
   \   0000016E   0x460B             MOV      R3,R1
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0x.... 0x....      LDR.W    R1,??DataTable10_8  ;; 0x3ff00000
   \   00000176   0x.... 0x....      BL       __aeabi_ddiv
   \   0000017A   0x4632             MOV      R2,R6
   \   0000017C   0x463B             MOV      R3,R7
   \   0000017E   0x.... 0x....      BL       __aeabi_dmul
   \   00000182   0x.... 0x....      BL       __aeabi_d2f
   \   00000186   0x4606             MOV      R6,R0
   \   00000188   0xE063             B.N      ??line_to_destination_cartesian_6
    110                  else
    111                      xratio = (end[X_AXIS] - mesh_index_to_xpos(cell_dest_xi)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
   \                     ??line_to_destination_cartesian_5: (+1)
   \   0000018A   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000018E   0x4681             MOV      R9,R0
   \   00000190   0x9801             LDR      R0,[SP, #+4]
   \   00000192   0x68C6             LDR      R6,[R0, #+12]
   \   00000194   0xF04F 0x517C      MOV      R1,#+1056964608
   \   00000198   0x4630             MOV      R0,R6
   \   0000019A   0x.... 0x....      BL       __aeabi_fmul
   \   0000019E   0x4607             MOV      R7,R0
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   000001A4   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   000001A8   0x.... 0x....      BL       __aeabi_ui2f
   \   000001AC   0x4680             MOV      R8,R0
   \   000001AE   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000001B2   0x4639             MOV      R1,R7
   \   000001B4   0x.... 0x....      BL       __aeabi_fmul
   \   000001B8   0x4641             MOV      R1,R8
   \   000001BA   0x.... 0x....      BL       __aeabi_fsub
   \   000001BE   0x4683             MOV      R11,R0
   \   000001C0   0x9800             LDR      R0,[SP, #+0]
   \   000001C2   0x68C0             LDR      R0,[R0, #+12]
   \   000001C4   0x9002             STR      R0,[SP, #+8]
   \   000001C6   0x4631             MOV      R1,R6
   \   000001C8   0x.... 0x....      BL       __aeabi_fadd
   \   000001CC   0x4601             MOV      R1,R0
   \   000001CE   0x4658             MOV      R0,R11
   \   000001D0   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001D4   0xD201             BCS.N    ??line_to_destination_cartesian_7
   \   000001D6   0x465E             MOV      R6,R11
   \   000001D8   0xE000             B.N      ??line_to_destination_cartesian_8
   \                     ??line_to_destination_cartesian_7: (+1)
   \   000001DA   0x460E             MOV      R6,R1
   \                     ??line_to_destination_cartesian_8: (+1)
   \   000001DC   0x4638             MOV      R0,R7
   \   000001DE   0x4639             MOV      R1,R7
   \   000001E0   0x.... 0x....      BL       __aeabi_fsub
   \   000001E4   0x4641             MOV      R1,R8
   \   000001E6   0x.... 0x....      BL       __aeabi_fadd
   \   000001EA   0x4607             MOV      R7,R0
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   000001F0   0x6881             LDR      R1,[R0, #+8]
   \   000001F2   0x9802             LDR      R0,[SP, #+8]
   \   000001F4   0x.... 0x....      BL       __aeabi_fadd
   \   000001F8   0x4639             MOV      R1,R7
   \   000001FA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001FE   0xD300             BCC.N    ??line_to_destination_cartesian_9
   \   00000200   0x4607             MOV      R7,R0
   \                     ??line_to_destination_cartesian_9: (+1)
   \   00000202   0x6820             LDR      R0,[R4, #+0]
   \   00000204   0x4649             MOV      R1,R9
   \   00000206   0x.... 0x....      BL       __aeabi_fsub
   \   0000020A   0x.... 0x....      BL       __aeabi_f2d
   \   0000020E   0x4680             MOV      R8,R0
   \   00000210   0x4689             MOV      R9,R1
   \   00000212   0x4630             MOV      R0,R6
   \   00000214   0x4639             MOV      R1,R7
   \   00000216   0x.... 0x....      BL       __aeabi_fsub
   \   0000021A   0x4606             MOV      R6,R0
   \   0000021C   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000220   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000224   0x1E40             SUBS     R0,R0,#+1
   \   00000226   0x.... 0x....      BL       __aeabi_i2f
   \   0000022A   0x4601             MOV      R1,R0
   \   0000022C   0x4630             MOV      R0,R6
   \   0000022E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000232   0x.... 0x....      BL       __aeabi_f2d
   \   00000236   0x4602             MOV      R2,R0
   \   00000238   0x460B             MOV      R3,R1
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x.... 0x....      LDR.W    R1,??DataTable10_8  ;; 0x3ff00000
   \   00000240   0x.... 0x....      BL       __aeabi_ddiv
   \   00000244   0x4642             MOV      R2,R8
   \   00000246   0x464B             MOV      R3,R9
   \   00000248   0x.... 0x....      BL       __aeabi_dmul
   \   0000024C   0x.... 0x....      BL       __aeabi_d2f
   \   00000250   0x4606             MOV      R6,R0
    112          
    113                  float z1 = z_values[cell_dest_xi    ][cell_dest_yi    ] + xratio *
    114                            (z_values[cell_dest_xi + 1][cell_dest_yi    ] - z_values[cell_dest_xi][cell_dest_yi    ]),
   \                     ??line_to_destination_cartesian_6: (+1)
   \   00000252   0x9804             LDR      R0,[SP, #+16]
   \   00000254   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   00000258   0x.... 0x....      LDR.W    R0,??DataTable10_9
   \   0000025C   0xEB00 0x1901      ADD      R9,R0,R1, LSL #+4
   \   00000260   0x9803             LDR      R0,[SP, #+12]
   \   00000262   0xF859 0x7020      LDR      R7,[R9, R0, LSL #+2]
   \   00000266   0xEB09 0x0880      ADD      R8,R9,R0, LSL #+2
   \   0000026A   0xF8D8 0x0030      LDR      R0,[R8, #+48]
   \   0000026E   0x4639             MOV      R1,R7
   \   00000270   0x.... 0x....      BL       __aeabi_fsub
   \   00000274   0x4631             MOV      R1,R6
   \   00000276   0x.... 0x....      BL       __aeabi_fmul
   \   0000027A   0x4639             MOV      R1,R7
   \   0000027C   0x.... 0x....      BL       __aeabi_fadd
   \   00000280   0x4607             MOV      R7,R0
   \   00000282   0x9803             LDR      R0,[SP, #+12]
   \   00000284   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \   00000288   0xF8D0 0x9004      LDR      R9,[R0, #+4]
   \   0000028C   0xF8D8 0x0034      LDR      R0,[R8, #+52]
   \   00000290   0x4649             MOV      R1,R9
   \   00000292   0x.... 0x....      BL       __aeabi_fsub
   \   00000296   0x4631             MOV      R1,R6
   \   00000298   0x.... 0x....      BL       __aeabi_fmul
   \   0000029C   0x4649             MOV      R1,R9
   \   0000029E   0x.... 0x....      BL       __aeabi_fadd
   \   000002A2   0x4606             MOV      R6,R0
    115                        z2 = z_values[cell_dest_xi    ][cell_dest_yi + 1] + xratio *
    116                            (z_values[cell_dest_xi + 1][cell_dest_yi + 1] - z_values[cell_dest_xi][cell_dest_yi + 1]);
    117          
    118                  if (cell_dest_xi >= GRID_MAX_POINTS_X - 1) z1 = z2 = 0.0;
   \   000002A4   0x9804             LDR      R0,[SP, #+16]
   \   000002A6   0x.... 0x....      LDR.W    R1,??DataTable10_4
   \   000002AA   0xF891 0x1060      LDRB     R1,[R1, #+96]
   \   000002AE   0x1E49             SUBS     R1,R1,#+1
   \   000002B0   0x4288             CMP      R0,R1
   \   000002B2   0xDB01             BLT.N    ??line_to_destination_cartesian_10
   \   000002B4   0x2600             MOVS     R6,#+0
   \   000002B6   0x4637             MOV      R7,R6
    119          
    120                  // we are done with the fractional X distance into the cell. Now with the two Z-Heights we have calculated, we
    121                  // are going to apply the Y-Distance into the cell to interpolate the final Z correction.
    122          
    123                  //const 
    124                  float yratio;
    125                  if(MACHINETPYE & IS_KINEMATIC)
   \                     ??line_to_destination_cartesian_10: (+1)
   \   000002B8   0xEA1A 0x0F05      TST      R10,R5
   \   000002BC   0x9803             LDR      R0,[SP, #+12]
   \   000002BE   0xB2C0             UXTB     R0,R0
   \   000002C0   0xD03D             BEQ.N    ??line_to_destination_cartesian_11
    126                      yratio = (end[Y_AXIS] - mesh_index_to_ypos(cell_dest_yi)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
   \   000002C2   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000002C6   0x4605             MOV      R5,R0
   \   000002C8   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   000002CC   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   000002D0   0x.... 0x....      BL       __aeabi_ui2f
   \   000002D4   0x4680             MOV      R8,R0
   \   000002D6   0x.... 0x....      LDR.W    R9,??DataTable10_7
   \   000002DA   0x6860             LDR      R0,[R4, #+4]
   \   000002DC   0x4629             MOV      R1,R5
   \   000002DE   0x.... 0x....      BL       __aeabi_fsub
   \   000002E2   0x.... 0x....      BL       __aeabi_f2d
   \   000002E6   0x4682             MOV      R10,R0
   \   000002E8   0x468B             MOV      R11,R1
   \   000002EA   0xF8D9 0x000C      LDR      R0,[R9, #+12]
   \   000002EE   0x4641             MOV      R1,R8
   \   000002F0   0x.... 0x....      BL       __aeabi_fsub
   \   000002F4   0x4605             MOV      R5,R0
   \   000002F6   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \   000002FA   0x4641             MOV      R1,R8
   \   000002FC   0x.... 0x....      BL       __aeabi_fadd
   \   00000300   0x4601             MOV      R1,R0
   \   00000302   0x4628             MOV      R0,R5
   \   00000304   0x.... 0x....      BL       __aeabi_fsub
   \   00000308   0x4605             MOV      R5,R0
   \   0000030A   0x9800             LDR      R0,[SP, #+0]
   \   0000030C   0x7840             LDRB     R0,[R0, #+1]
   \   0000030E   0x1E40             SUBS     R0,R0,#+1
   \   00000310   0x.... 0x....      BL       __aeabi_i2f
   \   00000314   0x4601             MOV      R1,R0
   \   00000316   0x4628             MOV      R0,R5
   \   00000318   0x.... 0x....      BL       __aeabi_fdiv
   \   0000031C   0x.... 0x....      BL       __aeabi_f2d
   \   00000320   0x4602             MOV      R2,R0
   \   00000322   0x460B             MOV      R3,R1
   \   00000324   0x2000             MOVS     R0,#+0
   \   00000326   0x.... 0x....      LDR.W    R1,??DataTable10_8  ;; 0x3ff00000
   \   0000032A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000032E   0x4652             MOV      R2,R10
   \   00000330   0x465B             MOV      R3,R11
   \   00000332   0x.... 0x....      BL       __aeabi_dmul
   \   00000336   0x.... 0x....      BL       __aeabi_d2f
   \   0000033A   0x4605             MOV      R5,R0
   \   0000033C   0xE060             B.N      ??line_to_destination_cartesian_12
    127                  else
    128                      yratio = (end[Y_AXIS] - mesh_index_to_ypos(cell_dest_yi)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
   \                     ??line_to_destination_cartesian_11: (+1)
   \   0000033E   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000342   0x4681             MOV      R9,R0
   \   00000344   0x9801             LDR      R0,[SP, #+4]
   \   00000346   0x6905             LDR      R5,[R0, #+16]
   \   00000348   0xF04F 0x517C      MOV      R1,#+1056964608
   \   0000034C   0x4628             MOV      R0,R5
   \   0000034E   0x.... 0x....      BL       __aeabi_fmul
   \   00000352   0x4682             MOV      R10,R0
   \   00000354   0x.... 0x....      LDR.W    R0,??DataTable10_4
   \   00000358   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   0000035C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000360   0x4680             MOV      R8,R0
   \   00000362   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000366   0x4651             MOV      R1,R10
   \   00000368   0x.... 0x....      BL       __aeabi_fmul
   \   0000036C   0x4641             MOV      R1,R8
   \   0000036E   0x.... 0x....      BL       __aeabi_fsub
   \   00000372   0x4683             MOV      R11,R0
   \   00000374   0x9800             LDR      R0,[SP, #+0]
   \   00000376   0x6900             LDR      R0,[R0, #+16]
   \   00000378   0x9002             STR      R0,[SP, #+8]
   \   0000037A   0x4629             MOV      R1,R5
   \   0000037C   0x.... 0x....      BL       __aeabi_fadd
   \   00000380   0x4601             MOV      R1,R0
   \   00000382   0x4658             MOV      R0,R11
   \   00000384   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000388   0xD201             BCS.N    ??line_to_destination_cartesian_13
   \   0000038A   0x465D             MOV      R5,R11
   \   0000038C   0xE000             B.N      ??line_to_destination_cartesian_14
   \                     ??line_to_destination_cartesian_13: (+1)
   \   0000038E   0x460D             MOV      R5,R1
   \                     ??line_to_destination_cartesian_14: (+1)
   \   00000390   0x4650             MOV      R0,R10
   \   00000392   0x4651             MOV      R1,R10
   \   00000394   0x.... 0x....      BL       __aeabi_fsub
   \   00000398   0x4641             MOV      R1,R8
   \   0000039A   0x.... 0x....      BL       __aeabi_fadd
   \   0000039E   0x4680             MOV      R8,R0
   \   000003A0   0x9801             LDR      R0,[SP, #+4]
   \   000003A2   0x6841             LDR      R1,[R0, #+4]
   \   000003A4   0x9802             LDR      R0,[SP, #+8]
   \   000003A6   0x.... 0x....      BL       __aeabi_fadd
   \   000003AA   0x4641             MOV      R1,R8
   \   000003AC   0x.... 0x....      BL       __aeabi_cfcmple
   \   000003B0   0xD300             BCC.N    ??line_to_destination_cartesian_15
   \   000003B2   0x4680             MOV      R8,R0
   \                     ??line_to_destination_cartesian_15: (+1)
   \   000003B4   0x6860             LDR      R0,[R4, #+4]
   \   000003B6   0x4649             MOV      R1,R9
   \   000003B8   0x.... 0x....      BL       __aeabi_fsub
   \   000003BC   0x.... 0x....      BL       __aeabi_f2d
   \   000003C0   0x4682             MOV      R10,R0
   \   000003C2   0x468B             MOV      R11,R1
   \   000003C4   0x4628             MOV      R0,R5
   \   000003C6   0x4641             MOV      R1,R8
   \   000003C8   0x.... 0x....      BL       __aeabi_fsub
   \   000003CC   0x4605             MOV      R5,R0
   \   000003CE   0x9800             LDR      R0,[SP, #+0]
   \   000003D0   0x7840             LDRB     R0,[R0, #+1]
   \   000003D2   0x1E40             SUBS     R0,R0,#+1
   \   000003D4   0x.... 0x....      BL       __aeabi_i2f
   \   000003D8   0x4601             MOV      R1,R0
   \   000003DA   0x4628             MOV      R0,R5
   \   000003DC   0x.... 0x....      BL       __aeabi_fdiv
   \   000003E0   0x.... 0x....      BL       __aeabi_f2d
   \   000003E4   0x4602             MOV      R2,R0
   \   000003E6   0x460B             MOV      R3,R1
   \   000003E8   0x2000             MOVS     R0,#+0
   \   000003EA   0x.... 0x....      LDR.W    R1,??DataTable10_8  ;; 0x3ff00000
   \   000003EE   0x.... 0x....      BL       __aeabi_ddiv
   \   000003F2   0x4652             MOV      R2,R10
   \   000003F4   0x465B             MOV      R3,R11
   \   000003F6   0x.... 0x....      BL       __aeabi_dmul
   \   000003FA   0x.... 0x....      BL       __aeabi_d2f
   \   000003FE   0x4605             MOV      R5,R0
    129                  
    130                  float z0 = cell_dest_yi < GRID_MAX_POINTS_Y - 1 ? (z1 + (z2 - z1) * yratio) * planner.fade_scaling_factor_for_z(end[Z_AXIS]) : 0.0;
   \                     ??line_to_destination_cartesian_12: (+1)
   \   00000400   0x9803             LDR      R0,[SP, #+12]
   \   00000402   0x9900             LDR      R1,[SP, #+0]
   \   00000404   0x7849             LDRB     R1,[R1, #+1]
   \   00000406   0x1E49             SUBS     R1,R1,#+1
   \   00000408   0x4288             CMP      R0,R1
   \   0000040A   0xDA13             BGE.N    ??line_to_destination_cartesian_16
   \   0000040C   0x4630             MOV      R0,R6
   \   0000040E   0x4639             MOV      R1,R7
   \   00000410   0x.... 0x....      BL       __aeabi_fsub
   \   00000414   0x4629             MOV      R1,R5
   \   00000416   0x.... 0x....      BL       __aeabi_fmul
   \   0000041A   0x4639             MOV      R1,R7
   \   0000041C   0x.... 0x....      BL       __aeabi_fadd
   \   00000420   0x4605             MOV      R5,R0
   \   00000422   0xF104 0x0008      ADD      R0,R4,#+8
   \   00000426   0x.... 0x....      BL       _ZN7Planner25fade_scaling_factor_for_zERKf
   \   0000042A   0x4629             MOV      R1,R5
   \   0000042C   0x.... 0x....      BL       __aeabi_fmul
   \   00000430   0x4605             MOV      R5,R0
   \   00000432   0xE000             B.N      ??line_to_destination_cartesian_17
   \                     ??line_to_destination_cartesian_16: (+1)
   \   00000434   0x2500             MOVS     R5,#+0
    131          
    132                  /**
    133                   * If part of the Mesh is undefined, it will show up as NAN
    134                   * in z_values[][] and propagate through the
    135                   * calculations. If our correction is NAN, we throw it out
    136                   * because part of the Mesh is undefined and we don't have the
    137                   * information we need to complete the height correction.
    138                   */
    139                  if (isnan(z0)) z0 = 0.0;
   \                     ??line_to_destination_cartesian_17: (+1)
   \   00000436   0x4628             MOV      R0,R5
   \   00000438   0x.... 0x....      BL       __iar_FDtest
   \   0000043C   0x2802             CMP      R0,#+2
   \   0000043E   0xD100             BNE.N    ??line_to_destination_cartesian_18
   \   00000440   0x2500             MOVS     R5,#+0
    140          
    141                  planner.buffer_segment(end[X_AXIS], end[Y_AXIS], end[Z_AXIS] + z0, end[E_AXIS], feed_rate, extruder);
   \                     ??line_to_destination_cartesian_18: (+1)
   \   00000442   0x68A0             LDR      R0,[R4, #+8]
   \   00000444   0x4629             MOV      R1,R5
   \   00000446   0x.... 0x....      BL       __aeabi_fadd
   \   0000044A   0x9002             STR      R0,[SP, #+8]
   \   0000044C   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   00000450   0x9001             STR      R0,[SP, #+4]
   \   00000452   0x9815             LDR      R0,[SP, #+84]
   \   00000454   0x9000             STR      R0,[SP, #+0]
   \   00000456   0xF104 0x030C      ADD      R3,R4,#+12
   \   0000045A   0xAA02             ADD      R2,SP,#+8
   \   0000045C   0x1D21             ADDS     R1,R4,#+4
   \   0000045E   0x4620             MOV      R0,R4
   \   00000460   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
    142          
    143                  if (g26_debug_flag)
   \   00000464   0x.... 0x....      LDR.W    R0,??DataTable10_2
   \   00000468   0x7800             LDRB     R0,[R0, #+0]
   \   0000046A   0x2800             CMP      R0,#+0
   \   0000046C   0xF000 0x826B      BEQ.W    ??line_to_destination_cartesian_19
    144                    debug_current_and_destination(PSTR("FINAL_MOVE in ubl.line_to_destination_cartesian()"));
   \   00000470   0x.... 0x....      ADR.W    R0,`?<Constant "FINAL_MOVE in ubl.lin...">`
   \   00000474   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \   00000478   0xE265             B.N      ??line_to_destination_cartesian_19
    145          
    146                  set_current_from_destination();
    147                  return;
    148                }
   \                     ??line_to_destination_cartesian_1: (+1)
   \   0000047A   0x6820             LDR      R0,[R4, #+0]
   \   0000047C   0x6829             LDR      R1,[R5, #+0]
   \   0000047E   0x.... 0x....      BL       __aeabi_fsub
   \   00000482   0x4680             MOV      R8,R0
   \   00000484   0x6860             LDR      R0,[R4, #+4]
   \   00000486   0x6869             LDR      R1,[R5, #+4]
   \   00000488   0x.... 0x....      BL       __aeabi_fsub
   \   0000048C   0x4681             MOV      R9,R0
    149          
    150                /**
    151                 * If we get here, we are processing a move that crosses at least one Mesh Line. We will check
    152                 * for the simple case of just crossing X or just crossing Y Mesh Lines after we get all the details
    153                 * of the move figured out. We can process the easy case of just crossing an X or Y Mesh Line with less
    154                 * computation and in fact most lines are of this nature. We will check for that in the following
    155                 * blocks of code:
    156                 */
    157          
    158                const float dx = end[X_AXIS] - start[X_AXIS],
    159                            dy = end[Y_AXIS] - start[Y_AXIS];
    160          
    161                const int left_flag = dx < 0.0 ? 1 : 0,
   \   0000048E   0x4640             MOV      R0,R8
   \   00000490   0x2100             MOVS     R1,#+0
   \   00000492   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000496   0xD202             BCS.N    ??line_to_destination_cartesian_20
   \   00000498   0x2001             MOVS     R0,#+1
   \   0000049A   0x9007             STR      R0,[SP, #+28]
   \   0000049C   0xE001             B.N      ??line_to_destination_cartesian_21
   \                     ??line_to_destination_cartesian_20: (+1)
   \   0000049E   0x4608             MOV      R0,R1
   \   000004A0   0x9007             STR      R0,[SP, #+28]
    162                          down_flag = dy < 0.0 ? 1 : 0;
   \                     ??line_to_destination_cartesian_21: (+1)
   \   000004A2   0x4648             MOV      R0,R9
   \   000004A4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000004A8   0xD202             BCS.N    ??line_to_destination_cartesian_22
   \   000004AA   0x2001             MOVS     R0,#+1
   \   000004AC   0x9006             STR      R0,[SP, #+24]
   \   000004AE   0xE001             B.N      ??line_to_destination_cartesian_23
   \                     ??line_to_destination_cartesian_22: (+1)
   \   000004B0   0x4608             MOV      R0,R1
   \   000004B2   0x9006             STR      R0,[SP, #+24]
    163          
    164                const float adx = left_flag ? -dx : dx,
   \                     ??line_to_destination_cartesian_23: (+1)
   \   000004B4   0x9807             LDR      R0,[SP, #+28]
   \   000004B6   0x2800             CMP      R0,#+0
   \   000004B8   0x4641             MOV      R1,R8
   \   000004BA   0xD001             BEQ.N    ??line_to_destination_cartesian_24
   \   000004BC   0xF081 0x4100      EOR      R1,R1,#0x80000000
    165                            ady = down_flag ? -dy : dy;
   \                     ??line_to_destination_cartesian_24: (+1)
   \   000004C0   0x9806             LDR      R0,[SP, #+24]
   \   000004C2   0x2800             CMP      R0,#+0
   \   000004C4   0x4648             MOV      R0,R9
   \   000004C6   0xD001             BEQ.N    ??line_to_destination_cartesian_25
   \   000004C8   0xF080 0x4000      EOR      R0,R0,#0x80000000
    166          
    167                const int dxi = cell_start_xi == cell_dest_xi ? 0 : left_flag ? -1 : 1,
   \                     ??line_to_destination_cartesian_25: (+1)
   \   000004CC   0x9A04             LDR      R2,[SP, #+16]
   \   000004CE   0x4297             CMP      R7,R2
   \   000004D0   0xD102             BNE.N    ??line_to_destination_cartesian_26
   \   000004D2   0x2200             MOVS     R2,#+0
   \   000004D4   0x920A             STR      R2,[SP, #+40]
   \   000004D6   0xE008             B.N      ??line_to_destination_cartesian_27
   \                     ??line_to_destination_cartesian_26: (+1)
   \   000004D8   0x9A07             LDR      R2,[SP, #+28]
   \   000004DA   0x2A00             CMP      R2,#+0
   \   000004DC   0xD003             BEQ.N    ??line_to_destination_cartesian_28
   \   000004DE   0xF04F 0x32FF      MOV      R2,#-1
   \   000004E2   0x920A             STR      R2,[SP, #+40]
   \   000004E4   0xE001             B.N      ??line_to_destination_cartesian_27
   \                     ??line_to_destination_cartesian_28: (+1)
   \   000004E6   0x2201             MOVS     R2,#+1
   \   000004E8   0x920A             STR      R2,[SP, #+40]
    168                          dyi = cell_start_yi == cell_dest_yi ? 0 : down_flag ? -1 : 1;
   \                     ??line_to_destination_cartesian_27: (+1)
   \   000004EA   0x9A03             LDR      R2,[SP, #+12]
   \   000004EC   0x4296             CMP      R6,R2
   \   000004EE   0xD102             BNE.N    ??line_to_destination_cartesian_29
   \   000004F0   0x2200             MOVS     R2,#+0
   \   000004F2   0x9205             STR      R2,[SP, #+20]
   \   000004F4   0xE008             B.N      ??line_to_destination_cartesian_30
   \                     ??line_to_destination_cartesian_29: (+1)
   \   000004F6   0x9A06             LDR      R2,[SP, #+24]
   \   000004F8   0x2A00             CMP      R2,#+0
   \   000004FA   0xD003             BEQ.N    ??line_to_destination_cartesian_31
   \   000004FC   0xF04F 0x32FF      MOV      R2,#-1
   \   00000500   0x9205             STR      R2,[SP, #+20]
   \   00000502   0xE001             B.N      ??line_to_destination_cartesian_30
   \                     ??line_to_destination_cartesian_31: (+1)
   \   00000504   0x2201             MOVS     R2,#+1
   \   00000506   0x9205             STR      R2,[SP, #+20]
    169          
    170                /**
    171                 * Compute the scaling factor for the extruder for each partial move.
    172                 * We need to watch out for zero length moves because it will cause us to
    173                 * have an infinate scaling factor. We are stuck doing a floating point
    174                 * divide to get our scaling factor, but after that, we just multiply by this
    175                 * number. We also pick our scaling factor based on whether the X or Y
    176                 * component is larger. We use the biggest of the two to preserve precision.
    177                 */
    178          
    179                const bool use_x_dist = adx > ady;
   \                     ??line_to_destination_cartesian_30: (+1)
   \   00000508   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000050C   0xD202             BCS.N    ??line_to_destination_cartesian_32
   \   0000050E   0x2001             MOVS     R0,#+1
   \   00000510   0x9009             STR      R0,[SP, #+36]
   \   00000512   0xE001             B.N      ??line_to_destination_cartesian_33
   \                     ??line_to_destination_cartesian_32: (+1)
   \   00000514   0x2000             MOVS     R0,#+0
   \   00000516   0x9009             STR      R0,[SP, #+36]
    180          
    181                float on_axis_distance = use_x_dist ? dx : dy,
   \                     ??line_to_destination_cartesian_33: (+1)
   \   00000518   0x9809             LDR      R0,[SP, #+36]
   \   0000051A   0x2800             CMP      R0,#+0
   \   0000051C   0xD001             BEQ.N    ??line_to_destination_cartesian_34
   \   0000051E   0x46C3             MOV      R11,R8
   \   00000520   0xE000             B.N      ??line_to_destination_cartesian_35
   \                     ??line_to_destination_cartesian_34: (+1)
   \   00000522   0x46CB             MOV      R11,R9
    182                      e_position = end[E_AXIS] - start[E_AXIS],
   \                     ??line_to_destination_cartesian_35: (+1)
   \   00000524   0x68E0             LDR      R0,[R4, #+12]
   \   00000526   0x68E9             LDR      R1,[R5, #+12]
   \   00000528   0x.... 0x....      BL       __aeabi_fsub
   \   0000052C   0x9002             STR      R0,[SP, #+8]
    183                      z_position = end[Z_AXIS] - start[Z_AXIS];
    184          
    185                const float e_normalized_dist = e_position / on_axis_distance,
   \   0000052E   0x4659             MOV      R1,R11
   \   00000530   0x.... 0x....      BL       __aeabi_fdiv
   \   00000534   0x900C             STR      R0,[SP, #+48]
    186                            z_normalized_dist = z_position / on_axis_distance;
   \   00000536   0x68A0             LDR      R0,[R4, #+8]
   \   00000538   0x68A9             LDR      R1,[R5, #+8]
   \   0000053A   0x.... 0x....      BL       __aeabi_fsub
   \   0000053E   0x4659             MOV      R1,R11
   \   00000540   0x.... 0x....      BL       __aeabi_fdiv
   \   00000544   0x9010             STR      R0,[SP, #+64]
    187          
    188                int current_xi = cell_start_xi,
    189                    current_yi = cell_start_yi;
    190          
    191                const float m = dy / dx,
   \   00000546   0x4648             MOV      R0,R9
   \   00000548   0x4641             MOV      R1,R8
   \   0000054A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000054E   0x9008             STR      R0,[SP, #+32]
    192                            c = start[Y_AXIS] - m * start[X_AXIS];
   \   00000550   0x4601             MOV      R1,R0
   \   00000552   0x6828             LDR      R0,[R5, #+0]
   \   00000554   0x.... 0x....      BL       __aeabi_fmul
   \   00000558   0x4601             MOV      R1,R0
   \   0000055A   0x6868             LDR      R0,[R5, #+4]
   \   0000055C   0x.... 0x....      BL       __aeabi_fsub
   \   00000560   0x900F             STR      R0,[SP, #+60]
    193          
    194                const bool inf_normalized_flag = (isinf(e_normalized_dist) != 0),
   \   00000562   0x980C             LDR      R0,[SP, #+48]
   \   00000564   0x.... 0x....      BL       __iar_FDtest
   \   00000568   0x2801             CMP      R0,#+1
   \   0000056A   0xD102             BNE.N    ??line_to_destination_cartesian_36
   \   0000056C   0x2001             MOVS     R0,#+1
   \   0000056E   0x900B             STR      R0,[SP, #+44]
   \   00000570   0xE001             B.N      ??line_to_destination_cartesian_37
   \                     ??line_to_destination_cartesian_36: (+1)
   \   00000572   0x2000             MOVS     R0,#+0
   \   00000574   0x900B             STR      R0,[SP, #+44]
    195                           inf_m_flag = (isinf(m) != 0);
   \                     ??line_to_destination_cartesian_37: (+1)
   \   00000576   0x9808             LDR      R0,[SP, #+32]
   \   00000578   0x.... 0x....      BL       __iar_FDtest
   \   0000057C   0x2801             CMP      R0,#+1
   \   0000057E   0xD102             BNE.N    ??line_to_destination_cartesian_38
   \   00000580   0xF04F 0x0801      MOV      R8,#+1
   \   00000584   0xE001             B.N      ??line_to_destination_cartesian_39
   \                     ??line_to_destination_cartesian_38: (+1)
   \   00000586   0xF04F 0x0800      MOV      R8,#+0
    196                /**
    197                 * This block handles vertical lines. These are lines that stay within the same
    198                 * X Cell column. They do not need to be perfectly vertical. They just can
    199                 * not cross into another X Cell column.
    200                 */
    201                if (dxi == 0) {       // Check for a vertical line
   \                     ??line_to_destination_cartesian_39: (+1)
   \   0000058A   0x980A             LDR      R0,[SP, #+40]
   \   0000058C   0x2800             CMP      R0,#+0
   \   0000058E   0xD174             BNE.N    ??line_to_destination_cartesian_40
    202                  current_yi += down_flag;  // Line is heading down, we just want to go to the bottom
   \   00000590   0x9806             LDR      R0,[SP, #+24]
   \   00000592   0x1986             ADDS     R6,R0,R6
   \   00000594   0xE011             B.N      ??line_to_destination_cartesian_41
    203                  while (current_yi != cell_dest_yi + down_flag) {
    204                    current_yi += dyi;
    205                    const float next_mesh_line_y = mesh_index_to_ypos(current_yi);
    206          
    207                    /**
    208                     * if the slope of the line is infinite, we won't do the calculations
    209                     * else, we know the next X is the same so we can recover and continue!
    210                     * Calculate X at the next Y mesh line
    211                     */
    212                    const float rx = inf_m_flag ? start[X_AXIS] : (next_mesh_line_y - c) / m;
    213          
    214                    float z0 = z_correction_for_x_on_horizontal_mesh_line(rx, current_xi, current_yi)
    215                               * planner.fade_scaling_factor_for_z(end[Z_AXIS]);
    216          
    217                    /**
    218                     * If part of the Mesh is undefined, it will show up as NAN
    219                     * in z_values[][] and propagate through the
    220                     * calculations. If our correction is NAN, we throw it out
    221                     * because part of the Mesh is undefined and we don't have the
    222                     * information we need to complete the height correction.
    223                     */
    224                    if (isnan(z0)) z0 = 0.0;
    225          
    226                    const float ry = mesh_index_to_ypos(current_yi);
    227          
    228                    /**
    229                     * Without this check, it is possible for the algorithm to generate a zero length move in the case
    230                     * where the line is heading down and it is starting right on a Mesh Line boundary. For how often that
    231                     * happens, it might be best to remove the check and always 'schedule' the move because
    232                     * the planner.buffer_segment() routine will filter it if that happens.
    233                     */
    234                    if (ry != start[Y_AXIS]) {
    235                      if (!inf_normalized_flag) {
    236                        on_axis_distance = use_x_dist ? rx - start[X_AXIS] : ry - start[Y_AXIS];
    237                        e_position = start[E_AXIS] + on_axis_distance * e_normalized_dist;
    238                        z_position = start[Z_AXIS] + on_axis_distance * z_normalized_dist;
    239                      }
    240                      else {
    241                        e_position = end[E_AXIS];
   \                     ??line_to_destination_cartesian_42: (+1)
   \   00000596   0x68E0             LDR      R0,[R4, #+12]
   \   00000598   0x9002             STR      R0,[SP, #+8]
    242                        z_position = end[Z_AXIS];
   \   0000059A   0x68A0             LDR      R0,[R4, #+8]
    243                      }
    244          
    245                      planner.buffer_segment(rx, ry, z_position + z0, e_position, feed_rate, extruder);
   \                     ??line_to_destination_cartesian_43: (+1)
   \   0000059C   0x4649             MOV      R1,R9
   \   0000059E   0x.... 0x....      BL       __aeabi_fadd
   \   000005A2   0x900D             STR      R0,[SP, #+52]
   \   000005A4   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   000005A8   0x9001             STR      R0,[SP, #+4]
   \   000005AA   0x9815             LDR      R0,[SP, #+84]
   \   000005AC   0x9000             STR      R0,[SP, #+0]
   \   000005AE   0xAB02             ADD      R3,SP,#+8
   \   000005B0   0xAA0D             ADD      R2,SP,#+52
   \   000005B2   0xA90A             ADD      R1,SP,#+40
   \   000005B4   0xA807             ADD      R0,SP,#+28
   \   000005B6   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
   \                     ??line_to_destination_cartesian_41: (+1)
   \   000005BA   0x9803             LDR      R0,[SP, #+12]
   \   000005BC   0x9906             LDR      R1,[SP, #+24]
   \   000005BE   0x1808             ADDS     R0,R1,R0
   \   000005C0   0x4286             CMP      R6,R0
   \   000005C2   0xD050             BEQ.N    ??line_to_destination_cartesian_44
   \   000005C4   0x9805             LDR      R0,[SP, #+20]
   \   000005C6   0x1986             ADDS     R6,R0,R6
   \   000005C8   0x4630             MOV      R0,R6
   \   000005CA   0xB2C0             UXTB     R0,R0
   \   000005CC   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000005D0   0xF1B8 0x0F00      CMP      R8,#+0
   \   000005D4   0xD002             BEQ.N    ??line_to_destination_cartesian_45
   \   000005D6   0x6828             LDR      R0,[R5, #+0]
   \   000005D8   0x9007             STR      R0,[SP, #+28]
   \   000005DA   0xE006             B.N      ??line_to_destination_cartesian_46
   \                     ??line_to_destination_cartesian_45: (+1)
   \   000005DC   0x990F             LDR      R1,[SP, #+60]
   \   000005DE   0x.... 0x....      BL       __aeabi_fsub
   \   000005E2   0x9908             LDR      R1,[SP, #+32]
   \   000005E4   0x.... 0x....      BL       __aeabi_fdiv
   \   000005E8   0x9007             STR      R0,[SP, #+28]
   \                     ??line_to_destination_cartesian_46: (+1)
   \   000005EA   0x4632             MOV      R2,R6
   \   000005EC   0x4639             MOV      R1,R7
   \   000005EE   0xA807             ADD      R0,SP,#+28
   \   000005F0   0x.... 0x....      BL       _ZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfii
   \   000005F4   0x4681             MOV      R9,R0
   \   000005F6   0xF104 0x0008      ADD      R0,R4,#+8
   \   000005FA   0x.... 0x....      BL       _ZN7Planner25fade_scaling_factor_for_zERKf
   \   000005FE   0x4649             MOV      R1,R9
   \   00000600   0x.... 0x....      BL       __aeabi_fmul
   \   00000604   0x4681             MOV      R9,R0
   \   00000606   0x.... 0x....      BL       __iar_FDtest
   \   0000060A   0x2802             CMP      R0,#+2
   \   0000060C   0xD101             BNE.N    ??line_to_destination_cartesian_47
   \   0000060E   0xF04F 0x0900      MOV      R9,#+0
   \                     ??line_to_destination_cartesian_47: (+1)
   \   00000612   0x4630             MOV      R0,R6
   \   00000614   0xB2C0             UXTB     R0,R0
   \   00000616   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   0000061A   0x900A             STR      R0,[SP, #+40]
   \   0000061C   0x686A             LDR      R2,[R5, #+4]
   \   0000061E   0x4611             MOV      R1,R2
   \   00000620   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000624   0xD0C9             BEQ.N    ??line_to_destination_cartesian_41
   \   00000626   0x980B             LDR      R0,[SP, #+44]
   \   00000628   0x2800             CMP      R0,#+0
   \   0000062A   0xD1B4             BNE.N    ??line_to_destination_cartesian_42
   \   0000062C   0x9809             LDR      R0,[SP, #+36]
   \   0000062E   0x2800             CMP      R0,#+0
   \   00000630   0xD005             BEQ.N    ??line_to_destination_cartesian_48
   \   00000632   0x9807             LDR      R0,[SP, #+28]
   \   00000634   0x6829             LDR      R1,[R5, #+0]
   \   00000636   0x.... 0x....      BL       __aeabi_fsub
   \   0000063A   0x4683             MOV      R11,R0
   \   0000063C   0xE003             B.N      ??line_to_destination_cartesian_49
   \                     ??line_to_destination_cartesian_48: (+1)
   \   0000063E   0x980A             LDR      R0,[SP, #+40]
   \   00000640   0x.... 0x....      BL       __aeabi_fsub
   \   00000644   0x4683             MOV      R11,R0
   \                     ??line_to_destination_cartesian_49: (+1)
   \   00000646   0x980C             LDR      R0,[SP, #+48]
   \   00000648   0x4659             MOV      R1,R11
   \   0000064A   0x.... 0x....      BL       __aeabi_fmul
   \   0000064E   0x68E9             LDR      R1,[R5, #+12]
   \   00000650   0x.... 0x....      BL       __aeabi_fadd
   \   00000654   0x9002             STR      R0,[SP, #+8]
   \   00000656   0x9810             LDR      R0,[SP, #+64]
   \   00000658   0x4659             MOV      R1,R11
   \   0000065A   0x.... 0x....      BL       __aeabi_fmul
   \   0000065E   0x68A9             LDR      R1,[R5, #+8]
   \   00000660   0x.... 0x....      BL       __aeabi_fadd
   \   00000664   0xE79A             B.N      ??line_to_destination_cartesian_43
    246                    } //else printf("FIRST MOVE PRUNED  ");
    247                  }
    248          
    249                  if (g26_debug_flag)
   \                     ??line_to_destination_cartesian_44: (+1)
   \   00000666   0x....             LDR.N    R0,??DataTable10_2
   \   00000668   0x7800             LDRB     R0,[R0, #+0]
   \   0000066A   0x2800             CMP      R0,#+0
   \   0000066C   0xF000 0x815F      BEQ.W    ??line_to_destination_cartesian_50
    250                    debug_current_and_destination(PSTR("vertical move done in ubl.line_to_destination_cartesian()"));
   \   00000670   0x.... 0x....      ADR.W    R0,`?<Constant "vertical move done in...">`
   \   00000674   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \   00000678   0xE159             B.N      ??line_to_destination_cartesian_50
    251          
    252                  //
    253                  // Check if we are at the final destination. Usually, we won't be, but if it is on a Y Mesh Line, we are done.
    254                  //
    255                  if (current_position[X_AXIS] != end[X_AXIS] || current_position[Y_AXIS] != end[Y_AXIS])
    256                    goto FINAL_MOVE;
    257          
    258                  set_current_from_destination();
    259                  return;
    260                }
    261          
    262                /**
    263                 *
    264                 * This block handles horizontal lines. These are lines that stay within the same
    265                 * Y Cell row. They do not need to be perfectly horizontal. They just can
    266                 * not cross into another Y Cell row.
    267                 *
    268                 */
    269          
    270                if (dyi == 0) {             // Check for a horizontal line
   \                     ??line_to_destination_cartesian_40: (+1)
   \   0000067A   0x9807             LDR      R0,[SP, #+28]
   \   0000067C   0xEB00 0x0907      ADD      R9,R0,R7
   \   00000680   0x9805             LDR      R0,[SP, #+20]
   \   00000682   0x2800             CMP      R0,#+0
   \   00000684   0xD16C             BNE.N    ??line_to_destination_cartesian_51
    271                  current_xi += left_flag;  // Line is heading left, we just want to go to the left
   \   00000686   0xE011             B.N      ??line_to_destination_cartesian_52
    272                                            // edge of this cell for the first move.
    273                  while (current_xi != cell_dest_xi + left_flag) {
    274                    current_xi += dxi;
    275                    const float next_mesh_line_x = mesh_index_to_xpos(current_xi),
    276                                ry = m * next_mesh_line_x + c;   // Calculate Y at the next X mesh line
    277          
    278                    float z0 = z_correction_for_y_on_vertical_mesh_line(ry, current_xi, current_yi)
    279                               * planner.fade_scaling_factor_for_z(end[Z_AXIS]);
    280          
    281                    /**
    282                     * If part of the Mesh is undefined, it will show up as NAN
    283                     * in z_values[][] and propagate through the
    284                     * calculations. If our correction is NAN, we throw it out
    285                     * because part of the Mesh is undefined and we don't have the
    286                     * information we need to complete the height correction.
    287                     */
    288                    if (isnan(z0)) z0 = 0.0;
    289          
    290                    const float rx = mesh_index_to_xpos(current_xi);
    291          
    292                    /**
    293                     * Without this check, it is possible for the algorithm to generate a zero length move in the case
    294                     * where the line is heading left and it is starting right on a Mesh Line boundary. For how often
    295                     * that happens, it might be best to remove the check and always 'schedule' the move because
    296                     * the planner.buffer_segment() routine will filter it if that happens.
    297                     */
    298                    if (rx != start[X_AXIS]) {
    299                      if (!inf_normalized_flag) {
    300                        on_axis_distance = use_x_dist ? rx - start[X_AXIS] : ry - start[Y_AXIS];
    301                        e_position = start[E_AXIS] + on_axis_distance * e_normalized_dist;  // is based on X or Y because this is a horizontal move
    302                        z_position = start[Z_AXIS] + on_axis_distance * z_normalized_dist;
    303                      }
    304                      else {
    305                        e_position = end[E_AXIS];
   \                     ??line_to_destination_cartesian_53: (+1)
   \   00000688   0x68E0             LDR      R0,[R4, #+12]
   \   0000068A   0x9002             STR      R0,[SP, #+8]
    306                        z_position = end[Z_AXIS];
   \   0000068C   0x68A0             LDR      R0,[R4, #+8]
    307                      }
    308          
    309                      planner.buffer_segment(rx, ry, z_position + z0, e_position, feed_rate, extruder);
   \                     ??line_to_destination_cartesian_54: (+1)
   \   0000068E   0x4639             MOV      R1,R7
   \   00000690   0x.... 0x....      BL       __aeabi_fadd
   \   00000694   0x900D             STR      R0,[SP, #+52]
   \   00000696   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   0000069A   0x9001             STR      R0,[SP, #+4]
   \   0000069C   0x9815             LDR      R0,[SP, #+84]
   \   0000069E   0x9000             STR      R0,[SP, #+0]
   \   000006A0   0xAB02             ADD      R3,SP,#+8
   \   000006A2   0xAA0D             ADD      R2,SP,#+52
   \   000006A4   0xA906             ADD      R1,SP,#+24
   \   000006A6   0xA805             ADD      R0,SP,#+20
   \   000006A8   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
   \                     ??line_to_destination_cartesian_52: (+1)
   \   000006AC   0x9804             LDR      R0,[SP, #+16]
   \   000006AE   0x9907             LDR      R1,[SP, #+28]
   \   000006B0   0x1808             ADDS     R0,R1,R0
   \   000006B2   0x4581             CMP      R9,R0
   \   000006B4   0xD04A             BEQ.N    ??line_to_destination_cartesian_55
   \   000006B6   0x980A             LDR      R0,[SP, #+40]
   \   000006B8   0x4481             ADD      R9,R0,R9
   \   000006BA   0x4648             MOV      R0,R9
   \   000006BC   0xB2C0             UXTB     R0,R0
   \   000006BE   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000006C2   0x4601             MOV      R1,R0
   \   000006C4   0x9808             LDR      R0,[SP, #+32]
   \   000006C6   0x.... 0x....      BL       __aeabi_fmul
   \   000006CA   0x990F             LDR      R1,[SP, #+60]
   \   000006CC   0x.... 0x....      BL       __aeabi_fadd
   \   000006D0   0x9006             STR      R0,[SP, #+24]
   \   000006D2   0x4632             MOV      R2,R6
   \   000006D4   0x4649             MOV      R1,R9
   \   000006D6   0xA806             ADD      R0,SP,#+24
   \   000006D8   0x.... 0x....      BL       _ZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfii
   \   000006DC   0x4607             MOV      R7,R0
   \   000006DE   0xF104 0x0008      ADD      R0,R4,#+8
   \   000006E2   0x.... 0x....      BL       _ZN7Planner25fade_scaling_factor_for_zERKf
   \   000006E6   0x4639             MOV      R1,R7
   \   000006E8   0x.... 0x....      BL       __aeabi_fmul
   \   000006EC   0x4607             MOV      R7,R0
   \   000006EE   0x.... 0x....      BL       __iar_FDtest
   \   000006F2   0x2802             CMP      R0,#+2
   \   000006F4   0xD100             BNE.N    ??line_to_destination_cartesian_56
   \   000006F6   0x2700             MOVS     R7,#+0
   \                     ??line_to_destination_cartesian_56: (+1)
   \   000006F8   0x4648             MOV      R0,R9
   \   000006FA   0xB2C0             UXTB     R0,R0
   \   000006FC   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   00000700   0x9005             STR      R0,[SP, #+20]
   \   00000702   0x682A             LDR      R2,[R5, #+0]
   \   00000704   0x4611             MOV      R1,R2
   \   00000706   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000070A   0xD0CF             BEQ.N    ??line_to_destination_cartesian_52
   \   0000070C   0x980B             LDR      R0,[SP, #+44]
   \   0000070E   0x2800             CMP      R0,#+0
   \   00000710   0xD1BA             BNE.N    ??line_to_destination_cartesian_53
   \   00000712   0x9809             LDR      R0,[SP, #+36]
   \   00000714   0x2800             CMP      R0,#+0
   \   00000716   0xD004             BEQ.N    ??line_to_destination_cartesian_57
   \   00000718   0x9805             LDR      R0,[SP, #+20]
   \   0000071A   0x.... 0x....      BL       __aeabi_fsub
   \   0000071E   0x4683             MOV      R11,R0
   \   00000720   0xE004             B.N      ??line_to_destination_cartesian_58
   \                     ??line_to_destination_cartesian_57: (+1)
   \   00000722   0x9806             LDR      R0,[SP, #+24]
   \   00000724   0x6869             LDR      R1,[R5, #+4]
   \   00000726   0x.... 0x....      BL       __aeabi_fsub
   \   0000072A   0x4683             MOV      R11,R0
   \                     ??line_to_destination_cartesian_58: (+1)
   \   0000072C   0x980C             LDR      R0,[SP, #+48]
   \   0000072E   0x4659             MOV      R1,R11
   \   00000730   0x.... 0x....      BL       __aeabi_fmul
   \   00000734   0x68E9             LDR      R1,[R5, #+12]
   \   00000736   0x.... 0x....      BL       __aeabi_fadd
   \   0000073A   0x9002             STR      R0,[SP, #+8]
   \   0000073C   0x9810             LDR      R0,[SP, #+64]
   \   0000073E   0x4659             MOV      R1,R11
   \   00000740   0x.... 0x....      BL       __aeabi_fmul
   \   00000744   0x68A9             LDR      R1,[R5, #+8]
   \   00000746   0x.... 0x....      BL       __aeabi_fadd
   \   0000074A   0xE7A0             B.N      ??line_to_destination_cartesian_54
    310                    } //else printf("FIRST MOVE PRUNED  ");
    311                  }
    312          
    313                  if (g26_debug_flag)
   \                     ??line_to_destination_cartesian_55: (+1)
   \   0000074C   0x....             LDR.N    R0,??DataTable10_2
   \   0000074E   0x7800             LDRB     R0,[R0, #+0]
   \   00000750   0x2800             CMP      R0,#+0
   \   00000752   0xF000 0x80EC      BEQ.W    ??line_to_destination_cartesian_50
    314                    debug_current_and_destination(PSTR("horizontal move done in ubl.line_to_destination_cartesian()"));
   \   00000756   0x.... 0x....      ADR.W    R0,`?<Constant "horizontal move done ...">`
   \   0000075A   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \   0000075E   0xE0E6             B.N      ??line_to_destination_cartesian_50
    315          
    316                  if (current_position[X_AXIS] != end[X_AXIS] || current_position[Y_AXIS] != end[Y_AXIS])
    317                    goto FINAL_MOVE;
    318          
    319                  set_current_from_destination();
    320                  return;
    321                }
    322          
    323                /**
    324                 *
    325                 * This block handles the generic case of a line crossing both X and Y Mesh lines.
    326                 *
    327                 */
    328          
    329                int xi_cnt = cell_start_xi - cell_dest_xi,
   \                     ??line_to_destination_cartesian_51: (+1)
   \   00000760   0x9804             LDR      R0,[SP, #+16]
   \   00000762   0x1A38             SUBS     R0,R7,R0
    330                    yi_cnt = cell_start_yi - cell_dest_yi;
   \   00000764   0x9903             LDR      R1,[SP, #+12]
   \   00000766   0x1A71             SUBS     R1,R6,R1
    331          
    332                if (xi_cnt < 0) xi_cnt = -xi_cnt;
   \   00000768   0x0007             MOVS     R7,R0
   \   0000076A   0xD500             BPL.N    ??line_to_destination_cartesian_59
   \   0000076C   0x427F             RSBS     R7,R7,#+0
    333                if (yi_cnt < 0) yi_cnt = -yi_cnt;
   \                     ??line_to_destination_cartesian_59: (+1)
   \   0000076E   0x4688             MOV      R8,R1
   \   00000770   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000774   0xD501             BPL.N    ??line_to_destination_cartesian_60
   \   00000776   0xF1C8 0x0800      RSB      R8,R8,#+0
    334          
    335                current_xi += left_flag;
    336                current_yi += down_flag;
   \                     ??line_to_destination_cartesian_60: (+1)
   \   0000077A   0x9806             LDR      R0,[SP, #+24]
   \   0000077C   0x1986             ADDS     R6,R0,R6
    337          
    338                while (xi_cnt > 0 || yi_cnt > 0) {
   \                     ??line_to_destination_cartesian_61: (+1)
   \   0000077E   0x2F01             CMP      R7,#+1
   \   00000780   0xDA03             BGE.N    ??line_to_destination_cartesian_62
   \   00000782   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000786   0xF2C0 0x80CA      BLT.W    ??line_to_destination_cartesian_63
    339          
    340                  const float next_mesh_line_x = mesh_index_to_xpos(current_xi + dxi),
   \                     ??line_to_destination_cartesian_62: (+1)
   \   0000078A   0x980A             LDR      R0,[SP, #+40]
   \   0000078C   0x4448             ADD      R0,R0,R9
   \   0000078E   0xB2C0             UXTB     R0,R0
   \   00000790   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   00000794   0x900E             STR      R0,[SP, #+56]
    341                              next_mesh_line_y = mesh_index_to_ypos(current_yi + dyi),
   \   00000796   0x9805             LDR      R0,[SP, #+20]
   \   00000798   0x1980             ADDS     R0,R0,R6
   \   0000079A   0xB2C0             UXTB     R0,R0
   \   0000079C   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000007A0   0x9012             STR      R0,[SP, #+72]
    342                              ry = m * next_mesh_line_x + c,   // Calculate Y at the next X mesh line
   \   000007A2   0x9808             LDR      R0,[SP, #+32]
   \   000007A4   0x990E             LDR      R1,[SP, #+56]
   \   000007A6   0x.... 0x....      BL       __aeabi_fmul
   \   000007AA   0x990F             LDR      R1,[SP, #+60]
   \   000007AC   0x.... 0x....      BL       __aeabi_fadd
   \   000007B0   0x9011             STR      R0,[SP, #+68]
    343                              rx = (next_mesh_line_y - c) / m; // Calculate X at the next Y mesh line
   \   000007B2   0x9812             LDR      R0,[SP, #+72]
   \   000007B4   0x990F             LDR      R1,[SP, #+60]
   \   000007B6   0x.... 0x....      BL       __aeabi_fsub
   \   000007BA   0x9908             LDR      R1,[SP, #+32]
   \   000007BC   0x.... 0x....      BL       __aeabi_fdiv
   \   000007C0   0x900D             STR      R0,[SP, #+52]
    344                                                               // (No need to worry about m being zero.
    345                                                               //  If that was the case, it was already detected
    346                                                               //  as a vertical line move above.)
    347          
    348                  if (left_flag == (rx > next_mesh_line_x)) { // Check if we hit the Y line first
                                       ^
Warning[Pa118]: mixing boolean and non-boolean types in a comparison results
          in the boolean being promoted
   \   000007C2   0x980E             LDR      R0,[SP, #+56]
   \   000007C4   0x990D             LDR      R1,[SP, #+52]
   \   000007C6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000007CA   0xD201             BCS.N    ??line_to_destination_cartesian_64
   \   000007CC   0x2001             MOVS     R0,#+1
   \   000007CE   0xE000             B.N      ??line_to_destination_cartesian_65
   \                     ??line_to_destination_cartesian_64: (+1)
   \   000007D0   0x2000             MOVS     R0,#+0
   \                     ??line_to_destination_cartesian_65: (+1)
   \   000007D2   0x9907             LDR      R1,[SP, #+28]
   \   000007D4   0x4281             CMP      R1,R0
   \   000007D6   0xD14E             BNE.N    ??line_to_destination_cartesian_66
   \   000007D8   0x9805             LDR      R0,[SP, #+20]
   \   000007DA   0x1982             ADDS     R2,R0,R6
   \   000007DC   0x4608             MOV      R0,R1
   \   000007DE   0xEBA9 0x0100      SUB      R1,R9,R0
   \   000007E2   0xA80D             ADD      R0,SP,#+52
    349                    // Yes!  Crossing a Y Mesh Line next
    350                    float z0 = z_correction_for_x_on_horizontal_mesh_line(rx, current_xi - left_flag, current_yi + dyi)
    351                               * planner.fade_scaling_factor_for_z(end[Z_AXIS]);
   \   000007E4   0x.... 0x....      BL       _ZN20unified_bed_leveling42z_correction_for_x_on_horizontal_mesh_lineERKfii
   \   000007E8   0x4682             MOV      R10,R0
   \   000007EA   0xF104 0x0008      ADD      R0,R4,#+8
   \   000007EE   0x.... 0x....      BL       _ZN7Planner25fade_scaling_factor_for_zERKf
   \   000007F2   0x4651             MOV      R1,R10
   \   000007F4   0x.... 0x....      BL       __aeabi_fmul
   \   000007F8   0x4682             MOV      R10,R0
    352          
    353                    /**
    354                     * If part of the Mesh is undefined, it will show up as NAN
    355                     * in z_values[][] and propagate through the
    356                     * calculations. If our correction is NAN, we throw it out
    357                     * because part of the Mesh is undefined and we don't have the
    358                     * information we need to complete the height correction.
    359                     */
    360                    if (isnan(z0)) z0 = 0.0;
   \   000007FA   0x.... 0x....      BL       __iar_FDtest
   \   000007FE   0x2802             CMP      R0,#+2
   \   00000800   0xD101             BNE.N    ??line_to_destination_cartesian_67
   \   00000802   0xF04F 0x0A00      MOV      R10,#+0
    361          
    362                    if (!inf_normalized_flag) {
   \                     ??line_to_destination_cartesian_67: (+1)
   \   00000806   0x980B             LDR      R0,[SP, #+44]
   \   00000808   0x2800             CMP      R0,#+0
   \   0000080A   0xD11D             BNE.N    ??line_to_destination_cartesian_68
    363                      on_axis_distance = use_x_dist ? rx - start[X_AXIS] : next_mesh_line_y - start[Y_AXIS];
   \   0000080C   0x9809             LDR      R0,[SP, #+36]
   \   0000080E   0x2800             CMP      R0,#+0
   \   00000810   0xD005             BEQ.N    ??line_to_destination_cartesian_69
   \   00000812   0x980D             LDR      R0,[SP, #+52]
   \   00000814   0x6829             LDR      R1,[R5, #+0]
   \   00000816   0x.... 0x....      BL       __aeabi_fsub
   \   0000081A   0x4683             MOV      R11,R0
   \   0000081C   0xE004             B.N      ??line_to_destination_cartesian_70
   \                     ??line_to_destination_cartesian_69: (+1)
   \   0000081E   0x9812             LDR      R0,[SP, #+72]
   \   00000820   0x6869             LDR      R1,[R5, #+4]
   \   00000822   0x.... 0x....      BL       __aeabi_fsub
   \   00000826   0x4683             MOV      R11,R0
    364                      e_position = start[E_AXIS] + on_axis_distance * e_normalized_dist;
   \                     ??line_to_destination_cartesian_70: (+1)
   \   00000828   0x980C             LDR      R0,[SP, #+48]
   \   0000082A   0x4659             MOV      R1,R11
   \   0000082C   0x.... 0x....      BL       __aeabi_fmul
   \   00000830   0x68E9             LDR      R1,[R5, #+12]
   \   00000832   0x.... 0x....      BL       __aeabi_fadd
   \   00000836   0x9002             STR      R0,[SP, #+8]
    365                      z_position = start[Z_AXIS] + on_axis_distance * z_normalized_dist;
   \   00000838   0x9810             LDR      R0,[SP, #+64]
   \   0000083A   0x4659             MOV      R1,R11
   \   0000083C   0x.... 0x....      BL       __aeabi_fmul
   \   00000840   0x68A9             LDR      R1,[R5, #+8]
   \   00000842   0x.... 0x....      BL       __aeabi_fadd
   \   00000846   0xE002             B.N      ??line_to_destination_cartesian_71
    366                    }
    367                    else {
    368                      e_position = end[E_AXIS];
   \                     ??line_to_destination_cartesian_68: (+1)
   \   00000848   0x68E0             LDR      R0,[R4, #+12]
   \   0000084A   0x9002             STR      R0,[SP, #+8]
    369                      z_position = end[Z_AXIS];
   \   0000084C   0x68A0             LDR      R0,[R4, #+8]
    370                    }
    371                    planner.buffer_segment(rx, next_mesh_line_y, z_position + z0, e_position, feed_rate, extruder);
   \                     ??line_to_destination_cartesian_71: (+1)
   \   0000084E   0x4651             MOV      R1,R10
   \   00000850   0x.... 0x....      BL       __aeabi_fadd
   \   00000854   0x9013             STR      R0,[SP, #+76]
   \   00000856   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   0000085A   0x9001             STR      R0,[SP, #+4]
   \   0000085C   0x9815             LDR      R0,[SP, #+84]
   \   0000085E   0x9000             STR      R0,[SP, #+0]
   \   00000860   0xAB02             ADD      R3,SP,#+8
   \   00000862   0xAA13             ADD      R2,SP,#+76
   \   00000864   0xA912             ADD      R1,SP,#+72
   \   00000866   0xA80D             ADD      R0,SP,#+52
   \   00000868   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
    372                    current_yi += dyi;
   \   0000086C   0x9805             LDR      R0,[SP, #+20]
   \   0000086E   0x1986             ADDS     R6,R0,R6
    373                    yi_cnt--;
   \   00000870   0xF1A8 0x0801      SUB      R8,R8,#+1
   \   00000874   0xE04D             B.N      ??line_to_destination_cartesian_72
    374                  }
    375                  else {
    376                    // Yes!  Crossing a X Mesh Line next
    377                    float z0 = z_correction_for_y_on_vertical_mesh_line(ry, current_xi + dxi, current_yi - down_flag)
    378                               * planner.fade_scaling_factor_for_z(end[Z_AXIS]);
   \                     ??line_to_destination_cartesian_66: (+1)
   \   00000876   0x980A             LDR      R0,[SP, #+40]
   \   00000878   0x4448             ADD      R0,R0,R9
   \   0000087A   0x9013             STR      R0,[SP, #+76]
   \   0000087C   0x9806             LDR      R0,[SP, #+24]
   \   0000087E   0x1A32             SUBS     R2,R6,R0
   \   00000880   0x9913             LDR      R1,[SP, #+76]
   \   00000882   0xA811             ADD      R0,SP,#+68
   \   00000884   0x.... 0x....      BL       _ZN20unified_bed_leveling40z_correction_for_y_on_vertical_mesh_lineERKfii
   \   00000888   0x4681             MOV      R9,R0
   \   0000088A   0xF104 0x0008      ADD      R0,R4,#+8
   \   0000088E   0x.... 0x....      BL       _ZN7Planner25fade_scaling_factor_for_zERKf
   \   00000892   0x4649             MOV      R1,R9
   \   00000894   0x.... 0x....      BL       __aeabi_fmul
   \   00000898   0x4681             MOV      R9,R0
    379          
    380                    /**
    381                     * If part of the Mesh is undefined, it will show up as NAN
    382                     * in z_values[][] and propagate through the
    383                     * calculations. If our correction is NAN, we throw it out
    384                     * because part of the Mesh is undefined and we don't have the
    385                     * information we need to complete the height correction.
    386                     */
    387                    if (isnan(z0)) z0 = 0.0;
   \   0000089A   0x.... 0x....      BL       __iar_FDtest
   \   0000089E   0x2802             CMP      R0,#+2
   \   000008A0   0xD101             BNE.N    ??line_to_destination_cartesian_73
   \   000008A2   0xF04F 0x0900      MOV      R9,#+0
    388          
    389                    if (!inf_normalized_flag) {
   \                     ??line_to_destination_cartesian_73: (+1)
   \   000008A6   0x980B             LDR      R0,[SP, #+44]
   \   000008A8   0x2800             CMP      R0,#+0
   \   000008AA   0xD11D             BNE.N    ??line_to_destination_cartesian_74
    390                      on_axis_distance = use_x_dist ? next_mesh_line_x - start[X_AXIS] : ry - start[Y_AXIS];
   \   000008AC   0x9809             LDR      R0,[SP, #+36]
   \   000008AE   0x2800             CMP      R0,#+0
   \   000008B0   0xD005             BEQ.N    ??line_to_destination_cartesian_75
   \   000008B2   0x980E             LDR      R0,[SP, #+56]
   \   000008B4   0x6829             LDR      R1,[R5, #+0]
   \   000008B6   0x.... 0x....      BL       __aeabi_fsub
   \   000008BA   0x4683             MOV      R11,R0
   \   000008BC   0xE004             B.N      ??line_to_destination_cartesian_76
   \                     ??line_to_destination_cartesian_75: (+1)
   \   000008BE   0x9811             LDR      R0,[SP, #+68]
   \   000008C0   0x6869             LDR      R1,[R5, #+4]
   \   000008C2   0x.... 0x....      BL       __aeabi_fsub
   \   000008C6   0x4683             MOV      R11,R0
    391                      e_position = start[E_AXIS] + on_axis_distance * e_normalized_dist;
   \                     ??line_to_destination_cartesian_76: (+1)
   \   000008C8   0x980C             LDR      R0,[SP, #+48]
   \   000008CA   0x4659             MOV      R1,R11
   \   000008CC   0x.... 0x....      BL       __aeabi_fmul
   \   000008D0   0x68E9             LDR      R1,[R5, #+12]
   \   000008D2   0x.... 0x....      BL       __aeabi_fadd
   \   000008D6   0x9002             STR      R0,[SP, #+8]
    392                      z_position = start[Z_AXIS] + on_axis_distance * z_normalized_dist;
   \   000008D8   0x9810             LDR      R0,[SP, #+64]
   \   000008DA   0x4659             MOV      R1,R11
   \   000008DC   0x.... 0x....      BL       __aeabi_fmul
   \   000008E0   0x68A9             LDR      R1,[R5, #+8]
   \   000008E2   0x.... 0x....      BL       __aeabi_fadd
   \   000008E6   0xE002             B.N      ??line_to_destination_cartesian_77
    393                    }
    394                    else {
    395                      e_position = end[E_AXIS];
   \                     ??line_to_destination_cartesian_74: (+1)
   \   000008E8   0x68E0             LDR      R0,[R4, #+12]
   \   000008EA   0x9002             STR      R0,[SP, #+8]
    396                      z_position = end[Z_AXIS];
   \   000008EC   0x68A0             LDR      R0,[R4, #+8]
    397                    }
    398          
    399                    planner.buffer_segment(next_mesh_line_x, ry, z_position + z0, e_position, feed_rate, extruder);
   \                     ??line_to_destination_cartesian_77: (+1)
   \   000008EE   0x4649             MOV      R1,R9
   \   000008F0   0x.... 0x....      BL       __aeabi_fadd
   \   000008F4   0x9014             STR      R0,[SP, #+80]
   \   000008F6   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   000008FA   0x9001             STR      R0,[SP, #+4]
   \   000008FC   0x9815             LDR      R0,[SP, #+84]
   \   000008FE   0x9000             STR      R0,[SP, #+0]
   \   00000900   0xAB02             ADD      R3,SP,#+8
   \   00000902   0xAA14             ADD      R2,SP,#+80
   \   00000904   0xA911             ADD      R1,SP,#+68
   \   00000906   0xA80E             ADD      R0,SP,#+56
   \   00000908   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
    400                    current_xi += dxi;
   \   0000090C   0xF8DD 0x904C      LDR      R9,[SP, #+76]
    401                    xi_cnt--;
   \   00000910   0x1E7F             SUBS     R7,R7,#+1
    402                  }
    403          
    404                  if (xi_cnt < 0 || yi_cnt < 0) break; // we've gone too far, so exit the loop and move on to FINAL_MOVE
   \                     ??line_to_destination_cartesian_72: (+1)
   \   00000912   0x2F00             CMP      R7,#+0
   \   00000914   0xD403             BMI.N    ??line_to_destination_cartesian_63
   \   00000916   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000091A   0xF57F 0xAF30      BPL.W    ??line_to_destination_cartesian_61
    405                }
    406          
    407                if (g26_debug_flag)
   \                     ??line_to_destination_cartesian_63: (+1)
   \   0000091E   0x....             LDR.N    R0,??DataTable10_2
   \   00000920   0x7800             LDRB     R0,[R0, #+0]
   \   00000922   0x2800             CMP      R0,#+0
   \   00000924   0xD003             BEQ.N    ??line_to_destination_cartesian_50
    408                  debug_current_and_destination(PSTR("generic move done in ubl.line_to_destination_cartesian()"));
   \   00000926   0x.... 0x....      ADR.W    R0,`?<Constant "generic move done in ...">`
   \   0000092A   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
    409          
    410                if (current_position[X_AXIS] != end[X_AXIS] || current_position[Y_AXIS] != end[Y_AXIS])
   \                     ??line_to_destination_cartesian_50: (+1)
   \   0000092E   0x6828             LDR      R0,[R5, #+0]
   \   00000930   0x6821             LDR      R1,[R4, #+0]
   \   00000932   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000936   0xF47F 0xABD9      BNE.W    ??line_to_destination_cartesian_3
   \   0000093A   0x6868             LDR      R0,[R5, #+4]
   \   0000093C   0x6861             LDR      R1,[R4, #+4]
   \   0000093E   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000942   0xF47F 0xABD3      BNE.W    ??line_to_destination_cartesian_3
    411                  goto FINAL_MOVE;
    412          
    413                set_current_from_destination();
   \                     ??line_to_destination_cartesian_19: (+1)
   \   00000946   0x.... 0x....      BL       _Z28set_current_from_destinationv
    414              }
   \                     ??line_to_destination_cartesian_4: (+1)
   \   0000094A   0xB017             ADD      SP,SP,#+92
   \   0000094C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    415          #endif
    416          //  #else // UBL_SEGMENTED
    417          #if 1
    418              #if 1//IS_SCARA // scale the feed rate from mm/s to degrees/s

   \                                 In section .bss, align 4
    419                static float scara_feed_factor, scara_oldA, scara_oldB;
   \                     scara_feed_factor:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
    420              #endif
    421          
    422              // We don't want additional apply_leveling() performed by regular buffer_line or buffer_line_kinematic,
    423              // so we call buffer_segment directly here.  Per-segmented leveling and kinematics performed first.
    424          

   \                                 In section .text, align 4
    425              inline void /*_O2*/ ubl_buffer_segment_raw(const float (&in_raw)[XYZE], const float &fr) {
   \                     _Z22ubl_buffer_segment_rawRA4_KfRS_: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4605             MOV      R5,R0
   \   00000008   0x488E             LDR.N    R0,??ubl_buffer_segment_raw_0
   \   0000000A   0xF9B0 0x0058      LDRSH    R0,[R0, #+88]
   \   0000000E   0x0781             LSLS     R1,R0,#+30
   \   00000010   0xF140 0x80D6      BPL.W    ??ubl_buffer_segment_raw_1
    426          
    427                #if ENABLED(SKEW_CORRECTION)
    428                  float raw[XYZE] = { in_raw[X_AXIS], in_raw[Y_AXIS], in_raw[Z_AXIS], in_raw[E_AXIS] };
    429                  planner.skew(raw[X_AXIS], raw[Y_AXIS], raw[Z_AXIS]);
    430                #else
    431                  const float (&raw)[XYZE] = in_raw;
    432                #endif
    433          
    434                //#if ENABLED(DELTA)  // apply delta inverse_kinematics
    435                if(MACHINETPYE & DELTA )
    436                {
    437                  DELTA_IK(raw);
   \   00000014   0x4F8C             LDR.N    R7,??ubl_buffer_segment_raw_0+0x4
   \   00000016   0x6838             LDR      R0,[R7, #+0]
   \   00000018   0x6829             LDR      R1,[R5, #+0]
   \   0000001A   0x.... 0x....      BL       __aeabi_fsub
   \   0000001E   0x4680             MOV      R8,R0
   \   00000020   0xF04F 0x0902      MOV      R9,#+2
   \   00000024   0xF04F 0x547E      MOV      R4,#+1065353216
   \   00000028   0x4626             MOV      R6,R4
   \   0000002A   0xE004             B.N      ??ubl_buffer_segment_raw_2
   \                     ??ubl_buffer_segment_raw_3: (+1)
   \   0000002C   0x4640             MOV      R0,R8
   \   0000002E   0x4641             MOV      R1,R8
   \   00000030   0x.... 0x....      BL       __aeabi_fmul
   \   00000034   0x4680             MOV      R8,R0
   \                     ??ubl_buffer_segment_raw_2: (+1)
   \   00000036   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000003A   0xD504             BPL.N    ??ubl_buffer_segment_raw_4
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0x4641             MOV      R1,R8
   \   00000040   0x.... 0x....      BL       __aeabi_fmul
   \   00000044   0x4606             MOV      R6,R0
   \                     ??ubl_buffer_segment_raw_4: (+1)
   \   00000046   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   0000004A   0xD1EF             BNE.N    ??ubl_buffer_segment_raw_3
   \   0000004C   0x6878             LDR      R0,[R7, #+4]
   \   0000004E   0x6869             LDR      R1,[R5, #+4]
   \   00000050   0x.... 0x....      BL       __aeabi_fsub
   \   00000054   0x4680             MOV      R8,R0
   \   00000056   0xF04F 0x0902      MOV      R9,#+2
   \   0000005A   0x46A2             MOV      R10,R4
   \   0000005C   0xE004             B.N      ??ubl_buffer_segment_raw_5
   \                     ??ubl_buffer_segment_raw_6: (+1)
   \   0000005E   0x4640             MOV      R0,R8
   \   00000060   0x4641             MOV      R1,R8
   \   00000062   0x.... 0x....      BL       __aeabi_fmul
   \   00000066   0x4680             MOV      R8,R0
   \                     ??ubl_buffer_segment_raw_5: (+1)
   \   00000068   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000006C   0xD504             BPL.N    ??ubl_buffer_segment_raw_7
   \   0000006E   0x4650             MOV      R0,R10
   \   00000070   0x4641             MOV      R1,R8
   \   00000072   0x.... 0x....      BL       __aeabi_fmul
   \   00000076   0x4682             MOV      R10,R0
   \                     ??ubl_buffer_segment_raw_7: (+1)
   \   00000078   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   0000007C   0xD1EF             BNE.N    ??ubl_buffer_segment_raw_6
   \   0000007E   0x4630             MOV      R0,R6
   \   00000080   0x4651             MOV      R1,R10
   \   00000082   0x.... 0x....      BL       __aeabi_fadd
   \   00000086   0x4601             MOV      R1,R0
   \   00000088   0x4870             LDR.N    R0,??ubl_buffer_segment_raw_0+0x8
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0x.... 0x....      BL       __aeabi_fsub
   \   00000090   0x.... 0x....      BL       sqrtf
   \   00000094   0x4E6E             LDR.N    R6,??ubl_buffer_segment_raw_0+0xC
   \   00000096   0x68A9             LDR      R1,[R5, #+8]
   \   00000098   0x.... 0x....      BL       __aeabi_fadd
   \   0000009C   0x6030             STR      R0,[R6, #+0]
   \   0000009E   0x68B8             LDR      R0,[R7, #+8]
   \   000000A0   0x6829             LDR      R1,[R5, #+0]
   \   000000A2   0x.... 0x....      BL       __aeabi_fsub
   \   000000A6   0x4681             MOV      R9,R0
   \   000000A8   0xF04F 0x0A02      MOV      R10,#+2
   \   000000AC   0x46A0             MOV      R8,R4
   \   000000AE   0xE004             B.N      ??ubl_buffer_segment_raw_8
   \                     ??ubl_buffer_segment_raw_9: (+1)
   \   000000B0   0x4648             MOV      R0,R9
   \   000000B2   0x4649             MOV      R1,R9
   \   000000B4   0x.... 0x....      BL       __aeabi_fmul
   \   000000B8   0x4681             MOV      R9,R0
   \                     ??ubl_buffer_segment_raw_8: (+1)
   \   000000BA   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   000000BE   0xD504             BPL.N    ??ubl_buffer_segment_raw_10
   \   000000C0   0x4640             MOV      R0,R8
   \   000000C2   0x4649             MOV      R1,R9
   \   000000C4   0x.... 0x....      BL       __aeabi_fmul
   \   000000C8   0x4680             MOV      R8,R0
   \                     ??ubl_buffer_segment_raw_10: (+1)
   \   000000CA   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   000000CE   0xD1EF             BNE.N    ??ubl_buffer_segment_raw_9
   \   000000D0   0x68F8             LDR      R0,[R7, #+12]
   \   000000D2   0x6869             LDR      R1,[R5, #+4]
   \   000000D4   0x.... 0x....      BL       __aeabi_fsub
   \   000000D8   0x4683             MOV      R11,R0
   \   000000DA   0xF04F 0x0902      MOV      R9,#+2
   \   000000DE   0x46A2             MOV      R10,R4
   \   000000E0   0xE004             B.N      ??ubl_buffer_segment_raw_11
   \                     ??ubl_buffer_segment_raw_12: (+1)
   \   000000E2   0x4658             MOV      R0,R11
   \   000000E4   0x4659             MOV      R1,R11
   \   000000E6   0x.... 0x....      BL       __aeabi_fmul
   \   000000EA   0x4683             MOV      R11,R0
   \                     ??ubl_buffer_segment_raw_11: (+1)
   \   000000EC   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000000F0   0xD504             BPL.N    ??ubl_buffer_segment_raw_13
   \   000000F2   0x4650             MOV      R0,R10
   \   000000F4   0x4659             MOV      R1,R11
   \   000000F6   0x.... 0x....      BL       __aeabi_fmul
   \   000000FA   0x4682             MOV      R10,R0
   \                     ??ubl_buffer_segment_raw_13: (+1)
   \   000000FC   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   00000100   0xD1EF             BNE.N    ??ubl_buffer_segment_raw_12
   \   00000102   0x4640             MOV      R0,R8
   \   00000104   0x4651             MOV      R1,R10
   \   00000106   0x.... 0x....      BL       __aeabi_fadd
   \   0000010A   0x4601             MOV      R1,R0
   \   0000010C   0x484F             LDR.N    R0,??ubl_buffer_segment_raw_0+0x8
   \   0000010E   0x6840             LDR      R0,[R0, #+4]
   \   00000110   0x.... 0x....      BL       __aeabi_fsub
   \   00000114   0x.... 0x....      BL       sqrtf
   \   00000118   0x4601             MOV      R1,R0
   \   0000011A   0x68A8             LDR      R0,[R5, #+8]
   \   0000011C   0x.... 0x....      BL       __aeabi_fadd
   \   00000120   0x6070             STR      R0,[R6, #+4]
   \   00000122   0x6938             LDR      R0,[R7, #+16]
   \   00000124   0x6829             LDR      R1,[R5, #+0]
   \   00000126   0x.... 0x....      BL       __aeabi_fsub
   \   0000012A   0x4681             MOV      R9,R0
   \   0000012C   0xF04F 0x0A02      MOV      R10,#+2
   \   00000130   0x46A0             MOV      R8,R4
   \   00000132   0xE004             B.N      ??ubl_buffer_segment_raw_14
   \                     ??ubl_buffer_segment_raw_15: (+1)
   \   00000134   0x4648             MOV      R0,R9
   \   00000136   0x4649             MOV      R1,R9
   \   00000138   0x.... 0x....      BL       __aeabi_fmul
   \   0000013C   0x4681             MOV      R9,R0
   \                     ??ubl_buffer_segment_raw_14: (+1)
   \   0000013E   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   00000142   0xD504             BPL.N    ??ubl_buffer_segment_raw_16
   \   00000144   0x4640             MOV      R0,R8
   \   00000146   0x4649             MOV      R1,R9
   \   00000148   0x.... 0x....      BL       __aeabi_fmul
   \   0000014C   0x4680             MOV      R8,R0
   \                     ??ubl_buffer_segment_raw_16: (+1)
   \   0000014E   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   00000152   0xD1EF             BNE.N    ??ubl_buffer_segment_raw_15
   \   00000154   0x6978             LDR      R0,[R7, #+20]
   \   00000156   0x6869             LDR      R1,[R5, #+4]
   \   00000158   0x.... 0x....      BL       __aeabi_fsub
   \   0000015C   0x4607             MOV      R7,R0
   \   0000015E   0xF04F 0x0902      MOV      R9,#+2
   \   00000162   0xE004             B.N      ??ubl_buffer_segment_raw_17
   \                     ??ubl_buffer_segment_raw_18: (+1)
   \   00000164   0x4638             MOV      R0,R7
   \   00000166   0x4639             MOV      R1,R7
   \   00000168   0x.... 0x....      BL       __aeabi_fmul
   \   0000016C   0x4607             MOV      R7,R0
   \                     ??ubl_buffer_segment_raw_17: (+1)
   \   0000016E   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000172   0xD504             BPL.N    ??ubl_buffer_segment_raw_19
   \   00000174   0x4620             MOV      R0,R4
   \   00000176   0x4639             MOV      R1,R7
   \   00000178   0x.... 0x....      BL       __aeabi_fmul
   \   0000017C   0x4604             MOV      R4,R0
   \                     ??ubl_buffer_segment_raw_19: (+1)
   \   0000017E   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   00000182   0xD1EF             BNE.N    ??ubl_buffer_segment_raw_18
   \   00000184   0x4640             MOV      R0,R8
   \   00000186   0x4621             MOV      R1,R4
   \   00000188   0x.... 0x....      BL       __aeabi_fadd
   \   0000018C   0x4601             MOV      R1,R0
   \   0000018E   0x482F             LDR.N    R0,??ubl_buffer_segment_raw_0+0x8
   \   00000190   0x6880             LDR      R0,[R0, #+8]
   \   00000192   0x.... 0x....      BL       __aeabi_fsub
   \   00000196   0x.... 0x....      BL       sqrtf
   \   0000019A   0x4601             MOV      R1,R0
   \   0000019C   0x68A8             LDR      R0,[R5, #+8]
   \   0000019E   0x.... 0x....      BL       __aeabi_fadd
   \   000001A2   0x60B0             STR      R0,[R6, #+8]
    438                  planner.buffer_segment(delta[A_AXIS], delta[B_AXIS], delta[C_AXIS], in_raw[E_AXIS], fr, active_extruder);
   \   000001A4   0x482B             LDR.N    R0,??ubl_buffer_segment_raw_0+0x10
   \   000001A6   0x7800             LDRB     R0,[R0, #+0]
   \   000001A8   0x9001             STR      R0,[SP, #+4]
   \   000001AA   0x9804             LDR      R0,[SP, #+16]
   \   000001AC   0x9000             STR      R0,[SP, #+0]
   \   000001AE   0xF105 0x030C      ADD      R3,R5,#+12
   \   000001B2   0xF106 0x0208      ADD      R2,R6,#+8
   \   000001B6   0x1D31             ADDS     R1,R6,#+4
   \   000001B8   0x4630             MOV      R0,R6
   \   000001BA   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
   \   000001BE   0xE03D             B.N      ??ubl_buffer_segment_raw_20
    439                }
    440                //#elif IS_SCARA  // apply scara inverse_kinematics (should be changed to save raw->logical->raw)
    441                else if(MACHINETPYE & IS_SCARA)
   \                     ??ubl_buffer_segment_raw_1: (+1)
   \   000001C0   0xF44F 0x7140      MOV      R1,#+768
   \   000001C4   0x4208             TST      R0,R1
   \   000001C6   0xD02C             BEQ.N    ??ubl_buffer_segment_raw_21
    442                {
    443                  inverse_kinematics(raw);  // this writes delta[ABC] from raw[XYZE]
   \   000001C8   0x4628             MOV      R0,R5
   \   000001CA   0x.... 0x....      BL       _Z18inverse_kinematicsPKf
    444                                            // should move the feedrate scaling to scara inverse_kinematics
    445          
    446                  const float adiff = FABS(delta[A_AXIS] - scara_oldA),
   \   000001CE   0x4C22             LDR.N    R4,??ubl_buffer_segment_raw_0+0x14
   \   000001D0   0x4E1F             LDR.N    R6,??ubl_buffer_segment_raw_0+0xC
   \   000001D2   0x6830             LDR      R0,[R6, #+0]
   \   000001D4   0x6861             LDR      R1,[R4, #+4]
   \   000001D6   0x.... 0x....      BL       __aeabi_fsub
   \   000001DA   0xF020 0x4700      BIC      R7,R0,#0x80000000
    447                              bdiff = FABS(delta[B_AXIS] - scara_oldB);
   \   000001DE   0x6870             LDR      R0,[R6, #+4]
   \   000001E0   0x68A1             LDR      R1,[R4, #+8]
   \   000001E2   0x.... 0x....      BL       __aeabi_fsub
   \   000001E6   0xF020 0x4000      BIC      R0,R0,#0x80000000
    448                  scara_oldA = delta[A_AXIS];
   \   000001EA   0x6831             LDR      R1,[R6, #+0]
   \   000001EC   0x6061             STR      R1,[R4, #+4]
    449                  scara_oldB = delta[B_AXIS];
   \   000001EE   0x6871             LDR      R1,[R6, #+4]
   \   000001F0   0x60A1             STR      R1,[R4, #+8]
    450                  float s_feedrate = max(adiff, bdiff) * scara_feed_factor;
   \   000001F2   0x4639             MOV      R1,R7
   \   000001F4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001F8   0xD300             BCC.N    ??ubl_buffer_segment_raw_22
   \   000001FA   0x4607             MOV      R7,R0
   \                     ??ubl_buffer_segment_raw_22: (+1)
   \   000001FC   0x6820             LDR      R0,[R4, #+0]
   \   000001FE   0x4639             MOV      R1,R7
   \   00000200   0x.... 0x....      BL       __aeabi_fmul
   \   00000204   0x9002             STR      R0,[SP, #+8]
    451          
    452                  planner.buffer_segment(delta[A_AXIS], delta[B_AXIS], delta[C_AXIS], in_raw[E_AXIS], s_feedrate, active_extruder);
   \   00000206   0x4813             LDR.N    R0,??ubl_buffer_segment_raw_0+0x10
   \   00000208   0x7800             LDRB     R0,[R0, #+0]
   \   0000020A   0x9001             STR      R0,[SP, #+4]
   \   0000020C   0xA802             ADD      R0,SP,#+8
   \   0000020E   0x9000             STR      R0,[SP, #+0]
   \   00000210   0xF105 0x030C      ADD      R3,R5,#+12
   \   00000214   0xF106 0x0208      ADD      R2,R6,#+8
   \   00000218   0x1D31             ADDS     R1,R6,#+4
   \   0000021A   0x4630             MOV      R0,R6
   \   0000021C   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
   \   00000220   0xE00C             B.N      ??ubl_buffer_segment_raw_20
    453                }
    454                //#else // CARTESIAN
    455                else
    456                {
    457                  planner.buffer_segment(raw[X_AXIS], raw[Y_AXIS], raw[Z_AXIS], in_raw[E_AXIS], fr, active_extruder);
   \                     ??ubl_buffer_segment_raw_21: (+1)
   \   00000222   0x480C             LDR.N    R0,??ubl_buffer_segment_raw_0+0x10
   \   00000224   0x7800             LDRB     R0,[R0, #+0]
   \   00000226   0x9001             STR      R0,[SP, #+4]
   \   00000228   0x9804             LDR      R0,[SP, #+16]
   \   0000022A   0x9000             STR      R0,[SP, #+0]
   \   0000022C   0xF105 0x030C      ADD      R3,R5,#+12
   \   00000230   0xF105 0x0208      ADD      R2,R5,#+8
   \   00000234   0x1D29             ADDS     R1,R5,#+4
   \   00000236   0x4628             MOV      R0,R5
   \   00000238   0x.... 0x....      BL       _ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_h
    458                }
    459                //#endif
    460              }
   \                     ??ubl_buffer_segment_raw_20: (+1)
   \   0000023C   0xB005             ADD      SP,SP,#+20
   \   0000023E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   00000242   0xBF00             Nop      
   \                     ??ubl_buffer_segment_raw_0:
   \   00000244   0x........         DC32     mksCfg
   \   00000248   0x........         DC32     delta_tower
   \   0000024C   0x........         DC32     delta_diagonal_rod_2_tower
   \   00000250   0x........         DC32     delta
   \   00000254   0x........         DC32     active_extruder
   \   00000258   0x........         DC32     scara_feed_factor
    461          
    462              //#if IS_SCARA
    463                #define DELTA_SEGMENT_MIN_LENGTH_IS_SCARA 0.25 // SCARA minimum segment size is 0.25mm
    464              //#elif ENABLED(DELTA)
    465                #define DELTA_SEGMENT_MIN_LENGTH_IS_DELTA 0.10 // mm (still subject to DELTA_SEGMENTS_PER_SECOND)
    466              //#else // CARTESIAN
    467                //#ifdef LEVELED_SEGMENT_LENGTH
    468                  #define DELTA_SEGMENT_MIN_LENGTH_SEG_LENGTH LEVELED_SEGMENT_LENGTH
    469                //#else
    470                  #define DELTA_SEGMENT_MIN_LENGTH_IS_CARTESIAN 1.00 // mm (similar to G2/G3 arc segmentation)
    471                //#endif
    472              //#endif
    473          
    474              /**
    475               * Prepare a segmented linear move for DELTA/SCARA/CARTESIAN with UBL and FADE semantics.
    476               * This calls planner.buffer_segment multiple times for small incremental moves.
    477               * Returns true if did NOT move, false if moved (requires current_position update).
    478               */
    479          

   \                                 In section .text, align 2, keep-with-next
    480              bool /*_O2*/ unified_bed_leveling::prepare_segmented_line_to(const float (&rtarget)[XYZE], const float &feedrate) {
   \                     _ZN20unified_bed_leveling25prepare_segmented_line_toERA4_KfRS0_: (+1)
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB095             SUB      SP,SP,#+84
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable11
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   \   0000000C   0xF8B0 0x0050      LDRH     R0,[R0, #+80]
   \   00000010   0xF240 0x3102      MOVW     R1,#+770
   \   00000014   0x4208             TST      R0,R1
   \   00000016   0xD00F             BEQ.N    ??prepare_segmented_line_to_0
    481          
    482                if(MACHINETPYE & IS_KINEMATIC)
    483                if (!position_is_reachable_IS_KINEMATIC(rtarget[X_AXIS], rtarget[Y_AXIS]))  // fail if moving outside reachable boundary
   \   00000018   0x9815             LDR      R0,[SP, #+84]
   \   0000001A   0x1D01             ADDS     R1,R0,#+4
   \   0000001C   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD005             BEQ.N    ??prepare_segmented_line_to_1
    484                  return true; // did not move, so current_position still accurate
    485                else
    486                if (!position_is_reachable_IS_CARTESIAN(rtarget[X_AXIS], rtarget[Y_AXIS]))  // fail if moving outside reachable boundary
   \   00000024   0x9815             LDR      R0,[SP, #+84]
   \   00000026   0x1D01             ADDS     R1,R0,#+4
   \   00000028   0x.... 0x....      BL       _Z34position_is_reachable_IS_CARTESIANRKfS0_
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD103             BNE.N    ??prepare_segmented_line_to_0
    487                  return true; // did not move, so current_position still accurate
   \                     ??prepare_segmented_line_to_1: (+1)
   \   00000030   0x2001             MOVS     R0,#+1
   \                     ??prepare_segmented_line_to_2: (+1)
   \   00000032   0xB017             ADD      SP,SP,#+92
   \   00000034   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    488                  
    489                const float total[XYZE] = {
   \                     ??prepare_segmented_line_to_0: (+1)
   \   00000038   0x.... 0x....      LDR.W    R5,??DataTable11_1
   \   0000003C   0x9815             LDR      R0,[SP, #+84]
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x6829             LDR      R1,[R5, #+0]
   \   00000042   0x.... 0x....      BL       __aeabi_fsub
   \   00000046   0x4680             MOV      R8,R0
   \   00000048   0x9815             LDR      R0,[SP, #+84]
   \   0000004A   0x6840             LDR      R0,[R0, #+4]
   \   0000004C   0x6869             LDR      R1,[R5, #+4]
   \   0000004E   0x.... 0x....      BL       __aeabi_fsub
   \   00000052   0x4606             MOV      R6,R0
   \   00000054   0x9815             LDR      R0,[SP, #+84]
   \   00000056   0x6880             LDR      R0,[R0, #+8]
   \   00000058   0x68A9             LDR      R1,[R5, #+8]
   \   0000005A   0x.... 0x....      BL       __aeabi_fsub
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0x9815             LDR      R0,[SP, #+84]
   \   00000062   0x68C0             LDR      R0,[R0, #+12]
   \   00000064   0x68E9             LDR      R1,[R5, #+12]
   \   00000066   0x.... 0x....      BL       __aeabi_fsub
   \   0000006A   0x4681             MOV      R9,R0
    490                  rtarget[X_AXIS] - current_position[X_AXIS],
    491                  rtarget[Y_AXIS] - current_position[Y_AXIS],
    492                  rtarget[Z_AXIS] - current_position[Z_AXIS],
    493                  rtarget[E_AXIS] - current_position[E_AXIS]
    494                };
    495          
    496                const float cartesian_xy_mm = HYPOT(total[X_AXIS], total[Y_AXIS]);  // total horizontal xy distance
   \   0000006C   0x46C2             MOV      R10,R8
   \   0000006E   0x2702             MOVS     R7,#+2
   \   00000070   0xF04F 0x5B7E      MOV      R11,#+1065353216
   \   00000074   0x465C             MOV      R4,R11
   \   00000076   0xE004             B.N      ??prepare_segmented_line_to_3
   \                     ??prepare_segmented_line_to_4: (+1)
   \   00000078   0x4650             MOV      R0,R10
   \   0000007A   0x4651             MOV      R1,R10
   \   0000007C   0x.... 0x....      BL       __aeabi_fmul
   \   00000080   0x4682             MOV      R10,R0
   \                     ??prepare_segmented_line_to_3: (+1)
   \   00000082   0x07F8             LSLS     R0,R7,#+31
   \   00000084   0xD504             BPL.N    ??prepare_segmented_line_to_5
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x4651             MOV      R1,R10
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x4604             MOV      R4,R0
   \                     ??prepare_segmented_line_to_5: (+1)
   \   00000090   0x087F             LSRS     R7,R7,#+1
   \   00000092   0xD1F1             BNE.N    ??prepare_segmented_line_to_4
   \   00000094   0x4637             MOV      R7,R6
   \   00000096   0xF04F 0x0A02      MOV      R10,#+2
   \   0000009A   0xE004             B.N      ??prepare_segmented_line_to_6
   \                     ??prepare_segmented_line_to_7: (+1)
   \   0000009C   0x4638             MOV      R0,R7
   \   0000009E   0x4639             MOV      R1,R7
   \   000000A0   0x.... 0x....      BL       __aeabi_fmul
   \   000000A4   0x4607             MOV      R7,R0
   \                     ??prepare_segmented_line_to_6: (+1)
   \   000000A6   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   000000AA   0xD504             BPL.N    ??prepare_segmented_line_to_8
   \   000000AC   0x4658             MOV      R0,R11
   \   000000AE   0x4639             MOV      R1,R7
   \   000000B0   0x.... 0x....      BL       __aeabi_fmul
   \   000000B4   0x4683             MOV      R11,R0
   \                     ??prepare_segmented_line_to_8: (+1)
   \   000000B6   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   000000BA   0xD1EF             BNE.N    ??prepare_segmented_line_to_7
   \   000000BC   0x4620             MOV      R0,R4
   \   000000BE   0x4659             MOV      R1,R11
   \   000000C0   0x.... 0x....      BL       __aeabi_fadd
   \   000000C4   0x.... 0x....      BL       sqrtf
   \   000000C8   0x4607             MOV      R7,R0
    497                float seconds;
    498                uint16_t segments,seglimit;
    499          
    500                //#if IS_KINEMATIC
    501                if(MACHINETPYE & IS_SCARA)
   \   000000CA   0x9802             LDR      R0,[SP, #+8]
   \   000000CC   0xF9B0 0x0050      LDRSH    R0,[R0, #+80]
   \   000000D0   0xF44F 0x7140      MOV      R1,#+768
   \   000000D4   0x4208             TST      R0,R1
   \   000000D6   0xD01A             BEQ.N    ??prepare_segmented_line_to_9
    502                  {
    503                  seconds = cartesian_xy_mm / feedrate;                                  // seconds to move xy distance at requested rate
    504                  segments = lroundf(delta_segments_per_second * seconds);                  // preferred number of segments for distance @ feedrate
   \   000000D8   0x4638             MOV      R0,R7
   \   000000DA   0x9916             LDR      R1,[SP, #+88]
   \   000000DC   0x6809             LDR      R1,[R1, #+0]
   \   000000DE   0x.... 0x....      BL       __aeabi_fdiv
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000E6   0x6809             LDR      R1,[R1, #+0]
   \   000000E8   0x.... 0x....      BL       __aeabi_fmul
   \   000000EC   0x.... 0x....      BL       lroundf
   \   000000F0   0x4604             MOV      R4,R0
    505                  seglimit = lroundf(cartesian_xy_mm * (1.0 / (DELTA_SEGMENT_MIN_LENGTH_IS_SCARA))); // number of segments at minimum segment length
   \   000000F2   0xF04F 0x4081      MOV      R0,#+1082130432
   \   000000F6   0x4639             MOV      R1,R7
   \   000000F8   0x.... 0x....      BL       __aeabi_fmul
   \   000000FC   0x.... 0x....      BL       lroundf
    506                  NOMORE(segments, seglimit);                                                        // limit to minimum segment length (fewer segments)
   \   00000100   0xB280             UXTH     R0,R0
   \   00000102   0xB2A4             UXTH     R4,R4
   \   00000104   0x42A0             CMP      R0,R4
   \   00000106   0xD900             BLS.N    ??prepare_segmented_line_to_10
   \   00000108   0x4620             MOV      R0,R4
   \                     ??prepare_segmented_line_to_10: (+1)
   \   0000010A   0x4604             MOV      R4,R0
   \   0000010C   0xE029             B.N      ??prepare_segmented_line_to_11
    507                  }
    508                else if(MACHINETPYE & DELTA)
   \                     ??prepare_segmented_line_to_9: (+1)
   \   0000010E   0x0780             LSLS     R0,R0,#+30
   \   00000110   0x4638             MOV      R0,R7
   \   00000112   0xD519             BPL.N    ??prepare_segmented_line_to_12
    509                  {
    510                    seconds = cartesian_xy_mm / feedrate;                                  // seconds to move xy distance at requested rate
    511                    segments = lroundf(delta_segments_per_second * seconds);                 // preferred number of segments for distance @ feedrate
   \   00000114   0x9916             LDR      R1,[SP, #+88]
   \   00000116   0x6809             LDR      R1,[R1, #+0]
   \   00000118   0x.... 0x....      BL       __aeabi_fdiv
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000120   0x6809             LDR      R1,[R1, #+0]
   \   00000122   0x.... 0x....      BL       __aeabi_fmul
   \   00000126   0x.... 0x....      BL       lroundf
   \   0000012A   0x4604             MOV      R4,R0
    512                    seglimit = lroundf(cartesian_xy_mm * (1.0 / (DELTA_SEGMENT_MIN_LENGTH_IS_DELTA))); // number of segments at minimum segment length
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable11_3  ;; 0x41200000
   \   00000130   0x4639             MOV      R1,R7
   \   00000132   0x.... 0x....      BL       __aeabi_fmul
   \   00000136   0x.... 0x....      BL       lroundf
    513                    NOMORE(segments, seglimit);                                                        // limit to minimum segment length (fewer segments)
   \   0000013A   0xB280             UXTH     R0,R0
   \   0000013C   0xB2A4             UXTH     R4,R4
   \   0000013E   0x42A0             CMP      R0,R4
   \   00000140   0xD900             BLS.N    ??prepare_segmented_line_to_13
   \   00000142   0x4620             MOV      R0,R4
   \                     ??prepare_segmented_line_to_13: (+1)
   \   00000144   0x4604             MOV      R4,R0
   \   00000146   0xE00C             B.N      ??prepare_segmented_line_to_11
    514                  
    515                  }
    516                //#else
    517                else
    518                {
    519                  #ifdef LEVELED_SEGMENT_LENGTH
    520                  segments = lroundf(cartesian_xy_mm * (1.0 / (DELTA_SEGMENT_MIN_LENGTH_SEG_LENGTH))); // cartesian fixed segment length
   \                     ??prepare_segmented_line_to_12: (+1)
   \   00000148   0x.... 0x....      BL       __aeabi_f2d
   \   0000014C   0x.... 0x....      LDR.W    R2,??DataTable11_4  ;; 0x9999999a
   \   00000150   0x.... 0x....      LDR.W    R3,??DataTable11_5  ;; 0x3fc99999
   \   00000154   0x.... 0x....      BL       __aeabi_dmul
   \   00000158   0x.... 0x....      BL       __aeabi_d2f
   \   0000015C   0x.... 0x....      BL       lroundf
   \   00000160   0x4604             MOV      R4,R0
    521                  #else
    522                  segments = lroundf(cartesian_xy_mm * (1.0 / (DELTA_SEGMENT_MIN_LENGTH_IS_CARTESIAN)));
    523                  #endif
    524                }
    525                //#endif
    526          
    527                NOLESS(segments, 1);                        // must have at least one segment
   \                     ??prepare_segmented_line_to_11: (+1)
   \   00000162   0xB2A4             UXTH     R4,R4
   \   00000164   0x2C00             CMP      R4,#+0
   \   00000166   0xD100             BNE.N    ??prepare_segmented_line_to_14
   \   00000168   0x2401             MOVS     R4,#+1
    528                const float inv_segments = 1.0 / segments;  // divide once, multiply thereafter
   \                     ??prepare_segmented_line_to_14: (+1)
   \   0000016A   0x4620             MOV      R0,R4
   \   0000016C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000170   0x4601             MOV      R1,R0
   \   00000172   0xF04F 0x507E      MOV      R0,#+1065353216
   \   00000176   0x.... 0x....      BL       __aeabi_fdiv
   \   0000017A   0x4682             MOV      R10,R0
    529          
    530                //#if IS_SCARA // scale the feed rate from mm/s to degrees/s
    531                if(MACHINETPYE & IS_SCARA)
   \   0000017C   0x9802             LDR      R0,[SP, #+8]
   \   0000017E   0xF8B0 0x0050      LDRH     R0,[R0, #+80]
   \   00000182   0xF44F 0x7140      MOV      R1,#+768
   \   00000186   0x4208             TST      R0,R1
   \   00000188   0xD015             BEQ.N    ??prepare_segmented_line_to_15
    532                {
    533                  scara_feed_factor = cartesian_xy_mm * inv_segments * feedrate;
   \   0000018A   0x.... 0x....      LDR.W    R11,??DataTable11_6
   \   0000018E   0x4638             MOV      R0,R7
   \   00000190   0x4651             MOV      R1,R10
   \   00000192   0x.... 0x....      BL       __aeabi_fmul
   \   00000196   0x9916             LDR      R1,[SP, #+88]
   \   00000198   0x6809             LDR      R1,[R1, #+0]
   \   0000019A   0x.... 0x....      BL       __aeabi_fmul
   \   0000019E   0xF8CB 0x0000      STR      R0,[R11, #+0]
    534                  scara_oldA = stepper.get_axis_position_degrees(A_AXIS);
   \   000001A2   0x2000             MOVS     R0,#+0
   \   000001A4   0x.... 0x....      BL       _ZN7Stepper25get_axis_position_degreesE8AxisEnum
   \   000001A8   0xF8CB 0x0004      STR      R0,[R11, #+4]
    535                  scara_oldB = stepper.get_axis_position_degrees(B_AXIS);
   \   000001AC   0x2001             MOVS     R0,#+1
   \   000001AE   0x.... 0x....      BL       _ZN7Stepper25get_axis_position_degreesE8AxisEnum
   \   000001B2   0xF8CB 0x0008      STR      R0,[R11, #+8]
    536                }
    537                //#endif
    538          
    539                const float diff[XYZE] = {
   \                     ??prepare_segmented_line_to_15: (+1)
   \   000001B6   0x4640             MOV      R0,R8
   \   000001B8   0x4651             MOV      R1,R10
   \   000001BA   0x.... 0x....      BL       __aeabi_fmul
   \   000001BE   0x9010             STR      R0,[SP, #+64]
   \   000001C0   0x4630             MOV      R0,R6
   \   000001C2   0x4651             MOV      R1,R10
   \   000001C4   0x.... 0x....      BL       __aeabi_fmul
   \   000001C8   0x9011             STR      R0,[SP, #+68]
   \   000001CA   0x9800             LDR      R0,[SP, #+0]
   \   000001CC   0x4651             MOV      R1,R10
   \   000001CE   0x.... 0x....      BL       __aeabi_fmul
   \   000001D2   0x9012             STR      R0,[SP, #+72]
   \   000001D4   0x4648             MOV      R0,R9
   \   000001D6   0x4651             MOV      R1,R10
   \   000001D8   0x.... 0x....      BL       __aeabi_fmul
   \   000001DC   0x9013             STR      R0,[SP, #+76]
    540                  total[X_AXIS] * inv_segments,
    541                  total[Y_AXIS] * inv_segments,
    542                  total[Z_AXIS] * inv_segments,
    543                  total[E_AXIS] * inv_segments
    544                };
    545          
    546                // Note that E segment distance could vary slightly as z mesh height
    547                // changes for each segment, but small enough to ignore.
    548          
    549                float raw[XYZE] = {
   \   000001DE   0x6828             LDR      R0,[R5, #+0]
   \   000001E0   0x9009             STR      R0,[SP, #+36]
   \   000001E2   0x6868             LDR      R0,[R5, #+4]
   \   000001E4   0x900A             STR      R0,[SP, #+40]
   \   000001E6   0x68A8             LDR      R0,[R5, #+8]
   \   000001E8   0x900B             STR      R0,[SP, #+44]
   \   000001EA   0x68E8             LDR      R0,[R5, #+12]
   \   000001EC   0x900C             STR      R0,[SP, #+48]
    550                  current_position[X_AXIS],
    551                  current_position[Y_AXIS],
    552                  current_position[Z_AXIS],
    553                  current_position[E_AXIS]
    554                };
    555          
    556                // Only compute leveling per segment if ubl active and target below z_fade_height.
    557                if (!planner.leveling_active || !planner.leveling_active_at_z(rtarget[Z_AXIS])) {   // no mesh leveling
   \   000001EE   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \   000001F2   0x7800             LDRB     R0,[R0, #+0]
   \   000001F4   0x2800             CMP      R0,#+0
   \   000001F6   0xD01E             BEQ.N    ??prepare_segmented_line_to_16
   \   000001F8   0x9815             LDR      R0,[SP, #+84]
   \   000001FA   0x3008             ADDS     R0,R0,#+8
   \   000001FC   0x.... 0x....      BL       _ZN7Planner20leveling_active_at_zERKf
   \   00000200   0x2800             CMP      R0,#+0
   \   00000202   0xD018             BEQ.N    ??prepare_segmented_line_to_16
    558                  while (--segments) {
    559                    LOOP_XYZE(i) raw[i] += diff[i];
    560                    ubl_buffer_segment_raw(raw, feedrate);
    561                  }
    562                  ubl_buffer_segment_raw(rtarget, feedrate);
    563                  return false; // moved but did not set_current_from_destination();
    564                }
    565          
    566                // Otherwise perform per-segment leveling
    567          
    568                #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
    569                  const float fade_scaling_factor = planner.fade_scaling_factor_for_z(rtarget[Z_AXIS]);
   \   00000204   0x9815             LDR      R0,[SP, #+84]
   \   00000206   0x3008             ADDS     R0,R0,#+8
   \   00000208   0x.... 0x....      BL       _ZN7Planner25fade_scaling_factor_for_zERKf
   \   0000020C   0x9014             STR      R0,[SP, #+80]
    570                #endif
    571          
    572                // increment to first segment destination
    573                LOOP_XYZE(i) raw[i] += diff[i];
   \   0000020E   0x2500             MOVS     R5,#+0
   \   00000210   0xE029             B.N      ??prepare_segmented_line_to_17
   \                     ??prepare_segmented_line_to_18: (+1)
   \   00000212   0xA809             ADD      R0,SP,#+36
   \   00000214   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000218   0xA910             ADD      R1,SP,#+64
   \   0000021A   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   0000021E   0x.... 0x....      BL       __aeabi_fadd
   \   00000222   0xA909             ADD      R1,SP,#+36
   \   00000224   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
   \   00000228   0x1C6D             ADDS     R5,R5,#+1
   \                     ??prepare_segmented_line_to_19: (+1)
   \   0000022A   0x2D04             CMP      R5,#+4
   \   0000022C   0xDBF1             BLT.N    ??prepare_segmented_line_to_18
   \   0000022E   0x9916             LDR      R1,[SP, #+88]
   \   00000230   0xA809             ADD      R0,SP,#+36
   \   00000232   0x.... 0x....      BL       _Z22ubl_buffer_segment_rawRA4_KfRS_
   \                     ??prepare_segmented_line_to_16: (+1)
   \   00000236   0x1E64             SUBS     R4,R4,#+1
   \   00000238   0xB2A4             UXTH     R4,R4
   \   0000023A   0x2C00             CMP      R4,#+0
   \   0000023C   0xD001             BEQ.N    ??prepare_segmented_line_to_20
   \   0000023E   0x2500             MOVS     R5,#+0
   \   00000240   0xE7F3             B.N      ??prepare_segmented_line_to_19
   \                     ??prepare_segmented_line_to_20: (+1)
   \   00000242   0x9916             LDR      R1,[SP, #+88]
   \   00000244   0x9815             LDR      R0,[SP, #+84]
   \   00000246   0x.... 0x....      BL       _Z22ubl_buffer_segment_rawRA4_KfRS_
   \   0000024A   0x2000             MOVS     R0,#+0
   \   0000024C   0xE6F1             B.N      ??prepare_segmented_line_to_2
   \                     ??prepare_segmented_line_to_21: (+1)
   \   0000024E   0xA809             ADD      R0,SP,#+36
   \   00000250   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000254   0xA910             ADD      R1,SP,#+64
   \   00000256   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   0000025A   0x.... 0x....      BL       __aeabi_fadd
   \   0000025E   0xA909             ADD      R1,SP,#+36
   \   00000260   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
   \   00000264   0x1C6D             ADDS     R5,R5,#+1
   \                     ??prepare_segmented_line_to_17: (+1)
   \   00000266   0x2D04             CMP      R5,#+4
   \   00000268   0xDBF1             BLT.N    ??prepare_segmented_line_to_21
   \                     ??prepare_segmented_line_to_22: (+1)
   \   0000026A   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   0000026E   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000272   0x.... 0x....      BL       __aeabi_ui2f
   \   00000276   0x4605             MOV      R5,R0
   \   00000278   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \   0000027C   0x9003             STR      R0,[SP, #+12]
   \   0000027E   0x9802             LDR      R0,[SP, #+8]
   \   00000280   0xF8B0 0x0050      LDRH     R0,[R0, #+80]
   \   00000284   0xF240 0x3102      MOVW     R1,#+770
   \   00000288   0x4208             TST      R0,R1
   \   0000028A   0xD048             BEQ.N    ??prepare_segmented_line_to_23
    574          
    575                for(;;) {  // for each mesh cell encountered during the move
    576          
    577                  // Compute mesh cell invariants that remain constant for all segments within cell.
    578                  // Note for cell index, if point is outside the mesh grid (in MESH_INSET perimeter)
    579                  // the bilinear interpolation from the adjacent cell within the mesh will still work.
    580                  // Inner loop will exit each time (because out of cell bounds) but will come back
    581                  // in top of loop and again re-find same adjacent cell and use it, just less efficient
    582                  // for mesh inset area.
    583          
    584                  //int8_t cell_xi = (raw[X_AXIS] - (MESH_MIN_X)) * (1.0 / (MESH_X_DIST)),
    585                  //       cell_yi = (raw[Y_AXIS] - (MESH_MIN_Y)) * (1.0 / (MESH_X_DIST));
    586                  int8_t cell_xi,cell_yi;
    587                  if(MACHINETPYE & IS_KINEMATIC)
    588                  {
    589                     cell_xi = (raw[X_AXIS] - (MESH_MIN_X_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC)); 
                                    ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   0000028C   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000290   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000294   0x1E40             SUBS     R0,R0,#+1
   \   00000296   0x.... 0x....      BL       __aeabi_i2f
   \   0000029A   0x4606             MOV      R6,R0
   \   0000029C   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   000002A0   0x6800             LDR      R0,[R0, #+0]
   \   000002A2   0x4629             MOV      R1,R5
   \   000002A4   0x.... 0x....      BL       __aeabi_fadd
   \   000002A8   0x4607             MOV      R7,R0
   \   000002AA   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   000002AE   0x6840             LDR      R0,[R0, #+4]
   \   000002B0   0x4629             MOV      R1,R5
   \   000002B2   0x.... 0x....      BL       __aeabi_fsub
   \   000002B6   0x4639             MOV      R1,R7
   \   000002B8   0x.... 0x....      BL       __aeabi_fsub
   \   000002BC   0x4631             MOV      R1,R6
   \   000002BE   0x.... 0x....      BL       __aeabi_fdiv
   \   000002C2   0x.... 0x....      BL       __aeabi_f2d
   \   000002C6   0x4602             MOV      R2,R0
   \   000002C8   0x460B             MOV      R3,R1
   \   000002CA   0x2000             MOVS     R0,#+0
   \   000002CC   0x.... 0x....      LDR.W    R1,??DataTable11_11  ;; 0x3ff00000
   \   000002D0   0x.... 0x....      BL       __aeabi_ddiv
   \   000002D4   0x4680             MOV      R8,R0
   \   000002D6   0x4689             MOV      R9,R1
   \   000002D8   0x9809             LDR      R0,[SP, #+36]
   \   000002DA   0x4639             MOV      R1,R7
   \   000002DC   0x.... 0x....      BL       __aeabi_fsub
   \   000002E0   0x.... 0x....      BL       __aeabi_f2d
   \   000002E4   0x4642             MOV      R2,R8
   \   000002E6   0x464B             MOV      R3,R9
   \   000002E8   0x.... 0x....      BL       __aeabi_dmul
   \   000002EC   0x.... 0x....      BL       __aeabi_d2iz
   \   000002F0   0x4607             MOV      R7,R0
   \   000002F2   0xB27F             SXTB     R7,R7
    590                     cell_yi = (raw[Y_AXIS] - (MESH_MIN_Y_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
                                    ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   000002F4   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   000002F8   0x6880             LDR      R0,[R0, #+8]
   \   000002FA   0x4629             MOV      R1,R5
   \   000002FC   0x.... 0x....      BL       __aeabi_fadd
   \   00000300   0x4601             MOV      R1,R0
   \   00000302   0x980A             LDR      R0,[SP, #+40]
   \   00000304   0x.... 0x....      BL       __aeabi_fsub
   \   00000308   0x.... 0x....      BL       __aeabi_f2d
   \   0000030C   0x4642             MOV      R2,R8
   \   0000030E   0x464B             MOV      R3,R9
   \   00000310   0x.... 0x....      BL       __aeabi_dmul
   \   00000314   0x.... 0x....      BL       __aeabi_d2iz
   \   00000318   0x4606             MOV      R6,R0
   \   0000031A   0xB276             SXTB     R6,R6
   \   0000031C   0xE0AD             B.N      ??prepare_segmented_line_to_24
    591                  }
    592                  else
    593                  {
    594                     cell_xi = (raw[X_AXIS] - (MESH_MIN_X_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian)); 
                                    ^
Warning[Pa093]: implicit conversion from floating point to integer
   \                     ??prepare_segmented_line_to_23: (+1)
   \   0000031E   0x9802             LDR      R0,[SP, #+8]
   \   00000320   0x68C6             LDR      R6,[R0, #+12]
   \   00000322   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000326   0x4631             MOV      R1,R6
   \   00000328   0x.... 0x....      BL       __aeabi_fmul
   \   0000032C   0x4683             MOV      R11,R0
   \   0000032E   0x4659             MOV      R1,R11
   \   00000330   0x.... 0x....      BL       __aeabi_fsub
   \   00000334   0x4629             MOV      R1,R5
   \   00000336   0x.... 0x....      BL       __aeabi_fadd
   \   0000033A   0x4681             MOV      R9,R0
   \   0000033C   0x9803             LDR      R0,[SP, #+12]
   \   0000033E   0xF8D0 0xA00C      LDR      R10,[R0, #+12]
   \   00000342   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000346   0x6880             LDR      R0,[R0, #+8]
   \   00000348   0x4651             MOV      R1,R10
   \   0000034A   0x.... 0x....      BL       __aeabi_fadd
   \   0000034E   0x4680             MOV      R8,R0
   \   00000350   0x4649             MOV      R1,R9
   \   00000352   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000356   0xD201             BCS.N    ??prepare_segmented_line_to_25
   \   00000358   0x464F             MOV      R7,R9
   \   0000035A   0xE000             B.N      ??prepare_segmented_line_to_26
   \                     ??prepare_segmented_line_to_25: (+1)
   \   0000035C   0x4647             MOV      R7,R8
   \                     ??prepare_segmented_line_to_26: (+1)
   \   0000035E   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000362   0x4659             MOV      R1,R11
   \   00000364   0x.... 0x....      BL       __aeabi_fmul
   \   00000368   0x4629             MOV      R1,R5
   \   0000036A   0x.... 0x....      BL       __aeabi_fsub
   \   0000036E   0x4683             MOV      R11,R0
   \   00000370   0x4630             MOV      R0,R6
   \   00000372   0x4651             MOV      R1,R10
   \   00000374   0x.... 0x....      BL       __aeabi_fadd
   \   00000378   0x4682             MOV      R10,R0
   \   0000037A   0x4658             MOV      R0,R11
   \   0000037C   0x4651             MOV      R1,R10
   \   0000037E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000382   0xD202             BCS.N    ??prepare_segmented_line_to_27
   \   00000384   0xF8CD 0xB014      STR      R11,[SP, #+20]
   \   00000388   0xE001             B.N      ??prepare_segmented_line_to_28
   \                     ??prepare_segmented_line_to_27: (+1)
   \   0000038A   0xF8CD 0xA014      STR      R10,[SP, #+20]
   \                     ??prepare_segmented_line_to_28: (+1)
   \   0000038E   0x4640             MOV      R0,R8
   \   00000390   0x4649             MOV      R1,R9
   \   00000392   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000396   0xD202             BCS.N    ??prepare_segmented_line_to_29
   \   00000398   0xF8CD 0x9010      STR      R9,[SP, #+16]
   \   0000039C   0xE001             B.N      ??prepare_segmented_line_to_30
   \                     ??prepare_segmented_line_to_29: (+1)
   \   0000039E   0xF8CD 0x8010      STR      R8,[SP, #+16]
   \                     ??prepare_segmented_line_to_30: (+1)
   \   000003A2   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000003A6   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   000003AA   0x1E40             SUBS     R0,R0,#+1
   \   000003AC   0x.... 0x....      BL       __aeabi_i2f
   \   000003B0   0x4606             MOV      R6,R0
   \   000003B2   0x9809             LDR      R0,[SP, #+36]
   \   000003B4   0x4639             MOV      R1,R7
   \   000003B6   0x.... 0x....      BL       __aeabi_fsub
   \   000003BA   0x.... 0x....      BL       __aeabi_f2d
   \   000003BE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000003C2   0x9805             LDR      R0,[SP, #+20]
   \   000003C4   0x9904             LDR      R1,[SP, #+16]
   \   000003C6   0x.... 0x....      BL       __aeabi_fsub
   \   000003CA   0x4631             MOV      R1,R6
   \   000003CC   0x.... 0x....      BL       __aeabi_fdiv
   \   000003D0   0x.... 0x....      BL       __aeabi_f2d
   \   000003D4   0x4602             MOV      R2,R0
   \   000003D6   0x460B             MOV      R3,R1
   \   000003D8   0x2000             MOVS     R0,#+0
   \   000003DA   0x.... 0x....      LDR.W    R1,??DataTable11_11  ;; 0x3ff00000
   \   000003DE   0x.... 0x....      BL       __aeabi_ddiv
   \   000003E2   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000003E6   0x.... 0x....      BL       __aeabi_dmul
   \   000003EA   0x.... 0x....      BL       __aeabi_d2iz
   \   000003EE   0x4607             MOV      R7,R0
   \   000003F0   0xB27F             SXTB     R7,R7
    595                     cell_yi = (raw[Y_AXIS] - (MESH_MIN_Y_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));            
                                    ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   000003F2   0x9802             LDR      R0,[SP, #+8]
   \   000003F4   0x6900             LDR      R0,[R0, #+16]
   \   000003F6   0xF04F 0x517C      MOV      R1,#+1056964608
   \   000003FA   0x.... 0x....      BL       __aeabi_fmul
   \   000003FE   0x4601             MOV      R1,R0
   \   00000400   0x.... 0x....      BL       __aeabi_fsub
   \   00000404   0x4629             MOV      R1,R5
   \   00000406   0x.... 0x....      BL       __aeabi_fadd
   \   0000040A   0x4605             MOV      R5,R0
   \   0000040C   0x9802             LDR      R0,[SP, #+8]
   \   0000040E   0x6840             LDR      R0,[R0, #+4]
   \   00000410   0x9903             LDR      R1,[SP, #+12]
   \   00000412   0x6909             LDR      R1,[R1, #+16]
   \   00000414   0x.... 0x....      BL       __aeabi_fadd
   \   00000418   0x4629             MOV      R1,R5
   \   0000041A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000041E   0xD300             BCC.N    ??prepare_segmented_line_to_31
   \   00000420   0x4605             MOV      R5,R0
   \                     ??prepare_segmented_line_to_31: (+1)
   \   00000422   0x4658             MOV      R0,R11
   \   00000424   0x4651             MOV      R1,R10
   \   00000426   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000042A   0xD200             BCS.N    ??prepare_segmented_line_to_32
   \   0000042C   0x46DA             MOV      R10,R11
   \                     ??prepare_segmented_line_to_32: (+1)
   \   0000042E   0x4640             MOV      R0,R8
   \   00000430   0x4649             MOV      R1,R9
   \   00000432   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000436   0xD200             BCS.N    ??prepare_segmented_line_to_33
   \   00000438   0x46C8             MOV      R8,R9
   \                     ??prepare_segmented_line_to_33: (+1)
   \   0000043A   0x980A             LDR      R0,[SP, #+40]
   \   0000043C   0x4629             MOV      R1,R5
   \   0000043E   0x.... 0x....      BL       __aeabi_fsub
   \   00000442   0x.... 0x....      BL       __aeabi_f2d
   \   00000446   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000044A   0x4650             MOV      R0,R10
   \   0000044C   0x4641             MOV      R1,R8
   \   0000044E   0x.... 0x....      BL       __aeabi_fsub
   \   00000452   0x4631             MOV      R1,R6
   \   00000454   0x.... 0x....      BL       __aeabi_fdiv
   \   00000458   0x.... 0x....      BL       __aeabi_f2d
   \   0000045C   0x4602             MOV      R2,R0
   \   0000045E   0x460B             MOV      R3,R1
   \   00000460   0x2000             MOVS     R0,#+0
   \   00000462   0x.... 0x....      LDR.W    R1,??DataTable11_11  ;; 0x3ff00000
   \   00000466   0x.... 0x....      BL       __aeabi_ddiv
   \   0000046A   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   0000046E   0x.... 0x....      BL       __aeabi_dmul
   \   00000472   0x.... 0x....      BL       __aeabi_d2iz
   \   00000476   0x4606             MOV      R6,R0
   \   00000478   0xB276             SXTB     R6,R6
    596                  }
    597          
    598                  cell_xi = constrain(cell_xi, 0, (GRID_MAX_POINTS_X) - 1);
   \                     ??prepare_segmented_line_to_24: (+1)
   \   0000047A   0x2F00             CMP      R7,#+0
   \   0000047C   0xD501             BPL.N    ??prepare_segmented_line_to_34
   \   0000047E   0x2700             MOVS     R7,#+0
   \   00000480   0xE007             B.N      ??prepare_segmented_line_to_35
   \                     ??prepare_segmented_line_to_34: (+1)
   \   00000482   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000486   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   0000048A   0x1E41             SUBS     R1,R0,#+1
   \   0000048C   0x42B9             CMP      R1,R7
   \   0000048E   0xDA00             BGE.N    ??prepare_segmented_line_to_35
   \   00000490   0x1E47             SUBS     R7,R0,#+1
   \                     ??prepare_segmented_line_to_35: (+1)
   \   00000492   0xB27F             SXTB     R7,R7
    599                  cell_yi = constrain(cell_yi, 0, (GRID_MAX_POINTS_Y) - 1);
   \   00000494   0x2E00             CMP      R6,#+0
   \   00000496   0xD501             BPL.N    ??prepare_segmented_line_to_36
   \   00000498   0x2600             MOVS     R6,#+0
   \   0000049A   0xE005             B.N      ??prepare_segmented_line_to_37
   \                     ??prepare_segmented_line_to_36: (+1)
   \   0000049C   0x9803             LDR      R0,[SP, #+12]
   \   0000049E   0x7840             LDRB     R0,[R0, #+1]
   \   000004A0   0x1E41             SUBS     R1,R0,#+1
   \   000004A2   0x42B1             CMP      R1,R6
   \   000004A4   0xDA00             BGE.N    ??prepare_segmented_line_to_37
   \   000004A6   0x1E46             SUBS     R6,R0,#+1
   \                     ??prepare_segmented_line_to_37: (+1)
   \   000004A8   0xB276             SXTB     R6,R6
    600          
    601                  const float x0 = mesh_index_to_xpos(cell_xi),   // 64 byte table lookup avoids mul+add
   \   000004AA   0x4638             MOV      R0,R7
   \   000004AC   0xB2C0             UXTB     R0,R0
   \   000004AE   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000004B2   0x4680             MOV      R8,R0
    602                              y0 = mesh_index_to_ypos(cell_yi);
   \   000004B4   0x4630             MOV      R0,R6
   \   000004B6   0xB2C0             UXTB     R0,R0
   \   000004B8   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000004BC   0x4605             MOV      R5,R0
    603          
    604                  float z_x0y0 = z_values[cell_xi  ][cell_yi  ],  // z at lower left corner
   \   000004BE   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \   000004C2   0x.... 0x....      LDR.W    R1,??DataTable11_12
   \   000004C6   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   000004CA   0xF850 0x1026      LDR      R1,[R0, R6, LSL #+2]
   \   000004CE   0x9108             STR      R1,[SP, #+32]
    605                        z_x1y0 = z_values[cell_xi+1][cell_yi  ],  // z at upper left corner
   \   000004D0   0xEB00 0x0186      ADD      R1,R0,R6, LSL #+2
   \   000004D4   0x6B0A             LDR      R2,[R1, #+48]
   \   000004D6   0x920D             STR      R2,[SP, #+52]
    606                        z_x0y1 = z_values[cell_xi  ][cell_yi+1],  // z at lower right corner
   \   000004D8   0xEB00 0x0086      ADD      R0,R0,R6, LSL #+2
   \   000004DC   0x6840             LDR      R0,[R0, #+4]
   \   000004DE   0x9007             STR      R0,[SP, #+28]
    607                        z_x1y1 = z_values[cell_xi+1][cell_yi+1];  // z at upper right corner
   \   000004E0   0x6B4E             LDR      R6,[R1, #+52]
    608          
    609                  if (isnan(z_x0y0)) z_x0y0 = 0;              // ideally activating planner.leveling_active (G29 A)
   \   000004E2   0x9808             LDR      R0,[SP, #+32]
   \   000004E4   0x.... 0x....      BL       __iar_FDtest
   \   000004E8   0x2802             CMP      R0,#+2
   \   000004EA   0xD101             BNE.N    ??prepare_segmented_line_to_38
   \   000004EC   0x2000             MOVS     R0,#+0
   \   000004EE   0x9008             STR      R0,[SP, #+32]
    610                  if (isnan(z_x1y0)) z_x1y0 = 0;              //   should refuse if any invalid mesh points
   \                     ??prepare_segmented_line_to_38: (+1)
   \   000004F0   0x980D             LDR      R0,[SP, #+52]
   \   000004F2   0x.... 0x....      BL       __iar_FDtest
   \   000004F6   0x2802             CMP      R0,#+2
   \   000004F8   0xD101             BNE.N    ??prepare_segmented_line_to_39
   \   000004FA   0x2000             MOVS     R0,#+0
   \   000004FC   0x900D             STR      R0,[SP, #+52]
    611                  if (isnan(z_x0y1)) z_x0y1 = 0;              //   in order to avoid isnan tests per cell,
   \                     ??prepare_segmented_line_to_39: (+1)
   \   000004FE   0x9807             LDR      R0,[SP, #+28]
   \   00000500   0x.... 0x....      BL       __iar_FDtest
   \   00000504   0x2802             CMP      R0,#+2
   \   00000506   0xD101             BNE.N    ??prepare_segmented_line_to_40
   \   00000508   0x2000             MOVS     R0,#+0
   \   0000050A   0x9007             STR      R0,[SP, #+28]
    612                  if (isnan(z_x1y1)) z_x1y1 = 0;              //   thus guessing zero for undefined points
   \                     ??prepare_segmented_line_to_40: (+1)
   \   0000050C   0x4630             MOV      R0,R6
   \   0000050E   0x.... 0x....      BL       __iar_FDtest
   \   00000512   0x2802             CMP      R0,#+2
   \   00000514   0xD100             BNE.N    ??prepare_segmented_line_to_41
   \   00000516   0x2600             MOVS     R6,#+0
    613          
    614                  float cx = raw[X_AXIS] - x0,   // cell-relative x and y
   \                     ??prepare_segmented_line_to_41: (+1)
   \   00000518   0x9809             LDR      R0,[SP, #+36]
   \   0000051A   0x4641             MOV      R1,R8
   \   0000051C   0x.... 0x....      BL       __aeabi_fsub
   \   00000520   0x9004             STR      R0,[SP, #+16]
    615                        cy = raw[Y_AXIS] - y0;
   \   00000522   0x980A             LDR      R0,[SP, #+40]
   \   00000524   0x4629             MOV      R1,R5
   \   00000526   0x.... 0x....      BL       __aeabi_fsub
   \   0000052A   0x4605             MOV      R5,R0
   \   0000052C   0x9802             LDR      R0,[SP, #+8]
   \   0000052E   0xF8B0 0x0050      LDRH     R0,[R0, #+80]
   \   00000532   0xF8AD 0x0014      STRH     R0,[SP, #+20]
   \   00000536   0xF9BD 0x0014      LDRSH    R0,[SP, #+20]
   \   0000053A   0xF240 0x3102      MOVW     R1,#+770
   \   0000053E   0x4208             TST      R0,R1
   \   00000540   0xD04C             BEQ.N    ??prepare_segmented_line_to_42
    616          
    617                  float z_xmy0,z_xmy1;
    618                  if(MACHINETPYE & IS_KINEMATIC)
    619                  {
    620                      z_xmy0 = (z_x1y0 - z_x0y0) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));   // z slope per x along y0 (lower left to lower right)
   \   00000542   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000546   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   0000054A   0x1E40             SUBS     R0,R0,#+1
   \   0000054C   0x.... 0x....      BL       __aeabi_i2f
   \   00000550   0x4607             MOV      R7,R0
   \   00000552   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000556   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   0000055A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000055E   0x4601             MOV      R1,R0
   \   00000560   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   00000564   0x6840             LDR      R0,[R0, #+4]
   \   00000566   0x.... 0x....      BL       __aeabi_fsub
   \   0000056A   0x4680             MOV      R8,R0
   \   0000056C   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000570   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000574   0x.... 0x....      BL       __aeabi_ui2f
   \   00000578   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   0000057C   0x6809             LDR      R1,[R1, #+0]
   \   0000057E   0x.... 0x....      BL       __aeabi_fadd
   \   00000582   0x4601             MOV      R1,R0
   \   00000584   0x4640             MOV      R0,R8
   \   00000586   0x.... 0x....      BL       __aeabi_fsub
   \   0000058A   0x4639             MOV      R1,R7
   \   0000058C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000590   0x.... 0x....      BL       __aeabi_f2d
   \   00000594   0x4602             MOV      R2,R0
   \   00000596   0x460B             MOV      R3,R1
   \   00000598   0x2000             MOVS     R0,#+0
   \   0000059A   0x.... 0x....      LDR.W    R1,??DataTable11_11  ;; 0x3ff00000
   \   0000059E   0x.... 0x....      BL       __aeabi_ddiv
   \   000005A2   0x4680             MOV      R8,R0
   \   000005A4   0x4689             MOV      R9,R1
   \   000005A6   0x980D             LDR      R0,[SP, #+52]
   \   000005A8   0x9908             LDR      R1,[SP, #+32]
   \   000005AA   0x.... 0x....      BL       __aeabi_fsub
   \   000005AE   0x.... 0x....      BL       __aeabi_f2d
   \   000005B2   0x4642             MOV      R2,R8
   \   000005B4   0x464B             MOV      R3,R9
   \   000005B6   0x.... 0x....      BL       __aeabi_dmul
   \   000005BA   0x.... 0x....      BL       __aeabi_d2f
   \   000005BE   0x9006             STR      R0,[SP, #+24]
    621                      z_xmy1 = (z_x1y1 - z_x0y1) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));   // z slope per x along y1 (upper left to upper right)
   \   000005C0   0x4630             MOV      R0,R6
   \   000005C2   0x9907             LDR      R1,[SP, #+28]
   \   000005C4   0x.... 0x....      BL       __aeabi_fsub
   \   000005C8   0x.... 0x....      BL       __aeabi_f2d
   \   000005CC   0x4642             MOV      R2,R8
   \   000005CE   0x464B             MOV      R3,R9
   \   000005D0   0x.... 0x....      BL       __aeabi_dmul
   \   000005D4   0x.... 0x....      BL       __aeabi_d2f
   \   000005D8   0x4680             MOV      R8,R0
   \   000005DA   0xE09B             B.N      ??prepare_segmented_line_to_43
    622                  }
    623                  else
    624                  {
    625                      z_xmy0 = (z_x1y0 - z_x0y0) * (1.0 / (MESH_X_DIST_IS_Cartesian));   // z slope per x along y0 (lower left to lower right)
   \                     ??prepare_segmented_line_to_42: (+1)
   \   000005DC   0x9802             LDR      R0,[SP, #+8]
   \   000005DE   0xF8D0 0x800C      LDR      R8,[R0, #+12]
   \   000005E2   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000005E6   0x4641             MOV      R1,R8
   \   000005E8   0x.... 0x....      BL       __aeabi_fmul
   \   000005EC   0x4607             MOV      R7,R0
   \   000005EE   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000005F2   0x4639             MOV      R1,R7
   \   000005F4   0x.... 0x....      BL       __aeabi_fmul
   \   000005F8   0x4681             MOV      R9,R0
   \   000005FA   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000005FE   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000602   0x.... 0x....      BL       __aeabi_ui2f
   \   00000606   0x4601             MOV      R1,R0
   \   00000608   0x4648             MOV      R0,R9
   \   0000060A   0x.... 0x....      BL       __aeabi_fsub
   \   0000060E   0x4683             MOV      R11,R0
   \   00000610   0x9803             LDR      R0,[SP, #+12]
   \   00000612   0x68C0             LDR      R0,[R0, #+12]
   \   00000614   0x9000             STR      R0,[SP, #+0]
   \   00000616   0x4641             MOV      R1,R8
   \   00000618   0x.... 0x....      BL       __aeabi_fadd
   \   0000061C   0x4682             MOV      R10,R0
   \   0000061E   0x4658             MOV      R0,R11
   \   00000620   0x4651             MOV      R1,R10
   \   00000622   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000626   0xD202             BCS.N    ??prepare_segmented_line_to_44
   \   00000628   0xF8CD 0xB03C      STR      R11,[SP, #+60]
   \   0000062C   0xE001             B.N      ??prepare_segmented_line_to_45
   \                     ??prepare_segmented_line_to_44: (+1)
   \   0000062E   0xF8CD 0xA03C      STR      R10,[SP, #+60]
   \                     ??prepare_segmented_line_to_45: (+1)
   \   00000632   0x4638             MOV      R0,R7
   \   00000634   0x4639             MOV      R1,R7
   \   00000636   0x.... 0x....      BL       __aeabi_fsub
   \   0000063A   0x4607             MOV      R7,R0
   \   0000063C   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000640   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000644   0x.... 0x....      BL       __aeabi_ui2f
   \   00000648   0x4639             MOV      R1,R7
   \   0000064A   0x.... 0x....      BL       __aeabi_fadd
   \   0000064E   0x4681             MOV      R9,R0
   \   00000650   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000654   0x6880             LDR      R0,[R0, #+8]
   \   00000656   0x9900             LDR      R1,[SP, #+0]
   \   00000658   0x.... 0x....      BL       __aeabi_fadd
   \   0000065C   0x4680             MOV      R8,R0
   \   0000065E   0x4649             MOV      R1,R9
   \   00000660   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000664   0xD202             BCS.N    ??prepare_segmented_line_to_46
   \   00000666   0xF8CD 0x9038      STR      R9,[SP, #+56]
   \   0000066A   0xE001             B.N      ??prepare_segmented_line_to_47
   \                     ??prepare_segmented_line_to_46: (+1)
   \   0000066C   0xF8CD 0x8038      STR      R8,[SP, #+56]
   \                     ??prepare_segmented_line_to_47: (+1)
   \   00000670   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000674   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000678   0x1E40             SUBS     R0,R0,#+1
   \   0000067A   0x.... 0x....      BL       __aeabi_i2f
   \   0000067E   0x4607             MOV      R7,R0
   \   00000680   0x980D             LDR      R0,[SP, #+52]
   \   00000682   0x9908             LDR      R1,[SP, #+32]
   \   00000684   0x.... 0x....      BL       __aeabi_fsub
   \   00000688   0x.... 0x....      BL       __aeabi_f2d
   \   0000068C   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000690   0x980F             LDR      R0,[SP, #+60]
   \   00000692   0x990E             LDR      R1,[SP, #+56]
   \   00000694   0x.... 0x....      BL       __aeabi_fsub
   \   00000698   0x4639             MOV      R1,R7
   \   0000069A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000069E   0x.... 0x....      BL       __aeabi_f2d
   \   000006A2   0x4602             MOV      R2,R0
   \   000006A4   0x460B             MOV      R3,R1
   \   000006A6   0x2000             MOVS     R0,#+0
   \   000006A8   0x.... 0x....      LDR.W    R1,??DataTable11_11  ;; 0x3ff00000
   \   000006AC   0x.... 0x....      BL       __aeabi_ddiv
   \   000006B0   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000006B4   0x.... 0x....      BL       __aeabi_dmul
   \   000006B8   0x.... 0x....      BL       __aeabi_d2f
   \   000006BC   0x9006             STR      R0,[SP, #+24]
    626                      z_xmy1 = (z_x1y1 - z_x0y1) * (1.0 / (MESH_X_DIST_IS_Cartesian));   // z slope per x along y1 (upper left to upper right)            
   \   000006BE   0x4658             MOV      R0,R11
   \   000006C0   0x4651             MOV      R1,R10
   \   000006C2   0x.... 0x....      BL       __aeabi_cfcmple
   \   000006C6   0xD200             BCS.N    ??prepare_segmented_line_to_48
   \   000006C8   0x46DA             MOV      R10,R11
   \                     ??prepare_segmented_line_to_48: (+1)
   \   000006CA   0x4640             MOV      R0,R8
   \   000006CC   0x4649             MOV      R1,R9
   \   000006CE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000006D2   0xD200             BCS.N    ??prepare_segmented_line_to_49
   \   000006D4   0x46C8             MOV      R8,R9
   \                     ??prepare_segmented_line_to_49: (+1)
   \   000006D6   0x4630             MOV      R0,R6
   \   000006D8   0x9907             LDR      R1,[SP, #+28]
   \   000006DA   0x.... 0x....      BL       __aeabi_fsub
   \   000006DE   0x.... 0x....      BL       __aeabi_f2d
   \   000006E2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000006E6   0x4650             MOV      R0,R10
   \   000006E8   0x4641             MOV      R1,R8
   \   000006EA   0x.... 0x....      BL       __aeabi_fsub
   \   000006EE   0x4639             MOV      R1,R7
   \   000006F0   0x.... 0x....      BL       __aeabi_fdiv
   \   000006F4   0x.... 0x....      BL       __aeabi_f2d
   \   000006F8   0x4602             MOV      R2,R0
   \   000006FA   0x460B             MOV      R3,R1
   \   000006FC   0x2000             MOVS     R0,#+0
   \   000006FE   0x.... 0x....      LDR.W    R1,??DataTable11_11  ;; 0x3ff00000
   \   00000702   0x.... 0x....      BL       __aeabi_ddiv
   \   00000706   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   0000070A   0x.... 0x....      BL       __aeabi_dmul
   \   0000070E   0x.... 0x....      BL       __aeabi_d2f
   \   00000712   0x4680             MOV      R8,R0
    627                  }
    628                  
    629                  float z_cxy0 = z_x0y0 + z_xmy0 * cx;            // z height along y0 at cx (changes for each cx in cell)
   \                     ??prepare_segmented_line_to_43: (+1)
   \   00000714   0x9806             LDR      R0,[SP, #+24]
   \   00000716   0x9904             LDR      R1,[SP, #+16]
   \   00000718   0x.... 0x....      BL       __aeabi_fmul
   \   0000071C   0x9908             LDR      R1,[SP, #+32]
   \   0000071E   0x.... 0x....      BL       __aeabi_fadd
   \   00000722   0x4606             MOV      R6,R0
    630          
    631                  const float z_cxy1 = z_x0y1 + z_xmy1 * cx,            // z height along y1 at cx
    632                              z_cxyd = z_cxy1 - z_cxy0;                 // z height difference along cx from y0 to y1
   \   00000724   0x9804             LDR      R0,[SP, #+16]
   \   00000726   0x4641             MOV      R1,R8
   \   00000728   0x.... 0x....      BL       __aeabi_fmul
   \   0000072C   0x9907             LDR      R1,[SP, #+28]
   \   0000072E   0x.... 0x....      BL       __aeabi_fadd
   \   00000732   0x4631             MOV      R1,R6
   \   00000734   0x.... 0x....      BL       __aeabi_fsub
   \   00000738   0x4607             MOV      R7,R0
    633          
    634                        float z_cxym ;
    635                    if(MACHINETPYE & IS_KINEMATIC)    
   \   0000073A   0xF9BD 0x0014      LDRSH    R0,[SP, #+20]
   \   0000073E   0xF240 0x3102      MOVW     R1,#+770
   \   00000742   0x4208             TST      R0,R1
   \   00000744   0xD03B             BEQ.N    ??prepare_segmented_line_to_50
    636                        z_cxym= z_cxyd * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));  // z slope per y along cx from y0 to y1 (changes for each cx in cell)
   \   00000746   0x4638             MOV      R0,R7
   \   00000748   0x.... 0x....      BL       __aeabi_f2d
   \   0000074C   0x4682             MOV      R10,R0
   \   0000074E   0x468B             MOV      R11,R1
   \   00000750   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000754   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000758   0x.... 0x....      BL       __aeabi_ui2f
   \   0000075C   0x4601             MOV      R1,R0
   \   0000075E   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   00000762   0x68C0             LDR      R0,[R0, #+12]
   \   00000764   0x.... 0x....      BL       __aeabi_fsub
   \   00000768   0x4607             MOV      R7,R0
   \   0000076A   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   0000076E   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000772   0x.... 0x....      BL       __aeabi_ui2f
   \   00000776   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   0000077A   0x6889             LDR      R1,[R1, #+8]
   \   0000077C   0x.... 0x....      BL       __aeabi_fadd
   \   00000780   0x4601             MOV      R1,R0
   \   00000782   0x4638             MOV      R0,R7
   \   00000784   0x.... 0x....      BL       __aeabi_fsub
   \   00000788   0x4607             MOV      R7,R0
   \   0000078A   0x9803             LDR      R0,[SP, #+12]
   \   0000078C   0x7840             LDRB     R0,[R0, #+1]
   \   0000078E   0x1E40             SUBS     R0,R0,#+1
   \   00000790   0x.... 0x....      BL       __aeabi_i2f
   \   00000794   0x4601             MOV      R1,R0
   \   00000796   0x4638             MOV      R0,R7
   \   00000798   0x.... 0x....      BL       __aeabi_fdiv
   \   0000079C   0x.... 0x....      BL       __aeabi_f2d
   \   000007A0   0x4602             MOV      R2,R0
   \   000007A2   0x460B             MOV      R3,R1
   \   000007A4   0x2000             MOVS     R0,#+0
   \   000007A6   0x.... 0x....      LDR.W    R1,??DataTable11_11  ;; 0x3ff00000
   \   000007AA   0x.... 0x....      BL       __aeabi_ddiv
   \   000007AE   0x4652             MOV      R2,R10
   \   000007B0   0x465B             MOV      R3,R11
   \   000007B2   0x.... 0x....      BL       __aeabi_dmul
   \   000007B6   0x.... 0x....      BL       __aeabi_d2f
   \   000007BA   0x4607             MOV      R7,R0
   \   000007BC   0xE061             B.N      ??prepare_segmented_line_to_51
    637                    else
    638                        z_cxym= z_cxyd * (1.0 / (MESH_Y_DIST_IS_Cartesian));
   \                     ??prepare_segmented_line_to_50: (+1)
   \   000007BE   0x9802             LDR      R0,[SP, #+8]
   \   000007C0   0xF8D0 0x9010      LDR      R9,[R0, #+16]
   \   000007C4   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000007C8   0x4649             MOV      R1,R9
   \   000007CA   0x.... 0x....      BL       __aeabi_fmul
   \   000007CE   0x4682             MOV      R10,R0
   \   000007D0   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000007D4   0x4651             MOV      R1,R10
   \   000007D6   0x.... 0x....      BL       __aeabi_fmul
   \   000007DA   0x4683             MOV      R11,R0
   \   000007DC   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000007E0   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   000007E4   0x.... 0x....      BL       __aeabi_ui2f
   \   000007E8   0x4601             MOV      R1,R0
   \   000007EA   0x4658             MOV      R0,R11
   \   000007EC   0x.... 0x....      BL       __aeabi_fsub
   \   000007F0   0x4683             MOV      R11,R0
   \   000007F2   0x9803             LDR      R0,[SP, #+12]
   \   000007F4   0x6900             LDR      R0,[R0, #+16]
   \   000007F6   0x9000             STR      R0,[SP, #+0]
   \   000007F8   0x4649             MOV      R1,R9
   \   000007FA   0x.... 0x....      BL       __aeabi_fadd
   \   000007FE   0x4601             MOV      R1,R0
   \   00000800   0x4658             MOV      R0,R11
   \   00000802   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000806   0xD300             BCC.N    ??prepare_segmented_line_to_52
   \   00000808   0x468B             MOV      R11,R1
   \                     ??prepare_segmented_line_to_52: (+1)
   \   0000080A   0x4650             MOV      R0,R10
   \   0000080C   0x4651             MOV      R1,R10
   \   0000080E   0x.... 0x....      BL       __aeabi_fsub
   \   00000812   0x4681             MOV      R9,R0
   \   00000814   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   00000818   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   0000081C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000820   0x4649             MOV      R1,R9
   \   00000822   0x.... 0x....      BL       __aeabi_fadd
   \   00000826   0x4681             MOV      R9,R0
   \   00000828   0x9802             LDR      R0,[SP, #+8]
   \   0000082A   0x6840             LDR      R0,[R0, #+4]
   \   0000082C   0x9900             LDR      R1,[SP, #+0]
   \   0000082E   0x.... 0x....      BL       __aeabi_fadd
   \   00000832   0x4649             MOV      R1,R9
   \   00000834   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000838   0xD300             BCC.N    ??prepare_segmented_line_to_53
   \   0000083A   0x4681             MOV      R9,R0
   \                     ??prepare_segmented_line_to_53: (+1)
   \   0000083C   0x4638             MOV      R0,R7
   \   0000083E   0x.... 0x....      BL       __aeabi_f2d
   \   00000842   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000846   0x4658             MOV      R0,R11
   \   00000848   0x4649             MOV      R1,R9
   \   0000084A   0x.... 0x....      BL       __aeabi_fsub
   \   0000084E   0x4607             MOV      R7,R0
   \   00000850   0x9803             LDR      R0,[SP, #+12]
   \   00000852   0x7840             LDRB     R0,[R0, #+1]
   \   00000854   0x1E40             SUBS     R0,R0,#+1
   \   00000856   0x.... 0x....      BL       __aeabi_i2f
   \   0000085A   0x4601             MOV      R1,R0
   \   0000085C   0x4638             MOV      R0,R7
   \   0000085E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000862   0x.... 0x....      BL       __aeabi_f2d
   \   00000866   0x4602             MOV      R2,R0
   \   00000868   0x460B             MOV      R3,R1
   \   0000086A   0x2000             MOVS     R0,#+0
   \   0000086C   0x.... 0x....      LDR.W    R1,??DataTable11_11  ;; 0x3ff00000
   \   00000870   0x.... 0x....      BL       __aeabi_ddiv
   \   00000874   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000878   0x.... 0x....      BL       __aeabi_dmul
   \   0000087C   0x.... 0x....      BL       __aeabi_d2f
   \   00000880   0x4607             MOV      R7,R0
    639          
    640                  //    float z_cxcy = z_cxy0 + z_cxym * cy;            // interpolated mesh z height along cx at cy (do inside the segment loop)
    641          
    642                  // As subsequent segments step through this cell, the z_cxy0 intercept will change
    643                  // and the z_cxym slope will change, both as a function of cx within the cell, and
    644                  // each change by a constant for fixed segment lengths.
    645          
    646                  const float z_sxy0 = z_xmy0 * diff[X_AXIS];                                    // per-segment adjustment to z_cxy0
   \                     ??prepare_segmented_line_to_51: (+1)
   \   00000882   0x9806             LDR      R0,[SP, #+24]
   \   00000884   0x9910             LDR      R1,[SP, #+64]
   \   00000886   0x.... 0x....      BL       __aeabi_fmul
   \   0000088A   0x9007             STR      R0,[SP, #+28]
    647                        float z_sxym;  
    648                  if(MACHINETPYE & IS_KINEMATIC)      
   \   0000088C   0xF9BD 0x0014      LDRSH    R0,[SP, #+20]
   \   00000890   0xF240 0x3102      MOVW     R1,#+770
   \   00000894   0x4208             TST      R0,R1
   \   00000896   0xD046             BEQ.N    ??prepare_segmented_line_to_54
    649                  z_sxym = (z_xmy1 - z_xmy0) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC)) * diff[X_AXIS];  // per-segment adjustment to z_cxym
   \   00000898   0x4640             MOV      R0,R8
   \   0000089A   0x9906             LDR      R1,[SP, #+24]
   \   0000089C   0x.... 0x....      BL       __aeabi_fsub
   \   000008A0   0x.... 0x....      BL       __aeabi_f2d
   \   000008A4   0x4680             MOV      R8,R0
   \   000008A6   0x4689             MOV      R9,R1
   \   000008A8   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000008AC   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   000008B0   0x.... 0x....      BL       __aeabi_ui2f
   \   000008B4   0x4601             MOV      R1,R0
   \   000008B6   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \   000008BA   0x68C0             LDR      R0,[R0, #+12]
   \   000008BC   0x.... 0x....      BL       __aeabi_fsub
   \   000008C0   0x4682             MOV      R10,R0
   \   000008C2   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \   000008C6   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   000008CA   0x.... 0x....      BL       __aeabi_ui2f
   \   000008CE   0x.... 0x....      LDR.W    R1,??DataTable11_10
   \   000008D2   0x6889             LDR      R1,[R1, #+8]
   \   000008D4   0x.... 0x....      BL       __aeabi_fadd
   \   000008D8   0x4601             MOV      R1,R0
   \   000008DA   0x4650             MOV      R0,R10
   \   000008DC   0x.... 0x....      BL       __aeabi_fsub
   \   000008E0   0x4682             MOV      R10,R0
   \   000008E2   0x9803             LDR      R0,[SP, #+12]
   \   000008E4   0x7840             LDRB     R0,[R0, #+1]
   \   000008E6   0x1E40             SUBS     R0,R0,#+1
   \   000008E8   0x.... 0x....      BL       __aeabi_i2f
   \   000008EC   0x4601             MOV      R1,R0
   \   000008EE   0x4650             MOV      R0,R10
   \   000008F0   0x.... 0x....      BL       __aeabi_fdiv
   \   000008F4   0x.... 0x....      BL       __aeabi_f2d
   \   000008F8   0x4602             MOV      R2,R0
   \   000008FA   0x460B             MOV      R3,R1
   \   000008FC   0x2000             MOVS     R0,#+0
   \   000008FE   0x....             LDR.N    R1,??DataTable11_11  ;; 0x3ff00000
   \   00000900   0x.... 0x....      BL       __aeabi_ddiv
   \   00000904   0x4642             MOV      R2,R8
   \   00000906   0x464B             MOV      R3,R9
   \   00000908   0x.... 0x....      BL       __aeabi_dmul
   \   0000090C   0x4680             MOV      R8,R0
   \   0000090E   0x4689             MOV      R9,R1
   \   00000910   0x9810             LDR      R0,[SP, #+64]
   \   00000912   0x.... 0x....      BL       __aeabi_f2d
   \   00000916   0x4642             MOV      R2,R8
   \   00000918   0x464B             MOV      R3,R9
   \   0000091A   0x.... 0x....      BL       __aeabi_dmul
   \   0000091E   0x.... 0x....      BL       __aeabi_d2f
   \   00000922   0x9001             STR      R0,[SP, #+4]
   \   00000924   0xE089             B.N      ??prepare_segmented_line_to_55
    650                  else
    651                  z_sxym = (z_xmy1 - z_xmy0) * (1.0 / (MESH_Y_DIST_IS_Cartesian)) * diff[X_AXIS]; 
   \                     ??prepare_segmented_line_to_54: (+1)
   \   00000926   0x9802             LDR      R0,[SP, #+8]
   \   00000928   0xF8D0 0x9010      LDR      R9,[R0, #+16]
   \   0000092C   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000930   0x4649             MOV      R1,R9
   \   00000932   0x.... 0x....      BL       __aeabi_fmul
   \   00000936   0x4682             MOV      R10,R0
   \   00000938   0xF04F 0x4080      MOV      R0,#+1073741824
   \   0000093C   0x4651             MOV      R1,R10
   \   0000093E   0x.... 0x....      BL       __aeabi_fmul
   \   00000942   0x4683             MOV      R11,R0
   \   00000944   0x....             LDR.N    R0,??DataTable11_8
   \   00000946   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   0000094A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000094E   0x4601             MOV      R1,R0
   \   00000950   0x4658             MOV      R0,R11
   \   00000952   0x.... 0x....      BL       __aeabi_fsub
   \   00000956   0x4683             MOV      R11,R0
   \   00000958   0x9803             LDR      R0,[SP, #+12]
   \   0000095A   0x6900             LDR      R0,[R0, #+16]
   \   0000095C   0x9000             STR      R0,[SP, #+0]
   \   0000095E   0x4649             MOV      R1,R9
   \   00000960   0x.... 0x....      BL       __aeabi_fadd
   \   00000964   0x4601             MOV      R1,R0
   \   00000966   0x4658             MOV      R0,R11
   \   00000968   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000096C   0xD300             BCC.N    ??prepare_segmented_line_to_56
   \   0000096E   0x468B             MOV      R11,R1
   \                     ??prepare_segmented_line_to_56: (+1)
   \   00000970   0x4650             MOV      R0,R10
   \   00000972   0x4651             MOV      R1,R10
   \   00000974   0x.... 0x....      BL       __aeabi_fsub
   \   00000978   0x4681             MOV      R9,R0
   \   0000097A   0x....             LDR.N    R0,??DataTable11_8
   \   0000097C   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000980   0x.... 0x....      BL       __aeabi_ui2f
   \   00000984   0x4649             MOV      R1,R9
   \   00000986   0x.... 0x....      BL       __aeabi_fadd
   \   0000098A   0x4681             MOV      R9,R0
   \   0000098C   0x9802             LDR      R0,[SP, #+8]
   \   0000098E   0x6840             LDR      R0,[R0, #+4]
   \   00000990   0x9900             LDR      R1,[SP, #+0]
   \   00000992   0x.... 0x....      BL       __aeabi_fadd
   \   00000996   0x4649             MOV      R1,R9
   \   00000998   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000099C   0xD300             BCC.N    ??prepare_segmented_line_to_57
   \   0000099E   0x4681             MOV      R9,R0
   \                     ??prepare_segmented_line_to_57: (+1)
   \   000009A0   0x4640             MOV      R0,R8
   \   000009A2   0x9906             LDR      R1,[SP, #+24]
   \   000009A4   0x.... 0x....      BL       __aeabi_fsub
   \   000009A8   0x.... 0x....      BL       __aeabi_f2d
   \   000009AC   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000009B0   0x4658             MOV      R0,R11
   \   000009B2   0x4649             MOV      R1,R9
   \   000009B4   0x.... 0x....      BL       __aeabi_fsub
   \   000009B8   0x4680             MOV      R8,R0
   \   000009BA   0x9803             LDR      R0,[SP, #+12]
   \   000009BC   0x7840             LDRB     R0,[R0, #+1]
   \   000009BE   0x1E40             SUBS     R0,R0,#+1
   \   000009C0   0x.... 0x....      BL       __aeabi_i2f
   \   000009C4   0x4601             MOV      R1,R0
   \   000009C6   0x4640             MOV      R0,R8
   \   000009C8   0x.... 0x....      BL       __aeabi_fdiv
   \   000009CC   0x.... 0x....      BL       __aeabi_f2d
   \   000009D0   0x4602             MOV      R2,R0
   \   000009D2   0x460B             MOV      R3,R1
   \   000009D4   0x2000             MOVS     R0,#+0
   \   000009D6   0x....             LDR.N    R1,??DataTable11_11  ;; 0x3ff00000
   \   000009D8   0x.... 0x....      BL       __aeabi_ddiv
   \   000009DC   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000009E0   0x.... 0x....      BL       __aeabi_dmul
   \   000009E4   0x4680             MOV      R8,R0
   \   000009E6   0x4689             MOV      R9,R1
   \   000009E8   0x9810             LDR      R0,[SP, #+64]
   \   000009EA   0x.... 0x....      BL       __aeabi_f2d
   \   000009EE   0x4642             MOV      R2,R8
   \   000009F0   0x464B             MOV      R3,R9
   \   000009F2   0x.... 0x....      BL       __aeabi_dmul
   \   000009F6   0x.... 0x....      BL       __aeabi_d2f
   \   000009FA   0x9001             STR      R0,[SP, #+4]
   \   000009FC   0xE01D             B.N      ??prepare_segmented_line_to_55
    652                  
    653                  for(;;) {  // for all segments within this mesh cell
    654          
    655                    if (--segments == 0)                      // if this is last segment, use rtarget for exact
    656                      COPY(raw, rtarget);
    657          
    658                    const float z_cxcy = (z_cxy0 + z_cxym * cy) // interpolated mesh z height along cx at cy
    659                      #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
    660                        * fade_scaling_factor                   // apply fade factor to interpolated mesh height
    661                      #endif
    662                    ;
    663          
    664                    const float z = raw[Z_AXIS];
    665                    raw[Z_AXIS] += z_cxcy;
    666                    ubl_buffer_segment_raw(raw, feedrate);
    667                    raw[Z_AXIS] = z;
    668          
    669                    if (segments == 0)                        // done with last segment
    670                      return false;                           // did not set_current_from_destination()
    671          
    672                    LOOP_XYZE(i) raw[i] += diff[i];
    673          
    674                    cx += diff[X_AXIS];
    675                    cy += diff[Y_AXIS];
    676          
    677                    if(MACHINETPYE & IS_KINEMATIC)
    678                    {
    679                      if (!WITHIN(cx, 0, MESH_X_DIST_IS_KINEMATIC) || !WITHIN(cy, 0, MESH_Y_DIST_IS_KINEMATIC))    // done within this cell, break to next
    680                          break;
    681                    }
    682                    else
    683                    {
    684                      if (!WITHIN(cx, 0, MESH_X_DIST_IS_Cartesian) || !WITHIN(cy, 0, MESH_Y_DIST_IS_Cartesian))    // done within this cell, break to next
   \                     ??prepare_segmented_line_to_58: (+1)
   \   000009FE   0x4680             MOV      R8,R0
   \                     ??prepare_segmented_line_to_59: (+1)
   \   00000A00   0x4658             MOV      R0,R11
   \   00000A02   0x4641             MOV      R1,R8
   \   00000A04   0x.... 0x....      BL       __aeabi_fsub
   \   00000A08   0x4680             MOV      R8,R0
   \   00000A0A   0x9803             LDR      R0,[SP, #+12]
   \   00000A0C   0x7840             LDRB     R0,[R0, #+1]
   \   00000A0E   0x1E40             SUBS     R0,R0,#+1
   \   00000A10   0x.... 0x....      BL       __aeabi_i2f
   \   00000A14   0x4601             MOV      R1,R0
   \   00000A16   0x4640             MOV      R0,R8
   \   00000A18   0x.... 0x....      BL       __aeabi_fdiv
   \   00000A1C   0x4629             MOV      R1,R5
   \   00000A1E   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000A22   0xF63F 0xAC22      BHI.W    ??prepare_segmented_line_to_22
    685                          break;
    686                    }           
    687          
    688                    // Next segment still within same mesh cell, adjust the per-segment
    689                    // slope and intercept to compute next z height.
    690          
    691                    z_cxy0 += z_sxy0;   // adjust z_cxy0 by per-segment z_sxy0
   \                     ??prepare_segmented_line_to_60: (+1)
   \   00000A26   0x9807             LDR      R0,[SP, #+28]
   \   00000A28   0x4631             MOV      R1,R6
   \   00000A2A   0x.... 0x....      BL       __aeabi_fadd
   \   00000A2E   0x4606             MOV      R6,R0
    692                    z_cxym += z_sxym;   // adjust z_cxym by per-segment z_sxym
   \   00000A30   0x9801             LDR      R0,[SP, #+4]
   \   00000A32   0x4639             MOV      R1,R7
   \   00000A34   0x.... 0x....      BL       __aeabi_fadd
   \   00000A38   0x4607             MOV      R7,R0
   \                     ??prepare_segmented_line_to_55: (+1)
   \   00000A3A   0x1E64             SUBS     R4,R4,#+1
   \   00000A3C   0xB2A4             UXTH     R4,R4
   \   00000A3E   0x2C00             CMP      R4,#+0
   \   00000A40   0xD104             BNE.N    ??prepare_segmented_line_to_61
   \   00000A42   0x2210             MOVS     R2,#+16
   \   00000A44   0x9915             LDR      R1,[SP, #+84]
   \   00000A46   0xA809             ADD      R0,SP,#+36
   \   00000A48   0x.... 0x....      BL       memcpy
   \                     ??prepare_segmented_line_to_61: (+1)
   \   00000A4C   0xF8DD 0x802C      LDR      R8,[SP, #+44]
   \   00000A50   0x46C1             MOV      R9,R8
   \   00000A52   0x4638             MOV      R0,R7
   \   00000A54   0x4629             MOV      R1,R5
   \   00000A56   0x.... 0x....      BL       __aeabi_fmul
   \   00000A5A   0x4631             MOV      R1,R6
   \   00000A5C   0x.... 0x....      BL       __aeabi_fadd
   \   00000A60   0x9914             LDR      R1,[SP, #+80]
   \   00000A62   0x.... 0x....      BL       __aeabi_fmul
   \   00000A66   0x4641             MOV      R1,R8
   \   00000A68   0x.... 0x....      BL       __aeabi_fadd
   \   00000A6C   0x900B             STR      R0,[SP, #+44]
   \   00000A6E   0x9916             LDR      R1,[SP, #+88]
   \   00000A70   0xA809             ADD      R0,SP,#+36
   \   00000A72   0x.... 0x....      BL       _Z22ubl_buffer_segment_rawRA4_KfRS_
   \   00000A76   0xF8CD 0x902C      STR      R9,[SP, #+44]
   \   00000A7A   0x2C00             CMP      R4,#+0
   \   00000A7C   0xD102             BNE.N    ??prepare_segmented_line_to_62
   \   00000A7E   0x2000             MOVS     R0,#+0
   \   00000A80   0xF7FF 0xBAD7      B.W      ??prepare_segmented_line_to_2
   \                     ??prepare_segmented_line_to_62: (+1)
   \   00000A84   0xF04F 0x0800      MOV      R8,#+0
   \   00000A88   0xE00C             B.N      ??prepare_segmented_line_to_63
   \                     ??prepare_segmented_line_to_64: (+1)
   \   00000A8A   0xA809             ADD      R0,SP,#+36
   \   00000A8C   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   00000A90   0xA910             ADD      R1,SP,#+64
   \   00000A92   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   00000A96   0x.... 0x....      BL       __aeabi_fadd
   \   00000A9A   0xA909             ADD      R1,SP,#+36
   \   00000A9C   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
   \   00000AA0   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??prepare_segmented_line_to_63: (+1)
   \   00000AA4   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000AA8   0xDBEF             BLT.N    ??prepare_segmented_line_to_64
   \   00000AAA   0x9804             LDR      R0,[SP, #+16]
   \   00000AAC   0x9910             LDR      R1,[SP, #+64]
   \   00000AAE   0x.... 0x....      BL       __aeabi_fadd
   \   00000AB2   0x9004             STR      R0,[SP, #+16]
   \   00000AB4   0x9811             LDR      R0,[SP, #+68]
   \   00000AB6   0x4629             MOV      R1,R5
   \   00000AB8   0x.... 0x....      BL       __aeabi_fadd
   \   00000ABC   0x4605             MOV      R5,R0
   \   00000ABE   0x9802             LDR      R0,[SP, #+8]
   \   00000AC0   0xF8B0 0x0050      LDRH     R0,[R0, #+80]
   \   00000AC4   0xF240 0x3102      MOVW     R1,#+770
   \   00000AC8   0x4208             TST      R0,R1
   \   00000ACA   0x9804             LDR      R0,[SP, #+16]
   \   00000ACC   0xD04F             BEQ.N    ??prepare_segmented_line_to_65
   \   00000ACE   0x2100             MOVS     R1,#+0
   \   00000AD0   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000AD4   0xF63F 0xABC9      BHI.W    ??prepare_segmented_line_to_22
   \   00000AD8   0x....             LDR.N    R0,??DataTable11_8
   \   00000ADA   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000ADE   0x.... 0x....      BL       __aeabi_ui2f
   \   00000AE2   0x4681             MOV      R9,R0
   \   00000AE4   0x....             LDR.N    R0,??DataTable11_10
   \   00000AE6   0x6840             LDR      R0,[R0, #+4]
   \   00000AE8   0x4649             MOV      R1,R9
   \   00000AEA   0x.... 0x....      BL       __aeabi_fsub
   \   00000AEE   0x4680             MOV      R8,R0
   \   00000AF0   0x....             LDR.N    R0,??DataTable11_10
   \   00000AF2   0x6800             LDR      R0,[R0, #+0]
   \   00000AF4   0x4649             MOV      R1,R9
   \   00000AF6   0x.... 0x....      BL       __aeabi_fadd
   \   00000AFA   0x4601             MOV      R1,R0
   \   00000AFC   0x4640             MOV      R0,R8
   \   00000AFE   0x.... 0x....      BL       __aeabi_fsub
   \   00000B02   0x4680             MOV      R8,R0
   \   00000B04   0x....             LDR.N    R0,??DataTable11_8
   \   00000B06   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000B0A   0x1E40             SUBS     R0,R0,#+1
   \   00000B0C   0x.... 0x....      BL       __aeabi_i2f
   \   00000B10   0x4601             MOV      R1,R0
   \   00000B12   0x4640             MOV      R0,R8
   \   00000B14   0x.... 0x....      BL       __aeabi_fdiv
   \   00000B18   0x9904             LDR      R1,[SP, #+16]
   \   00000B1A   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000B1E   0xF63F 0xABA4      BHI.W    ??prepare_segmented_line_to_22
   \   00000B22   0x4628             MOV      R0,R5
   \   00000B24   0x2100             MOVS     R1,#+0
   \   00000B26   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000B2A   0xF63F 0xAB9E      BHI.W    ??prepare_segmented_line_to_22
   \   00000B2E   0x....             LDR.N    R0,??DataTable11_10
   \   00000B30   0x68C0             LDR      R0,[R0, #+12]
   \   00000B32   0x4649             MOV      R1,R9
   \   00000B34   0x.... 0x....      BL       __aeabi_fsub
   \   00000B38   0x4680             MOV      R8,R0
   \   00000B3A   0x....             LDR.N    R0,??DataTable11_10
   \   00000B3C   0x6880             LDR      R0,[R0, #+8]
   \   00000B3E   0x4649             MOV      R1,R9
   \   00000B40   0x.... 0x....      BL       __aeabi_fadd
   \   00000B44   0x4601             MOV      R1,R0
   \   00000B46   0x4640             MOV      R0,R8
   \   00000B48   0x.... 0x....      BL       __aeabi_fsub
   \   00000B4C   0x4680             MOV      R8,R0
   \   00000B4E   0x9803             LDR      R0,[SP, #+12]
   \   00000B50   0x7840             LDRB     R0,[R0, #+1]
   \   00000B52   0x1E40             SUBS     R0,R0,#+1
   \   00000B54   0x.... 0x....      BL       __aeabi_i2f
   \   00000B58   0x4601             MOV      R1,R0
   \   00000B5A   0x4640             MOV      R0,R8
   \   00000B5C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000B60   0x4629             MOV      R1,R5
   \   00000B62   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000B66   0xF67F 0xAF5E      BLS.W    ??prepare_segmented_line_to_60
   \   00000B6A   0xF7FF 0xBB7E      B.W      ??prepare_segmented_line_to_22
   \                     ??prepare_segmented_line_to_65: (+1)
   \   00000B6E   0x2100             MOVS     R1,#+0
   \   00000B70   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000B74   0xF63F 0xAB79      BHI.W    ??prepare_segmented_line_to_22
   \   00000B78   0x9802             LDR      R0,[SP, #+8]
   \   00000B7A   0xF8D0 0xB00C      LDR      R11,[R0, #+12]
   \   00000B7E   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000B82   0x4659             MOV      R1,R11
   \   00000B84   0x.... 0x....      BL       __aeabi_fmul
   \   00000B88   0x4682             MOV      R10,R0
   \   00000B8A   0x....             LDR.N    R0,??DataTable11_8
   \   00000B8C   0xF890 0x0098      LDRB     R0,[R0, #+152]
   \   00000B90   0x.... 0x....      BL       __aeabi_ui2f
   \   00000B94   0x4681             MOV      R9,R0
   \   00000B96   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000B9A   0x4651             MOV      R1,R10
   \   00000B9C   0x.... 0x....      BL       __aeabi_fmul
   \   00000BA0   0x4649             MOV      R1,R9
   \   00000BA2   0x.... 0x....      BL       __aeabi_fsub
   \   00000BA6   0x4680             MOV      R8,R0
   \   00000BA8   0x9803             LDR      R0,[SP, #+12]
   \   00000BAA   0x68C0             LDR      R0,[R0, #+12]
   \   00000BAC   0x9000             STR      R0,[SP, #+0]
   \   00000BAE   0x4659             MOV      R1,R11
   \   00000BB0   0x.... 0x....      BL       __aeabi_fadd
   \   00000BB4   0x4601             MOV      R1,R0
   \   00000BB6   0x4640             MOV      R0,R8
   \   00000BB8   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000BBC   0xD300             BCC.N    ??prepare_segmented_line_to_66
   \   00000BBE   0x4688             MOV      R8,R1
   \                     ??prepare_segmented_line_to_66: (+1)
   \   00000BC0   0x4650             MOV      R0,R10
   \   00000BC2   0x4651             MOV      R1,R10
   \   00000BC4   0x.... 0x....      BL       __aeabi_fsub
   \   00000BC8   0x4649             MOV      R1,R9
   \   00000BCA   0x.... 0x....      BL       __aeabi_fadd
   \   00000BCE   0x4682             MOV      R10,R0
   \   00000BD0   0x....             LDR.N    R0,??DataTable11_8
   \   00000BD2   0x6880             LDR      R0,[R0, #+8]
   \   00000BD4   0x9900             LDR      R1,[SP, #+0]
   \   00000BD6   0x.... 0x....      BL       __aeabi_fadd
   \   00000BDA   0x4651             MOV      R1,R10
   \   00000BDC   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000BE0   0xD300             BCC.N    ??prepare_segmented_line_to_67
   \   00000BE2   0x4682             MOV      R10,R0
   \                     ??prepare_segmented_line_to_67: (+1)
   \   00000BE4   0x4640             MOV      R0,R8
   \   00000BE6   0x4651             MOV      R1,R10
   \   00000BE8   0x.... 0x....      BL       __aeabi_fsub
   \   00000BEC   0x4680             MOV      R8,R0
   \   00000BEE   0x....             LDR.N    R0,??DataTable11_8
   \   00000BF0   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \   00000BF4   0x1E40             SUBS     R0,R0,#+1
   \   00000BF6   0x.... 0x....      BL       __aeabi_i2f
   \   00000BFA   0x4601             MOV      R1,R0
   \   00000BFC   0x4640             MOV      R0,R8
   \   00000BFE   0x.... 0x....      BL       __aeabi_fdiv
   \   00000C02   0x9904             LDR      R1,[SP, #+16]
   \   00000C04   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000C08   0xF63F 0xAB2F      BHI.W    ??prepare_segmented_line_to_22
   \   00000C0C   0x4628             MOV      R0,R5
   \   00000C0E   0x2100             MOVS     R1,#+0
   \   00000C10   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000C14   0xF63F 0xAB29      BHI.W    ??prepare_segmented_line_to_22
   \   00000C18   0x9802             LDR      R0,[SP, #+8]
   \   00000C1A   0xF8D0 0x8010      LDR      R8,[R0, #+16]
   \   00000C1E   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000C22   0x4641             MOV      R1,R8
   \   00000C24   0x.... 0x....      BL       __aeabi_fmul
   \   00000C28   0x4682             MOV      R10,R0
   \   00000C2A   0xF04F 0x4080      MOV      R0,#+1073741824
   \   00000C2E   0x4651             MOV      R1,R10
   \   00000C30   0x.... 0x....      BL       __aeabi_fmul
   \   00000C34   0x4649             MOV      R1,R9
   \   00000C36   0x.... 0x....      BL       __aeabi_fsub
   \   00000C3A   0x4683             MOV      R11,R0
   \   00000C3C   0x9803             LDR      R0,[SP, #+12]
   \   00000C3E   0x6900             LDR      R0,[R0, #+16]
   \   00000C40   0x9000             STR      R0,[SP, #+0]
   \   00000C42   0x4641             MOV      R1,R8
   \   00000C44   0x.... 0x....      BL       __aeabi_fadd
   \   00000C48   0x4601             MOV      R1,R0
   \   00000C4A   0x4658             MOV      R0,R11
   \   00000C4C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000C50   0xD300             BCC.N    ??prepare_segmented_line_to_68
   \   00000C52   0x468B             MOV      R11,R1
   \                     ??prepare_segmented_line_to_68: (+1)
   \   00000C54   0x4650             MOV      R0,R10
   \   00000C56   0x4651             MOV      R1,R10
   \   00000C58   0x.... 0x....      BL       __aeabi_fsub
   \   00000C5C   0x4649             MOV      R1,R9
   \   00000C5E   0x.... 0x....      BL       __aeabi_fadd
   \   00000C62   0x4680             MOV      R8,R0
   \   00000C64   0x9802             LDR      R0,[SP, #+8]
   \   00000C66   0x6840             LDR      R0,[R0, #+4]
   \   00000C68   0x9900             LDR      R1,[SP, #+0]
   \   00000C6A   0x.... 0x....      BL       __aeabi_fadd
   \   00000C6E   0x4641             MOV      R1,R8
   \   00000C70   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000C74   0xF4BF 0xAEC3      BCS.W    ??prepare_segmented_line_to_58
   \   00000C78   0xE6C2             B.N      ??prepare_segmented_line_to_59
    693          
    694                  } // segment loop
    695                } // cell loop
    696          
    697                return false; // caller will update current_position
                       ^
Warning[Pe111]: statement is unreachable
    698              }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     destination

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     g26_debug_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x........         DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x........         DC32     mksCfg+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x........         DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " ubl.line_to_destinat...">`:
   \   00000000   0x20 0x75          DC8 " ubl.line_to_destination_cartesian(xe="
   \              0x62 0x6C    
   \              0x2E 0x6C    
   \              0x69 0x6E    
   \              0x65 0x5F    
   \              0x74 0x6F    
   \              0x5F 0x64    
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x5F 0x63    
   \              0x61 0x72    
   \              0x74 0x65    
   \              0x73 0x69    
   \              0x61 0x6E    
   \              0x28 0x78    
   \              0x65 0x3D    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", ye=">`:
   \   00000000   0x2C 0x20          DC8 ", ye="
   \              0x79 0x65    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", ze=">`:
   \   00000000   0x2C 0x20          DC8 ", ze="
   \              0x7A 0x65    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", ee=">`:
   \   00000000   0x2C 0x20          DC8 ", ee="
   \              0x65 0x65    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Start of ubl.line_to_...">`:
   \   00000000   0x53 0x74          DC8 "Start of ubl.line_to_destination_cartesian()"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x75    
   \              0x62 0x6C    
   \              0x2E 0x6C    
   \              0x69 0x6E    
   \              0x65 0x5F    
   \              0x74 0x6F    
   \              0x5F 0x64    
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x5F 0x63    
   \              0x61 0x72    
   \              0x74 0x65    
   \              0x73 0x69    
   \              0x61 0x6E    
   \              0x28 0x29    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "out of bounds in ubl....">`:
   \   00000000   0x6F 0x75          DC8 6FH, 75H, 74H, 20H, 6FH, 66H, 20H, 62H
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x62    
   \   00000008   0x6F 0x75          DC8 6FH, 75H, 6EH, 64H, 73H, 20H, 69H, 6EH
   \              0x6E 0x64    
   \              0x73 0x20    
   \              0x69 0x6E    
   \   00000010   0x20 0x75          DC8 20H, 75H, 62H, 6CH, 2EH, 6CH, 69H, 6EH
   \              0x62 0x6C    
   \              0x2E 0x6C    
   \              0x69 0x6E    
   \   00000018   0x65 0x5F          DC8 65H, 5FH, 74H, 6FH, 5FH, 64H, 65H, 73H
   \              0x74 0x6F    
   \              0x5F 0x64    
   \              0x65 0x73    
   \   00000020   0x74 0x69          DC8 74H, 69H, 6EH, 61H, 74H, 69H, 6FH, 6EH
   \              0x6E 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \   00000028   0x5F 0x63          DC8 5FH, 63H, 61H, 72H, 74H, 65H, 73H, 69H
   \              0x61 0x72    
   \              0x74 0x65    
   \              0x73 0x69    
   \   00000030   0x61 0x6E          DC8 61H, 6EH, 28H, 29H, 0
   \              0x28 0x29    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FINAL_MOVE in ubl.lin...">`:
   \   00000000   0x46 0x49          DC8 "FINAL_MOVE in ubl.line_to_destination_cartesian()"
   \              0x4E 0x41    
   \              0x4C 0x5F    
   \              0x4D 0x4F    
   \              0x56 0x45    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x75 0x62    
   \              0x6C 0x2E    
   \              0x6C 0x69    
   \              0x6E 0x65    
   \              0x5F 0x74    
   \              0x6F 0x5F    
   \              0x64 0x65    
   \              0x73 0x74    
   \              0x69 0x6E    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x5F    
   \              0x63 0x61    
   \              0x72 0x74    
   \              0x65 0x73    
   \              0x69 0x61    
   \              0x6E 0x28    
   \              0x29 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "vertical move done in...">`:
   \   00000000   0x76 0x65          DC8 76H, 65H, 72H, 74H, 69H, 63H, 61H, 6CH
   \              0x72 0x74    
   \              0x69 0x63    
   \              0x61 0x6C    
   \   00000008   0x20 0x6D          DC8 20H, 6DH, 6FH, 76H, 65H, 20H, 64H, 6FH
   \              0x6F 0x76    
   \              0x65 0x20    
   \              0x64 0x6F    
   \   00000010   0x6E 0x65          DC8 6EH, 65H, 20H, 69H, 6EH, 20H, 75H, 62H
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x75 0x62    
   \   00000018   0x6C 0x2E          DC8 6CH, 2EH, 6CH, 69H, 6EH, 65H, 5FH, 74H
   \              0x6C 0x69    
   \              0x6E 0x65    
   \              0x5F 0x74    
   \   00000020   0x6F 0x5F          DC8 6FH, 5FH, 64H, 65H, 73H, 74H, 69H, 6EH
   \              0x64 0x65    
   \              0x73 0x74    
   \              0x69 0x6E    
   \   00000028   0x61 0x74          DC8 61H, 74H, 69H, 6FH, 6EH, 5FH, 63H, 61H
   \              0x69 0x6F    
   \              0x6E 0x5F    
   \              0x63 0x61    
   \   00000030   0x72 0x74          DC8 72H, 74H, 65H, 73H, 69H, 61H, 6EH, 28H
   \              0x65 0x73    
   \              0x69 0x61    
   \              0x6E 0x28    
   \   00000038   0x29 0x00          DC8 29H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "horizontal move done ...">`:
   \   00000000   0x68 0x6F          DC8 68H, 6FH, 72H, 69H, 7AH, 6FH, 6EH, 74H
   \              0x72 0x69    
   \              0x7A 0x6F    
   \              0x6E 0x74    
   \   00000008   0x61 0x6C          DC8 61H, 6CH, 20H, 6DH, 6FH, 76H, 65H, 20H
   \              0x20 0x6D    
   \              0x6F 0x76    
   \              0x65 0x20    
   \   00000010   0x64 0x6F          DC8 64H, 6FH, 6EH, 65H, 20H, 69H, 6EH, 20H
   \              0x6E 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \   00000018   0x75 0x62          DC8 75H, 62H, 6CH, 2EH, 6CH, 69H, 6EH, 65H
   \              0x6C 0x2E    
   \              0x6C 0x69    
   \              0x6E 0x65    
   \   00000020   0x5F 0x74          DC8 5FH, 74H, 6FH, 5FH, 64H, 65H, 73H, 74H
   \              0x6F 0x5F    
   \              0x64 0x65    
   \              0x73 0x74    
   \   00000028   0x69 0x6E          DC8 69H, 6EH, 61H, 74H, 69H, 6FH, 6EH, 5FH
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x5F    
   \   00000030   0x63 0x61          DC8 63H, 61H, 72H, 74H, 65H, 73H, 69H, 61H
   \              0x72 0x74    
   \              0x65 0x73    
   \              0x69 0x61    
   \   00000038   0x6E 0x28          DC8 6EH, 28H, 29H, 0
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "generic move done in ...">`:
   \   00000000   0x67 0x65          DC8 67H, 65H, 6EH, 65H, 72H, 69H, 63H, 20H
   \              0x6E 0x65    
   \              0x72 0x69    
   \              0x63 0x20    
   \   00000008   0x6D 0x6F          DC8 6DH, 6FH, 76H, 65H, 20H, 64H, 6FH, 6EH
   \              0x76 0x65    
   \              0x20 0x64    
   \              0x6F 0x6E    
   \   00000010   0x65 0x20          DC8 65H, 20H, 69H, 6EH, 20H, 75H, 62H, 6CH
   \              0x69 0x6E    
   \              0x20 0x75    
   \              0x62 0x6C    
   \   00000018   0x2E 0x6C          DC8 2EH, 6CH, 69H, 6EH, 65H, 5FH, 74H, 6FH
   \              0x69 0x6E    
   \              0x65 0x5F    
   \              0x74 0x6F    
   \   00000020   0x5F 0x64          DC8 5FH, 64H, 65H, 73H, 74H, 69H, 6EH, 61H
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x61    
   \   00000028   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 5FH, 63H, 61H, 72H
   \              0x6F 0x6E    
   \              0x5F 0x63    
   \              0x61 0x72    
   \   00000030   0x74 0x65          DC8 74H, 65H, 73H, 69H, 61H, 6EH, 28H, 29H
   \              0x73 0x69    
   \              0x61 0x6E    
   \              0x28 0x29    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     mksCfg+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     delta_segments_per_second

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x3FC99999         DC32     0x3fc99999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     scara_feed_factor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     _ZN7Planner15leveling_activeE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     mksCfg+0x60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   0x........         DC32     _ZN20unified_bed_leveling8z_valuesE
    699          
    700            #endif // UBL_SEGMENTED
    701          
    702          #endif // AUTO_BED_LEVELING_UBL

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Planner::fade_scaling_factor_for_z(float const &)
        16   -> __aeabi_cfcmpeq
        16   -> __aeabi_cfrcmple
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
       8   Planner::leveling_active_at_z(float const &)
         8   -> __aeabi_cfcmpeq
         8   -> __aeabi_cfcmple
       0   Stepper::get_axis_position_degrees(AxisEnum)
         0   -> Stepper::get_axis_position_mm(AxisEnum)
       0   debug_current_and_destination(char const *)
      40   position_is_reachable_IS_CARTESIAN(float const &, float const &)
        40   -> __aeabi_cdrcmple
        40   -> __aeabi_dadd
        40   -> __aeabi_f2d
      32   position_is_reachable_IS_KINEMATIC(float const &, float const &)
        32   -> __aeabi_cfrcmple
        32   -> __aeabi_fadd
        32   -> __aeabi_fmul
       0   set_current_from_destination()
         0   -> memcpy
      56   ubl_buffer_segment_raw(float const (&)[4], float const &)
        56   -> Planner::buffer_segment(float const &, float const &, float const &, float const &, float const &, uint8_t)
        56   -> __aeabi_cfcmple
        56   -> __aeabi_fadd
        56   -> __aeabi_fmul
        56   -> __aeabi_fsub
        56   -> inverse_kinematics(float const *)
        56   -> sqrtf
      40   unified_bed_leveling::get_cell_index_x(float const &)
        40   -> __aeabi_cfcmple
        40   -> __aeabi_d2iz
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
      40   unified_bed_leveling::get_cell_index_y(float const &)
        40   -> __aeabi_cfcmple
        40   -> __aeabi_d2iz
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_f2d
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
     128   unified_bed_leveling::line_to_destination_cartesian(float const &, uint8_t)
       128   -> Planner::buffer_segment(float const &, float const &, float const &, float const &, float const &, uint8_t)
       128   -> Planner::fade_scaling_factor_for_z(float const &)
       128   -> USARTClass::write(uint8_t)
       128   -> __aeabi_cfcmpeq
       128   -> __aeabi_cfcmple
       128   -> __aeabi_d2f
       128   -> __aeabi_ddiv
       128   -> __aeabi_dmul
       128   -> __aeabi_f2d
       128   -> __aeabi_fadd
       128   -> __aeabi_fdiv
       128   -> __aeabi_fmul
       128   -> __aeabi_fsub
       128   -> __aeabi_i2f
       128   -> __aeabi_ui2f
       128   -> __iar_FDtest
       128   -> debug_current_and_destination(char const *)
       128   -> serial_echopair_P(char const *, float)
       128   -> set_current_from_destination()
       128   -> unified_bed_leveling::get_cell_index_x(float const &)
       128   -> unified_bed_leveling::get_cell_index_y(float const &)
       128   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
       128   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
       128   -> unified_bed_leveling::z_correction_for_x_on_horizontal_mesh_line(float const &, int, int)
       128   -> unified_bed_leveling::z_correction_for_y_on_vertical_mesh_line(float const &, int, int)
      40   unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        40   -> __aeabi_cfcmple
         0   -> __aeabi_fadd
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
      40   unified_bed_leveling::mesh_index_to_ypos(uint8_t)
        40   -> __aeabi_cfcmple
         0   -> __aeabi_fadd
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
     128   unified_bed_leveling::prepare_segmented_line_to(float const (&)[4], float const &)
       128   -> Planner::fade_scaling_factor_for_z(float const &)
       128   -> Planner::leveling_active_at_z(float const &)
       128   -> Stepper::get_axis_position_degrees(AxisEnum)
       128   -> __aeabi_cfcmple
       128   -> __aeabi_cfrcmple
       128   -> __aeabi_d2f
       128   -> __aeabi_d2iz
       128   -> __aeabi_ddiv
       128   -> __aeabi_dmul
       128   -> __aeabi_f2d
       128   -> __aeabi_fadd
       128   -> __aeabi_fdiv
       128   -> __aeabi_fmul
       128   -> __aeabi_fsub
       128   -> __aeabi_i2f
       128   -> __aeabi_ui2f
       128   -> __iar_FDtest
       128   -> lroundf
       128   -> memcpy
       128   -> position_is_reachable_IS_CARTESIAN(float const &, float const &)
       128   -> position_is_reachable_IS_KINEMATIC(float const &, float const &)
       128   -> sqrtf
       128   -> ubl_buffer_segment_raw(float const (&)[4], float const &)
       128   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
       128   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
      56   unified_bed_leveling::z_correction_for_x_on_horizontal_mesh_line(float const &, int, int)
        56   -> __aeabi_cfcmple
        56   -> __aeabi_d2f
        56   -> __aeabi_ddiv
        56   -> __aeabi_dmul
        56   -> __aeabi_f2d
         0   -> __aeabi_fadd
        56   -> __aeabi_fadd
        56   -> __aeabi_fdiv
        56   -> __aeabi_fmul
        56   -> __aeabi_fsub
        56   -> __aeabi_i2f
        56   -> __aeabi_ui2f
        56   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
      56   unified_bed_leveling::z_correction_for_y_on_vertical_mesh_line(float const &, int, int)
        56   -> __aeabi_cfcmple
        56   -> __aeabi_d2f
        56   -> __aeabi_ddiv
        56   -> __aeabi_dmul
        56   -> __aeabi_f2d
         0   -> __aeabi_fadd
        56   -> __aeabi_fadd
        56   -> __aeabi_fdiv
        56   -> __aeabi_fmul
        56   -> __aeabi_fsub
        56   -> __aeabi_i2f
        56   -> __aeabi_ui2f
        56   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant " ubl.line_to_destinat...">
       8  ?<Constant ", ee=">
       8  ?<Constant ", ye=">
       8  ?<Constant ", ze=">
      52  ?<Constant "FINAL_MOVE in ubl.lin...">
      48  ?<Constant "Start of ubl.line_to_...">
      60  ?<Constant "generic move done in ...">
      60  ?<Constant "horizontal move done ...">
      56  ?<Constant "out of bounds in ubl....">
      60  ?<Constant "vertical move done in...">
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
     100  Planner::fade_scaling_factor_for_z(float const &)
      40  Planner::leveling_active_at_z(float const &)
       4  Stepper::get_axis_position_degrees(AxisEnum)
       2  debug_current_and_destination(char const *)
     184  position_is_reachable_IS_CARTESIAN(float const &, float const &)
     388  position_is_reachable_IS_KINEMATIC(float const &, float const &)
      12  scara_feed_factor
          scara_oldA
          scara_oldB
      20  set_current_from_destination()
     604  ubl_buffer_segment_raw(float const (&)[4], float const &)
     360  unified_bed_leveling::get_cell_index_x(float const &)
     356  unified_bed_leveling::get_cell_index_y(float const &)
    2384  unified_bed_leveling::line_to_destination_cartesian(float const &, uint8_t)
     316  unified_bed_leveling::mesh_index_to_xpos(uint8_t)
     312  unified_bed_leveling::mesh_index_to_ypos(uint8_t)
    3194  unified_bed_leveling::prepare_segmented_line_to(float const (&)[4], float const &)
     444  unified_bed_leveling::z_correction_for_x_on_horizontal_mesh_line(float const &, int, int)
     468  unified_bed_leveling::z_correction_for_y_on_vertical_mesh_line(float const &, int, int)
       4  z_fade_factor
       1  -- Other

 
    12 bytes in section .bss
     4 bytes in section .data
     1 byte  in section .rodata
 9 668 bytes in section .text
 
 6 070 bytes of CODE  memory (+ 3 598 bytes shared)
     0 bytes of CONST memory (+     1 byte  shared)
    12 bytes of DATA  memory (+     4 bytes shared)

Errors: none
Warnings: 23
