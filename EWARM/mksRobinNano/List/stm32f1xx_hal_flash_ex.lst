###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:06:01
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash_ex.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash_ex.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\stm32f1xx_hal_flash_ex.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\stm32f1xx_hal_flash_ex.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f1xx_hal_flash_ex.c
      4            * @author  MCD Application Team
      5            * @version V1.0.4
      6            * @date    29-April-2016
      7            * @brief   Extended FLASH HAL module driver.
      8            *    
      9            *          This file provides firmware functions to manage the following 
     10            *          functionalities of the FLASH peripheral:
     11            *           + Extended Initialization/de-initialization functions
     12            *           + Extended I/O operation functions
     13            *           + Extended Peripheral Control functions 
     14            *         
     15            @verbatim
     16            ==============================================================================
     17                         ##### Flash peripheral extended features  #####
     18            ==============================================================================
     19                     
     20                                ##### How to use this driver #####
     21            ==============================================================================
     22            [..] This driver provides functions to configure and program the FLASH memory 
     23                 of all STM32F1xxx devices. It includes
     24                 
     25                  (++) Set/Reset the write protection
     26                  (++) Program the user Option Bytes
     27                  (++) Get the Read protection Level
     28            
     29            @endverbatim
     30            ******************************************************************************
     31            * @attention
     32            *
     33            * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
     34            *
     35            * Redistribution and use in source and binary forms, with or without modification,
     36            * are permitted provided that the following conditions are met:
     37            *   1. Redistributions of source code must retain the above copyright notice,
     38            *      this list of conditions and the following disclaimer.
     39            *   2. Redistributions in binary form must reproduce the above copyright notice,
     40            *      this list of conditions and the following disclaimer in the documentation
     41            *      and/or other materials provided with the distribution.
     42            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     43            *      may be used to endorse or promote products derived from this software
     44            *      without specific prior written permission.
     45            *
     46            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     47            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     48            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     49            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     50            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     51            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     52            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     53            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     54            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     55            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     56            *
     57            ******************************************************************************  
     58            */
     59          
     60          /* Includes ------------------------------------------------------------------*/
     61          #include "stm32f1xx_hal.h"
     62          
     63          /** @addtogroup STM32F1xx_HAL_Driver
     64            * @{
     65            */
     66          #ifdef HAL_FLASH_MODULE_ENABLED
     67          
     68          /** @addtogroup FLASH
     69            * @{
     70            */
     71          /** @addtogroup FLASH_Private_Variables
     72           * @{
     73           */
     74          /* Variables used for Erase pages under interruption*/
     75          extern FLASH_ProcessTypeDef pFlash;
     76          /**
     77            * @}
     78            */
     79          
     80          /**
     81            * @}
     82            */
     83            
     84          /** @defgroup FLASHEx FLASHEx
     85            * @brief FLASH HAL Extension module driver
     86            * @{
     87            */
     88          
     89          /* Private typedef -----------------------------------------------------------*/
     90          /* Private define ------------------------------------------------------------*/
     91          /** @defgroup FLASHEx_Private_Constants FLASHEx Private Constants
     92           * @{
     93           */
     94          #define FLASH_POSITION_IWDGSW_BIT        (uint32_t)POSITION_VAL(FLASH_OBR_IWDG_SW)
     95          #define FLASH_POSITION_OB_USERDATA0_BIT  (uint32_t)POSITION_VAL(FLASH_OBR_DATA0)
     96          #define FLASH_POSITION_OB_USERDATA1_BIT  (uint32_t)POSITION_VAL(FLASH_OBR_DATA1)
     97          /**
     98            * @}
     99            */
    100          
    101          /* Private macro -------------------------------------------------------------*/
    102          /** @defgroup FLASHEx_Private_Macros FLASHEx Private Macros
    103            * @{
    104            */
    105          /**
    106            * @}
    107            */ 
    108          
    109          /* Private variables ---------------------------------------------------------*/
    110          /* Private function prototypes -----------------------------------------------*/
    111          /** @defgroup FLASHEx_Private_Functions FLASHEx Private Functions
    112           * @{
    113           */
    114          /* Erase operations */
    115          static void              FLASH_MassErase(uint32_t Banks);
    116          
    117          /* Option bytes control */
    118          static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage);
    119          static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage);
    120          static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel);
    121          static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig);
    122          static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data);
    123          static uint32_t          FLASH_OB_GetWRP(void);
    124          static uint32_t          FLASH_OB_GetRDP(void);
    125          static uint8_t           FLASH_OB_GetUser(void);
    126          
    127          /**
    128            * @}
    129            */
    130          
    131          /* Exported functions ---------------------------------------------------------*/
    132          /** @defgroup FLASHEx_Exported_Functions FLASHEx Exported Functions
    133            * @{
    134            */
    135            
    136          /** @defgroup FLASHEx_Exported_Functions_Group1 FLASHEx Memory Erasing functions
    137           *  @brief   FLASH Memory Erasing functions
    138            *
    139          @verbatim   
    140            ==============================================================================
    141                          ##### FLASH Erasing Programming functions ##### 
    142            ==============================================================================
    143          
    144              [..] The FLASH Memory Erasing functions, includes the following functions:
    145              (+) @ref HAL_FLASHEx_Erase: return only when erase has been done
    146              (+) @ref HAL_FLASHEx_Erase_IT: end of erase is done when @ref HAL_FLASH_EndOfOperationCallback 
    147                  is called with parameter 0xFFFFFFFF
    148          
    149              [..] Any operation of erase should follow these steps:
    150              (#) Call the @ref HAL_FLASH_Unlock() function to enable the flash control register and 
    151                  program memory access.
    152              (#) Call the desired function to erase page.
    153              (#) Call the @ref HAL_FLASH_Lock() to disable the flash program memory access 
    154                 (recommended to protect the FLASH memory against possible unwanted operation).
    155          
    156          @endverbatim
    157            * @{
    158            */
    159            
    160          
    161          /**
    162            * @brief  Perform a mass erase or erase the specified FLASH memory pages
    163            * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
    164            *         must be called before.
    165            *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
    166            *         (recommended to protect the FLASH memory against possible unwanted operation)
    167            * @param[in]  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
    168            *         contains the configuration information for the erasing.
    169            *
    170            * @param[out]  PageError pointer to variable  that
    171            *         contains the configuration information on faulty page in case of error
    172            *         (0xFFFFFFFF means that all the pages have been correctly erased)
    173            *
    174            * @retval HAL_StatusTypeDef HAL Status
    175            */

   \                                 In section .text, align 2, keep-with-next
    176          HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
    177          {
   \                     HAL_FLASHEx_Erase: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    178            HAL_StatusTypeDef status = HAL_ERROR;
   \   00000008   0x2601             MOVS     R6,#+1
    179            uint32_t address = 0;
    180          
    181            /* Process Locked */
    182            __HAL_LOCK(&pFlash);
   \   0000000A   0x.... 0x....      LDR.W    R7,??DataTable14
   \   0000000E   0xF997 0x0018      LDRSB    R0,[R7, #+24]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD101             BNE.N    ??HAL_FLASHEx_Erase_0
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0xE03F             B.N      ??HAL_FLASHEx_Erase_1
   \                     ??HAL_FLASHEx_Erase_0: (+1)
   \   0000001A   0x4630             MOV      R0,R6
   \   0000001C   0x7638             STRB     R0,[R7, #+24]
    183          
    184            /* Check the parameters */
    185            assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    186          
    187            if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
   \   0000001E   0xF24C 0x3850      MOVW     R8,#+50000
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0xD111             BNE.N    ??HAL_FLASHEx_Erase_2
    188            {
    189          #if defined(FLASH_BANK2_END)
    190              if (pEraseInit->Banks == FLASH_BANK_BOTH)
    191              {
    192                /* Mass Erase requested for Bank1 and Bank2 */
    193                /* Wait for last operation to be completed */
    194                if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
    195                    (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
    196                {
    197                  /*Mass erase to be done*/
    198                  FLASH_MassErase(FLASH_BANK_BOTH);
    199                  
    200                  /* Wait for last operation to be completed */
    201                  if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
    202                      (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
    203                  {
    204                    status = HAL_OK;
    205                  }
    206                  
    207                  /* If the erase operation is completed, disable the MER Bit */
    208                  CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
    209                  CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
    210                }
    211              }
    212              else if (pEraseInit->Banks == FLASH_BANK_2)
    213              {
    214                /* Mass Erase requested for Bank2 */
    215                /* Wait for last operation to be completed */
    216                if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
    217                {
    218                  /*Mass erase to be done*/
    219                  FLASH_MassErase(FLASH_BANK_2);
    220                  
    221                  /* Wait for last operation to be completed */
    222                  status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
    223                  
    224                  /* If the erase operation is completed, disable the MER Bit */
    225                  CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
    226                }
    227              }
    228              else 
    229          #endif /* FLASH_BANK2_END */
    230              {
    231                /* Mass Erase requested for Bank1 */
    232                /* Wait for last operation to be completed */
    233                if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
   \   0000002A   0x.... 0x....      BL       FLASH_WaitForLastOperation
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD130             BNE.N    ??HAL_FLASHEx_Erase_3
    234                {
    235                  /*Mass erase to be done*/
    236                  FLASH_MassErase(FLASH_BANK_1);
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       FLASH_MassErase
    237                  
    238                  /* Wait for last operation to be completed */
    239                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000038   0x4640             MOV      R0,R8
   \   0000003A   0x.... 0x....      BL       FLASH_WaitForLastOperation
   \   0000003E   0x4606             MOV      R6,R0
    240                  
    241                  /* If the erase operation is completed, disable the MER Bit */
    242                  CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40022010
   \   00000044   0x6801             LDR      R1,[R0, #+0]
   \   00000046   0xF021 0x0104      BIC      R1,R1,#0x4
   \   0000004A   0x6001             STR      R1,[R0, #+0]
   \   0000004C   0xE022             B.N      ??HAL_FLASHEx_Erase_3
    243                }
    244              }
    245            }
    246            else
    247            {
    248              /* Page Erase is requested */
    249              /* Check the parameters */
    250              assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    251              assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    252              
    253          #if defined(FLASH_BANK2_END)
    254              /* Page Erase requested on address located on bank2 */
    255              if(pEraseInit->PageAddress > FLASH_BANK1_END)
    256              {   
    257                /* Wait for last operation to be completed */
    258                if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
    259                {
    260                  /*Initialization of PageError variable*/
    261                  *PageError = 0xFFFFFFFF;
    262                  
    263                  /* Erase by page by page to be done*/
    264                  for(address = pEraseInit->PageAddress;
    265                      address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
    266                      address += FLASH_PAGE_SIZE)
    267                  {
    268                    FLASH_PageErase(address);
    269                    
    270                    /* Wait for last operation to be completed */
    271                    status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
    272                    
    273                    /* If the erase operation is completed, disable the PER Bit */
    274                    CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
    275                    
    276                    if (status != HAL_OK)
    277                    {
    278                      /* In case of error, stop erase procedure and return the faulty address */
    279                      *PageError = address;
    280                      break;
    281                    }
    282                  }
    283                }
    284              }
    285              else
    286          #endif /* FLASH_BANK2_END */
    287             {
    288                /* Page Erase requested on address located on bank1 */
    289                /* Wait for last operation to be completed */
    290                if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
   \                     ??HAL_FLASHEx_Erase_2: (+1)
   \   0000004E   0x.... 0x....      BL       FLASH_WaitForLastOperation
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD11E             BNE.N    ??HAL_FLASHEx_Erase_3
    291                {
    292                  /*Initialization of PageError variable*/
    293                  *PageError = 0xFFFFFFFF;
   \   00000056   0xF04F 0x30FF      MOV      R0,#-1
   \   0000005A   0x6028             STR      R0,[R5, #+0]
    294                  
    295                  /* Erase page by page to be done*/
    296                  for(address = pEraseInit->PageAddress;
   \   0000005C   0xF8D4 0x9008      LDR      R9,[R4, #+8]
   \   00000060   0xE001             B.N      ??HAL_FLASHEx_Erase_4
    297                      address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
    298                      address += FLASH_PAGE_SIZE)
   \                     ??HAL_FLASHEx_Erase_5: (+1)
   \   00000062   0xF509 0x6900      ADD      R9,R9,#+2048
   \                     ??HAL_FLASHEx_Erase_4: (+1)
   \   00000066   0x68E0             LDR      R0,[R4, #+12]
   \   00000068   0x68A1             LDR      R1,[R4, #+8]
   \   0000006A   0xEB01 0x20C0      ADD      R0,R1,R0, LSL #+11
   \   0000006E   0x4581             CMP      R9,R0
   \   00000070   0xD210             BCS.N    ??HAL_FLASHEx_Erase_3
    299                  {
    300                    FLASH_PageErase(address);
   \   00000072   0x4648             MOV      R0,R9
   \   00000074   0x.... 0x....      BL       FLASH_PageErase
    301                    
    302                    /* Wait for last operation to be completed */
    303                    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000078   0x4640             MOV      R0,R8
   \   0000007A   0x.... 0x....      BL       FLASH_WaitForLastOperation
   \   0000007E   0x4606             MOV      R6,R0
    304                    
    305                    /* If the erase operation is completed, disable the PER Bit */
    306                    CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x40022010
   \   00000084   0x6801             LDR      R1,[R0, #+0]
   \   00000086   0xF021 0x0102      BIC      R1,R1,#0x2
   \   0000008A   0x6001             STR      R1,[R0, #+0]
    307                    
    308                    if (status != HAL_OK)
   \   0000008C   0x2E00             CMP      R6,#+0
   \   0000008E   0xD0E8             BEQ.N    ??HAL_FLASHEx_Erase_5
    309                    {
    310                      /* In case of error, stop erase procedure and return the faulty address */
    311                      *PageError = address;
   \   00000090   0xF8C5 0x9000      STR      R9,[R5, #+0]
    312                      break;
    313                    }
    314                  }
    315                }
    316              }
    317            }
    318          
    319            /* Process Unlocked */
    320            __HAL_UNLOCK(&pFlash);
   \                     ??HAL_FLASHEx_Erase_3: (+1)
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x7638             STRB     R0,[R7, #+24]
    321          
    322            return status;
   \   00000098   0x4630             MOV      R0,R6
   \                     ??HAL_FLASHEx_Erase_1: (+1)
   \   0000009A   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    323          }
    324          
    325          /**
    326            * @brief  Perform a mass erase or erase the specified FLASH memory pages with interrupt enabled
    327            * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
    328            *         must be called before.
    329            *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
    330            *         (recommended to protect the FLASH memory against possible unwanted operation)
    331            * @param  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
    332            *         contains the configuration information for the erasing.
    333            *
    334            * @retval HAL_StatusTypeDef HAL Status
    335            */

   \                                 In section .text, align 2, keep-with-next
    336          HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
    337          {
   \                     HAL_FLASHEx_Erase_IT: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    338            HAL_StatusTypeDef status = HAL_OK;
    339          
    340            /* Process Locked */
    341            __HAL_LOCK(&pFlash);
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable14
   \   00000006   0xF991 0x2018      LDRSB    R2,[R1, #+24]
   \   0000000A   0x2A01             CMP      R2,#+1
   \   0000000C   0xD101             BNE.N    ??HAL_FLASHEx_Erase_IT_0
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xBD02             POP      {R1,PC}
   \                     ??HAL_FLASHEx_Erase_IT_0: (+1)
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x760A             STRB     R2,[R1, #+24]
    342          
    343            /* If procedure already ongoing, reject the next one */
    344            if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
   \   00000016   0xF991 0x2000      LDRSB    R2,[R1, #+0]
   \   0000001A   0x2A00             CMP      R2,#+0
   \   0000001C   0xD001             BEQ.N    ??HAL_FLASHEx_Erase_IT_1
    345            {
    346              return HAL_ERROR;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xBD02             POP      {R1,PC}
    347            }
    348            
    349            /* Check the parameters */
    350            assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    351          
    352            /* Enable End of FLASH Operation and Error source interrupts */
    353            __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
   \                     ??HAL_FLASHEx_Erase_IT_1: (+1)
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable14_1  ;; 0x40022010
   \   00000026   0x6813             LDR      R3,[R2, #+0]
   \   00000028   0xF443 0x53A0      ORR      R3,R3,#0x1400
   \   0000002C   0x6013             STR      R3,[R2, #+0]
    354          
    355          #if defined(FLASH_BANK2_END)
    356            /* Enable End of FLASH Operation and Error source interrupts */
    357            __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
    358            
    359          #endif
    360            if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
   \   0000002E   0x6802             LDR      R2,[R0, #+0]
   \   00000030   0x2A02             CMP      R2,#+2
   \   00000032   0xD105             BNE.N    ??HAL_FLASHEx_Erase_IT_2
    361            {
    362              /*Mass erase to be done*/
    363              pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
   \   00000034   0x2202             MOVS     R2,#+2
   \   00000036   0x700A             STRB     R2,[R1, #+0]
    364                  FLASH_MassErase(pEraseInit->Banks);
   \   00000038   0x6840             LDR      R0,[R0, #+4]
   \   0000003A   0x.... 0x....      BL       FLASH_MassErase
   \   0000003E   0xE008             B.N      ??HAL_FLASHEx_Erase_IT_3
    365            }
    366            else
    367            {
    368              /* Erase by page to be done*/
    369          
    370              /* Check the parameters */
    371              assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    372              assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    373          
    374              pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
   \                     ??HAL_FLASHEx_Erase_IT_2: (+1)
   \   00000040   0x2201             MOVS     R2,#+1
   \   00000042   0x700A             STRB     R2,[R1, #+0]
    375              pFlash.DataRemaining = pEraseInit->NbPages;
   \   00000044   0x68C2             LDR      R2,[R0, #+12]
   \   00000046   0x604A             STR      R2,[R1, #+4]
    376              pFlash.Address = pEraseInit->PageAddress;
   \   00000048   0x6882             LDR      R2,[R0, #+8]
   \   0000004A   0x608A             STR      R2,[R1, #+8]
    377          
    378              /*Erase 1st page and wait for IT*/
    379              FLASH_PageErase(pEraseInit->PageAddress);
   \   0000004C   0x6880             LDR      R0,[R0, #+8]
   \   0000004E   0x.... 0x....      BL       FLASH_PageErase
    380            }
    381          
    382            return status;
   \                     ??HAL_FLASHEx_Erase_IT_3: (+1)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xBD02             POP      {R1,PC}          ;; return
    383          }
    384          
    385          /**
    386            * @}
    387            */
    388          
    389          /** @defgroup FLASHEx_Exported_Functions_Group2 Option Bytes Programming functions
    390           *  @brief   Option Bytes Programming functions
    391            *
    392          @verbatim   
    393            ==============================================================================
    394                          ##### Option Bytes Programming functions ##### 
    395            ==============================================================================  
    396              [..]
    397              This subsection provides a set of functions allowing to control the FLASH 
    398              option bytes operations.
    399          
    400          @endverbatim
    401            * @{
    402            */
    403          
    404          /**
    405            * @brief  Erases the FLASH option bytes.
    406            * @note   This functions erases all option bytes except the Read protection (RDP).
    407            *         The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
    408            *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes
    409            *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes
    410            *         (system reset will occur)
    411            * @retval HAL status
    412            */
    413          

   \                                 In section .text, align 2, keep-with-next
    414          HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
    415          {
   \                     HAL_FLASHEx_OBErase: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    416            uint8_t rdptmp = OB_RDP_LEVEL_0;
    417            HAL_StatusTypeDef status = HAL_ERROR;
    418          
    419            /* Get the actual read protection Option Byte value */
    420            rdptmp = FLASH_OB_GetRDP();
   \   00000002   0x.... 0x....      BL       FLASH_OB_GetRDP
   \   00000006   0x4604             MOV      R4,R0
    421          
    422            /* Wait for last operation to be completed */
    423            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000008   0xF24C 0x3550      MOVW     R5,#+50000
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       FLASH_WaitForLastOperation
    424          
    425            if(status == HAL_OK)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD119             BNE.N    ??HAL_FLASHEx_OBErase_0
    426            {
    427              /* Clean the error context */
    428              pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable14
   \   0000001A   0x61C8             STR      R0,[R1, #+28]
    429          
    430              /* If the previous operation is completed, proceed to erase the option bytes */
    431              SET_BIT(FLASH->CR, FLASH_CR_OPTER);
   \   0000001C   0x....             LDR.N    R6,??DataTable14_1  ;; 0x40022010
   \   0000001E   0x6830             LDR      R0,[R6, #+0]
   \   00000020   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000024   0x6030             STR      R0,[R6, #+0]
    432              SET_BIT(FLASH->CR, FLASH_CR_STRT);
   \   00000026   0x6830             LDR      R0,[R6, #+0]
   \   00000028   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000002C   0x6030             STR      R0,[R6, #+0]
    433          
    434              /* Wait for last operation to be completed */
    435              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0x.... 0x....      BL       FLASH_WaitForLastOperation
    436          
    437              /* If the erase operation is completed, disable the OPTER Bit */
    438              CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
   \   00000034   0x6831             LDR      R1,[R6, #+0]
   \   00000036   0xF021 0x0120      BIC      R1,R1,#0x20
   \   0000003A   0x6031             STR      R1,[R6, #+0]
    439          
    440              if(status == HAL_OK)
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD104             BNE.N    ??HAL_FLASHEx_OBErase_0
    441              {
    442                /* Restore the last read protection Option Byte value */
    443                status = FLASH_OB_RDP_LevelConfig(rdptmp);
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0xB2C0             UXTB     R0,R0
   \   00000044   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000048   0x....             B.N      FLASH_OB_RDP_LevelConfig
    444              }
    445            }
    446          
    447            /* Return the erase status */
    448            return status;
   \                     ??HAL_FLASHEx_OBErase_0: (+1)
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    449          }
    450          
    451          /**
    452            * @brief  Program option bytes
    453            * @note   The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
    454            *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes
    455            *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes
    456            *         (system reset will occur)
    457            *
    458            * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
    459            *         contains the configuration information for the programming.
    460            *
    461            * @retval HAL_StatusTypeDef HAL Status
    462            */

   \                                 In section .text, align 2, keep-with-next
    463          HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
    464          {
   \                     HAL_FLASHEx_OBProgram: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    465            HAL_StatusTypeDef status = HAL_ERROR;
   \   00000004   0x2001             MOVS     R0,#+1
    466          
    467            /* Process Locked */
    468            __HAL_LOCK(&pFlash);
   \   00000006   0x....             LDR.N    R5,??DataTable14
   \   00000008   0xF995 0x1018      LDRSB    R1,[R5, #+24]
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD101             BNE.N    ??HAL_FLASHEx_OBProgram_0
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??HAL_FLASHEx_OBProgram_0: (+1)
   \   00000014   0x4601             MOV      R1,R0
   \   00000016   0x7629             STRB     R1,[R5, #+24]
    469          
    470            /* Check the parameters */
    471            assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
    472          
    473            /* Write protection configuration */
    474            if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
   \   00000018   0x7821             LDRB     R1,[R4, #+0]
   \   0000001A   0x07C9             LSLS     R1,R1,#+31
   \   0000001C   0xD50A             BPL.N    ??HAL_FLASHEx_OBProgram_1
    475            {
    476              assert_param(IS_WRPSTATE(pOBInit->WRPState));
    477              if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
   \   0000001E   0x68A0             LDR      R0,[R4, #+8]
   \   00000020   0x6861             LDR      R1,[R4, #+4]
   \   00000022   0x2901             CMP      R1,#+1
   \   00000024   0xD102             BNE.N    ??HAL_FLASHEx_OBProgram_2
    478              {
    479                /* Enable of Write protection on the selected page */
    480                status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
   \   00000026   0x.... 0x....      BL       FLASH_OB_EnableWRP
   \   0000002A   0xE001             B.N      ??HAL_FLASHEx_OBProgram_3
    481              }
    482              else
    483              {
    484                /* Disable of Write protection on the selected page */
    485                status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
   \                     ??HAL_FLASHEx_OBProgram_2: (+1)
   \   0000002C   0x.... 0x....      BL       FLASH_OB_DisableWRP
    486              }
    487              if (status != HAL_OK)
   \                     ??HAL_FLASHEx_OBProgram_3: (+1)
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD116             BNE.N    ??HAL_FLASHEx_OBProgram_4
    488              {
    489                /* Process Unlocked */
    490                __HAL_UNLOCK(&pFlash);
    491                return status;
    492              }
    493            }
    494          
    495            /* Read protection configuration */
    496            if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
   \                     ??HAL_FLASHEx_OBProgram_1: (+1)
   \   00000034   0x7821             LDRB     R1,[R4, #+0]
   \   00000036   0x0789             LSLS     R1,R1,#+30
   \   00000038   0xD504             BPL.N    ??HAL_FLASHEx_OBProgram_5
    497            {
    498              status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
   \   0000003A   0x7C20             LDRB     R0,[R4, #+16]
   \   0000003C   0x.... 0x....      BL       FLASH_OB_RDP_LevelConfig
    499              if (status != HAL_OK)
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD10E             BNE.N    ??HAL_FLASHEx_OBProgram_4
    500              {
    501                /* Process Unlocked */
    502                __HAL_UNLOCK(&pFlash);
    503                return status;
    504              }
    505            }
    506          
    507            /* USER configuration */
    508            if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
   \                     ??HAL_FLASHEx_OBProgram_5: (+1)
   \   00000044   0x7821             LDRB     R1,[R4, #+0]
   \   00000046   0x0749             LSLS     R1,R1,#+29
   \   00000048   0xD504             BPL.N    ??HAL_FLASHEx_OBProgram_6
    509            {
    510              status = FLASH_OB_UserConfig(pOBInit->USERConfig);
   \   0000004A   0x7C60             LDRB     R0,[R4, #+17]
   \   0000004C   0x.... 0x....      BL       FLASH_OB_UserConfig
    511              if (status != HAL_OK)
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD106             BNE.N    ??HAL_FLASHEx_OBProgram_4
    512              {
    513                /* Process Unlocked */
    514                __HAL_UNLOCK(&pFlash);
    515                return status;
    516              }
    517            }
    518          
    519            /* DATA configuration*/
    520            if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
   \                     ??HAL_FLASHEx_OBProgram_6: (+1)
   \   00000054   0x7821             LDRB     R1,[R4, #+0]
   \   00000056   0x0709             LSLS     R1,R1,#+28
   \   00000058   0xD503             BPL.N    ??HAL_FLASHEx_OBProgram_4
    521            {
    522              status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
   \   0000005A   0x7E21             LDRB     R1,[R4, #+24]
   \   0000005C   0x6960             LDR      R0,[R4, #+20]
   \   0000005E   0x.... 0x....      BL       FLASH_OB_ProgramData
    523              if (status != HAL_OK)
    524              {
    525                /* Process Unlocked */
    526                __HAL_UNLOCK(&pFlash);
    527                return status;
    528              }
    529            }
    530          
    531            /* Process Unlocked */
    532            __HAL_UNLOCK(&pFlash);
   \                     ??HAL_FLASHEx_OBProgram_4: (+1)
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x7629             STRB     R1,[R5, #+24]
    533          
    534            return status;
   \   00000066   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    535          }
    536          
    537          /**
    538            * @brief  Get the Option byte configuration
    539            * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
    540            *         contains the configuration information for the programming.
    541            *
    542            * @retval None
    543            */

   \                                 In section .text, align 2, keep-with-next
    544          void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
    545          {
   \                     HAL_FLASHEx_OBGetConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    546            pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
   \   00000004   0x2007             MOVS     R0,#+7
   \   00000006   0x6020             STR      R0,[R4, #+0]
    547          
    548            /*Get WRP*/
    549            pOBInit->WRPPage = FLASH_OB_GetWRP();
   \   00000008   0x.... 0x....      BL       FLASH_OB_GetWRP
   \   0000000C   0x60A0             STR      R0,[R4, #+8]
    550          
    551            /*Get RDP Level*/
    552            pOBInit->RDPLevel = FLASH_OB_GetRDP();
   \   0000000E   0x.... 0x....      BL       FLASH_OB_GetRDP
   \   00000012   0x7420             STRB     R0,[R4, #+16]
    553          
    554            /*Get USER*/
    555            pOBInit->USERConfig = FLASH_OB_GetUser();
   \   00000014   0x.... 0x....      BL       FLASH_OB_GetUser
   \   00000018   0x7460             STRB     R0,[R4, #+17]
    556          }
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    557          
    558          /**
    559            * @brief  Get the Option byte user data
    560            * @param  DATAAdress Address of the option byte DATA
    561            *          This parameter can be one of the following values:
    562            *            @arg @ref OB_DATA_ADDRESS_DATA0
    563            *            @arg @ref OB_DATA_ADDRESS_DATA1
    564            * @retval Value programmed in USER data
    565            */

   \                                 In section .text, align 2, keep-with-next
    566          uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
    567          {
    568            uint32_t value = 0;
    569            
    570            if (DATAAdress == OB_DATA_ADDRESS_DATA0)
   \                     HAL_FLASHEx_OBGetUserData: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable14_2  ;; 0x4002201c
   \   00000002   0x....             LDR.N    R2,??DataTable14_3  ;; 0x1ffff804
   \   00000004   0x4290             CMP      R0,R2
   \   00000006   0x6808             LDR      R0,[R1, #+0]
   \   00000008   0xD102             BNE.N    ??HAL_FLASHEx_OBGetUserData_0
    571            {
    572              /* Get value programmed in OB USER Data0 */
    573              value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
   \   0000000A   0xF3C0 0x2087      UBFX     R0,R0,#+10,#+8
   \   0000000E   0x4770             BX       LR
    574            }
    575            else
    576            {
    577              /* Get value programmed in OB USER Data1 */
    578              value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
   \                     ??HAL_FLASHEx_OBGetUserData_0: (+1)
   \   00000010   0xF3C0 0x4087      UBFX     R0,R0,#+18,#+8
    579            }
    580            
    581            return value;
   \   00000014   0x4770             BX       LR               ;; return
    582          }
    583          
    584          /**
    585            * @}
    586            */
    587          
    588          /**
    589            * @}
    590            */
    591          
    592          /** @addtogroup FLASHEx_Private_Functions
    593           * @{
    594           */
    595          
    596          /**
    597            * @brief  Full erase of FLASH memory Bank 
    598            * @param  Banks Banks to be erased
    599            *          This parameter can be one of the following values:
    600            *            @arg @ref FLASH_BANK_1 Bank1 to be erased
    601            @if STM32F101xG
    602            *            @arg @ref FLASH_BANK_2 Bank2 to be erased
    603            *            @arg @ref FLASH_BANK_BOTH Bank1 and Bank2 to be erased
    604            @endif
    605            @if STM32F103xG
    606            *            @arg @ref FLASH_BANK_2 Bank2 to be erased
    607            *            @arg @ref FLASH_BANK_BOTH Bank1 and Bank2 to be erased
    608            @endif
    609            *
    610            * @retval None
    611            */

   \                                 In section .text, align 2, keep-with-next
    612          static void FLASH_MassErase(uint32_t Banks)
    613          {
    614            /* Check the parameters */
    615            assert_param(IS_FLASH_BANK(Banks));
    616          
    617            /* Clean the error context */
    618            pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
   \                     FLASH_MassErase: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable14
   \   00000004   0x61C8             STR      R0,[R1, #+28]
    619          
    620          #if defined(FLASH_BANK2_END)
    621            if(Banks == FLASH_BANK_BOTH)
    622            {
    623              /* bank1 & bank2 will be erased*/
    624              SET_BIT(FLASH->CR, FLASH_CR_MER);
    625              SET_BIT(FLASH->CR2, FLASH_CR2_MER);
    626              SET_BIT(FLASH->CR, FLASH_CR_STRT);
    627              SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
    628            }
    629            else if(Banks == FLASH_BANK_2)
    630            {
    631              /*Only bank2 will be erased*/
    632              SET_BIT(FLASH->CR2, FLASH_CR2_MER);
    633              SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
    634            }
    635            else
    636            {
    637          #endif /* FLASH_BANK2_END */
    638              /* Only bank1 will be erased*/
    639              SET_BIT(FLASH->CR, FLASH_CR_MER);
   \   00000006   0x....             LDR.N    R0,??DataTable14_1  ;; 0x40022010
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    640              SET_BIT(FLASH->CR, FLASH_CR_STRT);
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000016   0x6001             STR      R1,[R0, #+0]
    641          #if defined(FLASH_BANK2_END)
    642            }
    643          #endif /* FLASH_BANK2_END */
    644          }
   \   00000018   0x4770             BX       LR               ;; return
    645          
    646          /**
    647            * @brief  Enable the write protection of the desired pages
    648            * @note   An option byte erase is done automatically in this function. 
    649            * @note   When the memory read protection level is selected (RDP level = 1), 
    650            *         it is not possible to program or erase the flash page i if
    651            *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
    652            * 
    653            * @param  WriteProtectPage specifies the page(s) to be write protected.
    654            *         The value of this parameter depend on device used within the same series 
    655            * @retval HAL status 
    656            */

   \                                 In section .text, align 2, keep-with-next
    657          static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
    658          {
   \                     FLASH_OB_EnableWRP: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
    659            HAL_StatusTypeDef status = HAL_OK;
    660            uint16_t WRP0_Data = 0xFFFF;
    661          #if defined(FLASH_WRP1_WRP1)
    662            uint16_t WRP1_Data = 0xFFFF;
    663          #endif /* FLASH_WRP1_WRP1 */
    664          #if defined(FLASH_WRP2_WRP2)
    665            uint16_t WRP2_Data = 0xFFFF;
    666          #endif /* FLASH_WRP2_WRP2 */
    667          #if defined(FLASH_WRP3_WRP3)
    668            uint16_t WRP3_Data = 0xFFFF;
    669          #endif /* FLASH_WRP3_WRP3 */
    670            
    671            /* Check the parameters */
    672            assert_param(IS_OB_WRP(WriteProtectPage));
    673              
    674            /* Get current write protected pages and the new pages to be protected ******/
    675            WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
   \   00000006   0x.... 0x....      BL       FLASH_OB_GetWRP
   \   0000000A   0x43A0             BICS     R0,R0,R4
    676            
    677          #if defined(OB_WRP_PAGES0TO15MASK)
    678            WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
   \   0000000C   0xB2C4             UXTB     R4,R0
    679          #elif defined(OB_WRP_PAGES0TO31MASK)
    680            WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
    681          #endif /* OB_WRP_PAGES0TO31MASK */
    682            
    683          #if defined(OB_WRP_PAGES16TO31MASK)
    684            WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8);
   \   0000000E   0xF3C0 0x2507      UBFX     R5,R0,#+8,#+8
    685          #elif defined(OB_WRP_PAGES32TO63MASK)
    686            WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8);
    687          #endif /* OB_WRP_PAGES32TO63MASK */
    688           
    689          #if defined(OB_WRP_PAGES64TO95MASK)
    690            WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16);
    691          #endif /* OB_WRP_PAGES64TO95MASK */
    692          #if defined(OB_WRP_PAGES32TO47MASK)
    693            WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16);
   \   00000012   0xF3C0 0x4607      UBFX     R6,R0,#+16,#+8
    694          #endif /* OB_WRP_PAGES32TO47MASK */
    695          
    696          #if defined(OB_WRP_PAGES96TO127MASK)
    697            WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24); 
    698          #elif defined(OB_WRP_PAGES48TO255MASK)
    699            WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24); 
   \   00000016   0x0E07             LSRS     R7,R0,#+24
    700          #elif defined(OB_WRP_PAGES48TO511MASK)
    701            WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24); 
    702          #elif defined(OB_WRP_PAGES48TO127MASK)
    703            WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24); 
    704          #endif /* OB_WRP_PAGES96TO127MASK */
    705            
    706            /* Wait for last operation to be completed */
    707            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000018   0xF24C 0x3850      MOVW     R8,#+50000
   \   0000001C   0x4640             MOV      R0,R8
   \   0000001E   0x.... 0x....      BL       FLASH_WaitForLastOperation
    708          
    709            if(status == HAL_OK)
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD142             BNE.N    ??FLASH_OB_EnableWRP_0
    710            { 
    711              /* Clean the error context */
    712              pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable14
   \   0000002A   0x61C8             STR      R0,[R1, #+28]
    713          
    714              /* To be able to write again option byte, need to perform a option byte erase */
    715              status = HAL_FLASHEx_OBErase();
   \   0000002C   0x.... 0x....      BL       HAL_FLASHEx_OBErase
    716              if (status == HAL_OK)  
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD13B             BNE.N    ??FLASH_OB_EnableWRP_0
    717              {
    718                /* Enable write protection */
    719                SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
   \   00000034   0x.... 0x....      LDR.W    R9,??DataTable14_1  ;; 0x40022010
   \   00000038   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \   0000003C   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000040   0xF8C9 0x1000      STR      R1,[R9, #+0]
    720          
    721          #if defined(FLASH_WRP0_WRP0)
    722                if(WRP0_Data != 0xFF)
   \   00000044   0x4621             MOV      R1,R4
   \   00000046   0x29FF             CMP      R1,#+255
   \   00000048   0xD006             BEQ.N    ??FLASH_OB_EnableWRP_1
    723                {
    724                  OB->WRP0 &= WRP0_Data;
   \   0000004A   0x....             LDR.N    R0,??DataTable14_4  ;; 0x1ffff808
   \   0000004C   0x8801             LDRH     R1,[R0, #+0]
   \   0000004E   0x4021             ANDS     R1,R4,R1
   \   00000050   0x8001             STRH     R1,[R0, #+0]
    725                  
    726                  /* Wait for last operation to be completed */
    727                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       FLASH_WaitForLastOperation
    728                }
    729          #endif /* FLASH_WRP0_WRP0 */
    730          
    731          #if defined(FLASH_WRP1_WRP1)
    732                if((status == HAL_OK) && (WRP1_Data != 0xFF))
   \                     ??FLASH_OB_EnableWRP_1: (+1)
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD109             BNE.N    ??FLASH_OB_EnableWRP_2
   \   0000005C   0x4629             MOV      R1,R5
   \   0000005E   0x29FF             CMP      R1,#+255
   \   00000060   0xD006             BEQ.N    ??FLASH_OB_EnableWRP_2
    733                {
    734                  OB->WRP1 &= WRP1_Data;
   \   00000062   0x....             LDR.N    R0,??DataTable14_4  ;; 0x1ffff808
   \   00000064   0x8841             LDRH     R1,[R0, #+2]
   \   00000066   0x4029             ANDS     R1,R5,R1
   \   00000068   0x8041             STRH     R1,[R0, #+2]
    735                  
    736                  /* Wait for last operation to be completed */
    737                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   0000006A   0x4640             MOV      R0,R8
   \   0000006C   0x.... 0x....      BL       FLASH_WaitForLastOperation
    738                }
    739          #endif /* FLASH_WRP1_WRP1 */
    740          
    741          #if defined(FLASH_WRP2_WRP2)
    742                if((status == HAL_OK) && (WRP2_Data != 0xFF))
   \                     ??FLASH_OB_EnableWRP_2: (+1)
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD109             BNE.N    ??FLASH_OB_EnableWRP_3
   \   00000074   0x4631             MOV      R1,R6
   \   00000076   0x29FF             CMP      R1,#+255
   \   00000078   0xD006             BEQ.N    ??FLASH_OB_EnableWRP_3
    743                {
    744                  OB->WRP2 &= WRP2_Data;
   \   0000007A   0x....             LDR.N    R0,??DataTable14_4  ;; 0x1ffff808
   \   0000007C   0x8881             LDRH     R1,[R0, #+4]
   \   0000007E   0x4031             ANDS     R1,R6,R1
   \   00000080   0x8081             STRH     R1,[R0, #+4]
    745                  
    746                  /* Wait for last operation to be completed */
    747                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000082   0x4640             MOV      R0,R8
   \   00000084   0x.... 0x....      BL       FLASH_WaitForLastOperation
    748                }
    749          #endif /* FLASH_WRP2_WRP2 */
    750          
    751          #if defined(FLASH_WRP3_WRP3)
    752                if((status == HAL_OK) && (WRP3_Data != 0xFF))
   \                     ??FLASH_OB_EnableWRP_3: (+1)
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD109             BNE.N    ??FLASH_OB_EnableWRP_4
   \   0000008C   0x4639             MOV      R1,R7
   \   0000008E   0x29FF             CMP      R1,#+255
   \   00000090   0xD006             BEQ.N    ??FLASH_OB_EnableWRP_4
    753                {
    754                  OB->WRP3 &= WRP3_Data;
   \   00000092   0x....             LDR.N    R0,??DataTable14_4  ;; 0x1ffff808
   \   00000094   0x88C1             LDRH     R1,[R0, #+6]
   \   00000096   0x4039             ANDS     R1,R7,R1
   \   00000098   0x80C1             STRH     R1,[R0, #+6]
    755                  
    756                  /* Wait for last operation to be completed */
    757                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   0000009A   0x4640             MOV      R0,R8
   \   0000009C   0x.... 0x....      BL       FLASH_WaitForLastOperation
    758                }
    759          #endif /* FLASH_WRP3_WRP3 */
    760          
    761                /* if the program operation is completed, disable the OPTPG Bit */
    762                CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
   \                     ??FLASH_OB_EnableWRP_4: (+1)
   \   000000A0   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \   000000A4   0xF021 0x0110      BIC      R1,R1,#0x10
   \   000000A8   0xF8C9 0x1000      STR      R1,[R9, #+0]
    763              }
    764            }
    765            
    766            return status;
   \                     ??FLASH_OB_EnableWRP_0: (+1)
   \   000000AC   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    767          }
    768          
    769          /**
    770            * @brief  Disable the write protection of the desired pages
    771            * @note   An option byte erase is done automatically in this function. 
    772            * @note   When the memory read protection level is selected (RDP level = 1), 
    773            *         it is not possible to program or erase the flash page i if   
    774            *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
    775            * 
    776            * @param  WriteProtectPage specifies the page(s) to be write unprotected.
    777            *         The value of this parameter depend on device used within the same series 
    778            * @retval HAL status 
    779            */

   \                                 In section .text, align 2, keep-with-next
    780          static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
    781          {
   \                     FLASH_OB_DisableWRP: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
    782            HAL_StatusTypeDef status = HAL_OK;
    783            uint16_t WRP0_Data = 0xFFFF;
    784          #if defined(FLASH_WRP1_WRP1)
    785            uint16_t WRP1_Data = 0xFFFF;
    786          #endif /* FLASH_WRP1_WRP1 */
    787          #if defined(FLASH_WRP2_WRP2)
    788            uint16_t WRP2_Data = 0xFFFF;
    789          #endif /* FLASH_WRP2_WRP2 */
    790          #if defined(FLASH_WRP3_WRP3)
    791            uint16_t WRP3_Data = 0xFFFF;
    792          #endif /* FLASH_WRP3_WRP3 */
    793            
    794            /* Check the parameters */
    795            assert_param(IS_OB_WRP(WriteProtectPage));
    796          
    797            /* Get current write protected pages and the new pages to be unprotected ******/
    798            WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
   \   00000006   0x.... 0x....      BL       FLASH_OB_GetWRP
   \   0000000A   0x4320             ORRS     R0,R0,R4
    799          
    800          #if defined(OB_WRP_PAGES0TO15MASK)
    801            WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
   \   0000000C   0xB2C4             UXTB     R4,R0
    802          #elif defined(OB_WRP_PAGES0TO31MASK)
    803            WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
    804          #endif /* OB_WRP_PAGES0TO31MASK */
    805            
    806          #if defined(OB_WRP_PAGES16TO31MASK)
    807            WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8);
   \   0000000E   0xF3C0 0x2507      UBFX     R5,R0,#+8,#+8
    808          #elif defined(OB_WRP_PAGES32TO63MASK)
    809            WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8);
    810          #endif /* OB_WRP_PAGES32TO63MASK */
    811           
    812          #if defined(OB_WRP_PAGES64TO95MASK)
    813            WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16);
    814          #endif /* OB_WRP_PAGES64TO95MASK */
    815          #if defined(OB_WRP_PAGES32TO47MASK)
    816            WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16);
   \   00000012   0xF3C0 0x4607      UBFX     R6,R0,#+16,#+8
    817          #endif /* OB_WRP_PAGES32TO47MASK */
    818          
    819          #if defined(OB_WRP_PAGES96TO127MASK)
    820            WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24); 
    821          #elif defined(OB_WRP_PAGES48TO255MASK)
    822            WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24); 
   \   00000016   0x0E07             LSRS     R7,R0,#+24
    823          #elif defined(OB_WRP_PAGES48TO511MASK)
    824            WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO511MASK) >> 24); 
    825          #elif defined(OB_WRP_PAGES48TO127MASK)
    826            WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24); 
    827          #endif /* OB_WRP_PAGES96TO127MASK */
    828          
    829              
    830            /* Wait for last operation to be completed */
    831            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000018   0xF24C 0x3850      MOVW     R8,#+50000
   \   0000001C   0x4640             MOV      R0,R8
   \   0000001E   0x.... 0x....      BL       FLASH_WaitForLastOperation
    832          
    833            if(status == HAL_OK)
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD142             BNE.N    ??FLASH_OB_DisableWRP_0
    834            { 
    835              /* Clean the error context */
    836              pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR.N    R1,??DataTable14
   \   0000002A   0x61C8             STR      R0,[R1, #+28]
    837          
    838              /* To be able to write again option byte, need to perform a option byte erase */
    839              status = HAL_FLASHEx_OBErase();
   \   0000002C   0x.... 0x....      BL       HAL_FLASHEx_OBErase
    840              if (status == HAL_OK)  
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD13B             BNE.N    ??FLASH_OB_DisableWRP_0
    841              {
    842                SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
   \   00000034   0x.... 0x....      LDR.W    R9,??DataTable14_1  ;; 0x40022010
   \   00000038   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \   0000003C   0xF041 0x0110      ORR      R1,R1,#0x10
   \   00000040   0xF8C9 0x1000      STR      R1,[R9, #+0]
    843          
    844          #if defined(FLASH_WRP0_WRP0)
    845                if(WRP0_Data != 0xFF)
   \   00000044   0x4621             MOV      R1,R4
   \   00000046   0x29FF             CMP      R1,#+255
   \   00000048   0xD006             BEQ.N    ??FLASH_OB_DisableWRP_1
    846                {
    847                  OB->WRP0 |= WRP0_Data;
   \   0000004A   0x....             LDR.N    R0,??DataTable14_4  ;; 0x1ffff808
   \   0000004C   0x8801             LDRH     R1,[R0, #+0]
   \   0000004E   0x4321             ORRS     R1,R4,R1
   \   00000050   0x8001             STRH     R1,[R0, #+0]
    848                  
    849                  /* Wait for last operation to be completed */
    850                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       FLASH_WaitForLastOperation
    851                }
    852          #endif /* FLASH_WRP0_WRP0 */
    853          
    854          #if defined(FLASH_WRP1_WRP1)
    855                if((status == HAL_OK) && (WRP1_Data != 0xFF))
   \                     ??FLASH_OB_DisableWRP_1: (+1)
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD109             BNE.N    ??FLASH_OB_DisableWRP_2
   \   0000005C   0x4629             MOV      R1,R5
   \   0000005E   0x29FF             CMP      R1,#+255
   \   00000060   0xD006             BEQ.N    ??FLASH_OB_DisableWRP_2
    856                {
    857                  OB->WRP1 |= WRP1_Data;
   \   00000062   0x....             LDR.N    R0,??DataTable14_4  ;; 0x1ffff808
   \   00000064   0x8841             LDRH     R1,[R0, #+2]
   \   00000066   0x4329             ORRS     R1,R5,R1
   \   00000068   0x8041             STRH     R1,[R0, #+2]
    858                  
    859                  /* Wait for last operation to be completed */
    860                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   0000006A   0x4640             MOV      R0,R8
   \   0000006C   0x.... 0x....      BL       FLASH_WaitForLastOperation
    861                }
    862          #endif /* FLASH_WRP1_WRP1 */
    863          
    864          #if defined(FLASH_WRP2_WRP2)
    865                if((status == HAL_OK) && (WRP2_Data != 0xFF))
   \                     ??FLASH_OB_DisableWRP_2: (+1)
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD109             BNE.N    ??FLASH_OB_DisableWRP_3
   \   00000074   0x4631             MOV      R1,R6
   \   00000076   0x29FF             CMP      R1,#+255
   \   00000078   0xD006             BEQ.N    ??FLASH_OB_DisableWRP_3
    866                {
    867                  OB->WRP2 |= WRP2_Data;
   \   0000007A   0x....             LDR.N    R0,??DataTable14_4  ;; 0x1ffff808
   \   0000007C   0x8881             LDRH     R1,[R0, #+4]
   \   0000007E   0x4331             ORRS     R1,R6,R1
   \   00000080   0x8081             STRH     R1,[R0, #+4]
    868                  
    869                  /* Wait for last operation to be completed */
    870                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000082   0x4640             MOV      R0,R8
   \   00000084   0x.... 0x....      BL       FLASH_WaitForLastOperation
    871                }
    872          #endif /* FLASH_WRP2_WRP2 */
    873          
    874          #if defined(FLASH_WRP3_WRP3)
    875                if((status == HAL_OK) && (WRP3_Data != 0xFF))
   \                     ??FLASH_OB_DisableWRP_3: (+1)
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD109             BNE.N    ??FLASH_OB_DisableWRP_4
   \   0000008C   0x4639             MOV      R1,R7
   \   0000008E   0x29FF             CMP      R1,#+255
   \   00000090   0xD006             BEQ.N    ??FLASH_OB_DisableWRP_4
    876                {
    877                  OB->WRP3 |= WRP3_Data;
   \   00000092   0x....             LDR.N    R0,??DataTable14_4  ;; 0x1ffff808
   \   00000094   0x88C1             LDRH     R1,[R0, #+6]
   \   00000096   0x4339             ORRS     R1,R7,R1
   \   00000098   0x80C1             STRH     R1,[R0, #+6]
    878                  
    879                  /* Wait for last operation to be completed */
    880                  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   0000009A   0x4640             MOV      R0,R8
   \   0000009C   0x.... 0x....      BL       FLASH_WaitForLastOperation
    881                }
    882          #endif /* FLASH_WRP3_WRP3 */
    883          
    884                /* if the program operation is completed, disable the OPTPG Bit */
    885                CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
   \                     ??FLASH_OB_DisableWRP_4: (+1)
   \   000000A0   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \   000000A4   0xF021 0x0110      BIC      R1,R1,#0x10
   \   000000A8   0xF8C9 0x1000      STR      R1,[R9, #+0]
    886              }
    887            }
    888            return status;
   \                     ??FLASH_OB_DisableWRP_0: (+1)
   \   000000AC   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    889          }
    890          
    891          /**
    892            * @brief  Set the read protection level.
    893            * @param  ReadProtectLevel specifies the read protection level.
    894            *         This parameter can be one of the following values:
    895            *            @arg @ref OB_RDP_LEVEL_0 No protection
    896            *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
    897            * @retval HAL status
    898            */

   \                                 In section .text, align 2, keep-with-next
    899          static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
    900          {
   \                     FLASH_OB_RDP_LevelConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    901            HAL_StatusTypeDef status = HAL_OK;
    902            
    903            /* Check the parameters */
    904            assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
    905            
    906            /* Wait for last operation to be completed */
    907            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000004   0xF24C 0x3550      MOVW     R5,#+50000
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       FLASH_WaitForLastOperation
    908            
    909            if(status == HAL_OK)
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD121             BNE.N    ??FLASH_OB_RDP_LevelConfig_0
    910            { 
    911              /* Clean the error context */
    912              pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable14
   \   00000016   0x61C8             STR      R0,[R1, #+28]
    913              
    914              /* If the previous operation is completed, proceed to erase the option bytes */
    915              SET_BIT(FLASH->CR, FLASH_CR_OPTER);
   \   00000018   0x....             LDR.N    R6,??DataTable14_1  ;; 0x40022010
   \   0000001A   0x6830             LDR      R0,[R6, #+0]
   \   0000001C   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000020   0x6030             STR      R0,[R6, #+0]
    916              SET_BIT(FLASH->CR, FLASH_CR_STRT);
   \   00000022   0x6830             LDR      R0,[R6, #+0]
   \   00000024   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000028   0x6030             STR      R0,[R6, #+0]
    917          
    918              /* Wait for last operation to be completed */
    919              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       FLASH_WaitForLastOperation
    920          
    921              /* If the erase operation is completed, disable the OPTER Bit */
    922              CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
   \   00000030   0x6831             LDR      R1,[R6, #+0]
   \   00000032   0xF021 0x0120      BIC      R1,R1,#0x20
   \   00000036   0x6031             STR      R1,[R6, #+0]
    923          
    924              if(status == HAL_OK)
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD10C             BNE.N    ??FLASH_OB_RDP_LevelConfig_0
    925              {
    926                /* Enable the Option Bytes Programming operation */
    927                SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
   \   0000003C   0x6830             LDR      R0,[R6, #+0]
   \   0000003E   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000042   0x6030             STR      R0,[R6, #+0]
    928                
    929                WRITE_REG(OB->RDP, ReadProtectLevel);
   \   00000044   0x....             LDR.N    R0,??DataTable14_5  ;; 0x1ffff800
   \   00000046   0x8004             STRH     R4,[R0, #+0]
    930                
    931                /* Wait for last operation to be completed */
    932                status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
   \   00000048   0x4628             MOV      R0,R5
   \   0000004A   0x.... 0x....      BL       FLASH_WaitForLastOperation
    933                
    934                /* if the program operation is completed, disable the OPTPG Bit */
    935                CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
   \   0000004E   0x6831             LDR      R1,[R6, #+0]
   \   00000050   0xF021 0x0110      BIC      R1,R1,#0x10
   \   00000054   0x6031             STR      R1,[R6, #+0]
    936              }
    937            }
    938            
    939            return status;
   \                     ??FLASH_OB_RDP_LevelConfig_0: (+1)
   \   00000056   0xBD70             POP      {R4-R6,PC}       ;; return
    940          }
    941          
    942          /**
    943            * @brief  Program the FLASH User Option Byte.    
    944            * @note   Programming of the OB should be performed only after an erase (otherwise PGERR occurs)
    945            * @param  UserConfig The FLASH User Option Bytes values FLASH_OBR_IWDG_SW(Bit2), 
    946            *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
    947            *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
    948            * @retval HAL status
    949            */

   \                                 In section .text, align 2, keep-with-next
    950          static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
    951          {
   \                     FLASH_OB_UserConfig: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4606             MOV      R6,R0
    952            HAL_StatusTypeDef status = HAL_OK;
    953          
    954            /* Check the parameters */
    955            assert_param(IS_OB_IWDG_SOURCE((UserConfig&OB_IWDG_SW)));
    956            assert_param(IS_OB_STOP_SOURCE((UserConfig&OB_STOP_NO_RST)));
    957            assert_param(IS_OB_STDBY_SOURCE((UserConfig&OB_STDBY_NO_RST)));
    958          #if defined(FLASH_BANK2_END)
    959            assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
    960          #endif /* FLASH_BANK2_END */
    961          
    962            /* Wait for last operation to be completed */
    963            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000004   0xF24C 0x3450      MOVW     R4,#+50000
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       FLASH_WaitForLastOperation
    964            
    965            if(status == HAL_OK)
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD112             BNE.N    ??FLASH_OB_UserConfig_0
    966            {     
    967              /* Clean the error context */
    968              pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable14
   \   00000016   0x61C8             STR      R0,[R1, #+28]
    969          
    970              /* Enable the Option Bytes Programming operation */
    971              SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
   \   00000018   0x....             LDR.N    R5,??DataTable14_1  ;; 0x40022010
   \   0000001A   0x6828             LDR      R0,[R5, #+0]
   \   0000001C   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000020   0x6028             STR      R0,[R5, #+0]
    972           
    973          #if defined(FLASH_BANK2_END)
    974              OB->USER = (UserConfig | 0xF0);
    975          #else
    976              OB->USER = (UserConfig | 0x88);
   \   00000022   0xF046 0x0088      ORR      R0,R6,#0x88
   \   00000026   0x....             LDR.N    R1,??DataTable14_6  ;; 0x1ffff802
   \   00000028   0x8008             STRH     R0,[R1, #+0]
    977          #endif /* FLASH_BANK2_END */
    978          
    979              /* Wait for last operation to be completed */
    980              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       FLASH_WaitForLastOperation
    981          
    982              /* if the program operation is completed, disable the OPTPG Bit */
    983              CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
   \   00000030   0x6829             LDR      R1,[R5, #+0]
   \   00000032   0xF021 0x0110      BIC      R1,R1,#0x10
   \   00000036   0x6029             STR      R1,[R5, #+0]
    984            }
    985            
    986            return status; 
   \                     ??FLASH_OB_UserConfig_0: (+1)
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    987          }
    988          
    989          /**
    990            * @brief  Programs a half word at a specified Option Byte Data address.
    991            * @note   The function @ref HAL_FLASH_Unlock() should be called before to unlock the FLASH interface
    992            *         The function @ref HAL_FLASH_OB_Unlock() should be called before to unlock the options bytes
    993            *         The function @ref HAL_FLASH_OB_Launch() should be called after to force the reload of the options bytes 
    994            *         (system reset will occur)
    995            *         Programming of the OB should be performed only after an erase (otherwise PGERR occurs)
    996            * @param  Address specifies the address to be programmed.
    997            *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
    998            * @param  Data specifies the data to be programmed.
    999            * @retval HAL status
   1000            */

   \                                 In section .text, align 2, keep-with-next
   1001          static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
   1002          {
   \                     FLASH_OB_ProgramData: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1003            HAL_StatusTypeDef status = HAL_ERROR;
   1004            
   1005            /* Check the parameters */
   1006            assert_param(IS_OB_DATA_ADDRESS(Address));
   1007            
   1008            /* Wait for last operation to be completed */
   1009            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000006   0xF24C 0x3650      MOVW     R6,#+50000
   \   0000000A   0x4630             MOV      R0,R6
   \   0000000C   0x.... 0x....      BL       FLASH_WaitForLastOperation
   1010            
   1011            if(status == HAL_OK)
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD10F             BNE.N    ??FLASH_OB_ProgramData_0
   1012            {
   1013              /* Clean the error context */
   1014              pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable14
   \   00000018   0x61C8             STR      R0,[R1, #+28]
   1015          
   1016              /* Enables the Option Bytes Programming operation */
   1017              SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
   \   0000001A   0x....             LDR.N    R7,??DataTable14_1  ;; 0x40022010
   \   0000001C   0x6838             LDR      R0,[R7, #+0]
   \   0000001E   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000022   0x6038             STR      R0,[R7, #+0]
   1018              *(__IO uint16_t*)Address = Data;
   \   00000024   0x8025             STRH     R5,[R4, #+0]
   1019              
   1020              /* Wait for last operation to be completed */
   1021              status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       FLASH_WaitForLastOperation
   1022              
   1023              /* If the program operation is completed, disable the OPTPG Bit */
   1024              CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
   \   0000002C   0x6839             LDR      R1,[R7, #+0]
   \   0000002E   0xF021 0x0110      BIC      R1,R1,#0x10
   \   00000032   0x6039             STR      R1,[R7, #+0]
   1025            }
   1026            /* Return the Option Byte Data Program Status */
   1027            return status;
   \                     ??FLASH_OB_ProgramData_0: (+1)
   \   00000034   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1028          }
   1029          
   1030          /**
   1031            * @brief  Return the FLASH Write Protection Option Bytes value.
   1032            * @retval The FLASH Write Protection Option Bytes value
   1033            */

   \                                 In section .text, align 2, keep-with-next
   1034          static uint32_t FLASH_OB_GetWRP(void)
   1035          {
   1036            /* Return the FLASH write protection Register value */
   1037            return (uint32_t)(READ_REG(FLASH->WRPR));
   \                     FLASH_OB_GetWRP: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14_7  ;; 0x40022020
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   1038          }
   1039          
   1040          /**
   1041            * @brief  Returns the FLASH Read Protection level.
   1042            * @retval FLASH ReadOut Protection Status:
   1043            *         This parameter can be one of the following values:
   1044            *            @arg @ref OB_RDP_LEVEL_0 No protection
   1045            *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
   1046            */

   \                                 In section .text, align 2, keep-with-next
   1047          static uint32_t FLASH_OB_GetRDP(void)
   1048          {
   1049            uint32_t readstatus = OB_RDP_LEVEL_0;
   \                     FLASH_OB_GetRDP: (+1)
   \   00000000   0x20A5             MOVS     R0,#+165
   1050            uint32_t tmp_reg = 0;
   1051            
   1052            /* Read RDP level bits */
   1053            tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
   \   00000002   0x....             LDR.N    R1,??DataTable14_2  ;; 0x4002201c
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xF001 0x0102      AND      R1,R1,#0x2
   1054          
   1055            if (tmp_reg == FLASH_OBR_RDPRT)
   \   0000000A   0x2902             CMP      R1,#+2
   \   0000000C   0xD100             BNE.N    ??FLASH_OB_GetRDP_0
   1056            {
   1057              readstatus = OB_RDP_LEVEL_1;
   \   0000000E   0x2000             MOVS     R0,#+0
   1058            }
   1059            else 
   1060            {
   1061              readstatus = OB_RDP_LEVEL_0;
   1062            }
   1063          
   1064            return readstatus;
   \                     ??FLASH_OB_GetRDP_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return
   1065          }
   1066          
   1067          /**
   1068            * @brief  Return the FLASH User Option Byte value.
   1069            * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
   1070            *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
   1071            *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
   1072            */

   \                                 In section .text, align 2, keep-with-next
   1073          static uint8_t FLASH_OB_GetUser(void)
   1074          {
   1075            /* Return the User Option Byte */
   1076            return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
   \                     FLASH_OB_GetUser: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14_2  ;; 0x4002201c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x0082      UBFX     R0,R0,#+2,#+3
   \   00000008   0x4770             BX       LR               ;; return
   1077          }
   1078          
   1079          /**
   1080            * @}
   1081            */
   1082          
   1083          /**
   1084            * @}
   1085            */
   1086          
   1087          /** @addtogroup FLASH
   1088            * @{
   1089            */
   1090          
   1091          /** @addtogroup FLASH_Private_Functions
   1092           * @{
   1093           */
   1094          
   1095          /**
   1096            * @brief  Erase the specified FLASH memory page
   1097            * @param  PageAddress FLASH page to erase
   1098            *         The value of this parameter depend on device used within the same series      
   1099            * 
   1100            * @retval None
   1101            */

   \                                 In section .text, align 2, keep-with-next
   1102          void FLASH_PageErase(uint32_t PageAddress)
   1103          {
   1104            /* Clean the error context */
   1105            pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
   \                     FLASH_PageErase: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x....             LDR.N    R2,??DataTable14
   \   00000004   0x61D1             STR      R1,[R2, #+28]
   1106          
   1107          #if defined(FLASH_BANK2_END)
   1108            if(PageAddress > FLASH_BANK1_END)
   1109            { 
   1110              /* Proceed to erase the page */
   1111              SET_BIT(FLASH->CR2, FLASH_CR2_PER);
   1112              WRITE_REG(FLASH->AR2, PageAddress);
   1113              SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
   1114            }
   1115            else
   1116            {
   1117          #endif /* FLASH_BANK2_END */
   1118              /* Proceed to erase the page */
   1119              SET_BIT(FLASH->CR, FLASH_CR_PER);
   \   00000006   0x....             LDR.N    R1,??DataTable14_1  ;; 0x40022010
   \   00000008   0x680A             LDR      R2,[R1, #+0]
   \   0000000A   0xF042 0x0202      ORR      R2,R2,#0x2
   \   0000000E   0x600A             STR      R2,[R1, #+0]
   1120              WRITE_REG(FLASH->AR, PageAddress);
   \   00000010   0x6048             STR      R0,[R1, #+4]
   1121              SET_BIT(FLASH->CR, FLASH_CR_STRT);
   \   00000012   0x6808             LDR      R0,[R1, #+0]
   \   00000014   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000018   0x6008             STR      R0,[R1, #+0]
   1122          #if defined(FLASH_BANK2_END)
   1123            }
   1124          #endif /* FLASH_BANK2_END */
   1125          }
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     pFlash

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x40022010         DC32     0x40022010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x4002201C         DC32     0x4002201c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x1FFFF804         DC32     0x1ffff804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x1FFFF808         DC32     0x1ffff808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x1FFFF800         DC32     0x1ffff800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x1FFFF802         DC32     0x1ffff802

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x40022020         DC32     0x40022020
   1126          
   1127          /**
   1128            * @}
   1129            */
   1130          
   1131          /**
   1132            * @}
   1133            */
   1134          
   1135          #endif /* HAL_FLASH_MODULE_ENABLED */
   1136          /**
   1137            * @}
   1138            */
   1139          
   1140          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   FLASH_MassErase
      32   FLASH_OB_DisableWRP
        32   -> FLASH_OB_GetWRP
        32   -> FLASH_WaitForLastOperation
        32   -> HAL_FLASHEx_OBErase
      32   FLASH_OB_EnableWRP
        32   -> FLASH_OB_GetWRP
        32   -> FLASH_WaitForLastOperation
        32   -> HAL_FLASHEx_OBErase
       0   FLASH_OB_GetRDP
       0   FLASH_OB_GetUser
       0   FLASH_OB_GetWRP
      24   FLASH_OB_ProgramData
        24   -> FLASH_WaitForLastOperation
      16   FLASH_OB_RDP_LevelConfig
        16   -> FLASH_WaitForLastOperation
      16   FLASH_OB_UserConfig
        16   -> FLASH_WaitForLastOperation
       0   FLASH_PageErase
      32   HAL_FLASHEx_Erase
        32   -> FLASH_MassErase
        32   -> FLASH_PageErase
        32   -> FLASH_WaitForLastOperation
       8   HAL_FLASHEx_Erase_IT
         8   -> FLASH_MassErase
         8   -> FLASH_PageErase
      16   HAL_FLASHEx_OBErase
        16   -> FLASH_OB_GetRDP
         0   -> FLASH_OB_RDP_LevelConfig
        16   -> FLASH_WaitForLastOperation
       8   HAL_FLASHEx_OBGetConfig
         8   -> FLASH_OB_GetRDP
         8   -> FLASH_OB_GetUser
         8   -> FLASH_OB_GetWRP
       0   HAL_FLASHEx_OBGetUserData
      16   HAL_FLASHEx_OBProgram
        16   -> FLASH_OB_DisableWRP
        16   -> FLASH_OB_EnableWRP
        16   -> FLASH_OB_ProgramData
        16   -> FLASH_OB_RDP_LevelConfig
        16   -> FLASH_OB_UserConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
      26  FLASH_MassErase
     176  FLASH_OB_DisableWRP
     176  FLASH_OB_EnableWRP
      18  FLASH_OB_GetRDP
      10  FLASH_OB_GetUser
       6  FLASH_OB_GetWRP
      54  FLASH_OB_ProgramData
      88  FLASH_OB_RDP_LevelConfig
      58  FLASH_OB_UserConfig
      28  FLASH_PageErase
     158  HAL_FLASHEx_Erase
      86  HAL_FLASHEx_Erase_IT
      76  HAL_FLASHEx_OBErase
      28  HAL_FLASHEx_OBGetConfig
      22  HAL_FLASHEx_OBGetUserData
     104  HAL_FLASHEx_OBProgram

 
 1 146 bytes in section .text
 
 1 146 bytes of CODE memory

Errors: none
Warnings: none
