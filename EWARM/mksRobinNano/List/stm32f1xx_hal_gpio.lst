###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:06:02
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\stm32f1xx_hal_gpio.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\stm32f1xx_hal_gpio.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f1xx_hal_gpio.c
      4            * @author  MCD Application Team
      5            * @version V1.0.4
      6            * @date    29-April-2016
      7            * @brief   GPIO HAL module driver.
      8            *         This file provides firmware functions to manage the following 
      9            *          functionalities of the General Purpose Input/Output (GPIO) peripheral:
     10            *           + Initialization and de-initialization functions
     11            *           + IO operation functions
     12            *         
     13            @verbatim
     14            ==============================================================================
     15                              ##### GPIO Peripheral features #####
     16            ==============================================================================         
     17            [..] 
     18            Subject to the specific hardware characteristics of each I/O port listed in the datasheet, each
     19            port bit of the General Purpose IO (GPIO) Ports, can be individually configured by software
     20            in several modes:
     21            (+) Input mode 
     22            (+) Analog mode
     23            (+) Output mode
     24            (+) Alternate function mode
     25            (+) External interrupt/event lines
     26          
     27            [..]  
     28            During and just after reset, the alternate functions and external interrupt  
     29            lines are not active and the I/O ports are configured in input floating mode.
     30            
     31            [..]   
     32            All GPIO pins have weak internal pull-up and pull-down resistors, which can be 
     33            activated or not.
     34          
     35            [..]
     36            In Output or Alternate mode, each IO can be configured on open-drain or push-pull
     37            type and the IO speed can be selected depending on the VDD value.
     38          
     39            [..]  
     40            All ports have external interrupt/event capability. To use external interrupt 
     41            lines, the port must be configured in input mode. All available GPIO pins are 
     42            connected to the 16 external interrupt/event lines from EXTI0 to EXTI15.
     43            
     44            [..]  
     45            The external interrupt/event controller consists of up to 20 edge detectors in connectivity
     46            line devices, or 19 edge detectors in other devices for generating event/interrupt requests.
     47            Each input line can be independently configured to select the type (event or interrupt) and
     48            the corresponding trigger event (rising or falling or both). Each line can also masked
     49            independently. A pending register maintains the status line of the interrupt requests
     50           
     51                               ##### How to use this driver #####
     52            ==============================================================================  
     53           [..]             
     54             (#) Enable the GPIO APB2 clock using the following function : __HAL_RCC_GPIOx_CLK_ENABLE(). 
     55             
     56             (#) Configure the GPIO pin(s) using HAL_GPIO_Init().
     57                 (++) Configure the IO mode using "Mode" member from GPIO_InitTypeDef structure
     58                 (++) Activate Pull-up, Pull-down resistor using "Pull" member from GPIO_InitTypeDef 
     59                      structure.
     60                 (++) In case of Output or alternate function mode selection: the speed is 
     61                      configured through "Speed" member from GPIO_InitTypeDef structure
     62                 (++) Analog mode is required when a pin is to be used as ADC channel 
     63                      or DAC output.
     64                 (++) In case of external interrupt/event selection the "Mode" member from 
     65                      GPIO_InitTypeDef structure select the type (interrupt or event) and 
     66                      the corresponding trigger event (rising or falling or both).
     67             
     68             (#) In case of external interrupt/event mode selection, configure NVIC IRQ priority 
     69                 mapped to the EXTI line using HAL_NVIC_SetPriority() and enable it using
     70                 HAL_NVIC_EnableIRQ().
     71                   
     72             (#) To get the level of a pin configured in input mode use HAL_GPIO_ReadPin().
     73                      
     74             (#) To set/reset the level of a pin configured in output mode use 
     75                 HAL_GPIO_WritePin()/HAL_GPIO_TogglePin().
     76            
     77             (#) To lock pin configuration until next reset use HAL_GPIO_LockPin().
     78                           
     79             (#) During and just after reset, the alternate functions are not 
     80                 active and the GPIO pins are configured in input floating mode (except JTAG
     81                 pins).
     82            
     83             (#) The LSE oscillator pins OSC32_IN and OSC32_OUT can be used as general purpose 
     84                 (PC14 and PC15, respectively) when the LSE oscillator is off. The LSE has 
     85                 priority over the GPIO function.
     86            
     87             (#) The HSE oscillator pins OSC_IN/OSC_OUT can be used as 
     88                 general purpose PD0 and PD1, respectively, when the HSE oscillator is off. 
     89                 The HSE has priority over the GPIO function.
     90            
     91            @endverbatim
     92            ******************************************************************************
     93            * @attention
     94            *
     95            * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
     96            *
     97            * Redistribution and use in source and binary forms, with or without modification,
     98            * are permitted provided that the following conditions are met:
     99            *   1. Redistributions of source code must retain the above copyright notice,
    100            *      this list of conditions and the following disclaimer.
    101            *   2. Redistributions in binary form must reproduce the above copyright notice,
    102            *      this list of conditions and the following disclaimer in the documentation
    103            *      and/or other materials provided with the distribution.
    104            *   3. Neither the name of STMicroelectronics nor the names of its contributors
    105            *      may be used to endorse or promote products derived from this software
    106            *      without specific prior written permission.
    107            *
    108            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    109            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    110            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    111            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    112            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    113            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    114            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    115            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    116            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    117            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    118            *
    119            ******************************************************************************  
    120            */ 
    121          
    122          /* Includes ------------------------------------------------------------------*/
    123          #include "stm32f1xx_hal.h"
    124          
    125          /** @addtogroup STM32F1xx_HAL_Driver
    126            * @{
    127            */
    128          
    129          /** @defgroup GPIO GPIO
    130            * @brief GPIO HAL module driver
    131            * @{
    132            */
    133          
    134          #ifdef HAL_GPIO_MODULE_ENABLED
    135          
    136          /* Private typedef -----------------------------------------------------------*/
    137          /* Private define ------------------------------------------------------------*/
    138          /** @defgroup GPIO_Private_Constants GPIO Private Constants
    139            * @{
    140            */
    141            
    142          #define GPIO_MODE             ((uint32_t)0x00000003)
    143          #define EXTI_MODE             ((uint32_t)0x10000000)
    144          #define GPIO_MODE_IT          ((uint32_t)0x00010000)
    145          #define GPIO_MODE_EVT         ((uint32_t)0x00020000)
    146          #define RISING_EDGE           ((uint32_t)0x00100000) 
    147          #define FALLING_EDGE          ((uint32_t)0x00200000) 
    148          #define GPIO_OUTPUT_TYPE      ((uint32_t)0x00000010) 
    149          #define GPIO_NUMBER           ((uint32_t)16)
    150          
    151          /* Definitions for bit manipulation of CRL and CRH register */
    152          #define  GPIO_CR_MODE_INPUT         ((uint32_t)0x00000000) /*!< 00: Input mode (reset state)  */
    153          #define  GPIO_CR_CNF_ANALOG         ((uint32_t)0x00000000) /*!< 00: Analog mode  */
    154          #define  GPIO_CR_CNF_INPUT_FLOATING ((uint32_t)0x00000004) /*!< 01: Floating input (reset state)  */
    155          #define  GPIO_CR_CNF_INPUT_PU_PD    ((uint32_t)0x00000008) /*!< 10: Input with pull-up / pull-down  */
    156          #define  GPIO_CR_CNF_GP_OUTPUT_PP   ((uint32_t)0x00000000) /*!< 00: General purpose output push-pull  */
    157          #define  GPIO_CR_CNF_GP_OUTPUT_OD   ((uint32_t)0x00000004) /*!< 01: General purpose output Open-drain  */
    158          #define  GPIO_CR_CNF_AF_OUTPUT_PP   ((uint32_t)0x00000008) /*!< 10: Alternate function output Push-pull  */
    159          #define  GPIO_CR_CNF_AF_OUTPUT_OD   ((uint32_t)0x0000000C) /*!< 11: Alternate function output Open-drain  */
    160           
    161          /**
    162            * @}
    163            */
    164          
    165          /* Private macro -------------------------------------------------------------*/
    166          /* Private variables ---------------------------------------------------------*/
    167          /* Private function prototypes -----------------------------------------------*/
    168          /* Private functions ---------------------------------------------------------*/
    169          
    170          /** @defgroup GPIO_Exported_Functions GPIO Exported Functions
    171            * @{
    172            */
    173          
    174          /** @defgroup GPIO_Exported_Functions_Group1 Initialization and deinitialization functions
    175           *  @brief    Initialization and Configuration functions
    176           *
    177          @verbatim    
    178           ===============================================================================
    179                        ##### Initialization and deinitialization functions #####
    180           ===============================================================================
    181            [..]
    182              This section provides functions allowing to initialize and de-initialize the GPIOs
    183              to be ready for use.
    184           
    185          @endverbatim
    186            * @{
    187            */
    188          
    189          /**
    190            * @brief  Initializes the GPIOx peripheral according to the specified parameters in the GPIO_Init.
    191            * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
    192            * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
    193            *         the configuration information for the specified GPIO peripheral.
    194            * @retval None
    195            */

   \                                 In section .text, align 2, keep-with-next
    196          void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
    197          {
   \                     HAL_GPIO_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    198            uint32_t position;
    199            uint32_t ioposition = 0x00;
    200            uint32_t iocurrent = 0x00;
    201            uint32_t temp = 0x00;
    202            uint32_t config = 0x00;
   \   00000002   0x2400             MOVS     R4,#+0
    203            __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
    204            uint32_t registeroffset = 0; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
    205            
    206            /* Check the parameters */
    207            assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    208            assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
    209            assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
    210          
    211            /* Configure the port pins */
    212            for (position = 0; position < GPIO_NUMBER; position++)
   \   00000004   0x4622             MOV      R2,R4
   \   00000006   0xE003             B.N      ??HAL_GPIO_Init_0
    213            {
    214              /* Get the IO position */
    215              ioposition = ((uint32_t)0x01) << position;
    216              
    217              /* Get the current IO position */
    218              iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
    219          
    220              if (iocurrent == ioposition)
    221              {
    222                /* Check the Alternate function parameters */
    223                assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
    224          
    225                /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
    226                switch (GPIO_Init->Mode)
    227                {
    228                  /* If we are configuring the pin in OUTPUT push-pull mode */
    229                  case GPIO_MODE_OUTPUT_PP:
    230                    /* Check the GPIO speed parameter */
    231                    assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
    232                    config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
    233                    break;
    234                    
    235                  /* If we are configuring the pin in OUTPUT open-drain mode */
    236                  case GPIO_MODE_OUTPUT_OD:
    237                    /* Check the GPIO speed parameter */
    238                    assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
    239                    config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
    240                    break;
    241                    
    242                  /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
    243                  case GPIO_MODE_AF_PP:
    244                    /* Check the GPIO speed parameter */
    245                    assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
    246                    config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
    247                    break;
    248                    
    249                  /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
    250                  case GPIO_MODE_AF_OD:
    251                    /* Check the GPIO speed parameter */
    252                    assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
    253                    config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
    254                    break;
    255                    
    256                  /* If we are configuring the pin in INPUT (also applicable to EVENT and IT mode) */
    257                  case GPIO_MODE_INPUT:
    258                  case GPIO_MODE_IT_RISING:
    259                  case GPIO_MODE_IT_FALLING:
    260                  case GPIO_MODE_IT_RISING_FALLING:
    261                  case GPIO_MODE_EVT_RISING:
    262                  case GPIO_MODE_EVT_FALLING:
    263                  case GPIO_MODE_EVT_RISING_FALLING:
    264                    /* Check the GPIO pull parameter */
    265                    assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
    266                    if(GPIO_Init->Pull == GPIO_NOPULL)
    267                    {  
    268                      config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
    269                    }
    270                    else if(GPIO_Init->Pull == GPIO_PULLUP)
    271                    {
    272                      config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
    273                      
    274                      /* Set the corresponding ODR bit */
    275                      GPIOx->BSRR = ioposition;
    276                    }
    277                    else /* GPIO_PULLDOWN */
    278                    {
    279                      config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
    280                      
    281                      /* Reset the corresponding ODR bit */
    282                      GPIOx->BRR = ioposition;
    283                    }
    284                    break; 
    285                    
    286                  /* If we are configuring the pin in INPUT analog mode */
    287                  case GPIO_MODE_ANALOG:
    288                      config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
    289                    break;
    290                  
    291                  /* Parameters are checked with assert_param */
    292                  default:
    293                    break;
    294                }
    295                
    296                /* Check if the current bit belongs to first half or last half of the pin count number
    297                 in order to address CRH or CRL register*/
    298                configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
    299                registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
    300                
    301                /* Apply the new configuration of the pin to the register */
    302                MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
    303                
    304                /*--------------------- EXTI Mode Configuration ------------------------*/
    305                /* Configure the External Interrupt or event for the current IO */
    306                if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
    307                {
    308                  /* Enable AFIO Clock */
    309                  __HAL_RCC_AFIO_CLK_ENABLE();
    310                  temp = AFIO->EXTICR[position >> 2];
    311                  CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
    312                  SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
    313                  AFIO->EXTICR[position >> 2] = temp;
    314                  
    315          
    316                  /* Configure the interrupt mask */
    317                  if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
    318                  {
    319                    SET_BIT(EXTI->IMR, iocurrent); 
    320                  } 
    321                  else
    322                  {
    323                    CLEAR_BIT(EXTI->IMR, iocurrent); 
    324                  } 
    325                  
    326                  /* Configure the event mask */
    327                  if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
    328                  {
    329                    SET_BIT(EXTI->EMR, iocurrent); 
    330                  } 
    331                  else
    332                  {
    333                    CLEAR_BIT(EXTI->EMR, iocurrent); 
    334                  }
    335                  
    336                  /* Enable or disable the rising trigger */
    337                  if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
    338                  {
    339                    SET_BIT(EXTI->RTSR, iocurrent); 
    340                  } 
    341                  else
    342                  {
    343                    CLEAR_BIT(EXTI->RTSR, iocurrent); 
    344                  }
    345                  
    346                  /* Enable or disable the falling trigger */
    347                  if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
    348                  {
    349                    SET_BIT(EXTI->FTSR, iocurrent); 
    350                  } 
    351                  else
    352                  {
    353                    CLEAR_BIT(EXTI->FTSR, iocurrent); 
   \                     ??HAL_GPIO_Init_1: (+1)
   \   00000008   0xEA26 0x0303      BIC      R3,R6,R3
   \   0000000C   0x60EB             STR      R3,[R5, #+12]
    354                  }
   \                     ??HAL_GPIO_Init_2: (+1)
   \   0000000E   0x1C52             ADDS     R2,R2,#+1
   \                     ??HAL_GPIO_Init_0: (+1)
   \   00000010   0x2A10             CMP      R2,#+16
   \   00000012   0xF080 0x80C7      BCS.W    ??HAL_GPIO_Init_3
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0xFA03 0xF502      LSL      R5,R3,R2
   \   0000001C   0x680B             LDR      R3,[R1, #+0]
   \   0000001E   0x402B             ANDS     R3,R5,R3
   \   00000020   0x42AB             CMP      R3,R5
   \   00000022   0xD1F4             BNE.N    ??HAL_GPIO_Init_2
   \   00000024   0x684E             LDR      R6,[R1, #+4]
   \   00000026   0x2E00             CMP      R6,#+0
   \   00000028   0xD027             BEQ.N    ??HAL_GPIO_Init_4
   \   0000002A   0x2E01             CMP      R6,#+1
   \   0000002C   0xD01A             BEQ.N    ??HAL_GPIO_Init_5
   \   0000002E   0x2E02             CMP      R6,#+2
   \   00000030   0xD01D             BEQ.N    ??HAL_GPIO_Init_6
   \   00000032   0x2E03             CMP      R6,#+3
   \   00000034   0xD02E             BEQ.N    ??HAL_GPIO_Init_7
   \   00000036   0x2E11             CMP      R6,#+17
   \   00000038   0xD016             BEQ.N    ??HAL_GPIO_Init_8
   \   0000003A   0x2E12             CMP      R6,#+18
   \   0000003C   0xD01A             BEQ.N    ??HAL_GPIO_Init_9
   \   0000003E   0x....             LDR.N    R7,??DataTable2  ;; 0x10110000
   \   00000040   0x42BE             CMP      R6,R7
   \   00000042   0xD01A             BEQ.N    ??HAL_GPIO_Init_4
   \   00000044   0x....             LDR.N    R7,??DataTable2_1  ;; 0x10120000
   \   00000046   0x42BE             CMP      R6,R7
   \   00000048   0xD017             BEQ.N    ??HAL_GPIO_Init_4
   \   0000004A   0x....             LDR.N    R7,??DataTable2_2  ;; 0x10210000
   \   0000004C   0x42BE             CMP      R6,R7
   \   0000004E   0xD014             BEQ.N    ??HAL_GPIO_Init_4
   \   00000050   0x....             LDR.N    R7,??DataTable2_3  ;; 0x10220000
   \   00000052   0x42BE             CMP      R6,R7
   \   00000054   0xD011             BEQ.N    ??HAL_GPIO_Init_4
   \   00000056   0x....             LDR.N    R7,??DataTable2_4  ;; 0x10310000
   \   00000058   0x42BE             CMP      R6,R7
   \   0000005A   0xD00E             BEQ.N    ??HAL_GPIO_Init_4
   \   0000005C   0x....             LDR.N    R7,??DataTable2_5  ;; 0x10320000
   \   0000005E   0x42BE             CMP      R6,R7
   \   00000060   0xD00B             BEQ.N    ??HAL_GPIO_Init_4
   \   00000062   0xE018             B.N      ??HAL_GPIO_Init_10
   \                     ??HAL_GPIO_Init_5: (+1)
   \   00000064   0x68CC             LDR      R4,[R1, #+12]
   \   00000066   0xE016             B.N      ??HAL_GPIO_Init_10
   \                     ??HAL_GPIO_Init_8: (+1)
   \   00000068   0x68CC             LDR      R4,[R1, #+12]
   \   0000006A   0x1D24             ADDS     R4,R4,#+4
   \   0000006C   0xE013             B.N      ??HAL_GPIO_Init_10
   \                     ??HAL_GPIO_Init_6: (+1)
   \   0000006E   0x68CC             LDR      R4,[R1, #+12]
   \   00000070   0x3408             ADDS     R4,R4,#+8
   \   00000072   0xE010             B.N      ??HAL_GPIO_Init_10
   \                     ??HAL_GPIO_Init_9: (+1)
   \   00000074   0x68CC             LDR      R4,[R1, #+12]
   \   00000076   0x340C             ADDS     R4,R4,#+12
   \   00000078   0xE00D             B.N      ??HAL_GPIO_Init_10
   \                     ??HAL_GPIO_Init_4: (+1)
   \   0000007A   0x688C             LDR      R4,[R1, #+8]
   \   0000007C   0x2C00             CMP      R4,#+0
   \   0000007E   0xD101             BNE.N    ??HAL_GPIO_Init_11
   \   00000080   0x2404             MOVS     R4,#+4
   \   00000082   0xE008             B.N      ??HAL_GPIO_Init_10
   \                     ??HAL_GPIO_Init_11: (+1)
   \   00000084   0x2C01             CMP      R4,#+1
   \   00000086   0xD102             BNE.N    ??HAL_GPIO_Init_12
   \   00000088   0x2408             MOVS     R4,#+8
   \   0000008A   0x6105             STR      R5,[R0, #+16]
   \   0000008C   0xE003             B.N      ??HAL_GPIO_Init_10
   \                     ??HAL_GPIO_Init_12: (+1)
   \   0000008E   0x2408             MOVS     R4,#+8
   \   00000090   0x6145             STR      R5,[R0, #+20]
   \   00000092   0xE000             B.N      ??HAL_GPIO_Init_10
   \                     ??HAL_GPIO_Init_7: (+1)
   \   00000094   0x2400             MOVS     R4,#+0
   \                     ??HAL_GPIO_Init_10: (+1)
   \   00000096   0x2BFF             CMP      R3,#+255
   \   00000098   0xD801             BHI.N    ??HAL_GPIO_Init_13
   \   0000009A   0x4606             MOV      R6,R0
   \   0000009C   0xE000             B.N      ??HAL_GPIO_Init_14
   \                     ??HAL_GPIO_Init_13: (+1)
   \   0000009E   0x1D06             ADDS     R6,R0,#+4
   \                     ??HAL_GPIO_Init_14: (+1)
   \   000000A0   0x2BFF             CMP      R3,#+255
   \   000000A2   0xD801             BHI.N    ??HAL_GPIO_Init_15
   \   000000A4   0x0097             LSLS     R7,R2,#+2
   \   000000A6   0xE002             B.N      ??HAL_GPIO_Init_16
   \                     ??HAL_GPIO_Init_15: (+1)
   \   000000A8   0xF1A2 0x0508      SUB      R5,R2,#+8
   \   000000AC   0x00AF             LSLS     R7,R5,#+2
   \                     ??HAL_GPIO_Init_16: (+1)
   \   000000AE   0x250F             MOVS     R5,#+15
   \   000000B0   0xF8D6 0xC000      LDR      R12,[R6, #+0]
   \   000000B4   0xFA05 0xFE07      LSL      LR,R5,R7
   \   000000B8   0xEA2C 0x0C0E      BIC      R12,R12,LR
   \   000000BC   0xFA04 0xF707      LSL      R7,R4,R7
   \   000000C0   0xEA47 0x070C      ORR      R7,R7,R12
   \   000000C4   0x6037             STR      R7,[R6, #+0]
   \   000000C6   0x684E             LDR      R6,[R1, #+4]
   \   000000C8   0x00F6             LSLS     R6,R6,#+3
   \   000000CA   0xD5A0             BPL.N    ??HAL_GPIO_Init_2
   \   000000CC   0x....             LDR.N    R6,??DataTable2_6  ;; 0x40021018
   \   000000CE   0x6837             LDR      R7,[R6, #+0]
   \   000000D0   0xF047 0x0701      ORR      R7,R7,#0x1
   \   000000D4   0x6037             STR      R7,[R6, #+0]
   \   000000D6   0x6836             LDR      R6,[R6, #+0]
   \   000000D8   0xF006 0x0601      AND      R6,R6,#0x1
   \   000000DC   0x9600             STR      R6,[SP, #+0]
   \   000000DE   0x9E00             LDR      R6,[SP, #+0]
   \   000000E0   0x0896             LSRS     R6,R2,#+2
   \   000000E2   0x....             LDR.N    R7,??DataTable2_7  ;; 0x40010008
   \   000000E4   0xF857 0xE026      LDR      LR,[R7, R6, LSL #+2]
   \   000000E8   0xF002 0x0C03      AND      R12,R2,#0x3
   \   000000EC   0xEA4F 0x0C8C      LSL      R12,R12,#+2
   \   000000F0   0xFA05 0xF50C      LSL      R5,R5,R12
   \   000000F4   0xEA2E 0x0505      BIC      R5,LR,R5
   \   000000F8   0x.... 0x....      LDR.W    LR,??DataTable2_8  ;; 0x40010800
   \   000000FC   0x4570             CMP      R0,LR
   \   000000FE   0xD102             BNE.N    ??HAL_GPIO_Init_17
   \   00000100   0xF04F 0x0E00      MOV      LR,#+0
   \   00000104   0xE024             B.N      ??HAL_GPIO_Init_18
   \                     ??HAL_GPIO_Init_17: (+1)
   \   00000106   0x.... 0x....      LDR.W    LR,??DataTable2_9  ;; 0x40010c00
   \   0000010A   0x4570             CMP      R0,LR
   \   0000010C   0xD102             BNE.N    ??HAL_GPIO_Init_19
   \   0000010E   0xF04F 0x0E01      MOV      LR,#+1
   \   00000112   0xE01D             B.N      ??HAL_GPIO_Init_18
   \                     ??HAL_GPIO_Init_19: (+1)
   \   00000114   0x.... 0x....      LDR.W    LR,??DataTable2_10  ;; 0x40011000
   \   00000118   0x4570             CMP      R0,LR
   \   0000011A   0xD102             BNE.N    ??HAL_GPIO_Init_20
   \   0000011C   0xF04F 0x0E02      MOV      LR,#+2
   \   00000120   0xE016             B.N      ??HAL_GPIO_Init_18
   \                     ??HAL_GPIO_Init_20: (+1)
   \   00000122   0x.... 0x....      LDR.W    LR,??DataTable2_11  ;; 0x40011400
   \   00000126   0x4570             CMP      R0,LR
   \   00000128   0xD102             BNE.N    ??HAL_GPIO_Init_21
   \   0000012A   0xF04F 0x0E03      MOV      LR,#+3
   \   0000012E   0xE00F             B.N      ??HAL_GPIO_Init_18
   \                     ??HAL_GPIO_Init_21: (+1)
   \   00000130   0x.... 0x....      LDR.W    LR,??DataTable2_12  ;; 0x40011800
   \   00000134   0x4570             CMP      R0,LR
   \   00000136   0xD102             BNE.N    ??HAL_GPIO_Init_22
   \   00000138   0xF04F 0x0E04      MOV      LR,#+4
   \   0000013C   0xE008             B.N      ??HAL_GPIO_Init_18
   \                     ??HAL_GPIO_Init_22: (+1)
   \   0000013E   0x.... 0x....      LDR.W    LR,??DataTable2_13  ;; 0x40011c00
   \   00000142   0x4570             CMP      R0,LR
   \   00000144   0xD102             BNE.N    ??HAL_GPIO_Init_23
   \   00000146   0xF04F 0x0E05      MOV      LR,#+5
   \   0000014A   0xE001             B.N      ??HAL_GPIO_Init_18
   \                     ??HAL_GPIO_Init_23: (+1)
   \   0000014C   0xF04F 0x0E06      MOV      LR,#+6
   \                     ??HAL_GPIO_Init_18: (+1)
   \   00000150   0xFA0E 0xFC0C      LSL      R12,LR,R12
   \   00000154   0xEA4C 0x0505      ORR      R5,R12,R5
   \   00000158   0xF847 0x5026      STR      R5,[R7, R6, LSL #+2]
   \   0000015C   0x....             LDR.N    R5,??DataTable2_14  ;; 0x40010400
   \   0000015E   0x684E             LDR      R6,[R1, #+4]
   \   00000160   0x03F6             LSLS     R6,R6,#+15
   \   00000162   0x682E             LDR      R6,[R5, #+0]
   \   00000164   0xD502             BPL.N    ??HAL_GPIO_Init_24
   \   00000166   0x431E             ORRS     R6,R3,R6
   \   00000168   0x602E             STR      R6,[R5, #+0]
   \   0000016A   0xE001             B.N      ??HAL_GPIO_Init_25
   \                     ??HAL_GPIO_Init_24: (+1)
   \   0000016C   0x439E             BICS     R6,R6,R3
   \   0000016E   0x602E             STR      R6,[R5, #+0]
   \                     ??HAL_GPIO_Init_25: (+1)
   \   00000170   0x684E             LDR      R6,[R1, #+4]
   \   00000172   0x03B6             LSLS     R6,R6,#+14
   \   00000174   0x686E             LDR      R6,[R5, #+4]
   \   00000176   0xD502             BPL.N    ??HAL_GPIO_Init_26
   \   00000178   0x431E             ORRS     R6,R3,R6
   \   0000017A   0x606E             STR      R6,[R5, #+4]
   \   0000017C   0xE001             B.N      ??HAL_GPIO_Init_27
   \                     ??HAL_GPIO_Init_26: (+1)
   \   0000017E   0x439E             BICS     R6,R6,R3
   \   00000180   0x606E             STR      R6,[R5, #+4]
   \                     ??HAL_GPIO_Init_27: (+1)
   \   00000182   0x684E             LDR      R6,[R1, #+4]
   \   00000184   0x02F6             LSLS     R6,R6,#+11
   \   00000186   0x68AE             LDR      R6,[R5, #+8]
   \   00000188   0xD502             BPL.N    ??HAL_GPIO_Init_28
   \   0000018A   0x431E             ORRS     R6,R3,R6
   \   0000018C   0x60AE             STR      R6,[R5, #+8]
   \   0000018E   0xE001             B.N      ??HAL_GPIO_Init_29
   \                     ??HAL_GPIO_Init_28: (+1)
   \   00000190   0x439E             BICS     R6,R6,R3
   \   00000192   0x60AE             STR      R6,[R5, #+8]
   \                     ??HAL_GPIO_Init_29: (+1)
   \   00000194   0x684E             LDR      R6,[R1, #+4]
   \   00000196   0x02B6             LSLS     R6,R6,#+10
   \   00000198   0x68EE             LDR      R6,[R5, #+12]
   \   0000019A   0xF57F 0xAF35      BPL.W    ??HAL_GPIO_Init_1
   \   0000019E   0x4333             ORRS     R3,R3,R6
   \   000001A0   0x60EB             STR      R3,[R5, #+12]
   \   000001A2   0xE734             B.N      ??HAL_GPIO_Init_2
    355                }
    356              }
    357            }
    358          }
   \                     ??HAL_GPIO_Init_3: (+1)
   \   000001A4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    359          
    360          /**
    361            * @brief  De-initializes the GPIOx peripheral registers to their default reset values.
    362            * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
    363            * @param  GPIO_Pin: specifies the port bit to be written.
    364            *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
    365            * @retval None
    366            */

   \                                 In section .text, align 2, keep-with-next
    367          void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
    368          { 
   \                     HAL_GPIO_DeInit: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    369            uint32_t position = 0x00;
   \   00000002   0x2200             MOVS     R2,#+0
    370            uint32_t iocurrent = 0x00;
    371            uint32_t tmp = 0x00;
    372            __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
    373            uint32_t registeroffset = 0;
    374           
    375            /* Check the parameters */
    376            assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
    377            assert_param(IS_GPIO_PIN(GPIO_Pin));
   \   00000004   0xE019             B.N      ??HAL_GPIO_DeInit_0
    378          
    379            /* Configure the port pins */
    380            while ((GPIO_Pin >> position) != 0)
    381            {
    382              /* Get current io position */
    383              iocurrent = (GPIO_Pin) & ((uint32_t)1 << position);
    384          
    385              if (iocurrent)
    386              {
    387                /*------------------------- GPIO Mode Configuration --------------------*/
    388                /* Check if the current bit belongs to first half or last half of the pin count number
    389                 in order to address CRH or CRL register */
    390                configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
    391                registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
    392                
    393                /* CRL/CRH default value is floating input(0x04) shifted to correct position */
    394                MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
    395                
    396                /* ODR default value is 0 */
    397                CLEAR_BIT(GPIOx->ODR, iocurrent);
    398                
    399                /*------------------------- EXTI Mode Configuration --------------------*/
    400                /* Clear the External Interrupt or Event for the current IO */
    401                
    402                tmp = AFIO->EXTICR[position >> 2];
    403                tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
    404                if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
   \                     ??HAL_GPIO_DeInit_1: (+1)
   \   00000006   0xF04F 0x0E06      MOV      LR,#+6
   \                     ??HAL_GPIO_DeInit_2: (+1)
   \   0000000A   0xFA0E 0xF707      LSL      R7,LR,R7
   \   0000000E   0x45BC             CMP      R12,R7
   \   00000010   0xD112             BNE.N    ??HAL_GPIO_DeInit_3
    405                {
    406                  tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
    407                  CLEAR_BIT(AFIO->EXTICR[position >> 2], tmp);
   \   00000012   0xF854 0x7025      LDR      R7,[R4, R5, LSL #+2]
   \   00000016   0xEA27 0x0606      BIC      R6,R7,R6
   \   0000001A   0xF844 0x6025      STR      R6,[R4, R5, LSL #+2]
    408                    
    409                  /* Clear EXTI line configuration */
    410                  CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
   \   0000001E   0x....             LDR.N    R4,??DataTable2_14  ;; 0x40010400
   \   00000020   0x6825             LDR      R5,[R4, #+0]
   \   00000022   0x401D             ANDS     R5,R3,R5
   \   00000024   0x6025             STR      R5,[R4, #+0]
    411                  CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
   \   00000026   0x6865             LDR      R5,[R4, #+4]
   \   00000028   0x401D             ANDS     R5,R3,R5
   \   0000002A   0x6065             STR      R5,[R4, #+4]
    412                  
    413                  /* Clear Rising Falling edge configuration */
    414                  CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
   \   0000002C   0x68A5             LDR      R5,[R4, #+8]
   \   0000002E   0x401D             ANDS     R5,R3,R5
   \   00000030   0x60A5             STR      R5,[R4, #+8]
    415                  CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
   \   00000032   0x68E5             LDR      R5,[R4, #+12]
   \   00000034   0x402B             ANDS     R3,R3,R5
   \   00000036   0x60E3             STR      R3,[R4, #+12]
    416                }
    417              }
    418              
    419              position++;
   \                     ??HAL_GPIO_DeInit_3: (+1)
   \   00000038   0x1C52             ADDS     R2,R2,#+1
   \                     ??HAL_GPIO_DeInit_0: (+1)
   \   0000003A   0xFA31 0xF302      LSRS     R3,R1,R2
   \   0000003E   0xD053             BEQ.N    ??HAL_GPIO_DeInit_4
   \   00000040   0x2301             MOVS     R3,#+1
   \   00000042   0x4093             LSLS     R3,R3,R2
   \   00000044   0x400B             ANDS     R3,R3,R1
   \   00000046   0xD0F7             BEQ.N    ??HAL_GPIO_DeInit_3
   \   00000048   0x2BFF             CMP      R3,#+255
   \   0000004A   0xD801             BHI.N    ??HAL_GPIO_DeInit_5
   \   0000004C   0x4604             MOV      R4,R0
   \   0000004E   0xE000             B.N      ??HAL_GPIO_DeInit_6
   \                     ??HAL_GPIO_DeInit_5: (+1)
   \   00000050   0x1D04             ADDS     R4,R0,#+4
   \                     ??HAL_GPIO_DeInit_6: (+1)
   \   00000052   0x2BFF             CMP      R3,#+255
   \   00000054   0xD801             BHI.N    ??HAL_GPIO_DeInit_7
   \   00000056   0x0095             LSLS     R5,R2,#+2
   \   00000058   0xE002             B.N      ??HAL_GPIO_DeInit_8
   \                     ??HAL_GPIO_DeInit_7: (+1)
   \   0000005A   0xF1A2 0x0508      SUB      R5,R2,#+8
   \   0000005E   0x00AD             LSLS     R5,R5,#+2
   \                     ??HAL_GPIO_DeInit_8: (+1)
   \   00000060   0x260F             MOVS     R6,#+15
   \   00000062   0x6827             LDR      R7,[R4, #+0]
   \   00000064   0xFA06 0xFC05      LSL      R12,R6,R5
   \   00000068   0xEA27 0x070C      BIC      R7,R7,R12
   \   0000006C   0xF04F 0x0C04      MOV      R12,#+4
   \   00000070   0xFA0C 0xF505      LSL      R5,R12,R5
   \   00000074   0x433D             ORRS     R5,R5,R7
   \   00000076   0x6025             STR      R5,[R4, #+0]
   \   00000078   0x43DB             MVNS     R3,R3
   \   0000007A   0x68C4             LDR      R4,[R0, #+12]
   \   0000007C   0x401C             ANDS     R4,R3,R4
   \   0000007E   0x60C4             STR      R4,[R0, #+12]
   \   00000080   0x0895             LSRS     R5,R2,#+2
   \   00000082   0x....             LDR.N    R4,??DataTable2_7  ;; 0x40010008
   \   00000084   0xF854 0xC025      LDR      R12,[R4, R5, LSL #+2]
   \   00000088   0xF002 0x0703      AND      R7,R2,#0x3
   \   0000008C   0x00BF             LSLS     R7,R7,#+2
   \   0000008E   0x40BE             LSLS     R6,R6,R7
   \   00000090   0xEA06 0x0C0C      AND      R12,R6,R12
   \   00000094   0x.... 0x....      LDR.W    LR,??DataTable2_8  ;; 0x40010800
   \   00000098   0x4570             CMP      R0,LR
   \   0000009A   0xD102             BNE.N    ??HAL_GPIO_DeInit_9
   \   0000009C   0xF04F 0x0E00      MOV      LR,#+0
   \   000000A0   0xE7B3             B.N      ??HAL_GPIO_DeInit_2
   \                     ??HAL_GPIO_DeInit_9: (+1)
   \   000000A2   0x.... 0x....      LDR.W    LR,??DataTable2_9  ;; 0x40010c00
   \   000000A6   0x4570             CMP      R0,LR
   \   000000A8   0xD102             BNE.N    ??HAL_GPIO_DeInit_10
   \   000000AA   0xF04F 0x0E01      MOV      LR,#+1
   \   000000AE   0xE7AC             B.N      ??HAL_GPIO_DeInit_2
   \                     ??HAL_GPIO_DeInit_10: (+1)
   \   000000B0   0x.... 0x....      LDR.W    LR,??DataTable2_10  ;; 0x40011000
   \   000000B4   0x4570             CMP      R0,LR
   \   000000B6   0xD102             BNE.N    ??HAL_GPIO_DeInit_11
   \   000000B8   0xF04F 0x0E02      MOV      LR,#+2
   \   000000BC   0xE7A5             B.N      ??HAL_GPIO_DeInit_2
   \                     ??HAL_GPIO_DeInit_11: (+1)
   \   000000BE   0x.... 0x....      LDR.W    LR,??DataTable2_11  ;; 0x40011400
   \   000000C2   0x4570             CMP      R0,LR
   \   000000C4   0xD102             BNE.N    ??HAL_GPIO_DeInit_12
   \   000000C6   0xF04F 0x0E03      MOV      LR,#+3
   \   000000CA   0xE79E             B.N      ??HAL_GPIO_DeInit_2
   \                     ??HAL_GPIO_DeInit_12: (+1)
   \   000000CC   0x.... 0x....      LDR.W    LR,??DataTable2_12  ;; 0x40011800
   \   000000D0   0x4570             CMP      R0,LR
   \   000000D2   0xD102             BNE.N    ??HAL_GPIO_DeInit_13
   \   000000D4   0xF04F 0x0E04      MOV      LR,#+4
   \   000000D8   0xE797             B.N      ??HAL_GPIO_DeInit_2
   \                     ??HAL_GPIO_DeInit_13: (+1)
   \   000000DA   0x.... 0x....      LDR.W    LR,??DataTable2_13  ;; 0x40011c00
   \   000000DE   0x4570             CMP      R0,LR
   \   000000E0   0xD191             BNE.N    ??HAL_GPIO_DeInit_1
   \   000000E2   0xF04F 0x0E05      MOV      LR,#+5
   \   000000E6   0xE790             B.N      ??HAL_GPIO_DeInit_2
    420            }
    421          }
   \                     ??HAL_GPIO_DeInit_4: (+1)
   \   000000E8   0xBDF0             POP      {R4-R7,PC}       ;; return
    422          
    423          /**
    424            * @}
    425            */
    426          
    427          /** @defgroup GPIO_Exported_Functions_Group2 IO operation functions 
    428           *  @brief   GPIO Read and Write 
    429           *
    430          @verbatim   
    431           ===============================================================================
    432                                 ##### IO operation functions #####
    433           ===============================================================================
    434            [..]
    435              This subsection provides a set of functions allowing to manage the GPIOs.
    436          
    437          @endverbatim
    438            * @{
    439            */
    440          /**
    441            * @brief  Reads the specified input port pin.
    442            * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
    443            * @param  GPIO_Pin: specifies the port bit to read.
    444            *         This parameter can be GPIO_PIN_x where x can be (0..15).
    445            * @retval The input port pin value.
    446            */

   \                                 In section .text, align 2, keep-with-next
    447          GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    448          {
    449            GPIO_PinState bitstatus;
    450          
    451            /* Check the parameters */
    452            assert_param(IS_GPIO_PIN(GPIO_Pin));
    453          
    454            if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
   \                     HAL_GPIO_ReadPin: (+1)
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0x4008             ANDS     R0,R1,R0
   \   00000004   0x1E40             SUBS     R0,R0,#+1
   \   00000006   0x4180             SBCS     R0,R0,R0
   \   00000008   0x43C0             MVNS     R0,R0
   \   0000000A   0x0FC0             LSRS     R0,R0,#+31
    455            {
    456              bitstatus = GPIO_PIN_SET;
    457            }
    458            else
    459            {
    460              bitstatus = GPIO_PIN_RESET;
    461            }
    462            return bitstatus;
   \   0000000C   0xB240             SXTB     R0,R0
   \   0000000E   0x4770             BX       LR               ;; return
    463          }
    464          
    465          /**
    466            * @brief  Sets or clears the selected data port bit.
    467            * 
    468            * @note   This function uses GPIOx_BSRR register to allow atomic read/modify 
    469            *         accesses. In this way, there is no risk of an IRQ occurring between
    470            *         the read and the modify access.
    471            *               
    472            * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
    473            * @param  GPIO_Pin: specifies the port bit to be written.
    474            *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
    475            * @param  PinState: specifies the value to be written to the selected bit.
    476            *          This parameter can be one of the GPIO_PinState enum values:
    477            *            @arg GPIO_BIT_RESET: to clear the port pin
    478            *            @arg GPIO_BIT_SET: to set the port pin
    479            * @retval None
    480            */

   \                                 In section .text, align 2, keep-with-next
    481          void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
    482          {
    483            /* Check the parameters */
    484            assert_param(IS_GPIO_PIN(GPIO_Pin));
    485            assert_param(IS_GPIO_PIN_ACTION(PinState));
    486          
    487            if(PinState != GPIO_PIN_RESET)
   \                     HAL_GPIO_WritePin: (+1)
   \   00000000   0x2A00             CMP      R2,#+0
   \   00000002   0xD001             BEQ.N    ??HAL_GPIO_WritePin_0
    488            {
    489              GPIOx->BSRR = GPIO_Pin;
   \   00000004   0x6101             STR      R1,[R0, #+16]
   \   00000006   0x4770             BX       LR
    490            }
    491            else
    492            {
    493              GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
   \                     ??HAL_GPIO_WritePin_0: (+1)
   \   00000008   0x0409             LSLS     R1,R1,#+16
   \   0000000A   0x6101             STR      R1,[R0, #+16]
    494            }
    495          }
   \   0000000C   0x4770             BX       LR               ;; return
    496          
    497          /**
    498            * @brief  Toggles the specified GPIO pin
    499            * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral 
    500            * @param  GPIO_Pin: Specifies the pins to be toggled.
    501            * @retval None
    502            */

   \                                 In section .text, align 2, keep-with-next
    503          void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    504          {
    505            /* Check the parameters */
    506            assert_param(IS_GPIO_PIN(GPIO_Pin));
    507          
    508            GPIOx->ODR ^= GPIO_Pin;
   \                     HAL_GPIO_TogglePin: (+1)
   \   00000000   0x68C2             LDR      R2,[R0, #+12]
   \   00000002   0x4051             EORS     R1,R1,R2
   \   00000004   0x60C1             STR      R1,[R0, #+12]
    509          }
   \   00000006   0x4770             BX       LR               ;; return
    510          
    511          /**
    512          * @brief  Locks GPIO Pins configuration registers.
    513          * @note   The locking mechanism allows the IO configuration to be frozen. When the LOCK sequence
    514          *         has been applied on a port bit, it is no longer possible to modify the value of the port bit until
    515          *         the next reset.
    516          * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
    517          * @param  GPIO_Pin: specifies the port bit to be locked.
    518          *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
    519          * @retval None
    520          */

   \                                 In section .text, align 2, keep-with-next
    521          HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    522          {
   \                     HAL_GPIO_LockPin: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
    523            __IO uint32_t tmp = GPIO_LCKR_LCKK;
   \   00000002   0xF44F 0x3280      MOV      R2,#+65536
   \   00000006   0x9200             STR      R2,[SP, #+0]
    524          
    525            /* Check the parameters */
    526            assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
    527            assert_param(IS_GPIO_PIN(GPIO_Pin));
    528          
    529            /* Apply lock key write sequence */
    530            SET_BIT(tmp, GPIO_Pin);
   \   00000008   0x9A00             LDR      R2,[SP, #+0]
   \   0000000A   0x430A             ORRS     R2,R1,R2
   \   0000000C   0x9200             STR      R2,[SP, #+0]
    531            /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
    532            GPIOx->LCKR = tmp;
   \   0000000E   0x9A00             LDR      R2,[SP, #+0]
   \   00000010   0x6182             STR      R2,[R0, #+24]
    533            /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
    534            GPIOx->LCKR = GPIO_Pin;
   \   00000012   0x6181             STR      R1,[R0, #+24]
    535            /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
    536            GPIOx->LCKR = tmp;
   \   00000014   0x9900             LDR      R1,[SP, #+0]
   \   00000016   0x6181             STR      R1,[R0, #+24]
    537            /* Read LCKK bit*/
    538            tmp = GPIOx->LCKR;
   \   00000018   0x6981             LDR      R1,[R0, #+24]
   \   0000001A   0x9100             STR      R1,[SP, #+0]
    539          
    540            if((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
   \   0000001C   0x6980             LDR      R0,[R0, #+24]
   \   0000001E   0x03C0             LSLS     R0,R0,#+15
   \   00000020   0xD501             BPL.N    ??HAL_GPIO_LockPin_0
    541            {
    542              return HAL_OK;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xE000             B.N      ??HAL_GPIO_LockPin_1
    543            }
    544            else
    545            {
    546              return HAL_ERROR;
   \                     ??HAL_GPIO_LockPin_0: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
   \                     ??HAL_GPIO_LockPin_1: (+1)
   \   00000028   0xB001             ADD      SP,SP,#+4
   \   0000002A   0x4770             BX       LR               ;; return
    547            }
    548          }
    549          
    550          /**
    551            * @brief This function handles EXTI interrupt request.
    552            * @param GPIO_Pin: Specifies the pins connected EXTI line
    553            * @retval None
    554            */

   \                                 In section .text, align 2, keep-with-next
    555          void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
    556          {
    557            /* EXTI line interrupt detected */
    558            if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
   \                     HAL_GPIO_EXTI_IRQHandler: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0x....             LDR.N    R2,??DataTable2_15  ;; 0x40010414
   \   00000004   0x6813             LDR      R3,[R2, #+0]
   \   00000006   0x420B             TST      R3,R1
   \   00000008   0xD100             BNE.N    ??HAL_GPIO_EXTI_IRQHandler_0
   \   0000000A   0x4770             BX       LR
    559            { 
    560              __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
   \                     ??HAL_GPIO_EXTI_IRQHandler_0: (+1)
   \   0000000C   0xB580             PUSH     {R7,LR}
   \   0000000E   0x6011             STR      R1,[R2, #+0]
    561              HAL_GPIO_EXTI_Callback(GPIO_Pin);
   \   00000010   0x.... 0x....      BL       HAL_GPIO_EXTI_Callback
    562            }
    563          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    564          
    565          /**
    566            * @brief  EXTI line detection callback
    567            * @param GPIO_Pin: Specifies the pins connected EXTI line
    568            * @retval None
    569            */

   \                                 In section .text, align 2, keep-with-next
    570          __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    571          {
    572            /* Prevent unused argument(s) compilation warning */
    573            UNUSED(GPIO_Pin);
    574            /* NOTE : This function Should not be modified, when the callback is needed,
    575                      the HAL_GPIO_EXTI_Callback could be implemented in the user file
    576             */ 
    577          }
   \                     HAL_GPIO_EXTI_Callback: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x10120000         DC32     0x10120000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x10210000         DC32     0x10210000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x10220000         DC32     0x10220000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x10310000         DC32     0x10310000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x10320000         DC32     0x10320000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40010008         DC32     0x40010008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x40011800         DC32     0x40011800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x40011C00         DC32     0x40011c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x40010400         DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x40010414         DC32     0x40010414
    578          
    579          /**
    580            * @}
    581            */
    582          
    583          
    584          /**
    585            * @}
    586            */
    587          
    588          #endif /* HAL_GPIO_MODULE_ENABLED */
    589          /**
    590            * @}
    591            */
    592          
    593          /**
    594            * @}
    595            */
    596          
    597          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   HAL_GPIO_DeInit
       0   HAL_GPIO_EXTI_Callback
       8   HAL_GPIO_EXTI_IRQHandler
         8   -> HAL_GPIO_EXTI_Callback
      24   HAL_GPIO_Init
       4   HAL_GPIO_LockPin
       0   HAL_GPIO_ReadPin
       0   HAL_GPIO_TogglePin
       0   HAL_GPIO_WritePin


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     234  HAL_GPIO_DeInit
       2  HAL_GPIO_EXTI_Callback
      22  HAL_GPIO_EXTI_IRQHandler
     422  HAL_GPIO_Init
      44  HAL_GPIO_LockPin
      16  HAL_GPIO_ReadPin
       8  HAL_GPIO_TogglePin
      14  HAL_GPIO_WritePin

 
 826 bytes in section .text
 
 826 bytes of CODE memory

Errors: none
Warnings: none
