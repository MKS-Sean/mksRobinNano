###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:06:23
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\WMath.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\WMath.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\WMath.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\WMath.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\WMath.cpp
      1          /*
      2            Copyright (c) 2011 Arduino.  All right reserved.
      3          
      4            This library is free software; you can redistribute it and/or
      5            modify it under the terms of the GNU Lesser General Public
      6            License as published by the Free Software Foundation; either
      7            version 2.1 of the License, or (at your option) any later version.
      8          
      9            This library is distributed in the hope that it will be useful,
     10            but WITHOUT ANY WARRANTY; without even the implied warranty of
     11            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
     12            See the GNU Lesser General Public License for more details.
     13          
     14            You should have received a copy of the GNU Lesser General Public
     15            License along with this library; if not, write to the Free Software
     16            Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     17          */
     18          
     19          extern "C" {
     20            #include "stdlib.h"
     21            #include "stdint.h"
     22          }
     23          #include "WMath.h"
     24          

   \                                 In section .text, align 2, keep-with-next
     25          extern void randomSeed( uint32_t dwSeed )
     26          {
     27            if ( dwSeed != 0 )
   \                     _Z10randomSeedj: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ.N    ??randomSeed_0
     28            {
     29              srand( dwSeed ) ;
   \   00000004   0x.... 0x....      B.W      srand
     30            }
     31          }
   \                     ??randomSeed_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return
     32          

   \                                 In section .text, align 2, keep-with-next
     33          extern long random( long howbig )
     34          {
   \                     _Z6randoml: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     35            if ( howbig == 0 )
   \   00000004   0xD101             BNE.N    ??random_0
     36            {
     37              return 0 ;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBD10             POP      {R4,PC}
     38            }
     39          
     40            return rand() % howbig;
   \                     ??random_0: (+1)
   \   0000000A   0x.... 0x....      BL       rand
   \   0000000E   0xFB90 0xF1F4      SDIV     R1,R0,R4
   \   00000012   0xFB04 0x0011      MLS      R0,R4,R1,R0
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
     41          }
     42          

   \                                 In section .text, align 2, keep-with-next
     43          extern long random( long howsmall, long howbig )
     44          {
   \                     _Z6randomll: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     45            if (howsmall >= howbig)
   \   00000004   0x428C             CMP      R4,R1
   \   00000006   0xDA03             BGE.N    ??random_1
     46            {
     47              return howsmall;
     48            }
     49          
     50            long diff = howbig - howsmall;
     51          
     52            return random(diff) + howsmall;
   \   00000008   0x1B08             SUBS     R0,R1,R4
   \   0000000A   0x.... 0x....      BL       _Z6randoml
   \   0000000E   0x1820             ADDS     R0,R4,R0
   \                     ??random_1: (+1)
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     53          }
     54          

   \                                 In section .text, align 2, keep-with-next
     55          extern long map(long x, long in_min, long in_max, long out_min, long out_max)
     56          {
   \                     _Z3maplllll: (+1)
   \   00000000   0xB410             PUSH     {R4}
     57            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
   \   00000002   0x1A40             SUBS     R0,R0,R1
   \   00000004   0x9C01             LDR      R4,[SP, #+4]
   \   00000006   0x1AE4             SUBS     R4,R4,R3
   \   00000008   0x4360             MULS     R0,R4,R0
   \   0000000A   0x1A51             SUBS     R1,R2,R1
   \   0000000C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000010   0x1818             ADDS     R0,R3,R0
   \   00000012   0xBC10             POP      {R4}
   \   00000014   0x4770             BX       LR               ;; return
     58          }
     59          

   \                                 In section .text, align 2, keep-with-next
     60          extern uint16_t makeWord( uint16_t w )
     61          {
     62            return w ;
   \                     _Z8makeWordt: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     63          }
     64          

   \                                 In section .text, align 2, keep-with-next
     65          extern uint16_t makeWord( uint8_t h, uint8_t l )
     66          {
     67            return (h << 8) | l ;
   \                     _Z8makeWordhh: (+1)
   \   00000000   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
   \   00000004   0x4770             BX       LR               ;; return
     68          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   makeWord(uint16_t)
       0   makeWord(uint8_t, uint8_t)
       4   map(long, long, long, long, long)
       8   random(long)
         8   -> rand
       8   random(long, long)
         8   -> random(long)
       0   randomSeed(uint32_t)
         0   -> srand


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  makeWord(uint16_t)
       6  makeWord(uint8_t, uint8_t)
      22  map(long, long, long, long, long)
      24  random(long)
      18  random(long, long)
      10  randomSeed(uint32_t)

 
 82 bytes in section .text
 
 82 bytes of CODE memory

Errors: none
Warnings: none
