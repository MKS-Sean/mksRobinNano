###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:05:48
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\Print.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\Print.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\Print.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\Print.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\Print.cpp
      1          /*
      2           Print.cpp - Base class that provides print() and println()
      3           Copyright (c) 2008 David A. Mellis.  All right reserved.
      4           
      5           This library is free software; you can redistribute it and/or
      6           modify it under the terms of the GNU Lesser General Public
      7           License as published by the Free Software Foundation; either
      8           version 2.1 of the License, or (at your option) any later version.
      9           
     10           This library is distributed in the hope that it will be useful,
     11           but WITHOUT ANY WARRANTY; without even the implied warranty of
     12           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     13           Lesser General Public License for more details.
     14           
     15           You should have received a copy of the GNU Lesser General Public
     16           License along with this library; if not, write to the Free Software
     17           Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     18           
     19           Modified 23 November 2006 by David A. Mellis
     20           */
     21          
     22          #include <stdlib.h>
     23          #include <stdio.h>
     24          #include <string.h>
     25          #include <math.h>
     26          #include "Print.h"

   \                                 In section .text, align 2
   \   __interwork __softfp unsigned int String::length() const
   \                     _ZNK6String6lengthEv: (+1)
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp size_t Print::write(char const *)
   \                     _ZN5Print5writeEPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0xD101             BNE.N    ??write_0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??write_0: (+1)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x4602             MOV      R2,R0
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x6823             LDR      R3,[R4, #+0]
   \   0000001A   0x685B             LDR      R3,[R3, #+4]
   \   0000001C   0xB001             ADD      SP,SP,#+4
   \   0000001E   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   00000022   0x4718             BX       R3
     27          
     28          // Public Methods //////////////////////////////////////////////////////////////
     29          
     30          /* default implementation: may be overridden */

   \                                 In section .text, align 2, keep-with-next
     31          size_t Print::write(const uint8_t *buffer, size_t size)
     32          {
   \                     _ZN5Print5writeEPKhj: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     33            size_t n = 0;
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0xE006             B.N      ??write_1
     34            while (size--) {
     35              n += write(*buffer++);
   \                     ??write_2: (+1)
   \   0000000C   0xF815 0x1B01      LDRB     R1,[R5], #+1
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x6822             LDR      R2,[R4, #+0]
   \   00000014   0x6812             LDR      R2,[R2, #+0]
   \   00000016   0x4790             BLX      R2
   \   00000018   0x19C7             ADDS     R7,R0,R7
     36            }
   \                     ??write_1: (+1)
   \   0000001A   0x4630             MOV      R0,R6
   \   0000001C   0x1E46             SUBS     R6,R0,#+1
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F4             BNE.N    ??write_2
     37            return n;
   \   00000022   0x4638             MOV      R0,R7
   \   00000024   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     38          }
     39          

   \                                 In section .text, align 2, keep-with-next
     40          size_t Print::print(const __FlashStringHelper *ifsh)
     41          {
     42            return print(reinterpret_cast<const char *>(ifsh));
   \                     _ZN5Print5printEPK19__FlashStringHelper: (+1)
   \   00000000   0x....             B.N      _ZN5Print5printEPKc
     43          }
     44          

   \                                 In section .text, align 2, keep-with-next
     45          size_t Print::print(const String &s)
     46          {
   \                     _ZN5Print5printERK6String: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
     47            size_t n = 0;
   \   00000008   0x2600             MOVS     R6,#+0
     48            for (uint16_t i = 0; i < s.length(); i++) {
   \   0000000A   0x4637             MOV      R7,R6
   \   0000000C   0xE00B             B.N      ??print_0
     49              n += write(s[i]);
   \                     ??print_1: (+1)
   \   0000000E   0x4641             MOV      R1,R8
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       _ZNK6StringixEj
   \   00000016   0x4601             MOV      R1,R0
   \   00000018   0xB2C9             UXTB     R1,R1
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x6822             LDR      R2,[R4, #+0]
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x4790             BLX      R2
   \   00000022   0x1986             ADDS     R6,R0,R6
     50            }
   \   00000024   0x1C7F             ADDS     R7,R7,#+1
   \                     ??print_0: (+1)
   \   00000026   0xB2BF             UXTH     R7,R7
   \   00000028   0x46B8             MOV      R8,R7
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       _ZNK6String6lengthEv
   \   00000030   0x4580             CMP      R8,R0
   \   00000032   0xD3EC             BCC.N    ??print_1
     51            return n;
   \   00000034   0x4630             MOV      R0,R6
   \   00000036   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     52          }
     53          

   \                                 In section .text, align 2, keep-with-next
     54          size_t Print::print(const char str[])
     55          {
     56            return write(str);
   \                     _ZN5Print5printEPKc: (+1)
   \   00000000   0x.... 0x....      B.W      _ZN5Print5writeEPKc
     57          }
     58          

   \                                 In section .text, align 2, keep-with-next
     59          size_t Print::print(char c)
     60          {
     61            return write(c);
   \                     _ZN5Print5printEc: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1
   \   00000002   0x6802             LDR      R2,[R0, #+0]
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0x4710             BX       R2
     62          }
     63          

   \                                 In section .text, align 2, keep-with-next
     64          size_t Print::print(unsigned char b, int base)
     65          {
     66            return print((unsigned long) b, base);
   \                     _ZN5Print5printEhi: (+1)
   \   00000000   0x....             B.N      _ZN5Print5printEmi
     67          }
     68          

   \                                 In section .text, align 2, keep-with-next
     69          size_t Print::print(int n, int base)
     70          {
     71            return print((long) n, base);
   \                     _ZN5Print5printEii: (+1)
   \   00000000   0x....             B.N      _ZN5Print5printEli
     72          }
     73          

   \                                 In section .text, align 2, keep-with-next
     74          size_t Print::print(unsigned int n, int base)
     75          {
     76            return print((unsigned long) n, base);
   \                     _ZN5Print5printEji: (+1)
   \   00000000   0x....             B.N      _ZN5Print5printEmi
     77          }
     78          

   \                                 In section .text, align 2, keep-with-next
     79          size_t Print::print(long n, int base)
     80          {
   \                     _ZN5Print5printEli: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     81            if (base == 0) {
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD105             BNE.N    ??print_2
     82              return write(n);
   \   0000000A   0xB2C9             UXTB     R1,R1
   \   0000000C   0x6822             LDR      R2,[R4, #+0]
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000014   0x4710             BX       R2
     83            } else if (base == 10) {
   \                     ??print_2: (+1)
   \   00000016   0x2A0A             CMP      R2,#+10
   \   00000018   0xD110             BNE.N    ??print_3
     84              if (n < 0) {
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD50A             BPL.N    ??print_4
     85                int t = print('-');
   \   0000001E   0x212D             MOVS     R1,#+45
   \   00000020   0x.... 0x....      BL       _ZN5Print5printEc
   \   00000024   0x4606             MOV      R6,R0
     86                n = -n;
     87                return printNumber(n, 10) + t;
   \   00000026   0x220A             MOVS     R2,#+10
   \   00000028   0x4269             RSBS     R1,R5,#+0
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       _ZN5Print11printNumberEmh
   \   00000030   0x1830             ADDS     R0,R6,R0
   \   00000032   0xBD70             POP      {R4-R6,PC}
     88              }
     89              return printNumber(n, 10);
   \                     ??print_4: (+1)
   \   00000034   0x220A             MOVS     R2,#+10
   \   00000036   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003A   0x....             B.N      _ZN5Print11printNumberEmh
     90            } else {
     91              return printNumber(n, base);
   \                     ??print_3: (+1)
   \   0000003C   0xB2D2             UXTB     R2,R2
   \   0000003E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000042   0x....             B.N      _ZN5Print11printNumberEmh
     92            }
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          size_t Print::print(unsigned long n, int base)
     96          {
     97            if (base == 0) return write(n);
   \                     _ZN5Print5printEmi: (+1)
   \   00000000   0x2A00             CMP      R2,#+0
   \   00000002   0xD103             BNE.N    ??print_5
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x4710             BX       R2
     98            else return printNumber(n, base);
   \                     ??print_5: (+1)
   \   0000000C   0xB2D2             UXTB     R2,R2
   \   0000000E   0x....             B.N      _ZN5Print11printNumberEmh
     99          }
    100          

   \                                 In section .text, align 2, keep-with-next
    101          size_t Print::print(double n, int digits)
    102          {
   \                     _ZN5Print5printEdi: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103            return printFloat(n, digits);
   \   00000002   0x9902             LDR      R1,[SP, #+8]
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x9100             STR      R1,[SP, #+0]
   \   00000008   0x.... 0x....      BL       _ZN5Print10printFloatEdh
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    104          }
    105          

   \                                 In section .text, align 2, keep-with-next
    106          size_t Print::println(const __FlashStringHelper *ifsh)
    107          {
   \                     _ZN5Print7printlnEPK19__FlashStringHelper: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    108            size_t n = print(ifsh);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEPK19__FlashStringHelper
   \   00000008   0x4605             MOV      R5,R0
    109            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    110            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    111          }
    112          

   \                                 In section .text, align 2, keep-with-next
    113          size_t Print::print(const Printable& x)
    114          {
   \                     _ZN5Print5printERK9Printable: (+1)
   \   00000000   0x460A             MOV      R2,R1
    115            return x.printTo(*this);
   \   00000002   0x4601             MOV      R1,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x4710             BX       R2
    116          }
    117          

   \                                 In section .text, align 2, keep-with-next
    118          size_t Print::println(void)
    119          {
   \                     _ZN5Print7printlnEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    120            size_t n = print('\r');
   \   00000004   0x210D             MOVS     R1,#+13
   \   00000006   0x.... 0x....      BL       _ZN5Print5printEc
   \   0000000A   0x4605             MOV      R5,R0
    121            n += print('\n');
   \   0000000C   0x210A             MOVS     R1,#+10
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       _ZN5Print5printEc
   \   00000014   0x1940             ADDS     R0,R0,R5
    122            return n;
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    123          }
    124          

   \                                 In section .text, align 2, keep-with-next
    125          size_t Print::println(const String &s)
    126          {
   \                     _ZN5Print7printlnERK6String: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    127            size_t n = print(s);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printERK6String
   \   00000008   0x4605             MOV      R5,R0
    128            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    129            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    130          }
    131          

   \                                 In section .text, align 2, keep-with-next
    132          size_t Print::println(const char c[])
    133          {
   \                     _ZN5Print7printlnEPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    134            size_t n = print(c);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEPKc
   \   00000008   0x4605             MOV      R5,R0
    135            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    136            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    137          }
    138          

   \                                 In section .text, align 2, keep-with-next
    139          size_t Print::println(char c)
    140          {
   \                     _ZN5Print7printlnEc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    141            size_t n = print(c);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEc
   \   00000008   0x4605             MOV      R5,R0
    142            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    143            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    144          }
    145          

   \                                 In section .text, align 2, keep-with-next
    146          size_t Print::println(unsigned char b, int base)
    147          {
   \                     _ZN5Print7printlnEhi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    148            size_t n = print(b, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEhi
   \   00000008   0x4605             MOV      R5,R0
    149            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    150            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    151          }
    152          

   \                                 In section .text, align 2, keep-with-next
    153          size_t Print::println(int num, int base)
    154          {
   \                     _ZN5Print7printlnEii: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    155            size_t n = print(num, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEii
   \   00000008   0x4605             MOV      R5,R0
    156            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    157            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    158          }
    159          

   \                                 In section .text, align 2, keep-with-next
    160          size_t Print::println(unsigned int num, int base)
    161          {
   \                     _ZN5Print7printlnEji: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    162            size_t n = print(num, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEji
   \   00000008   0x4605             MOV      R5,R0
    163            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    164            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    165          }
    166          

   \                                 In section .text, align 2, keep-with-next
    167          size_t Print::println(long num, int base)
    168          {
   \                     _ZN5Print7printlnEli: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    169            size_t n = print(num, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEli
   \   00000008   0x4605             MOV      R5,R0
    170            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    171            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    172          }
    173          

   \                                 In section .text, align 2, keep-with-next
    174          size_t Print::println(unsigned long num, int base)
    175          {
   \                     _ZN5Print7printlnEmi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    176            size_t n = print(num, base);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printEmi
   \   00000008   0x4605             MOV      R5,R0
    177            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    178            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    179          }
    180          

   \                                 In section .text, align 2, keep-with-next
    181          size_t Print::println(double num, int digits)
    182          {
   \                     _ZN5Print7printlnEdi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    183            size_t n = print(num, digits);
   \   00000004   0x9804             LDR      R0,[SP, #+16]
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN5Print5printEdi
   \   0000000E   0x4605             MOV      R5,R0
    184            n += println();
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000016   0x1940             ADDS     R0,R0,R5
    185            return n;
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    186          }
    187          

   \                                 In section .text, align 2, keep-with-next
    188          size_t Print::println(const Printable& x)
    189          {
   \                     _ZN5Print7printlnERK9Printable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    190            size_t n = print(x);
   \   00000004   0x.... 0x....      BL       _ZN5Print5printERK9Printable
   \   00000008   0x4605             MOV      R5,R0
    191            n += println();
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5Print7printlnEv
   \   00000010   0x1940             ADDS     R0,R0,R5
    192            return n;
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    193          }
    194          
    195          // Private Methods /////////////////////////////////////////////////////////////
    196          

   \                                 In section .text, align 2, keep-with-next
    197          size_t Print::printNumber(unsigned long n, uint8_t base) {
   \                     _ZN5Print11printNumberEmh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
    198            char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
    199            char *str = &buf[sizeof(buf) - 1];
   \   00000004   0xAB08             ADD      R3,SP,#+32
    200          
    201            *str = '\0';
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0xF88D 0x4020      STRB     R4,[SP, #+32]
    202          
    203            // prevent crash if called with base == 1
    204            if (base < 2) base = 10;
   \   0000000C   0x2A02             CMP      R2,#+2
   \   0000000E   0xDA00             BGE.N    ??printNumber_0
   \   00000010   0x220A             MOVS     R2,#+10
    205          
    206            do {
    207              unsigned long m = n;
   \                     ??printNumber_0: (+1)
   \   00000012   0x460C             MOV      R4,R1
    208              n /= base;
   \   00000014   0xFBB1 0xF1F2      UDIV     R1,R1,R2
    209              char c = m - base * n;
   \   00000018   0xFB01 0x4412      MLS      R4,R1,R2,R4
   \   0000001C   0xB264             SXTB     R4,R4
    210              *--str = c < 10 ? c + '0' : c + 'A' - 10;
   \   0000001E   0x1E5D             SUBS     R5,R3,#+1
   \   00000020   0x462B             MOV      R3,R5
   \   00000022   0x4626             MOV      R6,R4
   \   00000024   0x2E0A             CMP      R6,#+10
   \   00000026   0xDA01             BGE.N    ??printNumber_1
   \   00000028   0x3430             ADDS     R4,R4,#+48
   \   0000002A   0xE000             B.N      ??printNumber_2
   \                     ??printNumber_1: (+1)
   \   0000002C   0x3437             ADDS     R4,R4,#+55
   \                     ??printNumber_2: (+1)
   \   0000002E   0x702C             STRB     R4,[R5, #+0]
    211            } while(n);
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD1EE             BNE.N    ??printNumber_0
    212          
    213            return write(str);
   \   00000034   0x4619             MOV      R1,R3
   \   00000036   0x.... 0x....      BL       _ZN5Print5writeEPKc
   \   0000003A   0xB00A             ADD      SP,SP,#+40
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    214          }
    215          

   \                                 In section .text, align 2, keep-with-next
    216          size_t Print::printFloat(double number, uint8_t digits) 
    217          { 
   \                     _ZN5Print10printFloatEdh: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4614             MOV      R4,R2
   \   00000008   0x461D             MOV      R5,R3
    218            size_t n = 0;
   \   0000000A   0x2600             MOVS     R6,#+0
    219            
    220            if (isnan(number)) return print("nan");
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x.... 0x....      BL       __iar_Dtest
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD104             BNE.N    ??printFloat_0
   \   00000018   0x....             ADR.N    R1,??DataTable4  ;; "nan"
   \   0000001A   0x4640             MOV      R0,R8
   \   0000001C   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000020   0x....             B.N      _ZN5Print5printEPKc
    221            if (isinf(number)) return print("inf");
   \                     ??printFloat_0: (+1)
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x.... 0x....      BL       __iar_Dtest
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD104             BNE.N    ??printFloat_1
   \   0000002E   0x....             ADR.N    R1,??DataTable4_1  ;; "inf"
   \   00000030   0x4640             MOV      R0,R8
   \   00000032   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000036   0x....             B.N      _ZN5Print5printEPKc
    222            if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   \                     ??printFloat_1: (+1)
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x....             LDR.N    R2,??DataTable4_4  ;; 0xe0000001
   \   0000003E   0x....             LDR.N    R3,??DataTable4_5  ;; 0x41efffff
   \   00000040   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000044   0xD804             BHI.N    ??printFloat_2
   \   00000046   0x....             ADR.N    R1,??DataTable4_2  ;; "ovf"
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   0000004E   0x....             B.N      _ZN5Print5printEPKc
    223            if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   \                     ??printFloat_2: (+1)
   \   00000050   0xF04F 0x4260      MOV      R2,#-536870912
   \   00000054   0x....             LDR.N    R3,??DataTable4_6  ;; 0xc1efffff
   \   00000056   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000005A   0xD204             BCS.N    ??printFloat_3
   \   0000005C   0x....             ADR.N    R1,??DataTable4_2  ;; "ovf"
   \   0000005E   0x4640             MOV      R0,R8
   \   00000060   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000064   0x....             B.N      _ZN5Print5printEPKc
    224            
    225            // Handle negative numbers
    226            if (number < 0.0)
   \                     ??printFloat_3: (+1)
   \   00000066   0x4632             MOV      R2,R6
   \   00000068   0x4613             MOV      R3,R2
   \   0000006A   0x.... 0x....      BL       __aeabi_cdcmple
   \   0000006E   0xD206             BCS.N    ??printFloat_4
    227            {
    228               n += print('-');
   \   00000070   0x212D             MOVS     R1,#+45
   \   00000072   0x4640             MOV      R0,R8
   \   00000074   0x.... 0x....      BL       _ZN5Print5printEc
   \   00000078   0x4606             MOV      R6,R0
    229               number = -number;
   \   0000007A   0xF085 0x4500      EOR      R5,R5,#0x80000000
    230            }
    231          
    232            // Round correctly so that print(1.999, 2) prints as "2.00"
    233            double rounding = 0.5;
   \                     ??printFloat_4: (+1)
   \   0000007E   0x2200             MOVS     R2,#+0
   \   00000080   0x....             LDR.N    R3,??DataTable4_7  ;; 0x3fe00000
    234            for (uint8_t i=0; i<digits; ++i)
   \   00000082   0x4691             MOV      R9,R2
   \   00000084   0x9F08             LDR      R7,[SP, #+32]
   \   00000086   0xE009             B.N      ??printFloat_5
    235              rounding /= 10.0;
   \                     ??printFloat_6: (+1)
   \   00000088   0x4610             MOV      R0,R2
   \   0000008A   0x4619             MOV      R1,R3
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x....             LDR.N    R3,??DataTable4_8  ;; 0x40240000
   \   00000090   0x.... 0x....      BL       __aeabi_ddiv
   \   00000094   0x4602             MOV      R2,R0
   \   00000096   0x460B             MOV      R3,R1
   \   00000098   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??printFloat_5: (+1)
   \   0000009C   0xFA5F 0xF989      UXTB     R9,R9
   \   000000A0   0x45B9             CMP      R9,R7
   \   000000A2   0xD3F1             BCC.N    ??printFloat_6
    236            
    237            number += rounding;
   \   000000A4   0x4620             MOV      R0,R4
   \   000000A6   0x4629             MOV      R1,R5
   \   000000A8   0x.... 0x....      BL       __aeabi_dadd
   \   000000AC   0x4604             MOV      R4,R0
   \   000000AE   0x460D             MOV      R5,R1
    238          
    239            // Extract the integer part of the number and print it
    240            unsigned long int_part = (unsigned long)number;
   \   000000B0   0x.... 0x....      BL       __aeabi_d2uiz
   \   000000B4   0x4681             MOV      R9,R0
    241            double remainder = number - (double)int_part;
   \   000000B6   0x.... 0x....      BL       __aeabi_ui2d
   \   000000BA   0x4602             MOV      R2,R0
   \   000000BC   0x460B             MOV      R3,R1
   \   000000BE   0x4620             MOV      R0,R4
   \   000000C0   0x4629             MOV      R1,R5
   \   000000C2   0x.... 0x....      BL       __aeabi_dsub
   \   000000C6   0x4604             MOV      R4,R0
   \   000000C8   0x460D             MOV      R5,R1
    242            n += print(int_part);
   \   000000CA   0x220A             MOVS     R2,#+10
   \   000000CC   0x4649             MOV      R1,R9
   \   000000CE   0x4640             MOV      R0,R8
   \   000000D0   0x.... 0x....      BL       _ZN5Print5printEmi
   \   000000D4   0x1986             ADDS     R6,R0,R6
    243          
    244            // Print the decimal point, but only if there are digits beyond
    245            if (digits > 0) {
   \   000000D6   0x2F00             CMP      R7,#+0
   \   000000D8   0xD021             BEQ.N    ??printFloat_7
    246              n += print("."); 
   \   000000DA   0x....             ADR.N    R1,??DataTable4_3  ;; "."
   \   000000DC   0x4640             MOV      R0,R8
   \   000000DE   0x.... 0x....      BL       _ZN5Print5printEPKc
   \   000000E2   0x1986             ADDS     R6,R0,R6
   \   000000E4   0xE01B             B.N      ??printFloat_7
    247            }
    248          
    249            // Extract digits from the remainder one at a time
    250            while (digits-- > 0)
    251            {
    252              remainder *= 10.0;
   \                     ??printFloat_8: (+1)
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x....             LDR.N    R1,??DataTable4_8  ;; 0x40240000
   \   000000EA   0x4622             MOV      R2,R4
   \   000000EC   0x462B             MOV      R3,R5
   \   000000EE   0x.... 0x....      BL       __aeabi_dmul
   \   000000F2   0x4604             MOV      R4,R0
   \   000000F4   0x460D             MOV      R5,R1
    253              int toPrint = int(remainder);
   \   000000F6   0x.... 0x....      BL       __aeabi_d2iz
   \   000000FA   0x4681             MOV      R9,R0
    254              n += print(toPrint);
   \   000000FC   0x220A             MOVS     R2,#+10
   \   000000FE   0x4649             MOV      R1,R9
   \   00000100   0x4640             MOV      R0,R8
   \   00000102   0x.... 0x....      BL       _ZN5Print5printEii
   \   00000106   0x1986             ADDS     R6,R0,R6
    255              remainder -= toPrint; 
   \   00000108   0x4648             MOV      R0,R9
   \   0000010A   0x.... 0x....      BL       __aeabi_i2d
   \   0000010E   0x4602             MOV      R2,R0
   \   00000110   0x460B             MOV      R3,R1
   \   00000112   0x4620             MOV      R0,R4
   \   00000114   0x4629             MOV      R1,R5
   \   00000116   0x.... 0x....      BL       __aeabi_dsub
   \   0000011A   0x4604             MOV      R4,R0
   \   0000011C   0x460D             MOV      R5,R1
    256            } 
   \                     ??printFloat_7: (+1)
   \   0000011E   0x4638             MOV      R0,R7
   \   00000120   0x1E47             SUBS     R7,R0,#+1
   \   00000122   0xB2C0             UXTB     R0,R0
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD1DE             BNE.N    ??printFloat_8
    257            
    258            return n;
   \   00000128   0x4630             MOV      R0,R6
   \   0000012A   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    259          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x6E 0x61          DC8      "nan"
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x69 0x6E          DC8      "inf"
   \              0x66 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x6F 0x76          DC8      "ovf"
   \              0x66 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x2E 0x00          DC8      ".",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE0000001         DC32     0xe0000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x41EFFFFF         DC32     0x41efffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0xC1EFFFFF         DC32     0xc1efffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x40240000         DC32     0x40240000

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "nan">`:
   \   00000000   0x6E 0x61          DC8 "nan"
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "inf">`:
   \   00000000   0x69 0x6E          DC8 "inf"
   \              0x66 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ovf">`:
   \   00000000   0x6F 0x76          DC8 "ovf"
   \              0x66 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant ".">`:
   \   00000000   0x2E 0x00          DC8 "."

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Print::print(Printable const &)
         0   -- Indirect call
      24   Print::print(String const &)
        24   -- Indirect call
        24   -> String::length() const
        24   -> String::operator[](unsigned int) const
       0   Print::print(__FlashStringHelper const *)
         0   -> Print::print(char const *)
       0   Print::print(char const *)
         0   -> Print::write(char const *)
       0   Print::print(char)
         0   -- Indirect call
       8   Print::print(double, int)
         8   -> Print::printFloat(double, uint8_t)
       0   Print::print(int, int)
         0   -> Print::print(long, int)
      16   Print::print(long, int)
         0   -- Indirect call
        16   -> Print::print(char)
         0   -> Print::printNumber(unsigned long, uint8_t)
        16   -> Print::printNumber(unsigned long, uint8_t)
       0   Print::print(unsigned char, int)
         0   -> Print::print(unsigned long, int)
       0   Print::print(unsigned int, int)
         0   -> Print::print(unsigned long, int)
       0   Print::print(unsigned long, int)
         0   -- Indirect call
         0   -> Print::printNumber(unsigned long, uint8_t)
      32   Print::printFloat(double, uint8_t)
         0   -> Print::print(char const *)
        32   -> Print::print(char const *)
        32   -> Print::print(char)
        32   -> Print::print(int, int)
        32   -> Print::print(unsigned long, int)
        32   -> __aeabi_cdcmple
        32   -> __aeabi_cdrcmple
        32   -> __aeabi_d2iz
        32   -> __aeabi_d2uiz
        32   -> __aeabi_dadd
        32   -> __aeabi_ddiv
        32   -> __aeabi_dmul
        32   -> __aeabi_dsub
        32   -> __aeabi_i2d
        32   -> __aeabi_ui2d
        32   -> __iar_Dtest
      56   Print::printNumber(unsigned long, uint8_t)
        56   -> Print::write(char const *)
      16   Print::println()
        16   -> Print::print(char)
      16   Print::println(Printable const &)
        16   -> Print::print(Printable const &)
        16   -> Print::println()
      16   Print::println(String const &)
        16   -> Print::print(String const &)
        16   -> Print::println()
      16   Print::println(__FlashStringHelper const *)
        16   -> Print::print(__FlashStringHelper const *)
        16   -> Print::println()
      16   Print::println(char const *)
        16   -> Print::print(char const *)
        16   -> Print::println()
      16   Print::println(char)
        16   -> Print::print(char)
        16   -> Print::println()
      16   Print::println(double, int)
        16   -> Print::print(double, int)
        16   -> Print::println()
      16   Print::println(int, int)
        16   -> Print::print(int, int)
        16   -> Print::println()
      16   Print::println(long, int)
        16   -> Print::print(long, int)
        16   -> Print::println()
      16   Print::println(unsigned char, int)
        16   -> Print::print(unsigned char, int)
        16   -> Print::println()
      16   Print::println(unsigned int, int)
        16   -> Print::print(unsigned int, int)
        16   -> Print::println()
      16   Print::println(unsigned long, int)
        16   -> Print::print(unsigned long, int)
        16   -> Print::println()
      16   Print::write(char const *)
         0   -- Indirect call
        16   -> strlen
      24   Print::write(uint8_t const *, size_t)
        24   -- Indirect call
       0   String::length() const


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant ".">
       4  ?<Constant "inf">
       4  ?<Constant "nan">
       4  ?<Constant "ovf">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      12  Print::print(Printable const &)
      58  Print::print(String const &)
       2  Print::print(__FlashStringHelper const *)
       4  Print::print(char const *)
       8  Print::print(char)
      14  Print::print(double, int)
       2  Print::print(int, int)
      68  Print::print(long, int)
       2  Print::print(unsigned char, int)
       2  Print::print(unsigned int, int)
      16  Print::print(unsigned long, int)
     302  Print::printFloat(double, uint8_t)
      62  Print::printNumber(unsigned long, uint8_t)
      24  Print::println()
      20  Print::println(Printable const &)
      20  Print::println(String const &)
      20  Print::println(__FlashStringHelper const *)
      20  Print::println(char const *)
      20  Print::println(char)
      26  Print::println(double, int)
      20  Print::println(int, int)
      20  Print::println(long, int)
      20  Print::println(unsigned char, int)
      20  Print::println(unsigned int, int)
      20  Print::println(unsigned long, int)
      36  Print::write(char const *)
      38  Print::write(uint8_t const *, size_t)
       4  String::length() const
      18  -- Other

 
  32 bytes in section .rodata
 916 bytes in section .text
 
 876 bytes of CODE  memory (+ 40 bytes shared)
  14 bytes of CONST memory (+ 18 bytes shared)

Errors: none
Warnings: none
