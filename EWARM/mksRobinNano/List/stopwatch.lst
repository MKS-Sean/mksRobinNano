###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:06:11
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\stopwatch.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\stopwatch.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\stopwatch.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\stopwatch.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\stopwatch.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          #include "Marlin.h"

  #define UNUSED(x) ((void)(x))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Inc\mks_cfg.h",613  Warning[Pe083]: 
          type qualifier specified more than once

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

    }
    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
     24          #include "stopwatch.h"
     25          

   \                                 In section .text, align 2, keep-with-next
     26          Stopwatch::Stopwatch() {
   \                     _ZN9StopwatchC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     27            this->reset();
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch5resetEv
     28          }
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          bool Stopwatch::stop() {
   \                     _ZN9Stopwatch4stopEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     31            #if ENABLED(DEBUG_STOPWATCH)
     32              Stopwatch::debug(PSTR("stop"));
     33            #endif
     34          
     35            if (this->isRunning() || this->isPaused()) {
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD104             BNE.N    ??stop_0
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN9Stopwatch8isPausedEv
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD006             BEQ.N    ??stop_1
     36              this->state = STOPPED;
   \                     ??stop_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x7020             STRB     R0,[R4, #+0]
     37              this->stopTimestamp = millis();
   \   0000001A   0x.... 0x....      BL       HAL_GetTick
   \   0000001E   0x60E0             STR      R0,[R4, #+12]
     38              return true;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xBD10             POP      {R4,PC}
     39            }
     40            else return false;
   \                     ??stop_1: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
     41          }
     42          

   \                                 In section .text, align 2, keep-with-next
     43          bool Stopwatch::pause() {
   \                     _ZN9Stopwatch5pauseEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     44            #if ENABLED(DEBUG_STOPWATCH)
     45              Stopwatch::debug(PSTR("pause"));
     46            #endif
     47          
     48            if (this->isRunning()) {
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD006             BEQ.N    ??pause_0
     49              this->state = PAUSED;
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
     50              this->stopTimestamp = millis();
   \   00000010   0x.... 0x....      BL       HAL_GetTick
   \   00000014   0x60E0             STR      R0,[R4, #+12]
     51              return true;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xBD10             POP      {R4,PC}
     52            }
     53            else return false;
   \                     ??pause_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     54          }
     55          

   \                                 In section .text, align 2, keep-with-next
     56          bool Stopwatch::start() {
   \                     _ZN9Stopwatch5startEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     57            #if ENABLED(DEBUG_STOPWATCH)
     58              Stopwatch::debug(PSTR("start"));
     59            #endif
     60          
     61            if (!this->isRunning()) {
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD112             BNE.N    ??start_0
     62              if (this->isPaused()) this->accumulator = this->duration();
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN9Stopwatch8isPausedEv
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0xD003             BEQ.N    ??start_1
   \   00000018   0x.... 0x....      BL       _ZN9Stopwatch8durationEv
   \   0000001C   0x6060             STR      R0,[R4, #+4]
   \   0000001E   0xE001             B.N      ??start_2
     63              else this->reset();
   \                     ??start_1: (+1)
   \   00000020   0x.... 0x....      BL       _ZN9Stopwatch5resetEv
     64          
     65              this->state = RUNNING;
   \                     ??start_2: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x7020             STRB     R0,[R4, #+0]
     66              this->startTimestamp = millis();
   \   00000028   0x.... 0x....      BL       HAL_GetTick
   \   0000002C   0x60A0             STR      R0,[R4, #+8]
     67              return true;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xBD10             POP      {R4,PC}
     68            }
     69            else return false;
   \                     ??start_0: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
     70          }
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void Stopwatch::reset() {
     73            #if ENABLED(DEBUG_STOPWATCH)
     74              Stopwatch::debug(PSTR("reset"));
     75            #endif
     76          
     77            this->state = STOPPED;
   \                     _ZN9Stopwatch5resetEv: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7001             STRB     R1,[R0, #+0]
     78            this->startTimestamp = 0;
   \   00000004   0x6081             STR      R1,[R0, #+8]
     79            this->stopTimestamp = 0;
   \   00000006   0x60C1             STR      R1,[R0, #+12]
     80            this->accumulator = 0;
   \   00000008   0x6041             STR      R1,[R0, #+4]
     81          }
   \   0000000A   0x4770             BX       LR               ;; return
     82          

   \                                 In section .text, align 2, keep-with-next
     83          bool Stopwatch::isRunning() {
     84            return (this->state == RUNNING) ? true : false;
   \                     _ZN9Stopwatch9isRunningEv: (+1)
   \   00000000   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD101             BNE.N    ??isRunning_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x4770             BX       LR
   \                     ??isRunning_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4770             BX       LR               ;; return
     85          }
     86          

   \                                 In section .text, align 2, keep-with-next
     87          bool Stopwatch::isPaused() {
     88            return (this->state == PAUSED) ? true : false;
   \                     _ZN9Stopwatch8isPausedEv: (+1)
   \   00000000   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000004   0x2802             CMP      R0,#+2
   \   00000006   0xD101             BNE.N    ??isPaused_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x4770             BX       LR
   \                     ??isPaused_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4770             BX       LR               ;; return
     89          }
     90          

   \                                 In section .text, align 2, keep-with-next
     91          millis_t Stopwatch::duration() {
   \                     _ZN9Stopwatch8durationEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     92            return (((this->isRunning()) ? millis() : this->stopTimestamp)
     93                    - this->startTimestamp) / 1000UL + this->accumulator;
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ.N    ??duration_0
   \   0000000C   0x.... 0x....      BL       HAL_GetTick
   \   00000010   0xE000             B.N      ??duration_1
   \                     ??duration_0: (+1)
   \   00000012   0x68E0             LDR      R0,[R4, #+12]
   \                     ??duration_1: (+1)
   \   00000014   0x68A1             LDR      R1,[R4, #+8]
   \   00000016   0x1A40             SUBS     R0,R0,R1
   \   00000018   0xF44F 0x717A      MOV      R1,#+1000
   \   0000001C   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000020   0x6861             LDR      R1,[R4, #+4]
   \   00000022   0x1808             ADDS     R0,R1,R0
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
     94          }
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void Stopwatch::getTime(millis_t *accu,millis_t *startTime,millis_t *stopTime)
     97          {
   \                     _ZN9Stopwatch7getTimeEPmS0_S0_: (+1)
   \   00000000   0xB410             PUSH     {R4}
     98          	*accu = accumulator;
   \   00000002   0x6844             LDR      R4,[R0, #+4]
   \   00000004   0x600C             STR      R4,[R1, #+0]
     99          	*startTime = startTimestamp;
   \   00000006   0x6881             LDR      R1,[R0, #+8]
   \   00000008   0x6011             STR      R1,[R2, #+0]
    100          	*stopTime = stopTimestamp;
   \   0000000A   0x68C0             LDR      R0,[R0, #+12]
   \   0000000C   0x6018             STR      R0,[R3, #+0]
    101          }
   \   0000000E   0xBC10             POP      {R4}
   \   00000010   0x4770             BX       LR               ;; return
    102          

   \                                 In section .text, align 2, keep-with-next
    103          void Stopwatch::setTime(millis_t accu,millis_t startTime,millis_t stopTime)
    104          {
    105          	accumulator = accu;
   \                     _ZN9Stopwatch7setTimeEmmm: (+1)
   \   00000000   0x6041             STR      R1,[R0, #+4]
    106          	startTimestamp = startTime;
   \   00000002   0x6082             STR      R2,[R0, #+8]
    107          	stopTimestamp = stopTime;
   \   00000004   0x60C3             STR      R3,[R0, #+12]
    108          	state = PAUSED;
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x7001             STRB     R1,[R0, #+0]
    109          }
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp Stopwatch::subobject Stopwatch()
   \                     _ZN9StopwatchC2Ev: (+1)
   \   00000000   0xBF00             Nop      
   \   00000002                      REQUIRE _ZN9StopwatchC1Ev
   \   00000002                      ;; // Fall through to label Stopwatch::Stopwatch()
    110          
    111          #if ENABLED(DEBUG_STOPWATCH)
    112          
    113            void Stopwatch::debug(const char func[]) {
    114              if (DEBUGGING(INFO)) {
    115                SERIAL_ECHOPGM("Stopwatch::");
    116                serialprintPGM(func);
    117                SERIAL_ECHOLNPGM("()");
    118              }
    119            }
    120          
    121          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Stopwatch::Stopwatch()
         8   -> Stopwatch::reset()
       8   Stopwatch::duration()
         8   -> HAL_GetTick
         8   -> Stopwatch::isRunning()
       4   Stopwatch::getTime(millis_t *, millis_t *, millis_t *)
       0   Stopwatch::isPaused()
       0   Stopwatch::isRunning()
       8   Stopwatch::pause()
         8   -> HAL_GetTick
         8   -> Stopwatch::isRunning()
       0   Stopwatch::reset()
       0   Stopwatch::setTime(millis_t, millis_t, millis_t)
       8   Stopwatch::start()
         8   -> HAL_GetTick
         8   -> Stopwatch::duration()
         8   -> Stopwatch::isPaused()
         8   -> Stopwatch::isRunning()
         8   -> Stopwatch::reset()
       8   Stopwatch::stop()
         8   -> HAL_GetTick
         8   -> Stopwatch::isPaused()
         8   -> Stopwatch::isRunning()
       0   Stopwatch::subobject Stopwatch()
         0   -> Stopwatch::Stopwatch()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  Stopwatch::Stopwatch()
      38  Stopwatch::duration()
      18  Stopwatch::getTime(millis_t *, millis_t *, millis_t *)
      16  Stopwatch::isPaused()
      16  Stopwatch::isRunning()
      30  Stopwatch::pause()
      12  Stopwatch::reset()
      12  Stopwatch::setTime(millis_t, millis_t, millis_t)
      54  Stopwatch::start()
      40  Stopwatch::stop()
       2  Stopwatch::subobject Stopwatch()
       1  -- Other

 
   1 byte  in section .rodata
 250 bytes in section .text
 
 250 bytes of CODE  memory
   0 bytes of CONST memory (+ 1 byte shared)

Errors: none
Warnings: 7
