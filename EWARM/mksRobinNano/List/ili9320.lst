###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:05:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Src\ili9320.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Src\ili9320.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\ili9320.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\ili9320.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Src\ili9320.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm3210e_eval_lcd.c
      4            * @author  ARMJISHU Application Team
      5            * @version 
      6            * @date    
      7            * @brief   This file includes the LCD driver for AM-240320L8TNQW00H 
      8            *          (LCD_ILI9320) and AM-240320LDTNQW00H (LCD_SPFD5408B) Liquid Crystal
      9            *          Display Module of STM3210E-EVAL board.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     21            ******************************************************************************  
     22            */ 
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          //#include "stm32f10x.h"
     26          #include "stm32f1xx.h" //skyblue 2006-12-13
     27          #include "stm32f103xe.h"
     28          #include "stm32f10x_fsmc.h"   //skyblue

  #define IS_FSMC_NORSRAM_BANK(BANK) (((BANK) == FSMC_Bank1_NORSRAM1) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",274  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_NORSRAM_BANK" (declared
          at line 63 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_NAND_BANK(BANK) (((BANK) == FSMC_Bank2_NAND) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",279  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_NAND_BANK" (declared at
          line 87 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_MUX(MUX) (((MUX) == FSMC_DataAddressMux_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",300  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_MUX" (declared at line
          68 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_MEMORY(MEMORY) (((MEMORY) == FSMC_MemoryType_SRAM) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",314  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_MEMORY" (declared at
          line 71 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_BURSTMODE(STATE) (((STATE) == FSMC_BurstAccessMode_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",341  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_BURSTMODE" (declared at
          line 190 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_ASYNWAIT(STATE) (((STATE) == FSMC_AsynchronousWait_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",352  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_ASYNWAIT" (declared at
          line 211 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_WAIT_POLARITY(POLARITY) (((POLARITY) == FSMC_WaitSignalPolarity_Low) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",365  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_WAIT_POLARITY" (declared
          at line 193 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_WRAP_MODE(MODE) (((MODE) == FSMC_WrapMode_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",378  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_WRAP_MODE" (declared at
          line 196 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_WAIT_SIGNAL_ACTIVE(ACTIVE) (((ACTIVE) == FSMC_WaitSignalActive_BeforeWaitState) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",391  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_WAIT_SIGNAL_ACTIVE"
          (declared at line 199 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_WRITE_OPERATION(OPERATION) (((OPERATION) == FSMC_WriteOperation_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",404  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_WRITE_OPERATION"
          (declared at line 202 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_WAITE_SIGNAL(SIGNAL) (((SIGNAL) == FSMC_WaitSignal_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",417  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_WAITE_SIGNAL" (declared
          at line 205 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_EXTENDED_MODE(MODE) (((MODE) == FSMC_ExtendedMode_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",430  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_EXTENDED_MODE" (declared
          at line 208 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_WRITE_BURST(BURST) (((BURST) == FSMC_WriteBurst_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",443  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_WRITE_BURST" (declared
          at line 79 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_ADDRESS_SETUP_TIME(TIME) ((TIME) <= 0xF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",453  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_ADDRESS_SETUP_TIME"
          (declared at line 227 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_ADDRESS_HOLD_TIME(TIME) ((TIME) <= 0xF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",463  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_ADDRESS_HOLD_TIME"
          (declared at line 235 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_DATASETUP_TIME(TIME) (((TIME) > 0) && ((TIME) <= 0xFF))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",473  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_DATASETUP_TIME"
          (declared at line 243 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_TURNAROUND_TIME(TIME) ((TIME) <= 0xF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",483  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_TURNAROUND_TIME"
          (declared at line 251 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_CLK_DIV(DIV) ((DIV) <= 0xF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",493  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_CLK_DIV" (declared at
          line 214 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_DATA_LATENCY(LATENCY) ((LATENCY) <= 0xF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",503  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_DATA_LATENCY" (declared
          at line 219 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_ACCESS_MODE(MODE) (((MODE) == FSMC_AccessMode_A) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",517  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_ACCESS_MODE" (declared
          at line 82 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_WAIT_FEATURE(FEATURE) (((FEATURE) == FSMC_Waitfeature_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",540  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_WAIT_FEATURE" (declared
          at line 90 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_ECC_STATE(STATE) (((STATE) == FSMC_ECC_Disable) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",554  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_ECC_STATE" (declared at
          line 96 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_ECCPAGE_SIZE(SIZE) (((SIZE) == FSMC_ECCPageSize_256Bytes) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",571  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_ECCPAGE_SIZE" (declared
          at line 99 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_TCLR_TIME(TIME) ((TIME) <= 0xFF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",586  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_TCLR_TIME" (declared at
          line 109 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_TAR_TIME(TIME) ((TIME) <= 0xFF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",596  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_TAR_TIME" (declared at
          line 117 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_SETUP_TIME(TIME) ((TIME) <= 0xFF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",606  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_SETUP_TIME" (declared at
          line 125 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_WAIT_TIME(TIME) ((TIME) <= 0xFF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",616  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_WAIT_TIME" (declared at
          line 133 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_HOLD_TIME(TIME) ((TIME) <= 0xFF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",626  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_HOLD_TIME" (declared at
          line 141 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define IS_FSMC_HIZ_TIME(TIME) ((TIME) <= 0xFF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",636  Warning[Pe047]: 
          incompatible redefinition of macro "IS_FSMC_HIZ_TIME" (declared at
          line 149 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")

  #define FSMC_FLAG_FEMPT                                 ((uint32_t)0x00000040)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_fsmc.h",664  Warning[Pe047]: 
          incompatible redefinition of macro "FSMC_FLAG_FEMPT" (declared at
          line 734 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_fsmc.h")
     29          #include "stm32f10x_gpio.h"

  #define IS_GPIO_SPEED(SPEED) (((SPEED) == GPIO_Speed_10MHz) || ((SPEED) == GPIO_Speed_2MHz) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_gpio.h",64  Warning[Pe047]: 
          incompatible redefinition of macro "IS_GPIO_SPEED" (declared at line
          201 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h")

  #define IS_GPIO_MODE(MODE) (((MODE) == GPIO_Mode_AIN) || ((MODE) == GPIO_Mode_IN_FLOATING) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_gpio.h",82  Warning[Pe047]: 
          incompatible redefinition of macro "IS_GPIO_MODE" (declared at line
          204 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h")

  #define IS_GPIO_PIN(PIN) ((((PIN) & (uint16_t)0x00) == 0x00) && ((PIN) != (uint16_t)0x00))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_gpio.h",145  Warning[Pe047]: 
          incompatible redefinition of macro "IS_GPIO_PIN" (declared at line
          196 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h")
     30          
     31          //#include "fsmc.h"       //skyblue 2006-12-13
     32          #include "ili9320.h"
     33          #include "ili9320_font.h"

   \                                 In section .text, align 4, keep-with-next
   \   __absolute unsigned char const ascii_8x16[1536]
   \                     ascii_8x16:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60, 60
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x18 0x3C    
   \              0x3C         
   \   00000015   0x3C 0x18          DC8 60, 24, 24, 24, 0, 24, 24, 0, 0, 0, 0, 0, 102, 102, 102, 36, 0, 0
   \              0x18 0x18    
   \              0x00 0x18    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x66 0x66    
   \              0x66 0x24    
   \              0x00 0x00    
   \   00000027   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 108, 254, 108, 108, 108
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x6C 0x6C    
   \              0xFE 0x6C    
   \              0x6C 0x6C    
   \   00000039   0xFE 0x6C          DC8 254, 108, 108, 0, 0, 0, 0, 24, 24, 124, 198, 194, 192, 124, 6, 134
   \              0x6C 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x18 0x7C    
   \              0xC6 0xC2    
   \              0xC0 0x7C    
   \              0x06 0x86    
   \   00000049   0xC6 0x7C          DC8 198, 124, 24, 24, 0, 0, 0, 0, 0, 0, 0, 194, 198, 12, 24, 48, 96
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xC2    
   \              0xC6 0x0C    
   \              0x18 0x30    
   \              0x60         
   \   0000005A   0xC6 0x86          DC8 198, 134, 0, 0, 0, 0, 0, 0, 56, 108, 108, 56, 118, 220, 204, 204
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x38 0x6C    
   \              0x6C 0x38    
   \              0x76 0xDC    
   \              0xCC 0xCC    
   \   0000006A   0xCC 0x76          DC8 204, 118, 0, 0, 0, 0, 0, 48, 48, 48, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x30    
   \              0x30 0x30    
   \              0x60 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000007E   0x00 0x00          DC8 0, 0, 0, 0, 12, 24, 48, 48, 48, 48, 48, 48, 24, 12, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x0C 0x18    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x18 0x0C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000091   0x00 0x30          DC8 0, 48, 24, 12, 12, 12, 12, 12, 12, 24, 48, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x18 0x0C    
   \              0x0C 0x0C    
   \              0x0C 0x0C    
   \              0x0C 0x18    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A4   0x00 0x66          DC8 0, 102, 60, 255, 60, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24
   \              0x3C 0xFF    
   \              0x3C 0x66    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x18         
   \   000000B7   0x7E 0x18          DC8 126, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x18 0x18    
   \   000000CB   0x18 0x30          DC8 24, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x02 0x06    
   \   000000F6   0x0C 0x18          DC8 12, 24, 48, 96, 192, 128, 0, 0, 0, 0, 0, 0, 124, 198, 198, 206, 214
   \              0x30 0x60    
   \              0xC0 0x80    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0xC6    
   \              0xC6 0xCE    
   \              0xD6         
   \   00000107   0xD6 0xE6          DC8 214, 230, 198, 198, 124, 0, 0, 0, 0, 0, 0, 24, 56, 120, 24, 24, 24
   \              0xC6 0xC6    
   \              0x7C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x38 0x78    
   \              0x18 0x18    
   \              0x18         
   \   00000118   0x18 0x18          DC8 24, 24, 24, 126, 0, 0, 0, 0, 0, 0, 124, 198, 6, 12, 24, 48, 96, 192
   \              0x18 0x7E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0xC6    
   \              0x06 0x0C    
   \              0x18 0x30    
   \              0x60 0xC0    
   \   0000012A   0xC6 0xFE          DC8 198, 254, 0, 0, 0, 0, 0, 0, 124, 198, 6, 6, 60, 6, 6, 6, 198, 124
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0xC6    
   \              0x06 0x06    
   \              0x3C 0x06    
   \              0x06 0x06    
   \              0xC6 0x7C    
   \   0000013C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 12, 28, 60, 108, 204, 254, 12, 12, 12, 30, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x0C 0x1C    
   \              0x3C 0x6C    
   \              0xCC 0xFE    
   \              0x0C 0x0C    
   \              0x0C 0x1E    
   \              0x00 0x00    
   \   0000014E   0x00 0x00          DC8 0, 0, 0, 0, 254, 192, 192, 192, 252, 14, 6, 6, 198, 124, 0, 0, 0, 0
   \              0x00 0x00    
   \              0xFE 0xC0    
   \              0xC0 0xC0    
   \              0xFC 0x0E    
   \              0x06 0x06    
   \              0xC6 0x7C    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000160   0x00 0x00          DC8 0, 0, 56, 96, 192, 192, 252, 198, 198, 198, 198, 124, 0, 0, 0, 0, 0
   \              0x38 0x60    
   \              0xC0 0xC0    
   \              0xFC 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0x7C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000171   0x00 0xFE          DC8 0, 254, 198, 6, 6, 12, 24, 48, 48, 48, 48, 0, 0, 0, 0, 0, 0, 124
   \              0xC6 0x06    
   \              0x06 0x0C    
   \              0x18 0x30    
   \              0x30 0x30    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \   00000183   0xC6 0xC6          DC8 198, 198, 198, 124, 198, 198, 198, 198, 124, 0, 0, 0, 0, 0, 0, 124
   \              0xC6 0x7C    
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0x7C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \   00000193   0xC6 0xC6          DC8 198, 198, 198, 126, 6, 6, 6, 12, 120, 0, 0, 0, 0, 0, 0, 0, 0, 24
   \              0xC6 0x7E    
   \              0x06 0x06    
   \              0x06 0x0C    
   \              0x78 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \   000001A5   0x18 0x00          DC8 24, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 24
   \              0x00 0x00    
   \              0x18 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x18         
   \   000001BA   0x18 0x30          DC8 24, 48, 0, 0, 0, 0, 0, 0, 0, 6, 12, 24, 48, 96, 48, 24, 12, 6, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x06    
   \              0x0C 0x18    
   \              0x30 0x60    
   \              0x30 0x18    
   \              0x0C 0x06    
   \              0x00 0x00    
   \   000001CE   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0x00    
   \              0x00 0xFE    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001E3   0x60 0x30          DC8 96, 48, 24, 12, 6, 12, 24, 48, 96, 0, 0, 0, 0, 0, 0, 124, 198, 198
   \              0x18 0x0C    
   \              0x06 0x0C    
   \              0x18 0x30    
   \              0x60 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \              0xC6 0xC6    
   \   000001F5   0x0C 0x18          DC8 12, 24, 24, 24, 0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 124, 198, 198, 222
   \              0x18 0x18    
   \              0x00 0x18    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0xC6    
   \              0xC6 0xDE    
   \   00000207   0xDE 0xDE          DC8 222, 222, 220, 192, 124, 0, 0, 0, 0, 0, 0, 16, 56, 108, 198, 198
   \              0xDC 0xC0    
   \              0x7C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x38 0x6C    
   \              0xC6 0xC6    
   \   00000217   0xFE 0xC6          DC8 254, 198, 198, 198, 198, 0, 0, 0, 0, 0, 0, 252, 102, 102, 102, 124
   \              0xC6 0xC6    
   \              0xC6 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFC    
   \              0x66 0x66    
   \              0x66 0x7C    
   \   00000227   0x66 0x66          DC8 102, 102, 102, 102, 252, 0, 0, 0, 0, 0, 0, 60, 102, 194, 192, 192
   \              0x66 0x66    
   \              0xFC 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x66 0xC2    
   \              0xC0 0xC0    
   \   00000237   0xC0 0xC0          DC8 192, 192, 194, 102, 60, 0, 0, 0, 0, 0, 0, 248, 108, 102, 102, 102
   \              0xC2 0x66    
   \              0x3C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xF8    
   \              0x6C 0x66    
   \              0x66 0x66    
   \   00000247   0x66 0x66          DC8 102, 102, 102, 108, 248, 0, 0, 0, 0, 0, 0, 254, 102, 98, 104, 120
   \              0x66 0x6C    
   \              0xF8 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFE    
   \              0x66 0x62    
   \              0x68 0x78    
   \   00000257   0x68 0x60          DC8 104, 96, 98, 102, 254, 0, 0, 0, 0, 0, 0, 254, 102, 98, 104, 120
   \              0x62 0x66    
   \              0xFE 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFE    
   \              0x66 0x62    
   \              0x68 0x78    
   \   00000267   0x68 0x60          DC8 104, 96, 96, 96, 240, 0, 0, 0, 0, 0, 0, 60, 102, 194, 192, 192, 222
   \              0x60 0x60    
   \              0xF0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x66 0xC2    
   \              0xC0 0xC0    
   \              0xDE         
   \   00000278   0xC6 0xC6          DC8 198, 198, 102, 58, 0, 0, 0, 0, 0, 0, 198, 198, 198, 198, 254, 198
   \              0x66 0x3A    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0xFE 0xC6    
   \   00000288   0xC6 0xC6          DC8 198, 198, 198, 198, 0, 0, 0, 0, 0, 0, 60, 24, 24, 24, 24, 24, 24
   \              0xC6 0xC6    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3C 0x18    
   \              0x18 0x18    
   \              0x18 0x18    
   \              0x18         
   \   00000299   0x18 0x18          DC8 24, 24, 60, 0, 0, 0, 0, 0, 0, 30, 12, 12, 12, 12, 12, 204, 204, 204
   \              0x3C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1E    
   \              0x0C 0x0C    
   \              0x0C 0x0C    
   \              0x0C 0xCC    
   \              0xCC 0xCC    
   \   000002AB   0x78 0x00          DC8 120, 0, 0, 0, 0, 0, 0, 230, 102, 108, 108, 120, 120, 108, 102, 102
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE6    
   \              0x66 0x6C    
   \              0x6C 0x78    
   \              0x78 0x6C    
   \              0x66 0x66    
   \   000002BB   0xE6 0x00          DC8 230, 0, 0, 0, 0, 0, 0, 240, 96, 96, 96, 96, 96, 96, 98, 102, 254, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x60 0x60    
   \              0x60 0x60    
   \              0x60 0x60    
   \              0x62 0x66    
   \              0xFE 0x00    
   \   000002CD   0x00 0x00          DC8 0, 0, 0, 0, 0, 198, 238, 254, 254, 214, 198, 198, 198, 198, 198, 0
   \              0x00 0x00    
   \              0x00 0xC6    
   \              0xEE 0xFE    
   \              0xFE 0xD6    
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0x00    
   \   000002DD   0x00 0x00          DC8 0, 0, 0, 0, 0, 198, 230, 246, 254, 222, 206, 198, 198, 198, 198, 0
   \              0x00 0x00    
   \              0x00 0xC6    
   \              0xE6 0xF6    
   \              0xFE 0xDE    
   \              0xCE 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0x00    
   \   000002ED   0x00 0x00          DC8 0, 0, 0, 0, 0, 56, 108, 198, 198, 198, 198, 198, 198, 108, 56, 0, 0
   \              0x00 0x00    
   \              0x00 0x38    
   \              0x6C 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0x6C    
   \              0x38 0x00    
   \              0x00         
   \   000002FE   0x00 0x00          DC8 0, 0, 0, 0, 252, 102, 102, 102, 124, 96, 96, 96, 96, 240, 0, 0, 0
   \              0x00 0x00    
   \              0xFC 0x66    
   \              0x66 0x66    
   \              0x7C 0x60    
   \              0x60 0x60    
   \              0x60 0xF0    
   \              0x00 0x00    
   \              0x00         
   \   0000030F   0x00 0x00          DC8 0, 0, 0, 124, 198, 198, 198, 198, 198, 198, 214, 222, 124, 12, 14
   \              0x00 0x7C    
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0xD6 0xDE    
   \              0x7C 0x0C    
   \              0x0E         
   \   0000031E   0x00 0x00          DC8 0, 0, 0, 0, 252, 102, 102, 102, 124, 108, 102, 102, 102, 230, 0, 0
   \              0x00 0x00    
   \              0xFC 0x66    
   \              0x66 0x66    
   \              0x7C 0x6C    
   \              0x66 0x66    
   \              0x66 0xE6    
   \              0x00 0x00    
   \   0000032E   0x00 0x00          DC8 0, 0, 0, 0, 124, 198, 198, 96, 56, 12, 6, 198, 198, 124, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x7C 0xC6    
   \              0xC6 0x60    
   \              0x38 0x0C    
   \              0x06 0xC6    
   \              0xC6 0x7C    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000340   0x00 0x00          DC8 0, 0, 126, 126, 90, 24, 24, 24, 24, 24, 24, 60, 0, 0, 0, 0, 0, 0
   \              0x7E 0x7E    
   \              0x5A 0x18    
   \              0x18 0x18    
   \              0x18 0x18    
   \              0x18 0x3C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000352   0xC6 0xC6          DC8 198, 198, 198, 198, 198, 198, 198, 198, 198, 124, 0, 0, 0, 0, 0, 0
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0x7C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000362   0xC6 0xC6          DC8 198, 198, 198, 198, 198, 198, 198, 108, 56, 16, 0, 0, 0, 0, 0, 0
   \              0xC6 0xC6    
   \              0xC6 0xC6    
   \              0xC6 0x6C    
   \              0x38 0x10    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000372   0xC6 0xC6          DC8 198, 198, 198, 198, 198, 214, 214, 254, 108, 108, 0, 0, 0, 0, 0, 0
   \              0xC6 0xC6    
   \              0xC6 0xD6    
   \              0xD6 0xFE    
   \              0x6C 0x6C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000382   0xC6 0xC6          DC8 198, 198, 108, 108, 56, 56, 108, 108, 198, 198, 0, 0, 0, 0, 0, 0
   \              0x6C 0x6C    
   \              0x38 0x38    
   \              0x6C 0x6C    
   \              0xC6 0xC6    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000392   0x66 0x66          DC8 102, 102, 102, 102, 60, 24, 24, 24, 24, 60, 0, 0, 0, 0, 0, 0, 254
   \              0x66 0x66    
   \              0x3C 0x18    
   \              0x18 0x18    
   \              0x18 0x3C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE         
   \   000003A3   0xC6 0x86          DC8 198, 134, 12, 24, 48, 96, 194, 198, 254, 0, 0, 0, 0, 0, 0, 60, 48
   \              0x0C 0x18    
   \              0x30 0x60    
   \              0xC2 0xC6    
   \              0xFE 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x3C    
   \              0x30         
   \   000003B4   0x30 0x30          DC8 48, 48, 48, 48, 48, 48, 48, 60, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x3C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0xC0 0xE0    
   \   000003C6   0x70 0x38          DC8 112, 56, 28, 14, 6, 2, 0, 0, 0, 0, 0, 0, 60, 12, 12, 12, 12, 12, 12
   \              0x1C 0x0E    
   \              0x06 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3C 0x0C    
   \              0x0C 0x0C    
   \              0x0C 0x0C    
   \              0x0C         
   \   000003D9   0x0C 0x0C          DC8 12, 12, 60, 0, 0, 0, 0, 16, 56, 108, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x3C 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x38 0x6C    
   \              0xC6 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003ED   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 48, 48
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFF 0x00    
   \              0x00 0x30    
   \              0x30         
   \   00000402   0x18 0x00          DC8 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 12
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x78    
   \              0x0C         
   \   00000417   0x7C 0xCC          DC8 124, 204, 204, 204, 118, 0, 0, 0, 0, 0, 0, 224, 96, 96, 120, 108
   \              0xCC 0xCC    
   \              0x76 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE0    
   \              0x60 0x60    
   \              0x78 0x6C    
   \   00000427   0x66 0x66          DC8 102, 102, 102, 102, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 198, 192
   \              0x66 0x66    
   \              0xDC 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0xC6    
   \              0xC0         
   \   00000438   0xC0 0xC0          DC8 192, 192, 198, 124, 0, 0, 0, 0, 0, 0, 28, 12, 12, 60, 108, 204, 204
   \              0xC6 0x7C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x0C    
   \              0x0C 0x3C    
   \              0x6C 0xCC    
   \              0xCC         
   \   00000449   0xCC 0xCC          DC8 204, 204, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 198, 254, 192, 192
   \              0x76 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0xC6    
   \              0xFE 0xC0    
   \              0xC0         
   \   0000045A   0xC6 0x7C          DC8 198, 124, 0, 0, 0, 0, 0, 0, 56, 108, 100, 96, 240, 96, 96, 96, 96
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x38 0x6C    
   \              0x64 0x60    
   \              0xF0 0x60    
   \              0x60 0x60    
   \              0x60         
   \   0000046B   0xF0 0x00          DC8 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 204, 204, 204, 204, 204, 124
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x76 0xCC    
   \              0xCC 0xCC    
   \              0xCC 0xCC    
   \              0x7C         
   \   0000047C   0x0C 0xCC          DC8 12, 204, 120, 0, 0, 0, 224, 96, 96, 108, 118, 102, 102, 102, 102
   \              0x78 0x00    
   \              0x00 0x00    
   \              0xE0 0x60    
   \              0x60 0x6C    
   \              0x76 0x66    
   \              0x66 0x66    
   \              0x66         
   \   0000048B   0xE6 0x00          DC8 230, 0, 0, 0, 0, 0, 0, 24, 24, 0, 56, 24, 24, 24, 24, 24, 60, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x18 0x00    
   \              0x38 0x18    
   \              0x18 0x18    
   \              0x18 0x18    
   \              0x3C 0x00    
   \              0x00         
   \   0000049E   0x00 0x00          DC8 0, 0, 0, 0, 6, 6, 0, 14, 6, 6, 6, 6, 6, 6, 102, 102, 60, 0, 0, 0
   \              0x00 0x00    
   \              0x06 0x06    
   \              0x00 0x0E    
   \              0x06 0x06    
   \              0x06 0x06    
   \              0x06 0x06    
   \              0x66 0x66    
   \              0x3C 0x00    
   \              0x00 0x00    
   \   000004B2   0xE0 0x60          DC8 224, 96, 96, 102, 108, 120, 120, 108, 102, 230, 0, 0, 0, 0, 0, 0
   \              0x60 0x66    
   \              0x6C 0x78    
   \              0x78 0x6C    
   \              0x66 0xE6    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000004C2   0x38 0x18          DC8 56, 24, 24, 24, 24, 24, 24, 24, 24, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x18 0x18    
   \              0x18 0x18    
   \              0x18 0x18    
   \              0x18 0x3C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000004D5   0xEC 0xFE          DC8 236, 254, 214, 214, 214, 214, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220
   \              0xD6 0xD6    
   \              0xD6 0xD6    
   \              0xD6 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xDC         
   \   000004E6   0x66 0x66          DC8 102, 102, 102, 102, 102, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 198
   \              0x66 0x66    
   \              0x66 0x66    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x7C    
   \              0xC6         
   \   000004F7   0xC6 0xC6          DC8 198, 198, 198, 198, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 102, 102
   \              0xC6 0xC6    
   \              0x7C 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xDC 0x66    
   \              0x66         
   \   00000508   0x66 0x66          DC8 102, 102, 102, 124, 96, 96, 240, 0, 0, 0, 0, 0, 0, 118, 204, 204
   \              0x66 0x7C    
   \              0x60 0x60    
   \              0xF0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x76    
   \              0xCC 0xCC    
   \   00000518   0xCC 0xCC          DC8 204, 204, 204, 124, 12, 12, 30, 0, 0, 0, 0, 0, 0, 220, 118, 98, 96
   \              0xCC 0x7C    
   \              0x0C 0x0C    
   \              0x1E 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xDC    
   \              0x76 0x62    
   \              0x60         
   \   00000529   0x60 0x60          DC8 96, 96, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 198, 96, 56, 12, 198
   \              0xF0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7C 0xC6    
   \              0x60 0x38    
   \              0x0C 0xC6    
   \   0000053B   0x7C 0x00          DC8 124, 0, 0, 0, 0, 0, 0, 16, 48, 48, 252, 48, 48, 48, 48, 54, 28, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x30 0x30    
   \              0xFC 0x30    
   \              0x30 0x30    
   \              0x30 0x36    
   \              0x1C 0x00    
   \   0000054D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204, 204, 204, 204, 118, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xCC 0xCC    
   \              0xCC 0xCC    
   \              0xCC 0xCC    
   \              0x76 0x00    
   \              0x00 0x00    
   \   0000055F   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 102, 102, 102, 102, 102, 60, 24, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x66 0x66    
   \              0x66 0x66    
   \              0x66 0x3C    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000572   0x00 0x00          DC8 0, 0, 0, 198, 198, 198, 214, 214, 254, 108, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0xC6    
   \              0xC6 0xC6    
   \              0xD6 0xD6    
   \              0xFE 0x6C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000584   0x00 0xC6          DC8 0, 198, 108, 56, 56, 56, 108, 198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198
   \              0x6C 0x38    
   \              0x38 0x38    
   \              0x6C 0xC6    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xC6    
   \   00000596   0xC6 0xC6          DC8 198, 198, 198, 198, 198, 126, 6, 12, 248, 0, 0, 0, 0, 0, 0, 254
   \              0xC6 0xC6    
   \              0xC6 0x7E    
   \              0x06 0x0C    
   \              0xF8 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFE    
   \   000005A6   0xCC 0x18          DC8 204, 24, 48, 96, 198, 254, 0, 0, 0, 0, 0, 0, 14, 24, 24, 24, 112
   \              0x30 0x60    
   \              0xC6 0xFE    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x0E 0x18    
   \              0x18 0x18    
   \              0x70         
   \   000005B7   0x18 0x18          DC8 24, 24, 24, 24, 14, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 0, 24, 24, 24
   \              0x18 0x18    
   \              0x0E 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x18    
   \              0x18 0x18    
   \              0x18 0x00    
   \              0x18 0x18    
   \              0x18         
   \   000005CA   0x18 0x18          DC8 24, 24, 0, 0, 0, 0, 0, 0, 112, 24, 24, 24, 14, 24, 24, 24, 24, 112
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x70 0x18    
   \              0x18 0x18    
   \              0x0E 0x18    
   \              0x18 0x18    
   \              0x18 0x70    
   \   000005DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 118, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x76 0xDC    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000005F1   0x00 0x00          DC8 0, 0, 0, 16, 56, 108, 198, 198, 198, 254, 0, 0, 0, 0, 0
   \              0x00 0x10    
   \              0x38 0x6C    
   \              0xC6 0xC6    
   \              0xC6 0xFE    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \   __absolute unsigned short const ASCII_Table_16x24[2280]
   \                     ASCII_Table_16x24:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000002C   0x0000 0x0000      DC16 0, 0, 0, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0000 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \   00000048   0x0180 0x0180      DC16 384, 384, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204
   \              0x0000 0x0000
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00CC 0x00CC
   \              0x00CC       
   \   0000006A   0x00CC 0x00CC      DC16 204, 204, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00CC 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000092   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 3168, 3168, 3168, 1584, 1584, 8190, 8190, 1584
   \              0x0000 0x0000
   \              0x0000 0x0C60
   \              0x0C60 0x0C60
   \              0x0630 0x0630
   \              0x1FFE 0x1FFE
   \              0x0630       
   \   000000AC   0x0738 0x0318      DC16 1848, 792, 8190, 8190, 792, 792, 396, 396, 396, 0, 0, 128, 992
   \              0x1FFE 0x1FFE
   \              0x0318 0x0318
   \              0x018C 0x018C
   \              0x018C 0x0000
   \              0x0000 0x0080
   \              0x03E0       
   \   000000C6   0x0FF8 0x0E9C      DC16 4088, 3740, 7308, 6284, 140, 152, 504, 2016, 3712, 7296, 6284
   \              0x1C8C 0x188C
   \              0x008C 0x0098
   \              0x01F8 0x07E0
   \              0x0E80 0x1C80
   \              0x188C       
   \   000000DC   0x188C 0x189C      DC16 6284, 6300, 3256, 4080, 992, 128, 128, 0, 0, 0, 0, 0, 0, 6158
   \              0x0CB8 0x0FF0
   \              0x03E0 0x0080
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x180E
   \   000000F8   0x0C1B 0x0C11      DC16 3099, 3089, 1553, 1553, 785, 785, 411, 398, 14528, 27840, 17504
   \              0x0611 0x0611
   \              0x0311 0x0311
   \              0x019B 0x018E
   \              0x38C0 0x6CC0
   \              0x4460       
   \   0000010E   0x4460 0x4430      DC16 17504, 17456, 17456, 17432, 27672, 14348, 0, 0, 0, 0, 480, 1008
   \              0x4430 0x4418
   \              0x6C18 0x380C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x01E0 0x03F0
   \   00000126   0x0738 0x0618      DC16 1848, 1560, 1560, 816, 496, 240, 248, 12700, 13070, 7686, 7174
   \              0x0618 0x0330
   \              0x01F0 0x00F0
   \              0x00F8 0x319C
   \              0x330E 0x1E06
   \              0x1C06       
   \   0000013C   0x1C06 0x3F06      DC16 7174, 16134, 29692, 8688, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12
   \              0x73FC 0x21F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \   0000015C   0x000C 0x000C      DC16 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0200
   \   00000184   0x0300 0x0180      DC16 768, 384, 192, 192, 96, 96, 48, 48, 48, 48, 48, 48, 48, 48, 96, 96
   \              0x00C0 0x00C0
   \              0x0060 0x0060
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0060 0x0060
   \   000001A4   0x00C0 0x00C0      DC16 192, 192, 384, 768, 512, 0, 0, 32, 96, 192, 384, 384, 768, 768
   \              0x0180 0x0300
   \              0x0200 0x0000
   \              0x0000 0x0020
   \              0x0060 0x00C0
   \              0x0180 0x0180
   \              0x0300 0x0300
   \   000001C0   0x0600 0x0600      DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 768, 768, 384, 384
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0300 0x0300
   \              0x0180 0x0180
   \   000001D8   0x00C0 0x0060      DC16 192, 96, 32, 0, 0, 0, 0, 0, 0, 0, 192, 192, 1752, 2040, 480, 816
   \              0x0020 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x06D8 0x07F8
   \              0x01E0 0x0330
   \   000001F8   0x0738 0x0000      DC16 1848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0180 0x0180
   \   00000220   0x0180 0x0180      DC16 384, 384, 384, 16380, 16380, 384, 384, 384, 384, 384, 0, 0, 0, 0
   \              0x0180 0x3FFC
   \              0x3FFC 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000023C   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180       
   \   00000266   0x0100 0x0100      DC16 256, 256, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2016
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x07E0
   \   0000028A   0x07E0 0x0000      DC16 2016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000002B4   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 3072, 3072, 1536
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0C00
   \              0x0C00 0x0600
   \   000002D8   0x0600 0x0600      DC16 1536, 1536, 768, 768, 768, 896, 384, 384, 384, 192, 192, 192, 96
   \              0x0300 0x0300
   \              0x0300 0x0380
   \              0x0180 0x0180
   \              0x0180 0x00C0
   \              0x00C0 0x00C0
   \              0x0060       
   \   000002F2   0x0060 0x0000      DC16 96, 0, 0, 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 6156, 6156, 6156
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0 0x07F0
   \              0x0E38 0x0C18
   \              0x180C 0x180C
   \              0x180C       
   \   00000310   0x180C 0x180C      DC16 6156, 6156, 6156, 6156, 6156, 6156, 3096, 3640, 2032, 992, 0, 0, 0
   \              0x180C 0x180C
   \              0x180C 0x180C
   \              0x0C18 0x0E38
   \              0x07F0 0x03E0
   \              0x0000 0x0000
   \              0x0000       
   \   0000032A   0x0000 0x0000      DC16 0, 0, 0, 0, 256, 384, 448, 496, 408, 392, 384, 384, 384, 384, 384
   \              0x0000 0x0000
   \              0x0100 0x0180
   \              0x01C0 0x01F0
   \              0x0198 0x0188
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   00000348   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 992, 4088, 3096
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x0FF8 0x0C18
   \   00000368   0x180C 0x180C      DC16 6156, 6156, 6144, 6144, 3072, 1536, 768, 384, 192, 96, 48, 24
   \              0x1800 0x1800
   \              0x0C00 0x0600
   \              0x0300 0x0180
   \              0x00C0 0x0060
   \              0x0030 0x0018
   \   00000380   0x1FFC 0x1FFC      DC16 8188, 8188, 0, 0, 0, 0, 0, 0, 0, 480, 2040, 3608, 3084, 3084, 3072
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x01E0
   \              0x07F8 0x0E18
   \              0x0C0C 0x0C0C
   \              0x0C00       
   \   0000039E   0x0600 0x03C0      DC16 1536, 960, 1984, 3072, 6144, 6144, 6156, 6156, 3096, 2040, 992, 0
   \              0x07C0 0x0C00
   \              0x1800 0x1800
   \              0x180C 0x180C
   \              0x0C18 0x07F8
   \              0x03E0 0x0000
   \   000003B6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 3072, 3584, 3840, 3840, 3456, 3264, 3168, 3168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0C00 0x0E00
   \              0x0F00 0x0F00
   \              0x0D80 0x0CC0
   \              0x0C60 0x0C60
   \   000003D2   0x0C30 0x0C18      DC16 3120, 3096, 3084, 16380, 16380, 3072, 3072, 3072, 3072, 0, 0, 0, 0
   \              0x0C0C 0x3FFC
   \              0x3FFC 0x0C00
   \              0x0C00 0x0C00
   \              0x0C00 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000003EC   0x0000 0x0000      DC16 0, 0, 0, 4088, 4088, 24, 24, 12, 1004, 2044, 3612, 7168, 6144
   \              0x0000 0x0FF8
   \              0x0FF8 0x0018
   \              0x0018 0x000C
   \              0x03EC 0x07FC
   \              0x0E1C 0x1C00
   \              0x1800       
   \   00000406   0x1800 0x1800      DC16 6144, 6144, 6156, 3100, 3608, 2040, 992, 0, 0, 0, 0, 0, 0, 0, 1984
   \              0x180C 0x0C1C
   \              0x0E18 0x07F8
   \              0x03E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07C0       
   \   00000424   0x0FF0 0x1C38      DC16 4080, 7224, 6168, 24, 12, 972, 4076, 3644, 7196, 6156, 6156, 6156
   \              0x1818 0x0018
   \              0x000C 0x03CC
   \              0x0FEC 0x0E3C
   \              0x1C1C 0x180C
   \              0x180C 0x180C
   \   0000043C   0x1C18 0x0E38      DC16 7192, 3640, 2032, 992, 0, 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536
   \              0x07F0 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1FFC
   \              0x1FFC 0x0C00
   \              0x0600       
   \   0000045A   0x0600 0x0300      DC16 1536, 768, 896, 384, 448, 192, 224, 96, 96, 112, 48, 48, 48, 0, 0
   \              0x0380 0x0180
   \              0x01C0 0x00C0
   \              0x00E0 0x0060
   \              0x0060 0x0070
   \              0x0030 0x0030
   \              0x0030 0x0000
   \              0x0000       
   \   00000478   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 3096, 3096, 1592, 2032, 2032
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x07F0 0x0E38
   \              0x0C18 0x0C18
   \              0x0C18 0x0638
   \              0x07F0 0x07F0
   \   00000494   0x0C18 0x180C      DC16 3096, 6156, 6156, 6156, 6156, 3128, 4088, 992, 0, 0, 0, 0, 0, 0, 0
   \              0x180C 0x180C
   \              0x180C 0x0C38
   \              0x0FF8 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000004B2   0x03E0 0x07F0      DC16 992, 2032, 3640, 3100, 6156, 6156, 6156, 7196, 7736, 7160, 6624
   \              0x0E38 0x0C1C
   \              0x180C 0x180C
   \              0x180C 0x1C1C
   \              0x1E38 0x1BF8
   \              0x19E0       
   \   000004C8   0x1800 0x0C00      DC16 6144, 3072, 3072, 3612, 2040, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0C00 0x0E1C
   \              0x07F8 0x01F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000004EA   0x0000 0x0180      DC16 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000512   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384, 256
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0100
   \   00000536   0x0100 0x0080      DC16 256, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 7168, 3968, 992
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1000
   \              0x1C00 0x0F80
   \              0x03E0       
   \   00000558   0x00F8 0x0018      DC16 248, 24, 248, 992, 3968, 7168, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00F8 0x03E0
   \              0x0F80 0x1C00
   \              0x1000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   0000057A   0x0000 0x0000      DC16 0, 0, 0, 8184, 0, 0, 0, 8184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x1FF8
   \              0x0000 0x0000
   \              0x0000 0x1FF8
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   000005A2   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 8, 56, 496, 1984, 7936, 6144, 7936, 1984, 496
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0008
   \              0x0038 0x01F0
   \              0x07C0 0x1F00
   \              0x1800 0x1F00
   \              0x07C0 0x01F0
   \   000005C2   0x0038 0x0008      DC16 56, 8, 0, 0, 0, 0, 0, 0, 992, 4088, 3096, 6156, 6156, 6144, 3072
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0 0x0FF8
   \              0x0C18 0x180C
   \              0x180C 0x1800
   \              0x0C00       
   \   000005E0   0x0600 0x0300      DC16 1536, 768, 384, 192, 192, 192, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x00C0
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000602   0x0000 0x07E0      DC16 0, 2016, 6168, 8196, 10690, 18978, 17425, 17417, 17417, 17417
   \              0x1818 0x2004
   \              0x29C2 0x4A22
   \              0x4411 0x4409
   \              0x4409 0x4409
   \   00000616   0x2209 0x1311      DC16 8713, 4881, 3298, 16386, 8196, 6168, 2016, 0, 0, 0, 0, 0, 0, 0
   \              0x0CE2 0x4002
   \              0x2004 0x1818
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000632   0x0380 0x0380      DC16 896, 896, 1728, 1728, 1728, 3168, 3168, 6192, 6192, 6192, 16376
   \              0x06C0 0x06C0
   \              0x06C0 0x0C60
   \              0x0C60 0x1830
   \              0x1830 0x1830
   \              0x3FF8       
   \   00000648   0x3FF8 0x701C      DC16 16376, 28700, 24588, 24588, 49158, 49158, 0, 0, 0, 0, 0, 0, 0
   \              0x600C 0x600C
   \              0xC006 0xC006
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000662   0x03FC 0x0FFC      DC16 1020, 4092, 3084, 6156, 6156, 6156, 3084, 2044, 4092, 6156, 12300
   \              0x0C0C 0x180C
   \              0x180C 0x180C
   \              0x0C0C 0x07FC
   \              0x0FFC 0x180C
   \              0x300C       
   \   00000678   0x300C 0x300C      DC16 12300, 12300, 12300, 6156, 8188, 2044, 0, 0, 0, 0, 0, 0, 0, 1984
   \              0x300C 0x180C
   \              0x1FFC 0x07FC
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x07C0
   \   00000694   0x1FF0 0x3838      DC16 8176, 14392, 12316, 28684, 24582, 6, 6, 6, 6, 6, 6, 24582, 28684
   \              0x301C 0x700C
   \              0x6006 0x0006
   \              0x0006 0x0006
   \              0x0006 0x0006
   \              0x0006 0x6006
   \              0x700C       
   \   000006AE   0x301C 0x1FF0      DC16 12316, 8176, 2016, 0, 0, 0, 0, 0, 0, 0, 1022, 4094, 3590, 6150
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03FE 0x0FFE
   \              0x0E06 0x1806
   \   000006CA   0x1806 0x3006      DC16 6150, 12294, 12294, 12294, 12294, 12294, 12294, 12294, 6150, 6150
   \              0x3006 0x3006
   \              0x3006 0x3006
   \              0x3006 0x3006
   \              0x1806 0x1806
   \   000006DE   0x0E06 0x0FFE      DC16 3590, 4094, 1022, 0, 0, 0, 0, 0, 0, 0, 16380, 16380, 12, 12, 12
   \              0x03FE 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3FFC 0x3FFC
   \              0x000C 0x000C
   \              0x000C       
   \   000006FC   0x000C 0x000C      DC16 12, 12, 8188, 8188, 12, 12, 12, 12, 12, 12, 16380, 16380, 0, 0, 0
   \              0x1FFC 0x1FFC
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x3FFC 0x3FFC
   \              0x0000 0x0000
   \              0x0000       
   \   0000071A   0x0000 0x0000      DC16 0, 0, 0, 0, 16376, 16376, 24, 24, 24, 24, 24, 8184, 8184, 24, 24
   \              0x0000 0x0000
   \              0x3FF8 0x3FF8
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x1FF8
   \              0x1FF8 0x0018
   \              0x0018       
   \   00000738   0x0018 0x0018      DC16 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 4064, 16376, 30780
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0FE0
   \              0x3FF8 0x783C
   \   00000758   0x600E 0xE006      DC16 24590, 57350, 49159, 3, 3, 65027, 65027, 49155, 49159, 49158
   \              0xC007 0x0003
   \              0x0003 0xFE03
   \              0xFE03 0xC003
   \              0xC007 0xC006
   \   0000076C   0xC00E 0xF03C      DC16 49166, 61500, 16376, 4064, 0, 0, 0, 0, 0, 0, 0, 12300, 12300
   \              0x3FF8 0x0FE0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x300C       
   \   00000786   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 16380, 16380, 12300, 12300
   \              0x300C 0x300C
   \              0x300C 0x3FFC
   \              0x3FFC 0x300C
   \              0x300C       
   \   00000798   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 12300, 0, 0, 0, 0, 0, 0, 0, 384
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \   000007B4   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   000007CE   0x0180 0x0180      DC16 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 1536, 1536, 1536, 1536, 1536
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600       
   \   000007EC   0x0600 0x0600      DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1560, 1560, 1848, 1008
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600 0x0618
   \              0x0618 0x0738
   \              0x03F0       
   \   00000802   0x01E0 0x0000      DC16 480, 0, 0, 0, 0, 0, 0, 0, 12294, 6150, 3078, 1542, 774, 390, 198
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3006 0x1806
   \              0x0C06 0x0606
   \              0x0306 0x0186
   \              0x00C6       
   \   00000820   0x0066 0x0076      DC16 102, 118, 222, 398, 774, 1542, 3078, 6150, 12294, 24582, 0, 0, 0
   \              0x00DE 0x018E
   \              0x0306 0x0606
   \              0x0C06 0x1806
   \              0x3006 0x6006
   \              0x0000 0x0000
   \              0x0000       
   \   0000083A   0x0000 0x0000      DC16 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
   \              0x0000 0x0000
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \   0000085E   0x0018 0x1FF8      DC16 24, 8184, 8184, 0, 0, 0, 0, 0, 0, 0, 57358, 61470, 61470, 61470
   \              0x1FF8 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xE00E 0xF01E
   \              0xF01E 0xF01E
   \   0000087A   0xD836 0xD836      DC16 55350, 55350, 55350, 55350, 52326, 52326, 52326, 50886, 50886
   \              0xD836 0xD836
   \              0xCC66 0xCC66
   \              0xCC66 0xC6C6
   \              0xC6C6       
   \   0000088C   0xC6C6 0xC6C6      DC16 50886, 50886, 50054, 50054, 0, 0, 0, 0, 0, 0, 0, 12300, 12316
   \              0xC386 0xC386
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x301C       
   \   000008A6   0x303C 0x303C      DC16 12348, 12348, 12396, 12396, 12492, 12492, 12684, 13068, 13068
   \              0x306C 0x306C
   \              0x30CC 0x30CC
   \              0x318C 0x330C
   \              0x330C       
   \   000008B8   0x360C 0x360C      DC16 13836, 13836, 15372, 15372, 14348, 12300, 0, 0, 0, 0, 0, 0, 0
   \              0x3C0C 0x3C0C
   \              0x380C 0x300C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000008D2   0x07E0 0x1FF8      DC16 2016, 8184, 14364, 28686, 24582, 49155, 49155, 49155, 49155, 49155
   \              0x381C 0x700E
   \              0x6006 0xC003
   \              0xC003 0xC003
   \              0xC003 0xC003
   \   000008E6   0xC003 0xC003      DC16 49155, 49155, 24582, 28686, 14364, 8184, 2016, 0, 0, 0, 0, 0, 0, 0
   \              0x6006 0x700E
   \              0x381C 0x1FF8
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000902   0x0FFC 0x1FFC      DC16 4092, 8188, 14348, 12300, 12300, 12300, 12300, 6156, 8188, 2044
   \              0x380C 0x300C
   \              0x300C 0x300C
   \              0x300C 0x180C
   \              0x1FFC 0x07FC
   \   00000916   0x000C 0x000C      DC16 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 2016, 8184, 14364
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07E0 0x1FF8
   \              0x381C       
   \   00000938   0x700E 0x6006      DC16 28686, 24582, 57347, 49155, 49155, 49155, 49155, 49155, 57351
   \              0xE003 0xC003
   \              0xC003 0xC003
   \              0xC003 0xC003
   \              0xE007       
   \   0000094A   0x6306 0x3F0E      DC16 25350, 16142, 15388, 16376, 63456, 49152, 0, 0, 0, 0, 0, 0, 4094
   \              0x3C1C 0x3FF8
   \              0xF7E0 0xC000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0FFE       
   \   00000964   0x1FFE 0x3806      DC16 8190, 14342, 12294, 12294, 12294, 14342, 8190, 2046, 774, 1542
   \              0x3006 0x3006
   \              0x3006 0x3806
   \              0x1FFE 0x07FE
   \              0x0306 0x0606
   \   00000978   0x0C06 0x1806      DC16 3078, 6150, 6150, 12294, 12294, 24582, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x1806 0x3006
   \              0x3006 0x6006
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000994   0x0FF8 0x0C1C      DC16 4088, 3100, 6156, 6156, 12, 28, 1016, 4064, 7680, 14336, 12294
   \              0x180C 0x180C
   \              0x000C 0x001C
   \              0x03F8 0x0FE0
   \              0x1E00 0x3800
   \              0x3006       
   \   000009AA   0x3006 0x300E      DC16 12294, 12302, 7196, 4088, 2016, 0, 0, 0, 0, 0, 0, 0, 32766, 32766
   \              0x1C1C 0x0FF8
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x7FFE 0x7FFE
   \   000009C6   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   000009E0   0x0180 0x0180      DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 12300, 12300, 12300, 12300, 12300
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x300C 0x300C
   \              0x300C 0x300C
   \   000009FC   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x300C       
   \   00000A0E   0x1818 0x1FF8      DC16 6168, 8184, 2016, 0, 0, 0, 0, 0, 0, 0, 24579, 12294, 12294, 12294
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x6003 0x3006
   \              0x3006 0x3006
   \   00000A2A   0x180C 0x180C      DC16 6156, 6156, 6156, 3096, 3096, 3640, 1584, 1584, 1904, 864, 864
   \              0x180C 0x0C18
   \              0x0C18 0x0E38
   \              0x0630 0x0630
   \              0x0770 0x0360
   \              0x0360       
   \   00000A40   0x01C0 0x01C0      DC16 448, 448, 0, 0, 0, 0, 0, 0, 0, 24579, 25027, 25027, 25027, 13158
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x6003
   \              0x61C3 0x61C3
   \              0x61C3 0x3366
   \   00000A5C   0x3366 0x3366      DC16 13158, 13158, 13158, 13158, 13158, 7020, 7020, 7020, 6700, 7740
   \              0x3366 0x3366
   \              0x3366 0x1B6C
   \              0x1B6C 0x1B6C
   \              0x1A2C 0x1E3C
   \   00000A70   0x0E38 0x0E38      DC16 3640, 3640, 0, 0, 0, 0, 0, 0, 0, 57359, 28684, 12312, 6192, 3184
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0xE00F
   \              0x700C 0x3018
   \              0x1830 0x0C70
   \   00000A8C   0x0E60 0x07C0      DC16 3680, 1984, 896, 896, 960, 1760, 3184, 7216, 6168, 12300, 24590
   \              0x0380 0x0380
   \              0x03C0 0x06E0
   \              0x0C70 0x1C30
   \              0x1818 0x300C
   \              0x600E       
   \   00000AA2   0xE007 0x0000      DC16 57351, 0, 0, 0, 0, 0, 0, 0, 49155, 24582, 12300, 14364, 6200, 3120
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xC003 0x6006
   \              0x300C 0x381C
   \              0x1838 0x0C30
   \   00000ABE   0x0660 0x07E0      DC16 1632, 2016, 960, 384, 384, 384, 384, 384, 384, 384, 384, 0, 0, 0
   \              0x03C0 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \   00000ADA   0x0000 0x0000      DC16 0, 0, 0, 0, 32764, 32764, 24576, 12288, 6144, 3072, 1536, 768, 384
   \              0x0000 0x0000
   \              0x7FFC 0x7FFC
   \              0x6000 0x3000
   \              0x1800 0x0C00
   \              0x0600 0x0300
   \              0x0180       
   \   00000AF4   0x00C0 0x0060      DC16 192, 96, 48, 24, 12, 6, 32766, 32766, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0030 0x0018
   \              0x000C 0x0006
   \              0x7FFE 0x7FFE
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000B14   0x03E0 0x0060      DC16 992, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \   00000B34   0x0060 0x0060      DC16 96, 96, 96, 992, 992, 0, 0, 48, 48, 96, 96, 96, 192, 192, 192, 448
   \              0x0060 0x03E0
   \              0x03E0 0x0000
   \              0x0000 0x0030
   \              0x0030 0x0060
   \              0x0060 0x0060
   \              0x00C0 0x00C0
   \              0x00C0 0x01C0
   \   00000B54   0x0180 0x0180      DC16 384, 384, 384, 768, 768, 768, 1536, 1536, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0180 0x0300
   \              0x0300 0x0300
   \              0x0600 0x0600
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000B74   0x03E0 0x0300      DC16 992, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300       
   \   00000B8E   0x0300 0x0300      DC16 768, 768, 768, 768, 768, 768, 992, 992, 0, 0, 0, 448, 448, 864
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x03E0 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x01C0
   \              0x01C0 0x0360
   \   00000BAA   0x0360 0x0360      DC16 864, 864, 1584, 1584, 3096, 3096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0630 0x0630
   \              0x0C18 0x0C18
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000BCC   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65535
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0xFFFF
   \   00000BF4   0xFFFF 0x0000      DC16 65535, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x000C
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000C1A   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1008, 2040
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03F0
   \              0x07F8       
   \   00000C40   0x0C1C 0x0C0C      DC16 3100, 3084, 3840, 4080, 3320, 3084, 3084, 3868, 4088, 6384, 0, 0
   \              0x0F00 0x0FF0
   \              0x0CF8 0x0C0C
   \              0x0C0C 0x0F1C
   \              0x0FF8 0x18F0
   \              0x0000 0x0000
   \   00000C58   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 984, 4088, 3128, 6168, 6168
   \              0x0000 0x0000
   \              0x0000 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x03D8 0x0FF8
   \              0x0C38 0x1818
   \              0x1818       
   \   00000C76   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 3128, 4088, 984, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x0C38 0x0FF8
   \              0x03D8 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000C96   0x0000 0x0000      DC16 0, 0, 0, 960, 2032, 3632, 3096, 24, 24, 24, 24, 3096, 3632, 2032
   \              0x0000 0x03C0
   \              0x07F0 0x0E30
   \              0x0C18 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0C18
   \              0x0E30 0x07F0
   \   00000CB2   0x03C0 0x0000      DC16 960, 0, 0, 0, 0, 0, 0, 0, 6144, 6144, 6144, 6144, 6144, 7104, 8176
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1800 0x1800
   \              0x1800 0x1800
   \              0x1800 0x1BC0
   \              0x1FF0       
   \   00000CD0   0x1C30 0x1818      DC16 7216, 6168, 6168, 6168, 6168, 6168, 6168, 7216, 8176, 7104, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1C30
   \              0x1FF0 0x1BC0
   \              0x0000 0x0000
   \   00000CE8   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 960, 4080, 3120, 6168, 8184, 8184
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03C0 0x0FF0
   \              0x0C30 0x1818
   \              0x1FF8 0x1FF8
   \   00000D08   0x0018 0x0018      DC16 24, 24, 6200, 7216, 4080, 1984, 0, 0, 0, 0, 0, 0, 0, 3968, 4032
   \              0x1838 0x1C30
   \              0x0FF0 0x07C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0F80
   \              0x0FC0       
   \   00000D26   0x00C0 0x00C0      DC16 192, 192, 192, 2032, 2032, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x07F0
   \              0x07F0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000D40   0x00C0 0x00C0      DC16 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3552, 4088, 3608
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0DE0 0x0FF8
   \              0x0E18       
   \   00000D62   0x0C0C 0x0C0C      DC16 3084, 3084, 3084, 3084, 3084, 3084, 3608, 4088, 3552, 3072, 3084
   \              0x0C0C 0x0C0C
   \              0x0C0C 0x0C0C
   \              0x0E18 0x0FF8
   \              0x0DE0 0x0C00
   \              0x0C0C       
   \   00000D78   0x061C 0x07F8      DC16 1564, 2040, 496, 0, 0, 24, 24, 24, 24, 24, 2008, 4088, 7224, 6168
   \              0x01F0 0x0000
   \              0x0000 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x07D8 0x0FF8
   \              0x1C38 0x1818
   \   00000D94   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000DB0   0x0000 0x00C0      DC16 0, 192, 192, 0, 0, 0, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000DCE   0x00C0 0x00C0      DC16 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 192, 192
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0       
   \   00000DF0   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000E0A   0x00F8 0x0078      DC16 248, 120, 0, 0, 12, 12, 12, 12, 12, 3084, 1548, 780, 396, 204, 108
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0C0C
   \              0x060C 0x030C
   \              0x018C 0x00CC
   \              0x006C       
   \   00000E28   0x00FC 0x019C      DC16 252, 412, 908, 780, 1548, 3084, 0, 0, 0, 0, 0, 0, 0, 192, 192, 192
   \              0x038C 0x030C
   \              0x060C 0x0C0C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0 0x00C0
   \   00000E48   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000E62   0x00C0 0x0000      DC16 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15484, 32511, 58311
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3C7C
   \              0x7EFF 0xE3C7
   \   00000E82   0xC183 0xC183      DC16 49539, 49539, 49539, 49539, 49539, 49539, 49539, 49539, 49539, 0
   \              0xC183 0xC183
   \              0xC183 0xC183
   \              0xC183 0xC183
   \              0xC183 0x0000
   \   00000E96   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1944, 4088, 7224, 6168, 6168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0798
   \              0x0FF8 0x1C38
   \              0x1818 0x1818
   \   00000EB6   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000ED4   0x0000 0x0000      DC16 0, 0, 0, 0, 960, 4080, 3120, 6168, 6168, 6168, 6168, 6168, 6168
   \              0x0000 0x0000
   \              0x03C0 0x0FF0
   \              0x0C30 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818       
   \   00000EEE   0x0C30 0x0FF0      DC16 3120, 4080, 960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 984, 4088
   \              0x03C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03D8
   \              0x0FF8       
   \   00000F10   0x0C38 0x1818      DC16 3128, 6168, 6168, 6168, 6168, 6168, 6168, 3128, 4088, 984, 24, 24
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x0C38
   \              0x0FF8 0x03D8
   \              0x0018 0x0018
   \   00000F28   0x0018 0x0018      DC16 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 7104, 8176, 7216, 6168, 6168
   \              0x0018 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1BC0 0x1FF0
   \              0x1C30 0x1818
   \              0x1818       
   \   00000F46   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 7216, 8176, 7104, 6144, 6144, 6144, 6144
   \              0x1818 0x1818
   \              0x1C30 0x1FF0
   \              0x1BC0 0x1800
   \              0x1800 0x1800
   \              0x1800       
   \   00000F5C   0x1800 0x0000      DC16 6144, 0, 0, 0, 0, 0, 0, 0, 1968, 1008, 112, 48, 48, 48, 48, 48, 48
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07B0 0x03F0
   \              0x0070 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030       
   \   00000F7E   0x0030 0x0030      DC16 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 992, 1008, 3640
   \              0x0030 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x03F0 0x0E38
   \   00000FA2   0x0C18 0x0038      DC16 3096, 56, 1008, 1984, 3072, 3096, 3640, 2032, 992, 0, 0, 0, 0, 0
   \              0x03F0 0x07C0
   \              0x0C00 0x0C18
   \              0x0E38 0x07F0
   \              0x03E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000FBE   0x0000 0x0000      DC16 0, 0, 0, 128, 192, 192, 192, 2032, 2032, 192, 192, 192, 192, 192
   \              0x0000 0x0080
   \              0x00C0 0x00C0
   \              0x00C0 0x07F0
   \              0x07F0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   00000FDA   0x00C0 0x00C0      DC16 192, 192, 192, 1984, 1920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00C0 0x07C0
   \              0x0780 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000FFC   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 7224, 8176
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1C38
   \              0x1FF0       
   \   00001012   0x19E0 0x0000      DC16 6624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6156, 3096, 3096, 3096
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x180C
   \              0x0C18 0x0C18
   \              0x0C18       
   \   00001034   0x0630 0x0630      DC16 1584, 1584, 1584, 864, 864, 864, 448, 448, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0630 0x0360
   \              0x0360 0x0360
   \              0x01C0 0x01C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00001054   0x0000 0x0000      DC16 0, 0, 0, 0, 16833, 16833, 25027, 25443, 25443, 25443, 13878, 13878
   \              0x0000 0x0000
   \              0x41C1 0x41C1
   \              0x61C3 0x6363
   \              0x6363 0x6363
   \              0x3636 0x3636
   \   0000106C   0x3636 0x1C1C      DC16 13878, 7196, 7196, 7196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14364
   \              0x1C1C 0x1C1C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x381C       
   \   0000108E   0x1C38 0x0C30      DC16 7224, 3120, 1632, 864, 864, 864, 864, 1632, 3120, 7224, 14364, 0
   \              0x0660 0x0360
   \              0x0360 0x0360
   \              0x0360 0x0660
   \              0x0C30 0x1C38
   \              0x381C 0x0000
   \   000010A6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12312, 6192, 6192, 6256, 3168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3018
   \              0x1830 0x1830
   \              0x1870 0x0C60
   \   000010C6   0x0C60 0x0CE0      DC16 3168, 3296, 1728, 1728, 896, 896, 896, 384, 384, 448, 240, 112, 0
   \              0x06C0 0x06C0
   \              0x0380 0x0380
   \              0x0380 0x0180
   \              0x0180 0x01C0
   \              0x00F0 0x0070
   \              0x0000       
   \   000010E0   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536, 768, 384, 192, 96, 48
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1FFC 0x1FFC
   \              0x0C00 0x0600
   \              0x0300 0x0180
   \              0x00C0 0x0060
   \              0x0030       
   \   000010FE   0x0018 0x1FFC      DC16 24, 8188, 8188, 0, 0, 0, 0, 0, 0, 0, 768, 384, 192, 192, 192, 192
   \              0x1FFC 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0300 0x0180
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   0000111E   0x00C0 0x00C0      DC16 192, 192, 96, 96, 48, 96, 64, 192, 192, 192, 192, 192, 192, 384
   \              0x0060 0x0060
   \              0x0030 0x0060
   \              0x0040 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x0180
   \   0000113A   0x0300 0x0000      DC16 768, 0, 0, 0, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0000 0x0000
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \   00001156   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 0, 0
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \   00001172   0x0060 0x00C0      DC16 96, 192, 448, 384, 384, 384, 384, 384, 768, 768, 1536, 768, 256
   \              0x01C0 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0300 0x0300
   \              0x0600 0x0300
   \              0x0100       
   \   0000118C   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 192, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x00C0 0x0060
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000011AE   0x0000 0x10F0      DC16 0, 4336, 8184, 3848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1FF8 0x0F08
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
     34          #include <stdio.h>
     35          #include "gpio.h"    //**
     36          #include "mks_cfg.h"

  #define UNUSED(x) (void) (x)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\macros.h",101  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 87 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Inc\mks_cfg.h",613  Warning[Pe083]: 
          type qualifier specified more than once
     37          
     38          

   \                                 In section .bss, align 2
     39          u16 DeviceCode;
   \                     DeviceCode:
   \   00000000                      DS8 2
     40          
     41          /* Private typedef -----------------------------------------------------------*/
     42          typedef struct
     43          {
     44            vu16 LCD_REG;
     45            vu16 LCD_RAM;
     46          } LCD_TypeDef;
     47          
     48          /* LCD is connected to the FSMC_Bank1_NOR/SRAM4 and NE4 is used as ship select signal */
     49          #define LCD_BASE        ((u32)(0x60000000 | 0x0001FFFE))	//skyblue       //A16
     50          //#define LCD_BASE           ((uint32_t)(0x60000000 | 0x0C000000))              //A0
     51          
     52          #define LCD         ((LCD_TypeDef *) LCD_BASE)
     53          
     54          #define SetCs  
     55          #define ClrCs 
     56          
     57          
     58          #define  HDP  799  //Horizontal Display Period     //**
     59          #define  HT   1000 //Horizontal Total
     60          #define  HPS  51  //LLINE Pulse Start Position
     61          #define  LPS  3   //	Horizontal Display Period Start Position
     62          #define  HPW  8   //	LLINE Pulse Width
     63          
     64          
     65          #define  VDP  479	//Vertical Display Period
     66          #define  VT   530	//Vertical Total
     67          #define  VPS  24	//	LFRAME Pulse Start Position
     68          #define  FPS  23	//Vertical Display Period Start Positio
     69          #define  VPW  3 	// LFRAME Pulse Width     //**
     70          
     71          #define MAX_HZ_POSX HDP+1
     72          #define MAX_HZ_POSY VDP+1 
     73          
     74          
     75          //LCD分辨率设置
     76          #define SSD_HOR_RESOLUTION		800		//LCD水平分辨率
     77          #define SSD_VER_RESOLUTION		480		//LCD垂直分辨率
     78          //LCD驱动参数设置
     79          #define SSD_HOR_PULSE_WIDTH		1		//水平脉宽
     80          #define SSD_HOR_BACK_PORCH		46		//水平前廊
     81          #define SSD_HOR_FRONT_PORCH		210		//水平后廊
     82          
     83          #define SSD_VER_PULSE_WIDTH		1		//垂直脉宽
     84          #define SSD_VER_BACK_PORCH		23		//垂直前廊
     85          #define SSD_VER_FRONT_PORCH		22		//垂直前廊
     86          //如下几个参数，自动计算
     87          #define SSD_HT	(SSD_HOR_RESOLUTION+SSD_HOR_BACK_PORCH+SSD_HOR_FRONT_PORCH)
     88          #define SSD_HPS	(SSD_HOR_BACK_PORCH)
     89          #define SSD_VT 	(SSD_VER_RESOLUTION+SSD_VER_BACK_PORCH+SSD_VER_FRONT_PORCH)
     90          #define SSD_VPS (SSD_VER_BACK_PORCH)
     91          
     92          //skyblue add begin

   \                                 In section .text, align 2, keep-with-next
     93          void RCC_AHBPeriphClockCmd_tft(uint32_t RCC_AHBPeriph, FunctionalState NewState)
     94          {
     95          #if 0
     96            /* Check the parameters */
     97            assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
     98          
     99            assert_param(IS_FUNCTIONAL_STATE(NewState));
    100            if (NewState != DISABLE)
    101            {
    102              RCC->AHBENR |= RCC_AHB1Periph;
    103            }
    104            else
    105            {
    106              RCC->AHBENR &= ~RCC_AHB1Periph;
    107            }
    108          #endif
    109          	/* Check the parameters */
    110          	assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
    111          	assert_param(IS_FUNCTIONAL_STATE(NewState));
    112          
    113          	if (NewState != DISABLE)
   \                     RCC_AHBPeriphClockCmd_tft: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable20  ;; 0x40021014
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0x6811             LDR      R1,[R2, #+0]
   \   00000008   0xD002             BEQ.N    ??RCC_AHBPeriphClockCmd_tft_0
    114          	{
    115          		RCC->AHBENR |= RCC_AHBPeriph;
   \   0000000A   0x4308             ORRS     R0,R0,R1
   \   0000000C   0x6010             STR      R0,[R2, #+0]
   \   0000000E   0x4770             BX       LR
    116          	}
    117          	else
    118          	{
    119          		RCC->AHBENR &= ~RCC_AHBPeriph;
   \                     ??RCC_AHBPeriphClockCmd_tft_0: (+1)
   \   00000010   0xEA21 0x0000      BIC      R0,R1,R0
   \   00000014   0x6010             STR      R0,[R2, #+0]
    120          	}
    121          
    122          }
   \   00000016   0x4770             BX       LR               ;; return
    123          

   \                                 In section .text, align 2, keep-with-next
    124          void RCC_APB2PeriphClockCmd_tft(uint32_t RCC_APB2Periph, FunctionalState NewState)
    125          {
    126            /* Check the parameters */
    127            assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
    128            assert_param(IS_FUNCTIONAL_STATE(NewState));
    129            if (NewState != DISABLE)
   \                     RCC_APB2PeriphClockCmd_tft: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable20_1  ;; 0x40021018
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0x6811             LDR      R1,[R2, #+0]
   \   00000008   0xD002             BEQ.N    ??RCC_APB2PeriphClockCmd_tft_0
    130            {
    131              RCC->APB2ENR |= RCC_APB2Periph;
   \   0000000A   0x4308             ORRS     R0,R0,R1
   \   0000000C   0x6010             STR      R0,[R2, #+0]
   \   0000000E   0x4770             BX       LR
    132            }
    133            else
    134            {
    135              RCC->APB2ENR &= ~RCC_APB2Periph;
   \                     ??RCC_APB2PeriphClockCmd_tft_0: (+1)
   \   00000010   0xEA21 0x0000      BIC      R0,R1,R0
   \   00000014   0x6010             STR      R0,[R2, #+0]
    136            }
    137          }
   \   00000016   0x4770             BX       LR               ;; return
    138          #if 0
    139          void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
    140          {
    141            /* Check the parameters */
    142            assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
    143            assert_param(IS_FUNCTIONAL_STATE(NewState));
    144          
    145            if (NewState != DISABLE)
    146            {
    147              RCC->AHB3ENR |= RCC_AHB3Periph;
    148            }
    149            else
    150            {
    151              RCC->AHB3ENR &= ~RCC_AHB3Periph;
    152            }
    153          }
    154          #endif
    155          #if 0
    156          void GPIO_Init_TFT(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef_TFT* GPIO_InitStruct)
    157          {
    158            uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
    159          
    160            /* Check the parameters */
    161            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    162            assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
    163            assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
    164            assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
    165          
    166            /* ------------------------- Configure the port pins ---------------- */
    167            /*-- GPIO Mode Configuration --*/
    168            for (pinpos = 0x00; pinpos < 0x10; pinpos++)
    169            {
    170              pos = ((uint32_t)0x01) << pinpos;
    171              /* Get the port pins position */
    172              currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    173          
    174              if (currentpin == pos)
    175              {
    176                GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
    177                GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
    178          
    179                if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
    180                {
    181                  /* Check Speed mode parameters */
    182                  assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    183          
    184                  /* Speed mode configuration */
    185                  GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
    186                  GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
    187          
    188                  /* Check Output mode parameters */
    189                  assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
    190          
    191                  /* Output mode configuration*/
    192                  GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
    193                  GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
    194                }
    195          
    196                /* Pull-up Pull down resistor configuration*/
    197                GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
    198                GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    199              }
    200            }
    201          }
    202          #else

   \                                 In section .text, align 2, keep-with-next
    203          void GPIO_Init_TFT(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
    204          {
   \                     GPIO_Init_TFT: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    205            uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
   \   00000002   0x2200             MOVS     R2,#+0
    206            uint32_t tmpreg = 0x00, pinmask = 0x00;
    207            /* Check the parameters */
    208            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    209            assert_param(IS_GPIO_MODE(GPIO_InitStruct->Mode));
    210            assert_param(IS_GPIO_PIN(GPIO_InitStruct->Pin));  
    211            
    212          /*---------------------------- GPIO Mode Configuration -----------------------*/
    213            currentmode = ((uint32_t)GPIO_InitStruct->Mode) & ((uint32_t)0x0F);
   \   00000004   0x684C             LDR      R4,[R1, #+4]
   \   00000006   0xF004 0x030F      AND      R3,R4,#0xF
    214            if ((((uint32_t)GPIO_InitStruct->Mode) & ((uint32_t)0x10)) != 0x00)
   \   0000000A   0x06E4             LSLS     R4,R4,#+27
   \   0000000C   0xD501             BPL.N    ??GPIO_Init_TFT_0
    215            { 
    216              /* Check the parameters */
    217              assert_param(IS_GPIO_SPEED(GPIO_InitStruct->Speed));
    218              /* Output mode */
    219              currentmode |= (uint32_t)GPIO_InitStruct->Speed;
   \   0000000E   0x68CC             LDR      R4,[R1, #+12]
   \   00000010   0x4323             ORRS     R3,R4,R3
    220            }
    221          /*---------------------------- GPIO CRL Configuration ------------------------*/
    222            /* Configure the eight low port pins */
    223            if (((uint32_t)GPIO_InitStruct->Pin & ((uint32_t)0x00FF)) != 0x00)
   \                     ??GPIO_Init_TFT_0: (+1)
   \   00000012   0x780C             LDRB     R4,[R1, #+0]
   \   00000014   0x0624             LSLS     R4,R4,#+24
   \   00000016   0xD01C             BEQ.N    ??GPIO_Init_TFT_1
    224            {
    225              tmpreg = GPIOx->CRL;
   \   00000018   0x6804             LDR      R4,[R0, #+0]
    226              for (pinpos = 0x00; pinpos < 0x08; pinpos++)
   \   0000001A   0xE003             B.N      ??GPIO_Init_TFT_2
    227              {
    228                pos = ((uint32_t)0x01) << pinpos;
    229                /* Get the port pins position */
    230                currentpin = (GPIO_InitStruct->Pin) & pos;
    231                if (currentpin == pos)
    232                {
    233                  pos = pinpos << 2;
    234                  /* Clear the corresponding low control register bits */
    235                  pinmask = ((uint32_t)0x0F) << pos;
    236                  tmpreg &= ~pinmask;
    237                  /* Write the mode configuration in the corresponding bits */
    238                  tmpreg |= (currentmode << pos);
    239                  /* Reset the corresponding ODR bit */
    240                  if (GPIO_InitStruct->Mode == GPIO_Mode_IPD)
    241                  {
    242                    GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    243                  }
    244                  else
    245                  {
    246                    /* Set the corresponding ODR bit */
    247                    if (GPIO_InitStruct->Mode == GPIO_Mode_IPU)
   \                     ??GPIO_Init_TFT_3: (+1)
   \   0000001C   0x2D48             CMP      R5,#+72
   \   0000001E   0xD100             BNE.N    ??GPIO_Init_TFT_4
    248                    {
    249                      GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
   \   00000020   0x6106             STR      R6,[R0, #+16]
    250                    }
    251                  }
   \                     ??GPIO_Init_TFT_4: (+1)
   \   00000022   0x1C52             ADDS     R2,R2,#+1
   \                     ??GPIO_Init_TFT_2: (+1)
   \   00000024   0x2A08             CMP      R2,#+8
   \   00000026   0xD213             BCS.N    ??GPIO_Init_TFT_5
   \   00000028   0x2501             MOVS     R5,#+1
   \   0000002A   0xFA05 0xF602      LSL      R6,R5,R2
   \   0000002E   0x4635             MOV      R5,R6
   \   00000030   0x680F             LDR      R7,[R1, #+0]
   \   00000032   0x402F             ANDS     R7,R5,R7
   \   00000034   0x42AF             CMP      R7,R5
   \   00000036   0xD1F4             BNE.N    ??GPIO_Init_TFT_4
   \   00000038   0x0095             LSLS     R5,R2,#+2
   \   0000003A   0x270F             MOVS     R7,#+15
   \   0000003C   0x40AF             LSLS     R7,R7,R5
   \   0000003E   0x43BC             BICS     R4,R4,R7
   \   00000040   0xFA03 0xF505      LSL      R5,R3,R5
   \   00000044   0x432C             ORRS     R4,R5,R4
   \   00000046   0x684D             LDR      R5,[R1, #+4]
   \   00000048   0x2D28             CMP      R5,#+40
   \   0000004A   0xD1E7             BNE.N    ??GPIO_Init_TFT_3
   \   0000004C   0x6146             STR      R6,[R0, #+20]
   \   0000004E   0xE7E8             B.N      ??GPIO_Init_TFT_4
    252                }
    253              }
    254              GPIOx->CRL = tmpreg;
   \                     ??GPIO_Init_TFT_5: (+1)
   \   00000050   0x6004             STR      R4,[R0, #+0]
    255            }
    256          /*---------------------------- GPIO CRH Configuration ------------------------*/
    257            /* Configure the eight high port pins */
    258            if (GPIO_InitStruct->Pin > 0x00FF)
   \                     ??GPIO_Init_TFT_1: (+1)
   \   00000052   0x680A             LDR      R2,[R1, #+0]
   \   00000054   0x2AFF             CMP      R2,#+255
   \   00000056   0xD91F             BLS.N    ??GPIO_Init_TFT_6
    259            {
    260              tmpreg = GPIOx->CRH;
   \   00000058   0x6844             LDR      R4,[R0, #+4]
    261              for (pinpos = 0x00; pinpos < 0x08; pinpos++)
   \   0000005A   0x2200             MOVS     R2,#+0
   \   0000005C   0xE019             B.N      ??GPIO_Init_TFT_7
    262              {
    263                pos = (((uint32_t)0x01) << (pinpos + 0x08));
   \                     ??GPIO_Init_TFT_8: (+1)
   \   0000005E   0x2501             MOVS     R5,#+1
   \   00000060   0xF102 0x0608      ADD      R6,R2,#+8
   \   00000064   0xFA05 0xF606      LSL      R6,R5,R6
   \   00000068   0x4635             MOV      R5,R6
    264                /* Get the port pins position */
    265                currentpin = ((GPIO_InitStruct->Pin) & pos);
    266                if (currentpin == pos)
   \   0000006A   0x680F             LDR      R7,[R1, #+0]
   \   0000006C   0x402F             ANDS     R7,R5,R7
   \   0000006E   0x42AF             CMP      R7,R5
   \   00000070   0xD10E             BNE.N    ??GPIO_Init_TFT_9
    267                {
    268                  pos = pinpos << 2;
   \   00000072   0x0095             LSLS     R5,R2,#+2
    269                  /* Clear the corresponding high control register bits */
    270                  pinmask = ((uint32_t)0x0F) << pos;
    271                  tmpreg &= ~pinmask;
    272                  /* Write the mode configuration in the corresponding bits */
    273                  tmpreg |= (currentmode << pos);
   \   00000074   0x270F             MOVS     R7,#+15
   \   00000076   0x40AF             LSLS     R7,R7,R5
   \   00000078   0x43BC             BICS     R4,R4,R7
   \   0000007A   0xFA03 0xF505      LSL      R5,R3,R5
   \   0000007E   0x432C             ORRS     R4,R5,R4
    274                  /* Reset the corresponding ODR bit */
    275                  if (GPIO_InitStruct->Mode == GPIO_Mode_IPD)
   \   00000080   0x684D             LDR      R5,[R1, #+4]
   \   00000082   0x2D28             CMP      R5,#+40
   \   00000084   0xD100             BNE.N    ??GPIO_Init_TFT_10
    276                  {
    277                    GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
   \   00000086   0x6146             STR      R6,[R0, #+20]
    278                  }
    279                  /* Set the corresponding ODR bit */
    280                  if (GPIO_InitStruct->Mode == GPIO_Mode_IPU)
   \                     ??GPIO_Init_TFT_10: (+1)
   \   00000088   0x684D             LDR      R5,[R1, #+4]
   \   0000008A   0x2D48             CMP      R5,#+72
   \   0000008C   0xD100             BNE.N    ??GPIO_Init_TFT_9
    281                  {
    282                    GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
   \   0000008E   0x6106             STR      R6,[R0, #+16]
    283                  }
    284                }
    285              }
   \                     ??GPIO_Init_TFT_9: (+1)
   \   00000090   0x1C52             ADDS     R2,R2,#+1
   \                     ??GPIO_Init_TFT_7: (+1)
   \   00000092   0x2A08             CMP      R2,#+8
   \   00000094   0xD3E3             BCC.N    ??GPIO_Init_TFT_8
    286              GPIOx->CRH = tmpreg;
   \   00000096   0x6044             STR      R4,[R0, #+4]
    287            }
    288          }
   \                     ??GPIO_Init_TFT_6: (+1)
   \   00000098   0xBCF0             POP      {R4-R7}
   \   0000009A   0x4770             BX       LR               ;; return
    289          
    290          #endif
    291          #if 0
    292          void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
    293          {
    294            uint32_t temp = 0x00;
    295            uint32_t temp_2 = 0x00;
    296            
    297            /* Check the parameters */
    298            assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    299            assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    300            assert_param(IS_GPIO_AF(GPIO_AF));
    301            
    302            temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
    303            GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
    304            temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
    305            GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
    306          }
    307          #endif
    308          //skyblue add end
    309          /*******************************************************************************
    310          * Function Name  : LCD_CtrlLinesConfig
    311          * Description    : Configures LCD Control lines (FSMC Pins) in alternate function
    312                             Push-Pull mode.
    313          * Input          : None
    314          * Output         : None
    315          * Return         : None
    316          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    317          void LCD_CtrlLinesConfig(void)
    318          {
   \                     LCD_CtrlLinesConfig: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    319          #if 0
    320          
    321          	vu32 i=0;
    322          	volatile unsigned long delayCnt=0;
    323          	
    324            GPIO_InitTypeDef  GPIO_InitStructure;
    325          	
    326          	RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOB|RCC_AHB1Periph_GPIOD|RCC_AHB1Periph_GPIOE|RCC_AHB1Periph_GPIOF|RCC_AHB1Periph_GPIOG, ENABLE);//使能PD,PE,PF,PG时钟  
    327            RCC_AHBPeriphClockCmd(RCC_AHB3Periph_FSMC,ENABLE);//使能FSMC时钟  
    328          	
    329          	
    330          	GPIO_InitStructure.Pin = GPIO_Pin_12|GPIO_Pin_13;//PB15 推挽输出,控制背光
    331            GPIO_InitStructure.Mode = GPIO_Mode_Out_PP;//普通输出模式
    332            //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    333            GPIO_InitStructure.Speed = GPIO_Speed_50MHz;//100MHz
    334            //GPIO_InitStructure.Pull= GPIO_PuPd_UP;//上拉
    335            GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);//初始化 //PB15 推挽输出,控制背光
    336          	Lcd_Light_OFF;
    337          
    338          	Lcd_RESET();
    339          	HAL_Delay(50);
    340            //      for(delayCnt=0;delayCnt<10000;delayCnt++);
    341                  //HAL_Delay(500);
    342          	Lcd_SET();
    343          	
    344          
    345            GPIO_InitStructure.Pin = (3<<0)|(3<<4)|(7<<8)|(3<<14);//PD0,1,4,5,8,9,10,14,15 AF OUT
    346            GPIO_InitStructure.Mode = GPIO_Mode_AF_PP;//复用输出
    347            //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    348            GPIO_InitStructure.Speed = GPIO_Speed_50MHz;//100MHz
    349            //GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
    350            GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);//初始化  
    351          	
    352            GPIO_InitStructure.Pin = (0X1FF<<7);//PE7~15,AF OUT
    353            GPIO_InitStructure.Mode = GPIO_Mode_AF_PP;//复用输出
    354            //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    355            GPIO_InitStructure.Speed = GPIO_Speed_50MHz;//100MHz
    356            //GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
    357            GPIO_Init_TFT(GPIOE, &GPIO_InitStructure);//初始化  
    358          
    359          	GPIO_InitStructure.Pin = GPIO_Pin_12;//PF12,FSMC_A6
    360          	GPIO_InitStructure.Mode = GPIO_Mode_AF_PP;//复用输出
    361            //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    362            GPIO_InitStructure.Speed = GPIO_Speed_50MHz;//100MHz
    363            //GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
    364            GPIO_Init_TFT(GPIOF, &GPIO_InitStructure);//初始化  
    365          
    366          
    367          	GPIO_InitStructure.Pin = GPIO_Pin_12;//PG12,FSMC_NE4
    368            GPIO_InitStructure.Mode = GPIO_Mode_AF_PP;//复用输出
    369            //GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
    370            GPIO_InitStructure.Speed = GPIO_Speed_50MHz;//100MHz
    371            //GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
    372            GPIO_Init_TFT(GPIOG, &GPIO_InitStructure);//初始化 
    373          
    374            GPIO_PinAFConfig(GPIOD,GPIO_PinSource0,GPIO_AF_FSMC);//PD0,AF12
    375            GPIO_PinAFConfig(GPIOD,GPIO_PinSource1,GPIO_AF_FSMC);//PD1,AF12
    376            GPIO_PinAFConfig(GPIOD,GPIO_PinSource4,GPIO_AF_FSMC);
    377            GPIO_PinAFConfig(GPIOD,GPIO_PinSource5,GPIO_AF_FSMC); 
    378            GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_FSMC); 
    379            GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_FSMC);
    380            GPIO_PinAFConfig(GPIOD,GPIO_PinSource10,GPIO_AF_FSMC);
    381            GPIO_PinAFConfig(GPIOD,GPIO_PinSource14,GPIO_AF_FSMC);
    382            GPIO_PinAFConfig(GPIOD,GPIO_PinSource15,GPIO_AF_FSMC);//PD15,AF12
    383           
    384            GPIO_PinAFConfig(GPIOE,GPIO_PinSource7,GPIO_AF_FSMC);//PE7,AF12
    385            GPIO_PinAFConfig(GPIOE,GPIO_PinSource8,GPIO_AF_FSMC);
    386            GPIO_PinAFConfig(GPIOE,GPIO_PinSource9,GPIO_AF_FSMC);
    387            GPIO_PinAFConfig(GPIOE,GPIO_PinSource10,GPIO_AF_FSMC);
    388            GPIO_PinAFConfig(GPIOE,GPIO_PinSource11,GPIO_AF_FSMC);
    389            GPIO_PinAFConfig(GPIOE,GPIO_PinSource12,GPIO_AF_FSMC);
    390            GPIO_PinAFConfig(GPIOE,GPIO_PinSource13,GPIO_AF_FSMC);
    391            GPIO_PinAFConfig(GPIOE,GPIO_PinSource14,GPIO_AF_FSMC);
    392            GPIO_PinAFConfig(GPIOE,GPIO_PinSource15,GPIO_AF_FSMC);//PE15,AF12
    393            GPIO_PinAFConfig(GPIOF,GPIO_PinSource12,GPIO_AF_FSMC);//PF12,AF12
    394            GPIO_PinAFConfig(GPIOG,GPIO_PinSource12,GPIO_AF_FSMC);
    395          #endif
    396          GPIO_InitTypeDef GPIO_InitStructure;
    397          
    398            /* Enable FSMC, GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
    399            RCC_AHBPeriphClockCmd_tft(RCC_AHBPeriph_FSMC, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF44F 0x7080      MOV      R0,#+256
   \   0000000A   0x.... 0x....      BL       RCC_AHBPeriphClockCmd_tft
    400            RCC_APB2PeriphClockCmd_tft(RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE |
    401                                   RCC_APB2Periph_GPIOF | RCC_APB2Periph_GPIOG | RCC_APB2Periph_GPIOC |
    402                                   RCC_APB2Periph_AFIO, ENABLE); 
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0xF240 0x10F1      MOVW     R0,#+497
   \   00000014   0x.... 0x....      BL       RCC_APB2PeriphClockCmd_tft
    403          
    404             //禁止norflash
    405           /* GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    406            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    407            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    408            GPIO_Init(GPIOG, &GPIO_InitStructure);
    409            GPIO_SetBits(GPIOG, GPIO_Pin_9);*/
    410            
    411            /* Set PD.00(D2), PD.01(D3), PD.04(NOE), PD.05(NWE), PD.08(D13), PD.09(D14),
    412               PD.10(D15), PD.14(D0), PD.15(D1) as alternate 
    413               function push pull */
    414            GPIO_InitStructure.Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5 |
    415                                          GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 | 
    416                                          GPIO_Pin_15;
   \   00000018   0xF24C 0x7033      MOVW     R0,#+50995
   \   0000001C   0x9000             STR      R0,[SP, #+0]
    417            GPIO_InitStructure.Speed = GPIO_Speed_50MHz;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x9003             STR      R0,[SP, #+12]
    418            GPIO_InitStructure.Mode = GPIO_Mode_AF_PP;
   \   00000022   0x2018             MOVS     R0,#+24
   \   00000024   0x9001             STR      R0,[SP, #+4]
    419            GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);
   \   00000026   0x.... 0x....      LDR.W    R4,??DataTable20_2  ;; 0x40011400
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       GPIO_Init_TFT
    420          
    421            /* Set PE.07(D4), PE.08(D5), PE.09(D6), PE.10(D7), PE.11(D8), PE.12(D9), PE.13(D10),
    422               PE.14(D11), PE.15(D12) as alternate function push pull */
    423            GPIO_InitStructure.Pin =  GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | 
    424                                          GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
    425                                          GPIO_Pin_15;
   \   00000032   0xF64F 0x7080      MOVW     R0,#+65408
   \   00000036   0x9000             STR      R0,[SP, #+0]
    426            GPIO_Init_TFT(GPIOE, &GPIO_InitStructure);
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable20_3  ;; 0x40011800
   \   0000003E   0x.... 0x....      BL       GPIO_Init_TFT
    427          
    428          #if defined(MKS_ROBIN_BOARD)
    429          	/* Set PF.00(A0 (RS)) as alternate function push pull */
    430          	GPIO_InitStructure.Pin = GPIO_Pin_0;
    431          	GPIO_Init_TFT(GPIOF, &GPIO_InitStructure);
    432          #elif defined(MKS_ROBIN_MINI_BOARD)
    433          	/* Set PD.11(A16 (RS)) as alternate function push pull */
    434          	GPIO_InitStructure.Pin = GPIO_Pin_11;
    435          	GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);
    436          #elif defined(MKS_ROBIN_NANO)
    437          	/* Set PD.11(A16 (RS)) as alternate function push pull */
    438          	GPIO_InitStructure.Pin = GPIO_Pin_11;
   \   00000042   0xF44F 0x6000      MOV      R0,#+2048
   \   00000046   0x9000             STR      R0,[SP, #+0]
    439          	GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);	
   \   00000048   0xA900             ADD      R1,SP,#+0
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       GPIO_Init_TFT
    440          #endif	
    441          
    442          #if defined(MKS_ROBIN_BOARD)
    443          	/* Set PG.12(NE4 (LCD/CS)) as alternate function push pull - CE3(LCD /CS) */
    444          	GPIO_InitStructure.Pin = GPIO_Pin_12;
    445          	GPIO_Init_TFT(GPIOG, &GPIO_InitStructure);
    446          #elif defined(MKS_ROBIN_MINI_BOARD)
    447          	/* Set PD.7(NE1 (LCD/CS)) as alternate function push pull - CE3(LCD /CS) */
    448          	GPIO_InitStructure.Pin = GPIO_Pin_7;
    449          	GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);
    450          #elif defined(MKS_ROBIN_NANO)
    451          	/* Set PD.7(NE1 (LCD/CS)) as alternate function push pull - CE3(LCD /CS) */
    452          	GPIO_InitStructure.Pin = GPIO_Pin_7;
   \   00000050   0x2080             MOVS     R0,#+128
   \   00000052   0x9000             STR      R0,[SP, #+0]
    453          	GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);	
   \   00000054   0xA900             ADD      R1,SP,#+0
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       GPIO_Init_TFT
    454          #endif	
    455                  
    456            /*FSMC A21和A22初试化，推挽复用输出*/ 
    457            //GPIO_InitStructure.Pin = GPIO_Pin_5 | GPIO_Pin_6; 
    458            //GPIO_Init_TFT(GPIOE, &GPIO_InitStructure); 
    459          
    460           
    461            /* Lcd_Light_Control */
    462          #if defined(MKS_ROBIN_BOARD)	
    463          	  GPIO_InitStructure.Pin = GPIO_Pin_11;//PG11  BACKLIGHT
    464          	  GPIO_InitStructure.Mode = GPIO_Mode_Out_PP ;   
    465          	  GPIO_InitStructure.Speed = GPIO_Speed_50MHz;
    466          	  GPIO_Init_TFT(GPIOG, &GPIO_InitStructure);
    467          	  GPIO_ResetBits(GPIOG, GPIO_Pin_11);
    468          #elif defined(MKS_ROBIN_MINI_BOARD)
    469          	  GPIO_InitStructure.Pin = GPIO_Pin_13;//PD13  BACKLIGHT
    470          	  GPIO_InitStructure.Mode = GPIO_Mode_Out_PP ;   
    471          	  GPIO_InitStructure.Speed = GPIO_Speed_50MHz;
    472          	  GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);
    473          	  GPIO_ResetBits(GPIOD, GPIO_Pin_13);
    474          #elif defined(MKS_ROBIN_NANO)
    475          	  GPIO_InitStructure.Pin = GPIO_Pin_13;//PD13  BACKLIGHT
   \   0000005C   0xF44F 0x5000      MOV      R0,#+8192
   \   00000060   0x9000             STR      R0,[SP, #+0]
    476          	  GPIO_InitStructure.Mode = GPIO_Mode_Out_PP ;   
   \   00000062   0x2010             MOVS     R0,#+16
   \   00000064   0x9001             STR      R0,[SP, #+4]
    477          	  GPIO_InitStructure.Speed = GPIO_Speed_50MHz;
   \   00000066   0x2003             MOVS     R0,#+3
   \   00000068   0x9003             STR      R0,[SP, #+12]
    478          	  GPIO_Init_TFT(GPIOD, &GPIO_InitStructure);
   \   0000006A   0xA900             ADD      R1,SP,#+0
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       GPIO_Init_TFT
    479          	  GPIO_ResetBits(GPIOD, GPIO_Pin_13);		
   \   00000072   0xF44F 0x5100      MOV      R1,#+8192
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       GPIO_ResetBits
    480          #endif	
    481          
    482          
    483          #if defined(MKS_ROBIN_BOARD)	
    484          	GPIO_InitStructure.Pin = GPIO_Pin_6;//
    485          	GPIO_InitStructure.Mode = GPIO_Mode_Out_PP ;   
    486          	GPIO_InitStructure.Speed = GPIO_Speed_50MHz;
    487          	GPIO_Init_TFT(GPIOF, &GPIO_InitStructure);
    488          	GPIO_ResetBits(GPIOF, GPIO_Pin_6);
    489          	for(volatile uint32_t time_tick = 0; time_tick < 4000000; time_tick++);
    490          	GPIO_SetBits(GPIOF, GPIO_Pin_6);
    491          #elif defined(MKS_ROBIN_MINI_BOARD)
    492          	GPIO_InitStructure.Pin = GPIO_Pin_6;	//FSMC_RST	PC6
    493          	GPIO_InitStructure.Mode = GPIO_Mode_Out_PP ;   
    494          	GPIO_InitStructure.Speed = GPIO_Speed_50MHz;
    495          	GPIO_Init_TFT(GPIOC, &GPIO_InitStructure);	
    496          	GPIO_ResetBits(GPIOC, GPIO_Pin_6);
    497          	for(volatile uint32_t time_tick = 0; time_tick < 4000000; time_tick++);
    498          	GPIO_SetBits(GPIOC, GPIO_Pin_6);
    499          #elif defined(MKS_ROBIN_NANO)
    500          	GPIO_InitStructure.Pin = GPIO_Pin_6;	//FSMC_RST	PC6
   \   0000007C   0x2040             MOVS     R0,#+64
   \   0000007E   0x9000             STR      R0,[SP, #+0]
    501          	GPIO_InitStructure.Mode = GPIO_Mode_Out_PP ;   
   \   00000080   0x2010             MOVS     R0,#+16
   \   00000082   0x9001             STR      R0,[SP, #+4]
    502          	GPIO_InitStructure.Speed = GPIO_Speed_50MHz;
   \   00000084   0x2003             MOVS     R0,#+3
   \   00000086   0x9003             STR      R0,[SP, #+12]
    503          	GPIO_Init_TFT(GPIOC, &GPIO_InitStructure);	
   \   00000088   0x.... 0x....      LDR.W    R4,??DataTable20_4  ;; 0x40011000
   \   0000008C   0xA900             ADD      R1,SP,#+0
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0x.... 0x....      BL       GPIO_Init_TFT
    504          	GPIO_ResetBits(GPIOC, GPIO_Pin_6);
   \   00000094   0x2140             MOVS     R1,#+64
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0x.... 0x....      BL       GPIO_ResetBits
    505          	for(volatile uint32_t time_tick = 0; time_tick < 400000; time_tick++);
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x9004             STR      R0,[SP, #+16]
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable20_5  ;; 0x61a80
   \   000000A4   0xE002             B.N      ??LCD_CtrlLinesConfig_0
   \                     ??LCD_CtrlLinesConfig_1: (+1)
   \   000000A6   0x9804             LDR      R0,[SP, #+16]
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0x9004             STR      R0,[SP, #+16]
   \                     ??LCD_CtrlLinesConfig_0: (+1)
   \   000000AC   0x9804             LDR      R0,[SP, #+16]
   \   000000AE   0x4288             CMP      R0,R1
   \   000000B0   0xD3F9             BCC.N    ??LCD_CtrlLinesConfig_1
    506          	GPIO_SetBits(GPIOC, GPIO_Pin_6);	
   \   000000B2   0x2140             MOVS     R1,#+64
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       GPIO_SetBits
    507          #endif  
    508          
    509          
    510            
    511          }
   \   000000BA   0xB006             ADD      SP,SP,#+24
   \   000000BC   0xBD10             POP      {R4,PC}          ;; return
    512          
    513          /*******************************************************************************
    514          * Function Name  : LCD_FSMCConfig
    515          * Description    : Configures the Parallel interface (FSMC) for LCD(Parallel mode)
    516          * Input          : None
    517          * Output         : None
    518          * Return         : None
    519          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    520          void LCD_FSMCConfig(void)
    521          {
   \                     LCD_FSMCConfig: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB09D             SUB      SP,SP,#+116
    522          #if 0
    523          	FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
    524            FSMC_NORSRAMTimingInitTypeDef  readWriteTiming; 
    525          	FSMC_NORSRAMTimingInitTypeDef  writeTiming;
    526            
    527            readWriteTiming.FSMC_AddressSetupTime = 0XF;	 //地址建立时间（ADDSET）为16个HCLK 1/168M=6ns*16=96ns	
    528            readWriteTiming.FSMC_AddressHoldTime = 0x00;	 //地址保持时间（ADDHLD）模式A未用到	
    529            readWriteTiming.FSMC_DataSetupTime = 60;			//数据保存时间为60个HCLK	=6*60=360ns
    530            readWriteTiming.FSMC_BusTurnAroundDuration = 0x00;
    531            readWriteTiming.FSMC_CLKDivision = 0x00;
    532            readWriteTiming.FSMC_DataLatency = 0x00;
    533            readWriteTiming.FSMC_AccessMode = FSMC_AccessMode_A;	 //模式A 
    534              
    535          
    536          	writeTiming.FSMC_AddressSetupTime =9;	      //地址建立时间（ADDSET）为9个HCLK =54ns 
    537            writeTiming.FSMC_AddressHoldTime = 0x00;	 //地址保持时间（A		
    538            writeTiming.FSMC_DataSetupTime = 8;		 //数据保存时间为6ns*9个HCLK=54ns
    539            writeTiming.FSMC_BusTurnAroundDuration = 0x00;
    540            writeTiming.FSMC_CLKDivision = 0x00;
    541            writeTiming.FSMC_DataLatency = 0x00;
    542            writeTiming.FSMC_AccessMode = FSMC_AccessMode_A;	 //模式A 
    543          
    544           
    545            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM4;//  这里我们使用NE4 ，也就对应BTCR[6],[7]。
    546            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable; // 不复用数据地址
    547            FSMC_NORSRAMInitStructure.FSMC_MemoryType =FSMC_MemoryType_SRAM;// FSMC_MemoryType_SRAM;  //SRAM   
    548            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;//存储器数据宽度为16bit   
    549            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode =FSMC_BurstAccessMode_Disable;// FSMC_BurstAccessMode_Disable; 
    550            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    551          	FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait=FSMC_AsynchronousWait_Disable; 
    552            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;   
    553            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;  
    554            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;	//  存储器写使能
    555            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;   
    556            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Enable; // 读写使用不同的时序
    557            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable; 
    558            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &readWriteTiming; //读写时序
    559            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &writeTiming;  //写时序
    560          
    561            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  //初始化FSMC配置
    562          
    563            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);  // 使能BANK1 
    564          #endif
    565            FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
    566            FSMC_NORSRAMTimingInitTypeDef  Timing_read, Timing_write;
    567          
    568          /*-- FSMC Configuration ------------------------------------------------------*/
    569          /*----------------------- SRAM Bank 4 ----------------------------------------*/
    570            /* FSMC_Bank1_NORSRAM4 configuration */
    571            Timing_read.FSMC_AddressSetupTime = 6;             
   \   00000004   0x2006             MOVS     R0,#+6
   \   00000006   0x9007             STR      R0,[SP, #+28]
    572            Timing_read.FSMC_AddressHoldTime = 0;  
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9008             STR      R0,[SP, #+32]
    573            Timing_read.FSMC_DataSetupTime = 6; 
   \   0000000C   0x2006             MOVS     R0,#+6
   \   0000000E   0x9009             STR      R0,[SP, #+36]
    574            Timing_read.FSMC_BusTurnAroundDuration = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x900A             STR      R0,[SP, #+40]
    575            Timing_read.FSMC_CLKDivision = 0;
   \   00000014   0x900B             STR      R0,[SP, #+44]
    576            Timing_read.FSMC_DataLatency = 0;
   \   00000016   0x900C             STR      R0,[SP, #+48]
    577            Timing_read.FSMC_AccessMode = FSMC_AccessMode_A;    
   \   00000018   0x900D             STR      R0,[SP, #+52]
    578          
    579            Timing_write.FSMC_AddressSetupTime = 2;             
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x9000             STR      R0,[SP, #+0]
    580            Timing_write.FSMC_AddressHoldTime = 0;  
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9001             STR      R0,[SP, #+4]
    581            Timing_write.FSMC_DataSetupTime = 2; 
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x9002             STR      R0,[SP, #+8]
    582            Timing_write.FSMC_BusTurnAroundDuration = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x9003             STR      R0,[SP, #+12]
    583            Timing_write.FSMC_CLKDivision = 0;
   \   0000002A   0x9004             STR      R0,[SP, #+16]
    584            Timing_write.FSMC_DataLatency = 0;  
   \   0000002C   0x9005             STR      R0,[SP, #+20]
    585            Timing_write.FSMC_AccessMode = FSMC_AccessMode_A; 
   \   0000002E   0x9006             STR      R0,[SP, #+24]
    586             
    587            /* Color LCD configuration ------------------------------------
    588               LCD configured as follow:
    589                  - Data/Address MUX = Disable
    590                  - Memory Type = SRAM
    591                  - Data Width = 16bit
    592                  - Write Operation = Enable
    593                  - Extended Mode = Enable
    594                  - Asynchronous Wait = Disable */
    595           #if defined(MKS_ROBIN_BOARD)
    596            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM4;
    597          #elif defined(MKS_ROBIN_MINI_BOARD)
    598            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
    599          #elif defined(MKS_ROBIN_NANO)
    600            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
   \   00000030   0x900E             STR      R0,[SP, #+56]
    601          #endif	  
    602            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
   \   00000032   0x900F             STR      R0,[SP, #+60]
    603            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
   \   00000034   0x9010             STR      R0,[SP, #+64]
    604            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
   \   00000036   0x2010             MOVS     R0,#+16
   \   00000038   0x9011             STR      R0,[SP, #+68]
    605            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9012             STR      R0,[SP, #+72]
    606            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
   \   0000003E   0x9013             STR      R0,[SP, #+76]
    607            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
   \   00000040   0x9014             STR      R0,[SP, #+80]
    608            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
   \   00000042   0x9015             STR      R0,[SP, #+84]
    609            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
   \   00000044   0x9016             STR      R0,[SP, #+88]
    610            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
   \   00000046   0xF44F 0x5080      MOV      R0,#+4096
   \   0000004A   0x9017             STR      R0,[SP, #+92]
    611            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x9018             STR      R0,[SP, #+96]
    612            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
   \   00000050   0x9019             STR      R0,[SP, #+100]
    613            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
   \   00000052   0x901A             STR      R0,[SP, #+104]
    614            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &Timing_read;
   \   00000054   0xA807             ADD      R0,SP,#+28
   \   00000056   0x901B             STR      R0,[SP, #+108]
    615            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &Timing_write;
   \   00000058   0xA800             ADD      R0,SP,#+0
   \   0000005A   0x901C             STR      R0,[SP, #+112]
    616          
    617            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  
   \   0000005C   0xA80E             ADD      R0,SP,#+56
   \   0000005E   0x.... 0x....      BL       FSMC_NORSRAMInit
    618          
    619            /* BANK 4 (of NOR/SRAM Bank 1~4) is enabled */
    620          #if defined(MKS_ROBIN_BOARD)	
    621            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);
    622          #elif defined(MKS_ROBIN_MINI_BOARD)
    623            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
    624          #elif defined(MKS_ROBIN_NANO)
    625            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       FSMC_NORSRAMCmd
    626          #endif     
    627               
    628          
    629          }
   \   0000006A   0xB01D             ADD      SP,SP,#+116
   \   0000006C   0xBD00             POP      {PC}             ;; return
    630          

   \                                 In section .text, align 2, keep-with-next
    631          void LCD_X_Init(void)
    632          {
   \                     LCD_X_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    633           /* Configure the LCD Control pins --------------------------------------------*/
    634            LCD_CtrlLinesConfig();
   \   00000002   0x.... 0x....      BL       LCD_CtrlLinesConfig
    635          
    636          /* Configure the FSMC Parallel interface -------------------------------------*/
    637            LCD_FSMCConfig();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x....             B.N      LCD_FSMCConfig
    638          
    639          
    640            
    641            
    642          }
    643          

   \                                 In section .text, align 2, keep-with-next
    644          u16 ILI9488_ReadRAM()
    645          {
    646            u16 data;	  /* Write 16-bit Index (then Read Reg) */
    647            data = LCD->LCD_RAM; 
   \                     ILI9488_ReadRAM: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_6  ;; 0x60020000
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
    648            return    data;
   \   00000004   0x4770             BX       LR               ;; return
    649          }

   \                                 In section .text, align 2, keep-with-next
    650          u16 ILI9488_WriteData(u16 data)
    651          {
    652            /* Write 16-bit Index (then Read Reg) */
    653            LCD->LCD_RAM = data; 
   \                     ILI9488_WriteData: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable20_6  ;; 0x60020000
   \   00000002   0x8008             STRH     R0,[R1, #+0]
    654          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "ILI9488_WriteData"
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    655          void ILI9488_WriteCmd(u16 LCD_RegValue)
    656          {
    657            /* Write 16-bit Index, then Write Reg */
    658            LCD->LCD_REG = LCD_RegValue;
   \                     ILI9488_WriteCmd: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable20_7  ;; 0x6001fffe
   \   00000002   0x8008             STRH     R0,[R1, #+0]
    659          }
   \   00000004   0x4770             BX       LR               ;; return
    660          
    661          /*******************************************************************************
    662          * Function Name  : LCD_WriteReg
    663          * Description    : Writes to the selected LCD register.
    664          * Input          : - LCD_Reg: address of the selected register.
    665          *                  - LCD_RegValue: value to write to the selected register.
    666          * Output         : None
    667          * Return         : None
    668          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    669          void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
    670          {
    671            /* Write 16-bit Index, then Write Reg */
    672            ClrCs
    673            LCD->LCD_REG = (vu16)LCD_Reg;
   \                     LCD_WriteReg: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable20_7  ;; 0x6001fffe
   \   00000002   0x8010             STRH     R0,[R2, #+0]
    674            /* Write 16-bit Reg */
    675            LCD->LCD_RAM = (vu16)LCD_RegValue;
   \   00000004   0x8051             STRH     R1,[R2, #+2]
    676            SetCs
    677          }
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    678          void LCD_WrtReg(u16 LCD_Reg)
    679          {
    680            /* Write 16-bit Index, then Write Reg */
    681            //ClrCs
    682            LCD_Reg=LCD_Reg;
    683            LCD->LCD_REG = (vu16)LCD_Reg;
   \                     LCD_WrtReg: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable20_7  ;; 0x6001fffe
   \   00000002   0x8008             STRH     R0,[R1, #+0]
    684            //SetCs
    685          }
   \   00000004   0x4770             BX       LR               ;; return
    686          /*******************************************************************************
    687          * Function Name  : LCD_ReadReg
    688          * Description    : Reads the selected LCD Register.
    689          * Input          : None
    690          * Output         : None
    691          * Return         : LCD Register Value.
    692          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    693          u16 LCD_ReadReg(u8 LCD_Reg)
    694          {
    695            u16 data;	  /* Write 16-bit Index (then Read Reg) */
    696            ClrCs
    697            //LCD->LCD_REG = LCD_Reg;
    698            data = LCD->LCD_RAM; 
   \                     LCD_ReadReg: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_6  ;; 0x60020000
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
    699              SetCs
    700               return    data;
   \   00000004   0x4770             BX       LR               ;; return
    701          }
    702          

   \                                 In section .text, align 2, keep-with-next
    703          u16 LCD_ReadSta(void)
    704          {
    705            u16 data;
    706            /* Write 16-bit Index, then Write Reg */
    707            ClrCs
    708            data = LCD->LCD_REG;
   \                     LCD_ReadSta: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_7  ;; 0x6001fffe
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
    709            SetCs
    710            return    data;
   \   00000004   0x4770             BX       LR               ;; return
    711          }
    712          

   \                                 In section .text, align 2, keep-with-next
    713          void LCD_WriteCommand(u16 LCD_RegValue)
    714          {
    715            /* Write 16-bit Index, then Write Reg */
    716            ClrCs
    717            LCD->LCD_REG = LCD_RegValue;
   \                     LCD_WriteCommand: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable20_7  ;; 0x6001fffe
   \   00000002   0x8008             STRH     R0,[R1, #+0]
    718            SetCs
    719          }
   \   00000004   0x4770             BX       LR               ;; return
    720          
    721          /*******************************************************************************
    722          * Function Name  : LCD_WriteRAM_Prepare
    723          * Description    : Prepare to write to the LCD RAM.
    724          * Input          : None
    725          * Output         : None
    726          * Return         : None
    727          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    728          void LCD_WriteRAM_Prepare(void)
    729          {
    730            //**ClrCs
    731            //**LCD->LCD_REG = R34;
    732            //**SetCs
    733            if((DeviceCode==0x9325)||(DeviceCode==0x9328)||(DeviceCode==0x8989)||(DeviceCode==0x1505))
   \                     LCD_WriteRAM_Prepare: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_8
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0xF249 0x3125      MOVW     R1,#+37669
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD00B             BEQ.N    ??LCD_WriteRAM_Prepare_0
   \   0000000C   0xF249 0x3128      MOVW     R1,#+37672
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD007             BEQ.N    ??LCD_WriteRAM_Prepare_0
   \   00000014   0xF648 0x1189      MOVW     R1,#+35209
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD003             BEQ.N    ??LCD_WriteRAM_Prepare_0
   \   0000001C   0xF241 0x5105      MOVW     R1,#+5381
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD103             BNE.N    ??LCD_WriteRAM_Prepare_1
    734          	{
    735            	ClrCs
    736            	LCD->LCD_REG = R34;
   \                     ??LCD_WriteRAM_Prepare_0: (+1)
   \   00000024   0x2022             MOVS     R0,#+34
   \   00000026   0x....             LDR.N    R1,??DataTable20_7  ;; 0x6001fffe
   \   00000028   0x8008             STRH     R0,[R1, #+0]
   \   0000002A   0x4770             BX       LR
    737            	SetCs
    738          	}
    739          	else
    740          	{
    741            	LCD_WrtReg(0x002C);
   \                     ??LCD_WriteRAM_Prepare_1: (+1)
   \   0000002C   0x202C             MOVS     R0,#+44
   \   0000002E   0x....             B.N      LCD_WrtReg
    742          	}
    743          }                                //**
    744          
    745          /*******************************************************************************
    746          * Function Name  : LCD_WriteRAM
    747          * Description    : Writes to the LCD RAM.
    748          * Input          : - RGB_Code: the pixel color in RGB mode (5-6-5).
    749          * Output         : None
    750          * Return         : None
    751          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    752          void LCD_WriteRAM(u16 RGB_Code)					 
    753          {
    754            ClrCs
    755            /* Write 16-bit GRAM Reg */
    756            LCD->LCD_RAM = RGB_Code;
   \                     LCD_WriteRAM: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable20_6  ;; 0x60020000
   \   00000002   0x8008             STRH     R0,[R1, #+0]
    757            SetCs
    758          }
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    759          void LCD_WrtRAM(u16 LCD_Ram)         //**
    760          {
    761          
    762            LCD_Ram=LCD_Ram;
    763            LCD->LCD_RAM = LCD_Ram;
   \                     LCD_WrtRAM: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable20_6  ;; 0x60020000
   \   00000002   0x8008             STRH     R0,[R1, #+0]
    764            
    765          }
   \   00000004   0x4770             BX       LR               ;; return
    766          
    767          
    768          
    769          /*******************************************************************************
    770          * Function Name  : LCD_ReadRAM
    771          * Description    : Reads the LCD RAM.
    772          * Input          : None
    773          * Output         : None
    774          * Return         : LCD RAM Value.
    775          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    776          u16 LCD_ReadRAM(void)
    777          {
    778            //**u16 dummy;
    779            //**u16 data;
    780            /* Write 16-bit Index (then Read Reg) */
    781            //**ClrCs
    782            //**LCD->LCD_REG = R34; /* Select GRAM Reg */
    783            /* Read 16-bit Reg */
    784            //**dummy = LCD->LCD_RAM; 
    785            //**dummy++;
    786            //**data = LCD->LCD_RAM; 
    787            //**SetCs
    788            //**return    data;
    789            //return LCD->LCD_RAM;
    790            u16 temp;	   //**
    791            temp = LCD->LCD_RAM;
   \                     LCD_ReadRAM: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_6  ;; 0x60020000
   \   00000002   0x8801             LDRH     R1,[R0, #+0]
    792            temp = LCD->LCD_RAM;
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
    793            return temp;
   \   00000006   0x4770             BX       LR               ;; return
    794          }
    795          
    796          /*******************************************************************************
    797          * Function Name  : LCD_SetCursor
    798          * Description    : Sets the cursor position.
    799          * Input          : - Xpos: specifies the X position.
    800          *                  - Ypos: specifies the Y position. 
    801          * Output         : None
    802          * Return         : None
    803          *******************************************************************************/
    804          
    805          

   \                                 In section .text, align 2, keep-with-next
    806          void LCD_SetCursor(u16 Xpos, u16 Ypos)
    807          {
   \                     LCD_SetCursor: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460E             MOV      R6,R1
    808          		if(DeviceCode == 0x9488)
   \   00000006   0x0A34             LSRS     R4,R6,#+8
   \   00000008   0x0A2F             LSRS     R7,R5,#+8
   \   0000000A   0x....             LDR.N    R0,??DataTable20_8
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0xF249 0x4188      MOVW     R1,#+38024
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD120             BNE.N    ??LCD_SetCursor_0
    809          		{
    810          				ILI9488_WriteCmd(0X002A); 
   \   00000016   0x202A             MOVS     R0,#+42
   \   00000018   0x.... 0x....      BL       ILI9488_WriteCmd
    811          				ILI9488_WriteData(Xpos>>8); 
   \   0000001C   0x4638             MOV      R0,R7
   \   0000001E   0x.... 0x....      BL       ILI9488_WriteData
    812          				ILI9488_WriteData(Xpos&0X00FF); 
   \   00000022   0xB2ED             UXTB     R5,R5
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x.... 0x....      BL       ILI9488_WriteData
    813          				ILI9488_WriteData(Xpos>>8); 
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0x.... 0x....      BL       ILI9488_WriteData
    814          				ILI9488_WriteData(Xpos&0X00FF);			
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x.... 0x....      BL       ILI9488_WriteData
    815          				//ILI9488_WriteData(0X01); 
    816          				//ILI9488_WriteData(0XDF);			
    817          				ILI9488_WriteCmd(0X002B); 
   \   00000036   0x202B             MOVS     R0,#+43
   \   00000038   0x.... 0x....      BL       ILI9488_WriteCmd
    818          				ILI9488_WriteData(Ypos>>8); 
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       ILI9488_WriteData
    819          				ILI9488_WriteData(Ypos&0X00FF);
   \   00000042   0xB2F5             UXTB     R5,R6
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       ILI9488_WriteData
    820          				ILI9488_WriteData(Ypos>>8); 
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       ILI9488_WriteData
    821          				ILI9488_WriteData(Ypos&0X00FF);			
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   00000056   0x....             B.N      ILI9488_WriteData
    822          				//ILI9488_WriteData(0X01); 
    823          				//ILI9488_WriteData(0X3F);			
    824          		} 			
    825          		else
    826          		{
    827            		LCD_WriteReg(0x06,Ypos>>8);
   \                     ??LCD_SetCursor_0: (+1)
   \   00000058   0x4621             MOV      R1,R4
   \   0000005A   0x2006             MOVS     R0,#+6
   \   0000005C   0x.... 0x....      BL       LCD_WriteReg
    828            		LCD_WriteReg(0x07,Ypos);
   \   00000060   0x4631             MOV      R1,R6
   \   00000062   0x2007             MOVS     R0,#+7
   \   00000064   0x.... 0x....      BL       LCD_WriteReg
    829            
    830            		LCD_WriteReg(0x02,Xpos>>8);
   \   00000068   0x4639             MOV      R1,R7
   \   0000006A   0x2002             MOVS     R0,#+2
   \   0000006C   0x.... 0x....      BL       LCD_WriteReg
    831            		LCD_WriteReg(0x03,Xpos);  
   \   00000070   0x4629             MOV      R1,R5
   \   00000072   0x2003             MOVS     R0,#+3
   \   00000074   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   00000078   0x....             B.N      LCD_WriteReg
    832          		}
    833          }			 

   \                                 In section .text, align 2, keep-with-next
    834          void LCD_setWindowArea(uint16_t StartX, uint16_t StartY, uint16_t Width, uint16_t Height)
    835          {
   \                     LCD_setWindowArea: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4615             MOV      R5,R2
    836            volatile uint16_t s_h,s_l, e_h, e_l;
    837          	
    838            uint16_t xEnd, yEnd;
    839          	
    840          	xEnd = StartX + Width-1;
   \   00000008   0x1928             ADDS     R0,R5,R4
   \   0000000A   0x1E40             SUBS     R0,R0,#+1
   \   0000000C   0xB280             UXTH     R0,R0
   \   0000000E   0x9002             STR      R0,[SP, #+8]
    841          	yEnd = StartY + Height-1;   
   \   00000010   0x185A             ADDS     R2,R3,R1
   \   00000012   0x1E56             SUBS     R6,R2,#+1
   \   00000014   0xB2B6             UXTH     R6,R6
   \   00000016   0x4637             MOV      R7,R6
    842          	if((DeviceCode==0x9325)||(DeviceCode==0x9328)||(DeviceCode==0x1505))
   \   00000018   0x....             LDR.N    R2,??DataTable20_8
   \   0000001A   0x8812             LDRH     R2,[R2, #+0]
   \   0000001C   0xF249 0x3C25      MOVW     R12,#+37669
   \   00000020   0x4562             CMP      R2,R12
   \   00000022   0xD007             BEQ.N    ??LCD_setWindowArea_0
   \   00000024   0xF249 0x3C28      MOVW     R12,#+37672
   \   00000028   0x4562             CMP      R2,R12
   \   0000002A   0xD003             BEQ.N    ??LCD_setWindowArea_0
   \   0000002C   0xF241 0x5C05      MOVW     R12,#+5381
   \   00000030   0x4562             CMP      R2,R12
   \   00000032   0xD116             BNE.N    ??LCD_setWindowArea_1
    843             {
    844                      LCD_WriteReg(0x0050,StartY);        //Specify the start/end positions of the window address in the horizontal direction by an address unit
   \                     ??LCD_setWindowArea_0: (+1)
   \   00000034   0x2050             MOVS     R0,#+80
   \   00000036   0x.... 0x....      BL       LCD_WriteReg
    845                      LCD_WriteReg(0x0051,StartY + Height -1);        //Specify the start positions of the window address in the vertical direction by an address unit 
   \   0000003A   0x4631             MOV      R1,R6
   \   0000003C   0x2051             MOVS     R0,#+81
   \   0000003E   0x.... 0x....      BL       LCD_WriteReg
    846                      LCD_WriteReg(0x0052,320 - StartX - Width); 
   \   00000042   0xF5C4 0x70A0      RSB      R0,R4,#+320
   \   00000046   0x1B41             SUBS     R1,R0,R5
   \   00000048   0xB289             UXTH     R1,R1
   \   0000004A   0x2052             MOVS     R0,#+82
   \   0000004C   0x.... 0x....      BL       LCD_WriteReg
    847                      LCD_WriteReg(0x0053,320 - StartX - 1 );        //Specify the end positions of the window address in the vertical direction by an address unit
   \   00000050   0xF240 0x103F      MOVW     R0,#+319
   \   00000054   0x1B01             SUBS     R1,R0,R4
   \   00000056   0xB289             UXTH     R1,R1
   \   00000058   0x2053             MOVS     R0,#+83
   \   0000005A   0xB003             ADD      SP,SP,#+12
   \   0000005C   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000060   0x....             B.N      LCD_WriteReg
    848          	 }    
    849              else  if(DeviceCode==0x5761)    //** 
   \                     ??LCD_setWindowArea_1: (+1)
   \   00000062   0xFA5F 0xF881      UXTB     R8,R1
   \   00000066   0xEA4F 0x2911      LSR      R9,R1,#+8
   \   0000006A   0xFA5F 0xFA84      UXTB     R10,R4
   \   0000006E   0xEA4F 0x2B14      LSR      R11,R4,#+8
   \   00000072   0xF245 0x7C61      MOVW     R12,#+22369
   \   00000076   0x4562             CMP      R2,R12
   \   00000078   0xD122             BNE.N    ??LCD_setWindowArea_2
    850              {
    851                    LCD_WrtReg(0X2A);
   \   0000007A   0x202A             MOVS     R0,#+42
   \   0000007C   0x.... 0x....      BL       LCD_WrtReg
    852                    LCD_WrtRAM(StartX>>8);
   \   00000080   0x4658             MOV      R0,R11
   \   00000082   0x.... 0x....      BL       LCD_WrtRAM
    853                    LCD_WrtRAM(StartX&0XFF);
   \   00000086   0x4650             MOV      R0,R10
   \   00000088   0x.... 0x....      BL       LCD_WrtRAM
    854                    LCD_WrtRAM(xEnd>>8);
   \   0000008C   0x9802             LDR      R0,[SP, #+8]
   \   0000008E   0xB280             UXTH     R0,R0
   \   00000090   0x0A00             LSRS     R0,R0,#+8
   \   00000092   0x.... 0x....      BL       LCD_WrtRAM
    855                    LCD_WrtRAM(xEnd&0XFF);
   \   00000096   0x9802             LDR      R0,[SP, #+8]
   \   00000098   0xB2C0             UXTB     R0,R0
   \   0000009A   0x.... 0x....      BL       LCD_WrtRAM
    856          		
    857                    LCD_WrtReg(0X2B);	
   \   0000009E   0x202B             MOVS     R0,#+43
   \   000000A0   0x.... 0x....      BL       LCD_WrtReg
    858                    LCD_WrtRAM(StartY>>8);	
   \   000000A4   0x4648             MOV      R0,R9
   \   000000A6   0x.... 0x....      BL       LCD_WrtRAM
    859                    LCD_WrtRAM(StartY&0XFF);
   \   000000AA   0x4640             MOV      R0,R8
   \   000000AC   0x.... 0x....      BL       LCD_WrtRAM
    860                    LCD_WrtRAM(yEnd>>8);	
   \   000000B0   0x4638             MOV      R0,R7
   \   000000B2   0x0A00             LSRS     R0,R0,#+8
   \   000000B4   0x.... 0x....      BL       LCD_WrtRAM
    861                    LCD_WrtRAM(yEnd&0XFF);                   
   \   000000B8   0xB2F8             UXTB     R0,R7
   \   000000BA   0xE8BD 0x4FFE      POP      {R1-R11,LR}
   \   000000BE   0x....             B.N      LCD_WrtRAM
    862              }
    863          		else if(DeviceCode == 0X9488)
   \                     ??LCD_setWindowArea_2: (+1)
   \   000000C0   0x1859             ADDS     R1,R3,R1
   \   000000C2   0x1E49             SUBS     R1,R1,#+1
   \   000000C4   0x1209             ASRS     R1,R1,#+8
   \   000000C6   0xB2CF             UXTB     R7,R1
   \   000000C8   0x1929             ADDS     R1,R5,R4
   \   000000CA   0x1E49             SUBS     R1,R1,#+1
   \   000000CC   0x1209             ASRS     R1,R1,#+8
   \   000000CE   0xB2C9             UXTB     R1,R1
   \   000000D0   0xB2F4             UXTB     R4,R6
   \   000000D2   0xB2C0             UXTB     R0,R0
   \   000000D4   0xF249 0x4388      MOVW     R3,#+38024
   \   000000D8   0x429A             CMP      R2,R3
   \   000000DA   0xF8AD 0xB006      STRH     R11,[SP, #+6]
   \   000000DE   0xF8AD 0xA004      STRH     R10,[SP, #+4]
   \   000000E2   0xF8AD 0x1002      STRH     R1,[SP, #+2]
   \   000000E6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   000000EA   0xD12E             BNE.N    ??LCD_setWindowArea_3
    864          		{
    865          			s_h = (StartX >> 8) & 0X00ff;
    866          			s_l = StartX & 0X00ff;
    867          			e_h = ((StartX + Width - 1) >> 8) & 0X00ff;
    868          			e_l = (StartX + Width - 1) & 0X00ff;
    869          			
    870          			ILI9488_WriteCmd(0x002A);
   \   000000EC   0x202A             MOVS     R0,#+42
   \   000000EE   0x.... 0x....      BL       ILI9488_WriteCmd
    871          			ILI9488_WriteData(s_h);
   \   000000F2   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   000000F6   0x.... 0x....      BL       ILI9488_WriteData
    872          			ILI9488_WriteData(s_l);
   \   000000FA   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000000FE   0x.... 0x....      BL       ILI9488_WriteData
    873          			ILI9488_WriteData(e_h);
   \   00000102   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000106   0x.... 0x....      BL       ILI9488_WriteData
    874          			ILI9488_WriteData(e_l);
   \   0000010A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000010E   0x.... 0x....      BL       ILI9488_WriteData
    875          		
    876          			s_h = (StartY >> 8) & 0X00ff;
   \   00000112   0xF8AD 0x9006      STRH     R9,[SP, #+6]
    877          			s_l = StartY & 0X00ff;
   \   00000116   0xF8AD 0x8004      STRH     R8,[SP, #+4]
    878          			e_h = ((StartY + Height - 1) >> 8) & 0X00ff;
   \   0000011A   0xF8AD 0x7002      STRH     R7,[SP, #+2]
    879          			e_l = (StartY + Height - 1) & 0X00ff;
   \   0000011E   0xF8AD 0x4000      STRH     R4,[SP, #+0]
    880          			
    881          			ILI9488_WriteCmd(0x002B);
   \   00000122   0x202B             MOVS     R0,#+43
   \   00000124   0x.... 0x....      BL       ILI9488_WriteCmd
    882          			ILI9488_WriteData(s_h);
   \   00000128   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000012C   0x.... 0x....      BL       ILI9488_WriteData
    883          			ILI9488_WriteData(s_l);
   \   00000130   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000134   0x.... 0x....      BL       ILI9488_WriteData
    884          			ILI9488_WriteData(e_h);
   \   00000138   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000013C   0x.... 0x....      BL       ILI9488_WriteData
    885          			ILI9488_WriteData(e_l); 	
   \   00000140   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000144   0xE8BD 0x4FFE      POP      {R1-R11,LR}
   \   00000148   0x....             B.N      ILI9488_WriteData
    886          		}  
    887          		else
    888          		{
    889          		 s_h = (StartX >> 8) & 0Xff;
    890          		 s_l = StartX & 0Xff;
    891          		 e_h = ((StartX + Width - 1) >> 8) & 0Xff;
    892          		 e_l = (StartX + Width - 1) & 0Xff;
    893          		 
    894          		 ILI9488_WriteCmd(0x2A);
   \                     ??LCD_setWindowArea_3: (+1)
   \   0000014A   0x202A             MOVS     R0,#+42
   \   0000014C   0x.... 0x....      BL       ILI9488_WriteCmd
    895          		 ILI9488_WriteData(s_h);
   \   00000150   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000154   0x.... 0x....      BL       ILI9488_WriteData
    896          		 ILI9488_WriteData(s_l);
   \   00000158   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000015C   0x.... 0x....      BL       ILI9488_WriteData
    897          		 ILI9488_WriteData(e_h);
   \   00000160   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000164   0x.... 0x....      BL       ILI9488_WriteData
    898          		 ILI9488_WriteData(e_l);
   \   00000168   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000016C   0x.... 0x....      BL       ILI9488_WriteData
    899          		
    900          		 s_h = (StartY >> 8) & 0Xff;
   \   00000170   0xF8AD 0x9006      STRH     R9,[SP, #+6]
    901          		 s_l = StartY & 0Xff;
   \   00000174   0xF8AD 0x8004      STRH     R8,[SP, #+4]
    902          		 e_h = ((StartY + Height - 1) >> 8) & 0Xff;
   \   00000178   0xF8AD 0x7002      STRH     R7,[SP, #+2]
    903          		 e_l = (StartY + Height - 1) & 0Xff;
   \   0000017C   0xF8AD 0x4000      STRH     R4,[SP, #+0]
    904          		 
    905          		 ILI9488_WriteCmd(0x2B);
   \   00000180   0x202B             MOVS     R0,#+43
   \   00000182   0x.... 0x....      BL       ILI9488_WriteCmd
    906          		 ILI9488_WriteData(s_h);
   \   00000186   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000018A   0x.... 0x....      BL       ILI9488_WriteData
    907          		 ILI9488_WriteData(s_l);
   \   0000018E   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000192   0x.... 0x....      BL       ILI9488_WriteData
    908          		 ILI9488_WriteData(e_h);
   \   00000196   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000019A   0x.... 0x....      BL       ILI9488_WriteData
    909          		 ILI9488_WriteData(e_l);	 
   \   0000019E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001A2   0xE8BD 0x4FFE      POP      {R1-R11,LR}
   \   000001A6   0x....             B.N      ILI9488_WriteData
    910          		}
    911          
    912          
    913          }	
    914          

   \                                 In section .text, align 2, keep-with-next
    915          void Delay_nms(int n)
    916          {
    917            
    918            u32 f=n,k;
   \                     Delay_nms: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xE002             B.N      ??Delay_nms_0
    919            for (; f!=0; f--)
    920            {
    921              for(k=0xFFF; k!=0; k--);
   \                     ??Delay_nms_1: (+1)
   \   00000004   0x1E49             SUBS     R1,R1,#+1
   \                     ??Delay_nms_2: (+1)
   \   00000006   0xD1FD             BNE.N    ??Delay_nms_1
   \   00000008   0x1E40             SUBS     R0,R0,#+1
   \                     ??Delay_nms_0: (+1)
   \   0000000A   0xD003             BEQ.N    ??Delay_nms_3
   \   0000000C   0xF640 0x71FF      MOVW     R1,#+4095
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xE7F8             B.N      ??Delay_nms_2
    922            }
    923            
    924          }
   \                     ??Delay_nms_3: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    925          

   \                                 In section .text, align 2, keep-with-next
    926          void Delay(u32 nCount)
    927          {
   \                     Delay: (+1)
   \   00000000   0xF242 0x7210      MOVW     R2,#+10000
    928           u32 TimingDelay; 
    929           while(nCount--)
   \                     ??Delay_0: (+1)
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x1E48             SUBS     R0,R1,#+1
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD004             BEQ.N    ??Delay_1
    930             {
    931              for(TimingDelay=0;TimingDelay<10000;TimingDelay++);
   \   0000000C   0x2100             MOVS     R1,#+0
   \                     ??Delay_2: (+1)
   \   0000000E   0x4291             CMP      R1,R2
   \   00000010   0xD2F8             BCS.N    ??Delay_0
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0xE7FB             B.N      ??Delay_2
    932             }
    933          }
   \                     ??Delay_1: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    934          
    935          /**
    936            * @brief  Draws a chinacharacter on LCD.
    937            * @param  Xpos: the Line where to display the character shape.
    938            * @param  Ypos: start column address.
    939            * @param  c: pointer to the character data.
    940            * @retval None
    941            */

   \                                 In section .text, align 2, keep-with-next
    942          void LCD_DrawChinaChar(u8 Xpos, u16 Ypos, const u8 *c)
    943          {
   \                     LCD_DrawChinaChar: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4681             MOV      R9,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4615             MOV      R5,R2
    944            u32 index = 0, i = 0, j = 0;
   \   0000000A   0x2600             MOVS     R6,#+0
    945            u8 Xaddress = 0;
    946             
    947            Xaddress = Xpos;
    948            
    949            //ili9320_SetCursor(Xaddress, Ypos);
    950            ili9320_SetCursor(Ypos,Xaddress);
   \   0000000C   0x4649             MOV      R1,R9
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       ili9320_SetCursor
    951          
    952            for(index = 0; index < 24; index++)
   \   00000014   0xE008             B.N      ??LCD_DrawChinaChar_0
    953            {
    954              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    955              for(j = 0; j < 3; j++)
    956              {
    957                  for(i = 0; i < 8; i++)
    958                  {
    959                    if((c[3*index + j] & (0x80 >> i)) == 0x00)
    960                    {
    961                        LCD_WriteRAM(0xF800);
    962                    }
    963                    else
    964                    {
    965                      LCD_WriteRAM(0xFFE0);
    966                    }
    967                  }   
    968               }
    969              Xaddress++;
   \                     ??LCD_DrawChinaChar_1: (+1)
   \   00000016   0xF109 0x0901      ADD      R9,R9,#+1
    970              ili9320_SetCursor(Ypos, Xaddress);
   \   0000001A   0xFA5F 0xF989      UXTB     R9,R9
   \   0000001E   0x4649             MOV      R1,R9
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       ili9320_SetCursor
   \   00000026   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_DrawChinaChar_0: (+1)
   \   00000028   0x2E18             CMP      R6,#+24
   \   0000002A   0xD220             BCS.N    ??LCD_DrawChinaChar_2
   \   0000002C   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   00000030   0x2700             MOVS     R7,#+0
   \   00000032   0xE000             B.N      ??LCD_DrawChinaChar_3
   \                     ??LCD_DrawChinaChar_4: (+1)
   \   00000034   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LCD_DrawChinaChar_3: (+1)
   \   00000036   0x2F03             CMP      R7,#+3
   \   00000038   0xD2ED             BCS.N    ??LCD_DrawChinaChar_1
   \   0000003A   0xF04F 0x0800      MOV      R8,#+0
   \   0000003E   0xE005             B.N      ??LCD_DrawChinaChar_5
   \                     ??LCD_DrawChinaChar_6: (+1)
   \   00000040   0xF64F 0x70E0      MOVW     R0,#+65504
   \   00000044   0x.... 0x....      BL       LCD_WriteRAM
   \                     ??LCD_DrawChinaChar_7: (+1)
   \   00000048   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??LCD_DrawChinaChar_5: (+1)
   \   0000004C   0xF1B8 0x0F08      CMP      R8,#+8
   \   00000050   0xD2F0             BCS.N    ??LCD_DrawChinaChar_4
   \   00000052   0xEB06 0x0046      ADD      R0,R6,R6, LSL #+1
   \   00000056   0x1838             ADDS     R0,R7,R0
   \   00000058   0x5D40             LDRB     R0,[R0, R5]
   \   0000005A   0x2180             MOVS     R1,#+128
   \   0000005C   0xFA41 0xF108      ASR      R1,R1,R8
   \   00000060   0x4208             TST      R0,R1
   \   00000062   0xD1ED             BNE.N    ??LCD_DrawChinaChar_6
   \   00000064   0xF44F 0x4078      MOV      R0,#+63488
   \   00000068   0x.... 0x....      BL       LCD_WriteRAM
   \   0000006C   0xE7EC             B.N      ??LCD_DrawChinaChar_7
    971            }
    972          }
   \                     ??LCD_DrawChinaChar_2: (+1)
   \   0000006E   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
    973          u16 LCD_RD_DATA(void)       //读回数据
    974          {
    975          	u16 ram;			//防止被优化
    976          	ram=LCD->LCD_RAM;	
   \                     LCD_RD_DATA: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable20_6  ;; 0x60020000
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
    977          	return ram;	 
   \   00000004   0x4770             BX       LR               ;; return
    978          }
    979          

   \                                 In section .text, align 2, keep-with-next
    980          u16 Read_ID(void)      //**读取SSD1963ID    
    981          {
   \                     Read_ID: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    982              u16 Lcd_ID;
    983              LCD_WrtReg(0XA1); 
   \   00000002   0x20A1             MOVS     R0,#+161
   \   00000004   0x.... 0x....      BL       LCD_WrtReg
    984              Lcd_ID=LCD_RD_DATA(); 
   \   00000008   0x.... 0x....      BL       LCD_RD_DATA
    985              Lcd_ID=LCD_RD_DATA();  //读回0X57 
   \   0000000C   0x.... 0x....      BL       LCD_RD_DATA
   \   00000010   0x4604             MOV      R4,R0
    986              Lcd_ID<<=8;     
    987              Lcd_ID|=LCD_RD_DATA();  //读回0X61
   \   00000012   0x.... 0x....      BL       LCD_RD_DATA
   \   00000016   0xEA40 0x2004      ORR      R0,R0,R4, LSL #+8
    988              return Lcd_ID;
   \   0000001A   0xB280             UXTH     R0,R0
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    989          }
    990          
    991          //获得当前的时钟频率

   \                                 In section .text, align 2, keep-with-next
    992          u16 get_lshift_freq(void)
    993          {	
   \                     get_lshift_freq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    994          	u16 data;
    995          	LCD_WrtReg(0xE7);
   \   00000002   0x20E7             MOVS     R0,#+231
   \   00000004   0x.... 0x....      BL       LCD_WrtReg
    996          	data=LCD_RD_DATA();
   \   00000008   0x.... 0x....      BL       LCD_RD_DATA
    997          	data=LCD_RD_DATA();
   \   0000000C   0x.... 0x....      BL       LCD_RD_DATA
    998          	data=LCD_RD_DATA();
    999          	return data;
   \   00000010   0xE8BD 0x4001      POP      {R0,LR}
   \   00000014   0x....             B.N      LCD_RD_DATA
   1000          }
   1001          
   1002          /****************************************************************************
   1003          * 名    称：void LCD_Initializtion()
   1004          * 功    能：初始化 神舟TFT LCD液晶屏的控制器
   1005          * 入口参数：无
   1006          * 出口参数：无
   1007          * 说    明：
   1008          * 调用方法：LCD_Initializtion();
   1009          ****************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1010          void LCD_Initializtion(void)
   1011          {
   \                     LCD_Initializtion: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   1012             volatile u16 i;
   1013             volatile u16 data1,data2,data3;
   1014             LCD_X_Init();  //初始化连接LCD彩色液晶屏上的管脚，比如这里连接的是FSMC总线
   \   00000002   0x.... 0x....      BL       LCD_X_Init
   1015          
   1016          
   1017          	 Lcd_SET();
   \   00000006   0x4C55             LDR.N    R4,??LCD_Initializtion_0  ;; 0x42220198
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x6020             STR      R0,[R4, #+0]
   1018          	 HAL_Delay(150);
   \   0000000C   0x2096             MOVS     R0,#+150
   \   0000000E   0x.... 0x....      BL       HAL_Delay
   1019          	 Lcd_RESET();
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6020             STR      R0,[R4, #+0]
   1020          	 HAL_Delay(150);	 
   \   00000016   0x2096             MOVS     R0,#+150
   \   00000018   0x.... 0x....      BL       HAL_Delay
   1021          	 Lcd_SET();
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x6020             STR      R0,[R4, #+0]
   1022          
   1023          	 //Delay(5); /* delay 50 ms */
   1024             {
   1025          	   HAL_Delay(200);
   \   00000020   0x20C8             MOVS     R0,#+200
   \   00000022   0x.... 0x....      BL       HAL_Delay
   1026          	   LCD_WriteReg(0x0000,0x0001);  
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      BL       LCD_WriteReg
   1027          	   HAL_Delay(200);//Delay(5); /* delay 50 ms */			//start internal osc
   \   0000002E   0x20C8             MOVS     R0,#+200
   \   00000030   0x.... 0x....      BL       HAL_Delay
   1028          	   DeviceCode = LCD_ReadReg(0x0000);
   \   00000034   0x4C4A             LDR.N    R4,??LCD_Initializtion_0+0x4
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       LCD_ReadReg
   \   0000003C   0x8020             STRH     R0,[R4, #+0]
   1029          	   HAL_Delay(200);//Delay(5); /* delay 50 ms */
   \   0000003E   0x20C8             MOVS     R0,#+200
   \   00000040   0x.... 0x....      BL       HAL_Delay
   1030             	 //DeviceCode=Read_ID();                                        //**读SSD1963ID
   1031          		 
   1032             }
   1033             //if(DeviceCode!=0x5761)DeviceCode = LCD_ReadReg(0x0000);  
   1034          
   1035          	 if(DeviceCode<0XFF||DeviceCode==0XFFFF||DeviceCode==0)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
   \   00000044   0x8820             LDRH     R0,[R4, #+0]
   \   00000046   0x4601             MOV      R1,R0
   \   00000048   0x29FF             CMP      R1,#+255
   \   0000004A   0xDB05             BLT.N    ??LCD_Initializtion_1
   \   0000004C   0xF64F 0x72FF      MOVW     R2,#+65535
   \   00000050   0x4291             CMP      R1,R2
   \   00000052   0xD001             BEQ.N    ??LCD_Initializtion_1
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD111             BNE.N    ??LCD_Initializtion_2
   1036          	 {
   1037          			LCD_WriteCommand(0XD3);				   
   \                     ??LCD_Initializtion_1: (+1)
   \   00000058   0x20D3             MOVS     R0,#+211
   \   0000005A   0x.... 0x....      BL       LCD_WriteCommand
   1038          			DeviceCode=ILI9488_ReadRAM();	//dummy read 	
   \   0000005E   0x.... 0x....      BL       ILI9488_ReadRAM
   \   00000062   0x8020             STRH     R0,[R4, #+0]
   1039           			DeviceCode=ILI9488_ReadRAM();	//读到0X00
   \   00000064   0x.... 0x....      BL       ILI9488_ReadRAM
   \   00000068   0x8020             STRH     R0,[R4, #+0]
   1040            		DeviceCode=ILI9488_ReadRAM();   	//读取93								   
   \   0000006A   0x.... 0x....      BL       ILI9488_ReadRAM
   \   0000006E   0x8020             STRH     R0,[R4, #+0]
   1041           			DeviceCode<<=8;
   \   00000070   0x0205             LSLS     R5,R0,#+8
   \   00000072   0x8025             STRH     R5,[R4, #+0]
   1042          			DeviceCode|=ILI9488_ReadRAM();  	//读取41 		 		
   \   00000074   0x.... 0x....      BL       ILI9488_ReadRAM
   \   00000078   0x4328             ORRS     R0,R0,R5
   \   0000007A   0x8020             STRH     R0,[R4, #+0]
   \                     ??LCD_Initializtion_2: (+1)
   \   0000007C   0x8820             LDRH     R0,[R4, #+0]
   \   0000007E   0xF249 0x3520      MOVW     R5,#+37664
   \   00000082   0x42A8             CMP      R0,R5
   \   00000084   0xD02E             BEQ.N    ??LCD_Initializtion_3
   \   00000086   0xF5B0 0x4F13      CMP      R0,#+37632
   \   0000008A   0xD02B             BEQ.N    ??LCD_Initializtion_3
   \   0000008C   0xF249 0x3131      MOVW     R1,#+37681
   \   00000090   0x4288             CMP      R0,R1
   \   00000092   0xD027             BEQ.N    ??LCD_Initializtion_3
   \   00000094   0xF648 0x1189      MOVW     R1,#+35209
   \   00000098   0x4288             CMP      R0,R1
   \   0000009A   0xD023             BEQ.N    ??LCD_Initializtion_3
   \   0000009C   0xF249 0x3125      MOVW     R1,#+37669
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD01F             BEQ.N    ??LCD_Initializtion_3
   \   000000A4   0xF249 0x3128      MOVW     R1,#+37672
   \   000000A8   0x4288             CMP      R0,R1
   \   000000AA   0xD01B             BEQ.N    ??LCD_Initializtion_3
   \   000000AC   0xF249 0x3141      MOVW     R1,#+37697
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xD017             BEQ.N    ??LCD_Initializtion_3
   \   000000B4   0xF241 0x5105      MOVW     R1,#+5381
   \   000000B8   0x4288             CMP      R0,R1
   \   000000BA   0xD013             BEQ.N    ??LCD_Initializtion_3
   \   000000BC   0xF249 0x4188      MOVW     R1,#+38024
   \   000000C0   0x4288             CMP      R0,R1
   \   000000C2   0xD00F             BEQ.N    ??LCD_Initializtion_3
   1043          	 }	
   1044          	 
   1045          	 if((DeviceCode != 0x9320)&&(DeviceCode != 0x9300)
   1046          	 	&&(DeviceCode != 0x9331)&&(DeviceCode != 0x8989)
   1047          	 	&&(DeviceCode != 0x9325)&&(DeviceCode != 0x9328)
   1048          	 	&&(DeviceCode != 0x9341)&&(DeviceCode != 0x1505)
   1049          	 	&&(DeviceCode != 0x9488))
   1050          	 {
   1051          	 			LCD_WriteCommand(0X04);						//读取0x8552			   
   \   000000C4   0x2004             MOVS     R0,#+4
   \   000000C6   0x.... 0x....      BL       LCD_WriteCommand
   1052          				ILI9488_ReadRAM(); 							//dummy read 	
   \   000000CA   0x.... 0x....      BL       ILI9488_ReadRAM
   1053          		 		ILI9488_ReadRAM();   	    			//读到0X00
   \   000000CE   0x.... 0x....      BL       ILI9488_ReadRAM
   1054          		  	DeviceCode=ILI9488_ReadRAM();   	
   \   000000D2   0x.... 0x....      BL       ILI9488_ReadRAM
   \   000000D6   0x8020             STRH     R0,[R4, #+0]
   1055          		 		DeviceCode<<=8;
   \   000000D8   0x0206             LSLS     R6,R0,#+8
   \   000000DA   0x8026             STRH     R6,[R4, #+0]
   1056          				DeviceCode|=ILI9488_ReadRAM(); 
   \   000000DC   0x.... 0x....      BL       ILI9488_ReadRAM
   \   000000E0   0x4330             ORRS     R0,R0,R6
   \   000000E2   0x8020             STRH     R0,[R4, #+0]
   \                     ??LCD_Initializtion_3: (+1)
   \   000000E4   0x8820             LDRH     R0,[R4, #+0]
   \   000000E6   0x42A8             CMP      R0,R5
   \   000000E8   0xD003             BEQ.N    ??LCD_Initializtion_4
   \   000000EA   0xF5B0 0x4F13      CMP      R0,#+37632
   \   000000EE   0xF040 0x80DD      BNE.W    ??LCD_Initializtion_5
   1057          	 }
   1058          
   1059             if(DeviceCode==0x9320||DeviceCode==0x9300)
   1060             {
   1061          		LCD_WriteReg(0x00,0x0000);
   \                     ??LCD_Initializtion_4: (+1)
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x4608             MOV      R0,R1
   \   000000F6   0x.... 0x....      BL       LCD_WriteReg
   1062          		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
   \   000000FA   0xF44F 0x7180      MOV      R1,#+256
   \   000000FE   0x2001             MOVS     R0,#+1
   \   00000100   0x.... 0x....      BL       LCD_WriteReg
   1063          		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
   \   00000104   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000108   0x2002             MOVS     R0,#+2
   \   0000010A   0x.... 0x....      BL       LCD_WriteReg
   1064          		LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.
   \   0000010E   0xF241 0x0118      MOVW     R1,#+4120
   \   00000112   0x2003             MOVS     R0,#+3
   \   00000114   0x.... 0x....      BL       LCD_WriteReg
   1065          	
   1066          		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0x2004             MOVS     R0,#+4
   \   0000011C   0x.... 0x....      BL       LCD_WriteReg
   1067          		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
   \   00000120   0xF240 0x2102      MOVW     R1,#+514
   \   00000124   0x2008             MOVS     R0,#+8
   \   00000126   0x.... 0x....      BL       LCD_WriteReg
   1068          		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
   \   0000012A   0x2100             MOVS     R1,#+0
   \   0000012C   0x2009             MOVS     R0,#+9
   \   0000012E   0x.... 0x....      BL       LCD_WriteReg
   1069          		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
   \   00000132   0x2100             MOVS     R1,#+0
   \   00000134   0x200A             MOVS     R0,#+10
   \   00000136   0x.... 0x....      BL       LCD_WriteReg
   1070          		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
   \   0000013A   0x2101             MOVS     R1,#+1
   \   0000013C   0x200C             MOVS     R0,#+12
   \   0000013E   0x.... 0x....      BL       LCD_WriteReg
   1071          		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
   \   00000142   0x2100             MOVS     R1,#+0
   \   00000144   0x200D             MOVS     R0,#+13
   \   00000146   0x.... 0x....      BL       LCD_WriteReg
   1072          		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
   \   0000014A   0x2100             MOVS     R1,#+0
   \   0000014C   0x200F             MOVS     R0,#+15
   \   0000014E   0x.... 0x....      BL       LCD_WriteReg
   1073          	
   1074          		for(i=50000;i>0;i--);
   \   00000152   0xF24C 0x3550      MOVW     R5,#+50000
   \   00000156   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   0000015A   0xE008             B.N      ??LCD_Initializtion_6
   \                     ??LCD_Initializtion_0:
   \   0000015C   0x42220198         DC32     0x42220198
   \   00000160   0x........         DC32     DeviceCode
   \                     ??LCD_Initializtion_7: (+1)
   \   00000164   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000168   0x1E40             SUBS     R0,R0,#+1
   \   0000016A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_6: (+1)
   \   0000016E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000172   0x2800             CMP      R0,#+0
   \   00000174   0xD1F6             BNE.N    ??LCD_Initializtion_7
   1075          		for(i=50000;i>0;i--);
   \   00000176   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   0000017A   0xE004             B.N      ??LCD_Initializtion_8
   \                     ??LCD_Initializtion_9: (+1)
   \   0000017C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000180   0x1E40             SUBS     R0,R0,#+1
   \   00000182   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_8: (+1)
   \   00000186   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000018A   0x2800             CMP      R0,#+0
   \   0000018C   0xD1F6             BNE.N    ??LCD_Initializtion_9
   1076          		LCD_WriteReg(0x07,0x0101);	//Display Contral.
   \   0000018E   0xF240 0x1101      MOVW     R1,#+257
   \   00000192   0x2007             MOVS     R0,#+7
   \   00000194   0x.... 0x....      BL       LCD_WriteReg
   1077          		for(i=50000;i>0;i--);
   \   00000198   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   0000019C   0xE004             B.N      ??LCD_Initializtion_10
   \                     ??LCD_Initializtion_11: (+1)
   \   0000019E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001A2   0x1E40             SUBS     R0,R0,#+1
   \   000001A4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_10: (+1)
   \   000001A8   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001AC   0x2800             CMP      R0,#+0
   \   000001AE   0xD1F6             BNE.N    ??LCD_Initializtion_11
   1078          		for(i=50000;i>0;i--);
   \   000001B0   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   000001B4   0xE004             B.N      ??LCD_Initializtion_12
   \                     ??LCD_Initializtion_13: (+1)
   \   000001B6   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001BA   0x1E40             SUBS     R0,R0,#+1
   \   000001BC   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_12: (+1)
   \   000001C0   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001C4   0x2800             CMP      R0,#+0
   \   000001C6   0xD1F6             BNE.N    ??LCD_Initializtion_13
   1079          	
   1080          		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
   \   000001C8   0xF44F 0x5186      MOV      R1,#+4288
   \   000001CC   0x2010             MOVS     R0,#+16
   \   000001CE   0x.... 0x....      BL       LCD_WriteReg
   1081          		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
   \   000001D2   0x2107             MOVS     R1,#+7
   \   000001D4   0x2011             MOVS     R0,#+17
   \   000001D6   0x.... 0x....      BL       LCD_WriteReg
   1082          		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));					//Power Control 3.(0x0138)
   \   000001DA   0xF44F 0x7188      MOV      R1,#+272
   \   000001DE   0x2012             MOVS     R0,#+18
   \   000001E0   0x.... 0x....      BL       LCD_WriteReg
   1083          		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
   \   000001E4   0xF44F 0x6130      MOV      R1,#+2816
   \   000001E8   0x2013             MOVS     R0,#+19
   \   000001EA   0x.... 0x....      BL       LCD_WriteReg
   1084          		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
   \   000001EE   0x2100             MOVS     R1,#+0
   \   000001F0   0x2029             MOVS     R0,#+41
   \   000001F2   0x.... 0x....      BL       LCD_WriteReg
   1085          	
   1086          		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
   \   000001F6   0xF244 0x0110      MOVW     R1,#+16400
   \   000001FA   0x202B             MOVS     R0,#+43
   \   000001FC   0x.... 0x....      BL       LCD_WriteReg
   1087          		
   1088          		LCD_WriteReg(0x50,0);		//Set X Start.
   \   00000200   0x2100             MOVS     R1,#+0
   \   00000202   0x2050             MOVS     R0,#+80
   \   00000204   0x.... 0x....      BL       LCD_WriteReg
   1089          		LCD_WriteReg(0x51,239);	//Set X End.
   \   00000208   0x21EF             MOVS     R1,#+239
   \   0000020A   0x2051             MOVS     R0,#+81
   \   0000020C   0x.... 0x....      BL       LCD_WriteReg
   1090          		LCD_WriteReg(0x52,0);		//Set Y Start.
   \   00000210   0x2100             MOVS     R1,#+0
   \   00000212   0x2052             MOVS     R0,#+82
   \   00000214   0x.... 0x....      BL       LCD_WriteReg
   1091          		LCD_WriteReg(0x53,319);	//Set Y End.
   \   00000218   0xF240 0x113F      MOVW     R1,#+319
   \   0000021C   0x2053             MOVS     R0,#+83
   \   0000021E   0x.... 0x....      BL       LCD_WriteReg
   1092          	
   1093          		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
   \   00000222   0xF44F 0x511C      MOV      R1,#+9984
   \   00000226   0x2060             MOVS     R0,#+96
   \   00000228   0x.... 0x....      BL       LCD_WriteReg
   1094          		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
   \   0000022C   0x2101             MOVS     R1,#+1
   \   0000022E   0x2061             MOVS     R0,#+97
   \   00000230   0x.... 0x....      BL       LCD_WriteReg
   1095          		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
   \   00000234   0x2100             MOVS     R1,#+0
   \   00000236   0x206A             MOVS     R0,#+106
   \   00000238   0x.... 0x....      BL       LCD_WriteReg
   1096          	
   1097          		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
   \   0000023C   0x2100             MOVS     R1,#+0
   \   0000023E   0x2080             MOVS     R0,#+128
   \   00000240   0x.... 0x....      BL       LCD_WriteReg
   1098          		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
   \   00000244   0x2100             MOVS     R1,#+0
   \   00000246   0x2081             MOVS     R0,#+129
   \   00000248   0x.... 0x....      BL       LCD_WriteReg
   1099          		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
   \   0000024C   0x2100             MOVS     R1,#+0
   \   0000024E   0x2082             MOVS     R0,#+130
   \   00000250   0x.... 0x....      BL       LCD_WriteReg
   1100          		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
   \   00000254   0x2100             MOVS     R1,#+0
   \   00000256   0x2083             MOVS     R0,#+131
   \   00000258   0x.... 0x....      BL       LCD_WriteReg
   1101          		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
   \   0000025C   0x2100             MOVS     R1,#+0
   \   0000025E   0x2084             MOVS     R0,#+132
   \   00000260   0x.... 0x....      BL       LCD_WriteReg
   1102          		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
   \   00000264   0x2100             MOVS     R1,#+0
   \   00000266   0x2085             MOVS     R0,#+133
   \   00000268   0x.... 0x....      BL       LCD_WriteReg
   1103          	
   1104          		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
   \   0000026C   0x2110             MOVS     R1,#+16
   \   0000026E   0x2090             MOVS     R0,#+144
   \   00000270   0x.... 0x....      BL       LCD_WriteReg
   1105          		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
   \   00000274   0x2100             MOVS     R1,#+0
   \   00000276   0x2092             MOVS     R0,#+146
   \   00000278   0x.... 0x....      BL       LCD_WriteReg
   1106          		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
   \   0000027C   0x2101             MOVS     R1,#+1
   \   0000027E   0x2093             MOVS     R0,#+147
   \   00000280   0x.... 0x....      BL       LCD_WriteReg
   1107          		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
   \   00000284   0xF44F 0x7188      MOV      R1,#+272
   \   00000288   0x2095             MOVS     R0,#+149
   \   0000028A   0x.... 0x....      BL       LCD_WriteReg
   1108          		LCD_WriteReg(0x97,(0<<8));	//
   \   0000028E   0x2100             MOVS     R1,#+0
   \   00000290   0x2097             MOVS     R0,#+151
   \   00000292   0x.... 0x....      BL       LCD_WriteReg
   1109          		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.	
   \   00000296   0x2100             MOVS     R1,#+0
   \   00000298   0x2098             MOVS     R0,#+152
   \   0000029A   0x.... 0x....      BL       LCD_WriteReg
   1110          		LCD_WriteReg(0x07,0x0173);	//(0x0173)
   \   0000029E   0xF240 0x1173      MOVW     R1,#+371
   \   000002A2   0x2007             MOVS     R0,#+7
   \   000002A4   0x.... 0x....      BL       LCD_WriteReg
   \   000002A8   0xF001 0xB83A      B.W      ??LCD_Initializtion_14
   1111          	}
   1112          	else if(DeviceCode==0x9331)
   \                     ??LCD_Initializtion_5: (+1)
   \   000002AC   0xF249 0x3131      MOVW     R1,#+37681
   \   000002B0   0x4288             CMP      R0,R1
   \   000002B2   0xF040 0x80F3      BNE.W    ??LCD_Initializtion_15
   1113          	{
   1114          		LCD_WriteReg(0x00E7, 0x1014);
   \   000002B6   0xF241 0x0114      MOVW     R1,#+4116
   \   000002BA   0x20E7             MOVS     R0,#+231
   \   000002BC   0x.... 0x....      BL       LCD_WriteReg
   1115          		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit   0x0100
   \   000002C0   0xF44F 0x7180      MOV      R1,#+256
   \   000002C4   0x2001             MOVS     R0,#+1
   \   000002C6   0x.... 0x....      BL       LCD_WriteReg
   1116          		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
   \   000002CA   0xF44F 0x7100      MOV      R1,#+512
   \   000002CE   0x2002             MOVS     R0,#+2
   \   000002D0   0x.... 0x....      BL       LCD_WriteReg
   1117          		LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.     0x1030
   \   000002D4   0xF241 0x0130      MOVW     R1,#+4144
   \   000002D8   0x2003             MOVS     R0,#+3
   \   000002DA   0x.... 0x....      BL       LCD_WriteReg
   1118          		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
   \   000002DE   0xF240 0x2102      MOVW     R1,#+514
   \   000002E2   0x2008             MOVS     R0,#+8
   \   000002E4   0x.... 0x....      BL       LCD_WriteReg
   1119          		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
   \   000002E8   0x2100             MOVS     R1,#+0
   \   000002EA   0x2009             MOVS     R0,#+9
   \   000002EC   0x.... 0x....      BL       LCD_WriteReg
   1120          		LCD_WriteReg(0x000A, 0x0000); // FMARK function
   \   000002F0   0x2100             MOVS     R1,#+0
   \   000002F2   0x200A             MOVS     R0,#+10
   \   000002F4   0x.... 0x....      BL       LCD_WriteReg
   1121          		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
   \   000002F8   0x2100             MOVS     R1,#+0
   \   000002FA   0x200C             MOVS     R0,#+12
   \   000002FC   0x.... 0x....      BL       LCD_WriteReg
   1122          		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
   \   00000300   0x2100             MOVS     R1,#+0
   \   00000302   0x200D             MOVS     R0,#+13
   \   00000304   0x.... 0x....      BL       LCD_WriteReg
   1123          		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity*/
   \   00000308   0x2100             MOVS     R1,#+0
   \   0000030A   0x200F             MOVS     R0,#+15
   \   0000030C   0x.... 0x....      BL       LCD_WriteReg
   1124          		//*************Power On sequence ****************//
   1125          		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
   \   00000310   0x2100             MOVS     R1,#+0
   \   00000312   0x2010             MOVS     R0,#+16
   \   00000314   0x.... 0x....      BL       LCD_WriteReg
   1126          		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
   \   00000318   0x2107             MOVS     R1,#+7
   \   0000031A   0x2011             MOVS     R0,#+17
   \   0000031C   0x.... 0x....      BL       LCD_WriteReg
   1127          		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
   \   00000320   0x2100             MOVS     R1,#+0
   \   00000322   0x2012             MOVS     R0,#+18
   \   00000324   0x.... 0x....      BL       LCD_WriteReg
   1128          		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
   \   00000328   0x2100             MOVS     R1,#+0
   \   0000032A   0x2013             MOVS     R0,#+19
   \   0000032C   0x.... 0x....      BL       LCD_WriteReg
   1129          		ili9320_Delay(200); // Dis-charge capacitor power voltage
   \   00000330   0x20C8             MOVS     R0,#+200
   \   00000332   0x.... 0x....      BL       ili9320_Delay
   1130          		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
   \   00000336   0xF241 0x6190      MOVW     R1,#+5776
   \   0000033A   0x2010             MOVS     R0,#+16
   \   0000033C   0x.... 0x....      BL       LCD_WriteReg
   1131          		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
   \   00000340   0xF240 0x2127      MOVW     R1,#+551
   \   00000344   0x2011             MOVS     R0,#+17
   \   00000346   0x.... 0x....      BL       LCD_WriteReg
   1132          		ili9320_Delay(50); // Delay 50ms
   \   0000034A   0x2032             MOVS     R0,#+50
   \   0000034C   0x.... 0x....      BL       ili9320_Delay
   1133          		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
   \   00000350   0x210C             MOVS     R1,#+12
   \   00000352   0x2012             MOVS     R0,#+18
   \   00000354   0x.... 0x....      BL       LCD_WriteReg
   1134          		ili9320_Delay(50); // Delay 50ms
   \   00000358   0x2032             MOVS     R0,#+50
   \   0000035A   0x.... 0x....      BL       ili9320_Delay
   1135          		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
   \   0000035E   0xF44F 0x6100      MOV      R1,#+2048
   \   00000362   0x2013             MOVS     R0,#+19
   \   00000364   0x.... 0x....      BL       LCD_WriteReg
   1136          		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
   \   00000368   0x2111             MOVS     R1,#+17
   \   0000036A   0x2029             MOVS     R0,#+41
   \   0000036C   0x.... 0x....      BL       LCD_WriteReg
   1137          		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
   \   00000370   0x210B             MOVS     R1,#+11
   \   00000372   0x202B             MOVS     R0,#+43
   \   00000374   0x.... 0x....      BL       LCD_WriteReg
   1138          		ili9320_Delay(50); // Delay 50ms
   \   00000378   0x2032             MOVS     R0,#+50
   \   0000037A   0x.... 0x....      BL       ili9320_Delay
   1139          		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
   \   0000037E   0x2100             MOVS     R1,#+0
   \   00000380   0x2020             MOVS     R0,#+32
   \   00000382   0x.... 0x....      BL       LCD_WriteReg
   1140          		LCD_WriteReg(0x0021, 0x0000); // GRAM Vertical Address
   \   00000386   0x2100             MOVS     R1,#+0
   \   00000388   0x2021             MOVS     R0,#+33
   \   0000038A   0x.... 0x....      BL       LCD_WriteReg
   1141          		// ----------- Adjust the Gamma Curve ----------//
   1142          		LCD_WriteReg(0x0030, 0x0000);
   \   0000038E   0x2100             MOVS     R1,#+0
   \   00000390   0x2030             MOVS     R0,#+48
   \   00000392   0x.... 0x....      BL       LCD_WriteReg
   1143          		LCD_WriteReg(0x0031, 0x0106);
   \   00000396   0xF44F 0x7183      MOV      R1,#+262
   \   0000039A   0x2031             MOVS     R0,#+49
   \   0000039C   0x.... 0x....      BL       LCD_WriteReg
   1144          		LCD_WriteReg(0x0032, 0x0000);
   \   000003A0   0x2100             MOVS     R1,#+0
   \   000003A2   0x2032             MOVS     R0,#+50
   \   000003A4   0x.... 0x....      BL       LCD_WriteReg
   1145          		LCD_WriteReg(0x0035, 0x0204);
   \   000003A8   0xF44F 0x7101      MOV      R1,#+516
   \   000003AC   0x2035             MOVS     R0,#+53
   \   000003AE   0x.... 0x....      BL       LCD_WriteReg
   1146          		LCD_WriteReg(0x0036, 0x160A);
   \   000003B2   0xF241 0x610A      MOVW     R1,#+5642
   \   000003B6   0x2036             MOVS     R0,#+54
   \   000003B8   0x.... 0x....      BL       LCD_WriteReg
   1147          		LCD_WriteReg(0x0037, 0x0707);
   \   000003BC   0xF240 0x7407      MOVW     R4,#+1799
   \   000003C0   0x4621             MOV      R1,R4
   \   000003C2   0x2037             MOVS     R0,#+55
   \   000003C4   0x.... 0x....      BL       LCD_WriteReg
   1148          		LCD_WriteReg(0x0038, 0x0106);
   \   000003C8   0xF44F 0x7183      MOV      R1,#+262
   \   000003CC   0x2038             MOVS     R0,#+56
   \   000003CE   0x.... 0x....      BL       LCD_WriteReg
   1149          		LCD_WriteReg(0x0039, 0x0707);
   \   000003D2   0x4621             MOV      R1,R4
   \   000003D4   0x2039             MOVS     R0,#+57
   \   000003D6   0x.... 0x....      BL       LCD_WriteReg
   1150          		LCD_WriteReg(0x003C, 0x0402);
   \   000003DA   0xF240 0x4102      MOVW     R1,#+1026
   \   000003DE   0x203C             MOVS     R0,#+60
   \   000003E0   0x.... 0x....      BL       LCD_WriteReg
   1151          		LCD_WriteReg(0x003D, 0x0C0F);
   \   000003E4   0xF640 0x410F      MOVW     R1,#+3087
   \   000003E8   0x203D             MOVS     R0,#+61
   \   000003EA   0x.... 0x....      BL       LCD_WriteReg
   1152          		//------------------ Set GRAM area ---------------//
   1153          		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
   \   000003EE   0x2100             MOVS     R1,#+0
   \   000003F0   0x2050             MOVS     R0,#+80
   \   000003F2   0x.... 0x....      BL       LCD_WriteReg
   1154          		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
   \   000003F6   0x21EF             MOVS     R1,#+239
   \   000003F8   0x2051             MOVS     R0,#+81
   \   000003FA   0x.... 0x....      BL       LCD_WriteReg
   1155          		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
   \   000003FE   0x2100             MOVS     R1,#+0
   \   00000400   0x2052             MOVS     R0,#+82
   \   00000402   0x.... 0x....      BL       LCD_WriteReg
   1156          		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
   \   00000406   0xF240 0x113F      MOVW     R1,#+319
   \   0000040A   0x2053             MOVS     R0,#+83
   \   0000040C   0x.... 0x....      BL       LCD_WriteReg
   1157          		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
   \   00000410   0xF44F 0x511C      MOV      R1,#+9984
   \   00000414   0x2060             MOVS     R0,#+96
   \   00000416   0x.... 0x....      BL       LCD_WriteReg
   1158          		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
   \   0000041A   0x2101             MOVS     R1,#+1
   \   0000041C   0x2061             MOVS     R0,#+97
   \   0000041E   0x.... 0x....      BL       LCD_WriteReg
   1159          		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
   \   00000422   0x2100             MOVS     R1,#+0
   \   00000424   0x206A             MOVS     R0,#+106
   \   00000426   0x.... 0x....      BL       LCD_WriteReg
   1160          		//-------------- Partial Display Control ---------//
   1161          		LCD_WriteReg(0x0080, 0x0000);
   \   0000042A   0x2100             MOVS     R1,#+0
   \   0000042C   0x2080             MOVS     R0,#+128
   \   0000042E   0x.... 0x....      BL       LCD_WriteReg
   1162          		LCD_WriteReg(0x0081, 0x0000);
   \   00000432   0x2100             MOVS     R1,#+0
   \   00000434   0x2081             MOVS     R0,#+129
   \   00000436   0x.... 0x....      BL       LCD_WriteReg
   1163          		LCD_WriteReg(0x0082, 0x0000);
   \   0000043A   0x2100             MOVS     R1,#+0
   \   0000043C   0x2082             MOVS     R0,#+130
   \   0000043E   0x.... 0x....      BL       LCD_WriteReg
   1164          		LCD_WriteReg(0x0083, 0x0000);
   \   00000442   0x2100             MOVS     R1,#+0
   \   00000444   0x2083             MOVS     R0,#+131
   \   00000446   0x.... 0x....      BL       LCD_WriteReg
   1165          		LCD_WriteReg(0x0084, 0x0000);
   \   0000044A   0x2100             MOVS     R1,#+0
   \   0000044C   0x2084             MOVS     R0,#+132
   \   0000044E   0x.... 0x....      BL       LCD_WriteReg
   1166          		LCD_WriteReg(0x0085, 0x0000);
   \   00000452   0x2100             MOVS     R1,#+0
   \   00000454   0x2085             MOVS     R0,#+133
   \   00000456   0x.... 0x....      BL       LCD_WriteReg
   1167          		//-------------- Panel Control -------------------//
   1168          		LCD_WriteReg(0x0090, 0x0010);
   \   0000045A   0x2110             MOVS     R1,#+16
   \   0000045C   0x2090             MOVS     R0,#+144
   \   0000045E   0x.... 0x....      BL       LCD_WriteReg
   1169          		LCD_WriteReg(0x0092, 0x0600);
   \   00000462   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000466   0x2092             MOVS     R0,#+146
   \   00000468   0x.... 0x....      BL       LCD_WriteReg
   1170          		LCD_WriteReg(0x0007,0x0021);		
   \   0000046C   0x2121             MOVS     R1,#+33
   \   0000046E   0x2007             MOVS     R0,#+7
   \   00000470   0x.... 0x....      BL       LCD_WriteReg
   1171          		ili9320_Delay(50);
   \   00000474   0x2032             MOVS     R0,#+50
   \   00000476   0x.... 0x....      BL       ili9320_Delay
   1172          		LCD_WriteReg(0x0007,0x0061);
   \   0000047A   0x2161             MOVS     R1,#+97
   \   0000047C   0x2007             MOVS     R0,#+7
   \   0000047E   0x.... 0x....      BL       LCD_WriteReg
   1173          		ili9320_Delay(50);
   \   00000482   0x2032             MOVS     R0,#+50
   \   00000484   0x.... 0x....      BL       ili9320_Delay
   1174          		LCD_WriteReg(0x0007,0x0133);  // 262K color and display ON
   \   00000488   0xF240 0x1133      MOVW     R1,#+307
   \   0000048C   0x2007             MOVS     R0,#+7
   \   0000048E   0x.... 0x....      BL       LCD_WriteReg
   1175          		ili9320_Delay(50);
   \   00000492   0x2032             MOVS     R0,#+50
   \   00000494   0x.... 0x....      BL       ili9320_Delay
   \   00000498   0xF000 0xBF42      B.W      ??LCD_Initializtion_14
   1176          	}
   1177          	else if(DeviceCode==0x8989)
   \                     ??LCD_Initializtion_15: (+1)
   \   0000049C   0xF648 0x1189      MOVW     R1,#+35209
   \   000004A0   0x4288             CMP      R0,R1
   \   000004A2   0xF040 0x80C8      BNE.W    ??LCD_Initializtion_16
   1178          	{   
   1179                    LCD_WriteReg(0x0000,0x0001);   //打开晶振         
   \   000004A6   0x2101             MOVS     R1,#+1
   \   000004A8   0x2000             MOVS     R0,#+0
   \   000004AA   0x.... 0x....      BL       LCD_WriteReg
   1180                    LCD_WriteReg(0x0010,0x0000);                     
   \   000004AE   0x2100             MOVS     R1,#+0
   \   000004B0   0x2010             MOVS     R0,#+16
   \   000004B2   0x.... 0x....      BL       LCD_WriteReg
   1181                    Delay(5); // Wait 30ms            
   \   000004B6   0x2005             MOVS     R0,#+5
   \   000004B8   0x.... 0x....      BL       Delay
   1182                    LCD_WriteReg(0x0007,0x0233);                
   \   000004BC   0xF240 0x2433      MOVW     R4,#+563
   \   000004C0   0x4621             MOV      R1,R4
   \   000004C2   0x2007             MOVS     R0,#+7
   \   000004C4   0x.... 0x....      BL       LCD_WriteReg
   1183                    LCD_WriteReg(0x0011,0x6078); //定义数据格式  16位色 		横屏 0x6058           
   \   000004C8   0xF246 0x0178      MOVW     R1,#+24696
   \   000004CC   0x2011             MOVS     R0,#+17
   \   000004CE   0x.... 0x....      BL       LCD_WriteReg
   1184                    LCD_WriteReg(0x0002,0x0600);       
   \   000004D2   0xF44F 0x61C0      MOV      R1,#+1536
   \   000004D6   0x2002             MOVS     R0,#+2
   \   000004D8   0x.... 0x....      BL       LCD_WriteReg
   1185                    LCD_WriteReg(0x0003,0xA8A4);//0x0804  
   \   000004DC   0xF64A 0x01A4      MOVW     R1,#+43172
   \   000004E0   0x2003             MOVS     R0,#+3
   \   000004E2   0x.... 0x....      BL       LCD_WriteReg
   1186                    LCD_WriteReg(0x000C,0x0000);
   \   000004E6   0x2100             MOVS     R1,#+0
   \   000004E8   0x200C             MOVS     R0,#+12
   \   000004EA   0x.... 0x....      BL       LCD_WriteReg
   1187                    LCD_WriteReg(0x000D,0x080C);       
   \   000004EE   0xF640 0x010C      MOVW     R1,#+2060
   \   000004F2   0x200D             MOVS     R0,#+13
   \   000004F4   0x.... 0x....      BL       LCD_WriteReg
   1188                    LCD_WriteReg(0x000E,0x2900);       
   \   000004F8   0xF44F 0x5124      MOV      R1,#+10496
   \   000004FC   0x200E             MOVS     R0,#+14
   \   000004FE   0x.... 0x....      BL       LCD_WriteReg
   1189                    LCD_WriteReg(0x001E,0x00B8);       
   \   00000502   0x21B8             MOVS     R1,#+184
   \   00000504   0x201E             MOVS     R0,#+30
   \   00000506   0x.... 0x....      BL       LCD_WriteReg
   1190                    LCD_WriteReg(0x0001,0x293F);
   \   0000050A   0xF642 0x113F      MOVW     R1,#+10559
   \   0000050E   0x2001             MOVS     R0,#+1
   \   00000510   0x.... 0x....      BL       LCD_WriteReg
   1191                    LCD_WriteReg(0x0010,0x0000);       
   \   00000514   0x2100             MOVS     R1,#+0
   \   00000516   0x2010             MOVS     R0,#+16
   \   00000518   0x.... 0x....      BL       LCD_WriteReg
   1192                    LCD_WriteReg(0x0005,0x0000);       
   \   0000051C   0x2100             MOVS     R1,#+0
   \   0000051E   0x2005             MOVS     R0,#+5
   \   00000520   0x.... 0x....      BL       LCD_WriteReg
   1193                    LCD_WriteReg(0x0006,0x0000);       
   \   00000524   0x2100             MOVS     R1,#+0
   \   00000526   0x2006             MOVS     R0,#+6
   \   00000528   0x.... 0x....      BL       LCD_WriteReg
   1194                    LCD_WriteReg(0x0016,0xEF1C);     
   \   0000052C   0xF64E 0x711C      MOVW     R1,#+61212
   \   00000530   0x2016             MOVS     R0,#+22
   \   00000532   0x.... 0x....      BL       LCD_WriteReg
   1195                    LCD_WriteReg(0x0017,0x0003);     
   \   00000536   0x2103             MOVS     R1,#+3
   \   00000538   0x2017             MOVS     R0,#+23
   \   0000053A   0x.... 0x....      BL       LCD_WriteReg
   1196                    LCD_WriteReg(0x0007,0x0233);		//0x0233       
   \   0000053E   0x4621             MOV      R1,R4
   \   00000540   0x2007             MOVS     R0,#+7
   \   00000542   0x.... 0x....      BL       LCD_WriteReg
   1197                    LCD_WriteReg(0x000B,0x0000|(3<<6));     
   \   00000546   0x21C0             MOVS     R1,#+192
   \   00000548   0x200B             MOVS     R0,#+11
   \   0000054A   0x.... 0x....      BL       LCD_WriteReg
   1198                    LCD_WriteReg(0x000F,0x0000);		//扫描开始地址
   \   0000054E   0x2100             MOVS     R1,#+0
   \   00000550   0x200F             MOVS     R0,#+15
   \   00000552   0x.... 0x....      BL       LCD_WriteReg
   1199          	  LCD_WriteReg(0x0041,0x0000);     
   \   00000556   0x2100             MOVS     R1,#+0
   \   00000558   0x2041             MOVS     R0,#+65
   \   0000055A   0x.... 0x....      BL       LCD_WriteReg
   1200          	  LCD_WriteReg(0x0042,0x0000);     
   \   0000055E   0x2100             MOVS     R1,#+0
   \   00000560   0x2042             MOVS     R0,#+66
   \   00000562   0x.... 0x....      BL       LCD_WriteReg
   1201          	  LCD_WriteReg(0x0048,0x0000);     
   \   00000566   0x2100             MOVS     R1,#+0
   \   00000568   0x2048             MOVS     R0,#+72
   \   0000056A   0x.... 0x....      BL       LCD_WriteReg
   1202          	  LCD_WriteReg(0x0049,0x013F);     
   \   0000056E   0xF240 0x143F      MOVW     R4,#+319
   \   00000572   0x4621             MOV      R1,R4
   \   00000574   0x2049             MOVS     R0,#+73
   \   00000576   0x.... 0x....      BL       LCD_WriteReg
   1203          	  LCD_WriteReg(0x004A,0x0000);     
   \   0000057A   0x2100             MOVS     R1,#+0
   \   0000057C   0x204A             MOVS     R0,#+74
   \   0000057E   0x.... 0x....      BL       LCD_WriteReg
   1204          	  LCD_WriteReg(0x004B,0x0000);     
   \   00000582   0x2100             MOVS     R1,#+0
   \   00000584   0x204B             MOVS     R0,#+75
   \   00000586   0x.... 0x....      BL       LCD_WriteReg
   1205          	  LCD_WriteReg(0x0044,0xEF00);     
   \   0000058A   0xF44F 0x416F      MOV      R1,#+61184
   \   0000058E   0x2044             MOVS     R0,#+68
   \   00000590   0x.... 0x....      BL       LCD_WriteReg
   1206          	  LCD_WriteReg(0x0045,0x0000);     
   \   00000594   0x2100             MOVS     R1,#+0
   \   00000596   0x2045             MOVS     R0,#+69
   \   00000598   0x.... 0x....      BL       LCD_WriteReg
   1207          	  LCD_WriteReg(0x0046,0x013F);     
   \   0000059C   0x4621             MOV      R1,R4
   \   0000059E   0x2046             MOVS     R0,#+70
   \   000005A0   0x.... 0x....      BL       LCD_WriteReg
   1208          	  LCD_WriteReg(0x0030,0x0707);     
   \   000005A4   0xF240 0x7107      MOVW     R1,#+1799
   \   000005A8   0x2030             MOVS     R0,#+48
   \   000005AA   0x.... 0x....      BL       LCD_WriteReg
   1209          	  LCD_WriteReg(0x0031,0x0204);     
   \   000005AE   0xF44F 0x7101      MOV      R1,#+516
   \   000005B2   0x2031             MOVS     R0,#+49
   \   000005B4   0x.... 0x....      BL       LCD_WriteReg
   1210          	  LCD_WriteReg(0x0032,0x0204);     
   \   000005B8   0xF44F 0x7101      MOV      R1,#+516
   \   000005BC   0x2032             MOVS     R0,#+50
   \   000005BE   0x.... 0x....      BL       LCD_WriteReg
   1211          	  LCD_WriteReg(0x0033,0x0502);     
   \   000005C2   0xF240 0x5402      MOVW     R4,#+1282
   \   000005C6   0x4621             MOV      R1,R4
   \   000005C8   0x2033             MOVS     R0,#+51
   \   000005CA   0x.... 0x....      BL       LCD_WriteReg
   1212          	  LCD_WriteReg(0x0034,0x0507);     
   \   000005CE   0xF240 0x5107      MOVW     R1,#+1287
   \   000005D2   0x2034             MOVS     R0,#+52
   \   000005D4   0x.... 0x....      BL       LCD_WriteReg
   1213          	  LCD_WriteReg(0x0035,0x0204);     
   \   000005D8   0xF44F 0x7101      MOV      R1,#+516
   \   000005DC   0x2035             MOVS     R0,#+53
   \   000005DE   0x.... 0x....      BL       LCD_WriteReg
   1214          	  LCD_WriteReg(0x0036,0x0204);     
   \   000005E2   0xF44F 0x7101      MOV      R1,#+516
   \   000005E6   0x2036             MOVS     R0,#+54
   \   000005E8   0x.... 0x....      BL       LCD_WriteReg
   1215          	  LCD_WriteReg(0x0037,0x0502);     
   \   000005EC   0x4621             MOV      R1,R4
   \   000005EE   0x2037             MOVS     R0,#+55
   \   000005F0   0x.... 0x....      BL       LCD_WriteReg
   1216          	  LCD_WriteReg(0x003A,0x0302);     
   \   000005F4   0xF240 0x3402      MOVW     R4,#+770
   \   000005F8   0x4621             MOV      R1,R4
   \   000005FA   0x203A             MOVS     R0,#+58
   \   000005FC   0x.... 0x....      BL       LCD_WriteReg
   1217          	  LCD_WriteReg(0x003B,0x0302);     
   \   00000600   0x4621             MOV      R1,R4
   \   00000602   0x203B             MOVS     R0,#+59
   \   00000604   0x.... 0x....      BL       LCD_WriteReg
   1218          	  LCD_WriteReg(0x0023,0x0000);     
   \   00000608   0x2100             MOVS     R1,#+0
   \   0000060A   0x2023             MOVS     R0,#+35
   \   0000060C   0x.... 0x....      BL       LCD_WriteReg
   1219          	  LCD_WriteReg(0x0024,0x0000);     
   \   00000610   0x2100             MOVS     R1,#+0
   \   00000612   0x2024             MOVS     R0,#+36
   \   00000614   0x.... 0x....      BL       LCD_WriteReg
   1220          	  LCD_WriteReg(0x0025,0x8000);     
   \   00000618   0xF44F 0x4100      MOV      R1,#+32768
   \   0000061C   0x2025             MOVS     R0,#+37
   \   0000061E   0x.... 0x....      BL       LCD_WriteReg
   1221          	  LCD_WriteReg(0x004e,0);        //列(X)首址0
   \   00000622   0x2100             MOVS     R1,#+0
   \   00000624   0x204E             MOVS     R0,#+78
   \   00000626   0x.... 0x....      BL       LCD_WriteReg
   1222          	  LCD_WriteReg(0x004f,0);        //行(Y)首址0*/
   \   0000062A   0x2100             MOVS     R1,#+0
   \   0000062C   0x204F             MOVS     R0,#+79
   \   0000062E   0x.... 0x....      BL       LCD_WriteReg
   \   00000632   0xF000 0xBE75      B.W      ??LCD_Initializtion_14
   1223          	}else if(DeviceCode==0x9325||DeviceCode==0x9328)
   \                     ??LCD_Initializtion_16: (+1)
   \   00000636   0xF249 0x3125      MOVW     R1,#+37669
   \   0000063A   0x4288             CMP      R0,R1
   \   0000063C   0xD004             BEQ.N    ??LCD_Initializtion_17
   \   0000063E   0xF249 0x3128      MOVW     R1,#+37672
   \   00000642   0x4288             CMP      R0,R1
   \   00000644   0xF040 0x8194      BNE.W    ??LCD_Initializtion_18
   1224          	{
   1225                    LCD_WriteReg(0x00e3,0x3008);
   \                     ??LCD_Initializtion_17: (+1)
   \   00000648   0xF243 0x0108      MOVW     R1,#+12296
   \   0000064C   0x20E3             MOVS     R0,#+227
   \   0000064E   0x.... 0x....      BL       LCD_WriteReg
   1226                    LCD_WriteReg(0x00e7,0x0012);
   \   00000652   0x2112             MOVS     R1,#+18
   \   00000654   0x20E7             MOVS     R0,#+231
   \   00000656   0x.... 0x....      BL       LCD_WriteReg
   1227                    LCD_WriteReg(0x00ef,0x1231);        //Set the internal vcore voltage
   \   0000065A   0xF241 0x2131      MOVW     R1,#+4657
   \   0000065E   0x20EF             MOVS     R0,#+239
   \   00000660   0x.... 0x....      BL       LCD_WriteReg
   1228                    // LCD_WriteReg(0x00e7,0x0010);      
   1229                    LCD_WriteReg(0x0000,0x0001);        //start internal osc
   \   00000664   0x2101             MOVS     R1,#+1
   \   00000666   0x2000             MOVS     R0,#+0
   \   00000668   0x.... 0x....      BL       LCD_WriteReg
   1230                    LCD_WriteReg(0x0001,0x0100);     
   \   0000066C   0xF44F 0x7180      MOV      R1,#+256
   \   00000670   0x2001             MOVS     R0,#+1
   \   00000672   0x.... 0x....      BL       LCD_WriteReg
   1231                    LCD_WriteReg(0x0002,0x0700);        //Driving Wave Control                   
   \   00000676   0xF44F 0x61E0      MOV      R1,#+1792
   \   0000067A   0x2002             MOVS     R0,#+2
   \   0000067C   0x.... 0x....      BL       LCD_WriteReg
   1232                    LCD_WriteReg(0x0003,(1<<12)|(0<<5)|(1<<4)|(1<<3) );// );    (1<<12)|(1<<4)|(1 << 3) //65K 
   \   00000680   0xF241 0x0118      MOVW     R1,#+4120
   \   00000684   0x2003             MOVS     R0,#+3
   \   00000686   0x.... 0x....      BL       LCD_WriteReg
   1233                    LCD_WriteReg(0x0004,0x0000);                                   
   \   0000068A   0x2100             MOVS     R1,#+0
   \   0000068C   0x2004             MOVS     R0,#+4
   \   0000068E   0x.... 0x....      BL       LCD_WriteReg
   1234                    LCD_WriteReg(0x0008,0x0207);               
   \   00000692   0xF240 0x2107      MOVW     R1,#+519
   \   00000696   0x2008             MOVS     R0,#+8
   \   00000698   0x.... 0x....      BL       LCD_WriteReg
   1235                    LCD_WriteReg(0x0009,0x0000);         
   \   0000069C   0x2100             MOVS     R1,#+0
   \   0000069E   0x2009             MOVS     R0,#+9
   \   000006A0   0x.... 0x....      BL       LCD_WriteReg
   1236                    LCD_WriteReg(0x000a,0x0000);        //display setting         
   \   000006A4   0x2100             MOVS     R1,#+0
   \   000006A6   0x200A             MOVS     R0,#+10
   \   000006A8   0x.... 0x....      BL       LCD_WriteReg
   1237                    LCD_WriteReg(0x000c,0x0001);        //display setting          
   \   000006AC   0x2101             MOVS     R1,#+1
   \   000006AE   0x200C             MOVS     R0,#+12
   \   000006B0   0x.... 0x....      BL       LCD_WriteReg
   1238                    LCD_WriteReg(0x000d,0x0000);        //0f3c          
   \   000006B4   0x2100             MOVS     R1,#+0
   \   000006B6   0x200D             MOVS     R0,#+13
   \   000006B8   0x.... 0x....      BL       LCD_WriteReg
   1239                    LCD_WriteReg(0x000f,0x0000);
   \   000006BC   0x2100             MOVS     R1,#+0
   \   000006BE   0x200F             MOVS     R0,#+15
   \   000006C0   0x.... 0x....      BL       LCD_WriteReg
   1240                    //Power On sequence //
   1241                    LCD_WriteReg(0x0010,0x0000);   
   \   000006C4   0x2100             MOVS     R1,#+0
   \   000006C6   0x2010             MOVS     R0,#+16
   \   000006C8   0x.... 0x....      BL       LCD_WriteReg
   1242                    LCD_WriteReg(0x0011,0x0007);
   \   000006CC   0x2107             MOVS     R1,#+7
   \   000006CE   0x2011             MOVS     R0,#+17
   \   000006D0   0x.... 0x....      BL       LCD_WriteReg
   1243                    LCD_WriteReg(0x0012,0x0000);                                                                 
   \   000006D4   0x2100             MOVS     R1,#+0
   \   000006D6   0x2012             MOVS     R0,#+18
   \   000006D8   0x.... 0x....      BL       LCD_WriteReg
   1244                    LCD_WriteReg(0x0013,0x0000);                 
   \   000006DC   0x2100             MOVS     R1,#+0
   \   000006DE   0x2013             MOVS     R0,#+19
   \   000006E0   0x.... 0x....      BL       LCD_WriteReg
   1245                    for(i=50000;i>0;i--);
   \   000006E4   0xF24C 0x3550      MOVW     R5,#+50000
   \   000006E8   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   000006EC   0xE004             B.N      ??LCD_Initializtion_19
   \                     ??LCD_Initializtion_20: (+1)
   \   000006EE   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000006F2   0x1E40             SUBS     R0,R0,#+1
   \   000006F4   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_19: (+1)
   \   000006F8   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000006FC   0x2800             CMP      R0,#+0
   \   000006FE   0xD1F6             BNE.N    ??LCD_Initializtion_20
   1246          		for(i=50000;i>0;i--);
   \   00000700   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   00000704   0xE004             B.N      ??LCD_Initializtion_21
   \                     ??LCD_Initializtion_22: (+1)
   \   00000706   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000070A   0x1E40             SUBS     R0,R0,#+1
   \   0000070C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_21: (+1)
   \   00000710   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000714   0x2800             CMP      R0,#+0
   \   00000716   0xD1F6             BNE.N    ??LCD_Initializtion_22
   1247                    LCD_WriteReg(0x0010,0x1590);   
   \   00000718   0xF241 0x5190      MOVW     R1,#+5520
   \   0000071C   0x2010             MOVS     R0,#+16
   \   0000071E   0x.... 0x....      BL       LCD_WriteReg
   1248                    LCD_WriteReg(0x0011,0x0227);
   \   00000722   0xF240 0x2127      MOVW     R1,#+551
   \   00000726   0x2011             MOVS     R0,#+17
   \   00000728   0x.... 0x....      BL       LCD_WriteReg
   1249                    for(i=50000;i>0;i--);
   \   0000072C   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   00000730   0xE004             B.N      ??LCD_Initializtion_23
   \                     ??LCD_Initializtion_24: (+1)
   \   00000732   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000736   0x1E40             SUBS     R0,R0,#+1
   \   00000738   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_23: (+1)
   \   0000073C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000740   0x2800             CMP      R0,#+0
   \   00000742   0xD1F6             BNE.N    ??LCD_Initializtion_24
   1250          		for(i=50000;i>0;i--);
   \   00000744   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   00000748   0xE004             B.N      ??LCD_Initializtion_25
   \                     ??LCD_Initializtion_26: (+1)
   \   0000074A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000074E   0x1E40             SUBS     R0,R0,#+1
   \   00000750   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_25: (+1)
   \   00000754   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000758   0x2800             CMP      R0,#+0
   \   0000075A   0xD1F6             BNE.N    ??LCD_Initializtion_26
   1251                    LCD_WriteReg(0x0012,0x009c);                  
   \   0000075C   0x219C             MOVS     R1,#+156
   \   0000075E   0x2012             MOVS     R0,#+18
   \   00000760   0x.... 0x....      BL       LCD_WriteReg
   1252                    for(i=50000;i>0;i--);
   \   00000764   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   00000768   0xE004             B.N      ??LCD_Initializtion_27
   \                     ??LCD_Initializtion_28: (+1)
   \   0000076A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000076E   0x1E40             SUBS     R0,R0,#+1
   \   00000770   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_27: (+1)
   \   00000774   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000778   0x2800             CMP      R0,#+0
   \   0000077A   0xD1F6             BNE.N    ??LCD_Initializtion_28
   1253          		for(i=50000;i>0;i--);
   \   0000077C   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   00000780   0xE004             B.N      ??LCD_Initializtion_29
   \                     ??LCD_Initializtion_30: (+1)
   \   00000782   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000786   0x1E40             SUBS     R0,R0,#+1
   \   00000788   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_29: (+1)
   \   0000078C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000790   0x2800             CMP      R0,#+0
   \   00000792   0xD1F6             BNE.N    ??LCD_Initializtion_30
   1254                    LCD_WriteReg(0x0013,0x1900);   
   \   00000794   0xF44F 0x51C8      MOV      R1,#+6400
   \   00000798   0x2013             MOVS     R0,#+19
   \   0000079A   0x.... 0x....      BL       LCD_WriteReg
   1255                    LCD_WriteReg(0x0029,0x0023);
   \   0000079E   0x2123             MOVS     R1,#+35
   \   000007A0   0x2029             MOVS     R0,#+41
   \   000007A2   0x.... 0x....      BL       LCD_WriteReg
   1256                    LCD_WriteReg(0x002b,0x000e);
   \   000007A6   0x210E             MOVS     R1,#+14
   \   000007A8   0x202B             MOVS     R0,#+43
   \   000007AA   0x.... 0x....      BL       LCD_WriteReg
   1257                    for(i=50000;i>0;i--);
   \   000007AE   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   000007B2   0xE004             B.N      ??LCD_Initializtion_31
   \                     ??LCD_Initializtion_32: (+1)
   \   000007B4   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000007B8   0x1E40             SUBS     R0,R0,#+1
   \   000007BA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_31: (+1)
   \   000007BE   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000007C2   0x2800             CMP      R0,#+0
   \   000007C4   0xD1F6             BNE.N    ??LCD_Initializtion_32
   1258          		for(i=50000;i>0;i--);
   \   000007C6   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   000007CA   0xE004             B.N      ??LCD_Initializtion_33
   \                     ??LCD_Initializtion_34: (+1)
   \   000007CC   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000007D0   0x1E40             SUBS     R0,R0,#+1
   \   000007D2   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_33: (+1)
   \   000007D6   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000007DA   0x2800             CMP      R0,#+0
   \   000007DC   0xD1F6             BNE.N    ??LCD_Initializtion_34
   1259                    LCD_WriteReg(0x0020,0x0000);                                                            
   \   000007DE   0x2100             MOVS     R1,#+0
   \   000007E0   0x2020             MOVS     R0,#+32
   \   000007E2   0x.... 0x....      BL       LCD_WriteReg
   1260                    LCD_WriteReg(0x0021,0x0000);           
   \   000007E6   0x2100             MOVS     R1,#+0
   \   000007E8   0x2021             MOVS     R0,#+33
   \   000007EA   0x.... 0x....      BL       LCD_WriteReg
   1261          ///////////////////////////////////////////////////////      
   1262                    for(i=50000;i>0;i--);
   \   000007EE   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   000007F2   0xE004             B.N      ??LCD_Initializtion_35
   \                     ??LCD_Initializtion_36: (+1)
   \   000007F4   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000007F8   0x1E40             SUBS     R0,R0,#+1
   \   000007FA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_35: (+1)
   \   000007FE   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000802   0x2800             CMP      R0,#+0
   \   00000804   0xD1F6             BNE.N    ??LCD_Initializtion_36
   1263          		for(i=50000;i>0;i--);
   \   00000806   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   0000080A   0xE004             B.N      ??LCD_Initializtion_37
   \                     ??LCD_Initializtion_38: (+1)
   \   0000080C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000810   0x1E40             SUBS     R0,R0,#+1
   \   00000812   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_37: (+1)
   \   00000816   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000081A   0x2800             CMP      R0,#+0
   \   0000081C   0xD1F6             BNE.N    ??LCD_Initializtion_38
   1264                    LCD_WriteReg(0x0030,0x0007); 
   \   0000081E   0x2107             MOVS     R1,#+7
   \   00000820   0x2030             MOVS     R0,#+48
   \   00000822   0x.... 0x....      BL       LCD_WriteReg
   1265                    LCD_WriteReg(0x0031,0x0707);   
   \   00000826   0xF240 0x7107      MOVW     R1,#+1799
   \   0000082A   0x2031             MOVS     R0,#+49
   \   0000082C   0x.... 0x....      BL       LCD_WriteReg
   1266                    LCD_WriteReg(0x0032,0x0006);
   \   00000830   0x2106             MOVS     R1,#+6
   \   00000832   0x2032             MOVS     R0,#+50
   \   00000834   0x.... 0x....      BL       LCD_WriteReg
   1267                    LCD_WriteReg(0x0035,0x0704);
   \   00000838   0xF240 0x7104      MOVW     R1,#+1796
   \   0000083C   0x2035             MOVS     R0,#+53
   \   0000083E   0x.... 0x....      BL       LCD_WriteReg
   1268                    LCD_WriteReg(0x0036,0x1f04); 
   \   00000842   0xF641 0x7104      MOVW     R1,#+7940
   \   00000846   0x2036             MOVS     R0,#+54
   \   00000848   0x.... 0x....      BL       LCD_WriteReg
   1269                    LCD_WriteReg(0x0037,0x0004);
   \   0000084C   0x2104             MOVS     R1,#+4
   \   0000084E   0x2037             MOVS     R0,#+55
   \   00000850   0x.... 0x....      BL       LCD_WriteReg
   1270                    LCD_WriteReg(0x0038,0x0000);        
   \   00000854   0x2100             MOVS     R1,#+0
   \   00000856   0x2038             MOVS     R0,#+56
   \   00000858   0x.... 0x....      BL       LCD_WriteReg
   1271                    LCD_WriteReg(0x0039,0x0706);     
   \   0000085C   0xF240 0x7106      MOVW     R1,#+1798
   \   00000860   0x2039             MOVS     R0,#+57
   \   00000862   0x.... 0x....      BL       LCD_WriteReg
   1272                    LCD_WriteReg(0x003c,0x0701);
   \   00000866   0xF240 0x7101      MOVW     R1,#+1793
   \   0000086A   0x203C             MOVS     R0,#+60
   \   0000086C   0x.... 0x....      BL       LCD_WriteReg
   1273                    LCD_WriteReg(0x003d,0x000f);
   \   00000870   0x210F             MOVS     R1,#+15
   \   00000872   0x203D             MOVS     R0,#+61
   \   00000874   0x.... 0x....      BL       LCD_WriteReg
   1274                    for(i=50000;i>0;i--);
   \   00000878   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   0000087C   0xE004             B.N      ??LCD_Initializtion_39
   \                     ??LCD_Initializtion_40: (+1)
   \   0000087E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000882   0x1E40             SUBS     R0,R0,#+1
   \   00000884   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_39: (+1)
   \   00000888   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000088C   0x2800             CMP      R0,#+0
   \   0000088E   0xD1F6             BNE.N    ??LCD_Initializtion_40
   1275          		for(i=50000;i>0;i--);
   \   00000890   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \   00000894   0xE004             B.N      ??LCD_Initializtion_41
   \                     ??LCD_Initializtion_42: (+1)
   \   00000896   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000089A   0x1E40             SUBS     R0,R0,#+1
   \   0000089C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_41: (+1)
   \   000008A0   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000008A4   0x2800             CMP      R0,#+0
   \   000008A6   0xD1F6             BNE.N    ??LCD_Initializtion_42
   1276                    LCD_WriteReg(0x0050,0x0000);        
   \   000008A8   0x2100             MOVS     R1,#+0
   \   000008AA   0x2050             MOVS     R0,#+80
   \   000008AC   0x.... 0x....      BL       LCD_WriteReg
   1277                    LCD_WriteReg(0x0051,0x00ef);   
   \   000008B0   0x21EF             MOVS     R1,#+239
   \   000008B2   0x2051             MOVS     R0,#+81
   \   000008B4   0x.... 0x....      BL       LCD_WriteReg
   1278                    LCD_WriteReg(0x0052,0x0000);     
   \   000008B8   0x2100             MOVS     R1,#+0
   \   000008BA   0x2052             MOVS     R0,#+82
   \   000008BC   0x.... 0x....      BL       LCD_WriteReg
   1279                    LCD_WriteReg(0x0053,0x013f);
   \   000008C0   0xF240 0x113F      MOVW     R1,#+319
   \   000008C4   0x2053             MOVS     R0,#+83
   \   000008C6   0x.... 0x....      BL       LCD_WriteReg
   1280                    LCD_WriteReg(0x0060,0xa700);        
   \   000008CA   0xF44F 0x4127      MOV      R1,#+42752
   \   000008CE   0x2060             MOVS     R0,#+96
   \   000008D0   0x.... 0x....      BL       LCD_WriteReg
   1281                    LCD_WriteReg(0x0061,0x0001); 
   \   000008D4   0x2101             MOVS     R1,#+1
   \   000008D6   0x2061             MOVS     R0,#+97
   \   000008D8   0x.... 0x....      BL       LCD_WriteReg
   1282                    LCD_WriteReg(0x006a,0x0000);
   \   000008DC   0x2100             MOVS     R1,#+0
   \   000008DE   0x206A             MOVS     R0,#+106
   \   000008E0   0x.... 0x....      BL       LCD_WriteReg
   1283                    LCD_WriteReg(0x0080,0x0000);
   \   000008E4   0x2100             MOVS     R1,#+0
   \   000008E6   0x2080             MOVS     R0,#+128
   \   000008E8   0x.... 0x....      BL       LCD_WriteReg
   1284                    LCD_WriteReg(0x0081,0x0000);
   \   000008EC   0x2100             MOVS     R1,#+0
   \   000008EE   0x2081             MOVS     R0,#+129
   \   000008F0   0x.... 0x....      BL       LCD_WriteReg
   1285                    LCD_WriteReg(0x0082,0x0000);
   \   000008F4   0x2100             MOVS     R1,#+0
   \   000008F6   0x2082             MOVS     R0,#+130
   \   000008F8   0x.... 0x....      BL       LCD_WriteReg
   1286                    LCD_WriteReg(0x0083,0x0000);
   \   000008FC   0x2100             MOVS     R1,#+0
   \   000008FE   0x2083             MOVS     R0,#+131
   \   00000900   0x.... 0x....      BL       LCD_WriteReg
   1287                    LCD_WriteReg(0x0084,0x0000);
   \   00000904   0x2100             MOVS     R1,#+0
   \   00000906   0x2084             MOVS     R0,#+132
   \   00000908   0x.... 0x....      BL       LCD_WriteReg
   1288                    LCD_WriteReg(0x0085,0x0000);
   \   0000090C   0x2100             MOVS     R1,#+0
   \   0000090E   0x2085             MOVS     R0,#+133
   \   00000910   0x.... 0x....      BL       LCD_WriteReg
   1289                
   1290                    LCD_WriteReg(0x0090,0x0010);     
   \   00000914   0x2110             MOVS     R1,#+16
   \   00000916   0x2090             MOVS     R0,#+144
   \   00000918   0x.... 0x....      BL       LCD_WriteReg
   1291                    LCD_WriteReg(0x0092,0x0600);  
   \   0000091C   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000920   0x2092             MOVS     R0,#+146
   \   00000922   0x.... 0x....      BL       LCD_WriteReg
   1292                    if(DeviceCode==0x9328)
   \   00000926   0x8820             LDRH     R0,[R4, #+0]
   \   00000928   0xF249 0x3128      MOVW     R1,#+37672
   \   0000092C   0x4288             CMP      R0,R1
   \   0000092E   0xD110             BNE.N    ??LCD_Initializtion_43
   1293                    {   
   1294                      LCD_WriteReg(0x0093,0x0003);
   \   00000930   0x2103             MOVS     R1,#+3
   \   00000932   0x2093             MOVS     R0,#+147
   \   00000934   0x.... 0x....      BL       LCD_WriteReg
   1295                      LCD_WriteReg(0x0095,0x0110);
   \   00000938   0xF44F 0x7188      MOV      R1,#+272
   \   0000093C   0x2095             MOVS     R0,#+149
   \   0000093E   0x.... 0x....      BL       LCD_WriteReg
   1296                      LCD_WriteReg(0x0097,0x0000);        
   \   00000942   0x2100             MOVS     R1,#+0
   \   00000944   0x2097             MOVS     R0,#+151
   \   00000946   0x.... 0x....      BL       LCD_WriteReg
   1297                      LCD_WriteReg(0x0098,0x0000);  
   \   0000094A   0x2100             MOVS     R1,#+0
   \   0000094C   0x2098             MOVS     R0,#+152
   \   0000094E   0x.... 0x....      BL       LCD_WriteReg
   1298                    }
   1299                    //display on sequence     
   1300                    LCD_WriteReg(0x0007,0x0133);
   \                     ??LCD_Initializtion_43: (+1)
   \   00000952   0xF240 0x1133      MOVW     R1,#+307
   \   00000956   0x2007             MOVS     R0,#+7
   \   00000958   0x.... 0x....      BL       LCD_WriteReg
   1301              
   1302                    LCD_WriteReg(0x0020,0x0000);                                                            
   \   0000095C   0x2100             MOVS     R1,#+0
   \   0000095E   0x2020             MOVS     R0,#+32
   \   00000960   0x.... 0x....      BL       LCD_WriteReg
   1303                    LCD_WriteReg(0x0021,0x0000);
   \   00000964   0x2100             MOVS     R1,#+0
   \   00000966   0x2021             MOVS     R0,#+33
   \   00000968   0x.... 0x....      BL       LCD_WriteReg
   \   0000096C   0xF000 0xBCD8      B.W      ??LCD_Initializtion_14
   1304                    }else if(DeviceCode==0x5761){                              //**SSD1963
   \                     ??LCD_Initializtion_18: (+1)
   \   00000970   0xF245 0x7161      MOVW     R1,#+22369
   \   00000974   0x4288             CMP      R0,R1
   \   00000976   0xF040 0x80FC      BNE.W    ??LCD_Initializtion_44
   1305                    #if 1
   1306          	   for(i=0;i<100;i++)
   \   0000097A   0x2000             MOVS     R0,#+0
   \   0000097C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LCD_Initializtion_45: (+1)
   \   00000980   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000984   0x2864             CMP      R0,#+100
   \   00000986   0xF280 0x84CB      BGE.W    ??LCD_Initializtion_14
   1307          	   {
   1308          	          LCD_WrtReg(0x002b);	
   \   0000098A   0x202B             MOVS     R0,#+43
   \   0000098C   0x.... 0x....      BL       LCD_WrtReg
   1309          	          LCD_WrtRAM(0);
   \   00000990   0x2000             MOVS     R0,#+0
   \   00000992   0x.... 0x....      BL       LCD_WrtRAM
   1310          
   1311          	          //for(i=50000;i>0;i--); // delay 50 ms 
   1312          	          HAL_Delay(50);
   \   00000996   0x2032             MOVS     R0,#+50
   \   00000998   0x.... 0x....      BL       HAL_Delay
   1313          	          LCD_WrtReg(0x00E2);					//PLL multiplier, set PLL clock to 120M
   \   0000099C   0x20E2             MOVS     R0,#+226
   \   0000099E   0x.... 0x....      BL       LCD_WrtReg
   1314          	          //**LCD_WrtRAM(0x0023);					//N=0x36 for 6.5M, 0x23 for 10M crystal
   1315          	          LCD_WrtRAM(0x002C);
   \   000009A2   0x202C             MOVS     R0,#+44
   \   000009A4   0x.... 0x....      BL       LCD_WrtRAM
   1316          	          //LCD_WrtRAM(0x0024);
   1317          	          LCD_WrtRAM(0x0002);
   \   000009A8   0x2002             MOVS     R0,#+2
   \   000009AA   0x.... 0x....      BL       LCD_WrtRAM
   1318          	          LCD_WrtRAM(0x0004);
   \   000009AE   0x2004             MOVS     R0,#+4
   \   000009B0   0x.... 0x....      BL       LCD_WrtRAM
   1319          		   HAL_Delay(50);
   \   000009B4   0x2032             MOVS     R0,#+50
   \   000009B6   0x.... 0x....      BL       HAL_Delay
   1320          		   
   1321          	          LCD_WrtReg(0x00E0);					//PLL enable
   \   000009BA   0x20E0             MOVS     R0,#+224
   \   000009BC   0x.... 0x....      BL       LCD_WrtReg
   1322          	          LCD_WrtRAM(0x0001);
   \   000009C0   0x2001             MOVS     R0,#+1
   \   000009C2   0x.... 0x....      BL       LCD_WrtRAM
   1323          	          HAL_Delay(1);
   \   000009C6   0x2001             MOVS     R0,#+1
   \   000009C8   0x.... 0x....      BL       HAL_Delay
   1324          	          LCD_WrtReg(0x00E0);
   \   000009CC   0x20E0             MOVS     R0,#+224
   \   000009CE   0x.... 0x....      BL       LCD_WrtReg
   1325          	          LCD_WrtRAM(0x0003);
   \   000009D2   0x2003             MOVS     R0,#+3
   \   000009D4   0x.... 0x....      BL       LCD_WrtRAM
   1326          	          HAL_Delay(7);
   \   000009D8   0x2007             MOVS     R0,#+7
   \   000009DA   0x.... 0x....      BL       HAL_Delay
   1327          	          LCD_WrtReg(0x0001);  					//软复位
   \   000009DE   0x2001             MOVS     R0,#+1
   \   000009E0   0x.... 0x....      BL       LCD_WrtReg
   1328          	          HAL_Delay(12);
   \   000009E4   0x200C             MOVS     R0,#+12
   \   000009E6   0x.... 0x....      BL       HAL_Delay
   1329          	          LCD_WrtReg(0x00E6);					//设置像素频率
   \   000009EA   0x20E6             MOVS     R0,#+230
   \   000009EC   0x.... 0x....      BL       LCD_WrtReg
   1330          	  //	  LCD_WriteRAM(0x0001);
   1331          	  //	  LCD_WriteRAM(0x0033);
   1332          	  //	  LCD_WriteRAM(0x0032);
   1333          	          LCD_WrtRAM(0x0004);
   \   000009F0   0x2004             MOVS     R0,#+4
   \   000009F2   0x.... 0x....      BL       LCD_WrtRAM
   1334          	          //LCD_WrtRAM(0x0005);
   1335          	          LCD_WrtRAM(0x0093);
   \   000009F6   0x2093             MOVS     R0,#+147
   \   000009F8   0x.... 0x....      BL       LCD_WrtRAM
   1336          	          LCD_WrtRAM(0x00E0);
   \   000009FC   0x20E0             MOVS     R0,#+224
   \   000009FE   0x.... 0x....      BL       LCD_WrtRAM
   1337          		   HAL_Delay(50);
   \   00000A02   0x2032             MOVS     R0,#+50
   \   00000A04   0x.... 0x....      BL       HAL_Delay
   1338          		   
   1339          	          LCD_WrtReg(0x00B0);					//设置 LCD模式 
   \   00000A08   0x20B0             MOVS     R0,#+176
   \   00000A0A   0x.... 0x....      BL       LCD_WrtReg
   1340          	          LCD_WrtRAM(0x0020);                                   //24 位模式
   \   00000A0E   0x2020             MOVS     R0,#+32
   \   00000A10   0x.... 0x....      BL       LCD_WrtRAM
   1341          	          //**LCD_WrtRAM(0x0000);                                   
   1342          	          LCD_WrtRAM(0x0000);                                   //TFT  模式
   \   00000A14   0x2000             MOVS     R0,#+0
   \   00000A16   0x.... 0x....      BL       LCD_WrtRAM
   1343          	          LCD_WrtRAM((HDP>>8)&0X00FF);			//设置 LCD水平像素
   \   00000A1A   0x2003             MOVS     R0,#+3
   \   00000A1C   0x.... 0x....      BL       LCD_WrtRAM
   1344          	          LCD_WrtRAM(HDP&0X00FF);
   \   00000A20   0x201F             MOVS     R0,#+31
   \   00000A22   0x.... 0x....      BL       LCD_WrtRAM
   1345          	          LCD_WrtRAM((VDP>>8)&0X00FF);			//设置 LCD垂直像素
   \   00000A26   0x2001             MOVS     R0,#+1
   \   00000A28   0x.... 0x....      BL       LCD_WrtRAM
   1346          	          LCD_WrtRAM(VDP&0X00FF);
   \   00000A2C   0x20DF             MOVS     R0,#+223
   \   00000A2E   0x.... 0x....      BL       LCD_WrtRAM
   1347          	          LCD_WrtRAM(0x0000);
   \   00000A32   0x2000             MOVS     R0,#+0
   \   00000A34   0x.... 0x....      BL       LCD_WrtRAM
   1348          		   HAL_Delay(5);
   \   00000A38   0x2005             MOVS     R0,#+5
   \   00000A3A   0x.... 0x....      BL       HAL_Delay
   1349          	          LCD_WrtReg(0x00B4);					//Set horizontal period
   \   00000A3E   0x20B4             MOVS     R0,#+180
   \   00000A40   0x.... 0x....      BL       LCD_WrtReg
   1350          	          LCD_WrtRAM((HT>>8)&0X00FF); 			//Set HT
   \   00000A44   0x2003             MOVS     R0,#+3
   \   00000A46   0x.... 0x....      BL       LCD_WrtRAM
   1351          	          LCD_WrtRAM(HT&0X00FF);
   \   00000A4A   0x20E8             MOVS     R0,#+232
   \   00000A4C   0x.... 0x....      BL       LCD_WrtRAM
   1352          	          LCD_WrtRAM((HPS>>8)&0X00FF);			//Set HPS
   \   00000A50   0x2000             MOVS     R0,#+0
   \   00000A52   0x.... 0x....      BL       LCD_WrtRAM
   1353          	          LCD_WrtRAM(HPS&0X00FF);
   \   00000A56   0x2033             MOVS     R0,#+51
   \   00000A58   0x.... 0x....      BL       LCD_WrtRAM
   1354          	          LCD_WrtRAM(HPW);						//Set HPW
   \   00000A5C   0x2008             MOVS     R0,#+8
   \   00000A5E   0x.... 0x....      BL       LCD_WrtRAM
   1355          	          LCD_WrtRAM((LPS>>8)&0X00FF); 			//Set HPS
   \   00000A62   0x2000             MOVS     R0,#+0
   \   00000A64   0x.... 0x....      BL       LCD_WrtRAM
   1356          	          LCD_WrtRAM(LPS&0X00FF);
   \   00000A68   0x2003             MOVS     R0,#+3
   \   00000A6A   0x.... 0x....      BL       LCD_WrtRAM
   1357          	          LCD_WrtRAM(0x0000);
   \   00000A6E   0x2000             MOVS     R0,#+0
   \   00000A70   0x.... 0x....      BL       LCD_WrtRAM
   1358          
   1359          	          LCD_WrtReg(0x00B6);					//Set vertical period 
   \   00000A74   0x20B6             MOVS     R0,#+182
   \   00000A76   0x.... 0x....      BL       LCD_WrtReg
   1360          	          LCD_WrtRAM((VT>>8)&0X00FF);   		//Set VT
   \   00000A7A   0x2002             MOVS     R0,#+2
   \   00000A7C   0x.... 0x....      BL       LCD_WrtRAM
   1361          	          LCD_WrtRAM(VT&0X00FF);
   \   00000A80   0x2012             MOVS     R0,#+18
   \   00000A82   0x.... 0x....      BL       LCD_WrtRAM
   1362          	          LCD_WrtRAM((VPS>>8)&0X00FF); 			//Set VPS
   \   00000A86   0x2000             MOVS     R0,#+0
   \   00000A88   0x.... 0x....      BL       LCD_WrtRAM
   1363          	          LCD_WrtRAM(VPS&0X00FF);
   \   00000A8C   0x2018             MOVS     R0,#+24
   \   00000A8E   0x.... 0x....      BL       LCD_WrtRAM
   1364          	          LCD_WrtRAM(VPW);						//Set VPW
   \   00000A92   0x2003             MOVS     R0,#+3
   \   00000A94   0x.... 0x....      BL       LCD_WrtRAM
   1365          	          LCD_WrtRAM((FPS>>8)&0X00FF);			//Set FPS
   \   00000A98   0x2000             MOVS     R0,#+0
   \   00000A9A   0x.... 0x....      BL       LCD_WrtRAM
   1366          	          LCD_WrtRAM(FPS&0X00FF);
   \   00000A9E   0x2017             MOVS     R0,#+23
   \   00000AA0   0x.... 0x....      BL       LCD_WrtRAM
   1367          		   HAL_Delay(5);
   \   00000AA4   0x2005             MOVS     R0,#+5
   \   00000AA6   0x.... 0x....      BL       HAL_Delay
   1368          	          //=============================================
   1369          
   1370          	          //=============================================
   1371          	          LCD_WrtReg(0x00BA);
   \   00000AAA   0x20BA             MOVS     R0,#+186
   \   00000AAC   0x.... 0x....      BL       LCD_WrtReg
   1372          	          LCD_WrtRAM(0x0005);//0x000F);    //GPIO[3:0] out 1
   \   00000AB0   0x2005             MOVS     R0,#+5
   \   00000AB2   0x.... 0x....      BL       LCD_WrtRAM
   1373          
   1374          	          LCD_WrtReg(0x00B8);
   \   00000AB6   0x20B8             MOVS     R0,#+184
   \   00000AB8   0x.... 0x....      BL       LCD_WrtReg
   1375          	          LCD_WrtRAM(0x0007);    //GPIO3=input, GPIO[2:0]=output
   \   00000ABC   0x2007             MOVS     R0,#+7
   \   00000ABE   0x.... 0x....      BL       LCD_WrtRAM
   1376          	          LCD_WrtRAM(0x0001);    //GPIO0 normal
   \   00000AC2   0x2001             MOVS     R0,#+1
   \   00000AC4   0x.... 0x....      BL       LCD_WrtRAM
   1377          
   1378          	          LCD_WrtReg(0x0036); //rotation
   \   00000AC8   0x2036             MOVS     R0,#+54
   \   00000ACA   0x.... 0x....      BL       LCD_WrtReg
   1379          	          LCD_WrtRAM(0x0000);
   \   00000ACE   0x2000             MOVS     R0,#+0
   \   00000AD0   0x.... 0x....      BL       LCD_WrtRAM
   1380          			  
   1381          		   
   1382          	          HAL_Delay(50);
   \   00000AD4   0x2032             MOVS     R0,#+50
   \   00000AD6   0x.... 0x....      BL       HAL_Delay
   1383          		   //ili9320_Clear(0x000000);
   1384          
   1385          	          LCD_WrtReg(0x00BE); //set PWM for B/L
   \   00000ADA   0x20BE             MOVS     R0,#+190
   \   00000ADC   0x.... 0x....      BL       LCD_WrtReg
   1386          	          LCD_WrtRAM(0x0006);
   \   00000AE0   0x2006             MOVS     R0,#+6
   \   00000AE2   0x.... 0x....      BL       LCD_WrtRAM
   1387          	          LCD_WrtRAM(0x0080);
   \   00000AE6   0x2080             MOVS     R0,#+128
   \   00000AE8   0x.... 0x....      BL       LCD_WrtRAM
   1388          		
   1389          	          LCD_WrtRAM(0x0001);
   \   00000AEC   0x2001             MOVS     R0,#+1
   \   00000AEE   0x.... 0x....      BL       LCD_WrtRAM
   1390          	          LCD_WrtRAM(0x00f0);
   \   00000AF2   0x20F0             MOVS     R0,#+240
   \   00000AF4   0x.... 0x....      BL       LCD_WrtRAM
   1391          	          LCD_WrtRAM(0x0000);
   \   00000AF8   0x2000             MOVS     R0,#+0
   \   00000AFA   0x.... 0x....      BL       LCD_WrtRAM
   1392          	          LCD_WrtRAM(0x0000);
   \   00000AFE   0x2000             MOVS     R0,#+0
   \   00000B00   0x.... 0x....      BL       LCD_WrtRAM
   1393          
   1394          	          LCD_WrtReg(0x00d0); 
   \   00000B04   0x20D0             MOVS     R0,#+208
   \   00000B06   0x.... 0x....      BL       LCD_WrtReg
   1395          	          LCD_WrtRAM(0x000d);
   \   00000B0A   0x200D             MOVS     R0,#+13
   \   00000B0C   0x.... 0x....      BL       LCD_WrtRAM
   1396          	   
   1397          	          LCD_WrtReg(0x00F0); //设置 SSD1963与 CPU接口为 16bit
   \   00000B10   0x20F0             MOVS     R0,#+240
   \   00000B12   0x.... 0x....      BL       LCD_WrtReg
   1398          	          LCD_WrtRAM(0x0003); //16-bit(565 format) data for 16bpp 
   \   00000B16   0x2003             MOVS     R0,#+3
   \   00000B18   0x.... 0x....      BL       LCD_WrtRAM
   1399          		   ili9320_Clear(0x000000);	                            //显示
   \   00000B1C   0x2000             MOVS     R0,#+0
   \   00000B1E   0x.... 0x....      BL       ili9320_Clear
   1400          	          LCD_WrtReg(0x0029); //开启显示
   \   00000B22   0x2029             MOVS     R0,#+41
   \   00000B24   0x.... 0x....      BL       LCD_WrtReg
   1401          
   1402          	          //lcd_data_bus_test();
   1403          	          ili9320_Clear(0x000000);	                            //显示
   \   00000B28   0x2000             MOVS     R0,#+0
   \   00000B2A   0x.... 0x....      BL       ili9320_Clear
   1404          	                 LCD_WrtReg(0xE7);
   \   00000B2E   0x20E7             MOVS     R0,#+231
   \   00000B30   0x.... 0x....      BL       LCD_WrtReg
   1405          			   data1=LCD_RD_DATA();
   \   00000B34   0x.... 0x....      BL       LCD_RD_DATA
   \   00000B38   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1406          			   data2=LCD_RD_DATA();
   \   00000B3C   0x.... 0x....      BL       LCD_RD_DATA
   \   00000B40   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1407          			   data3=LCD_RD_DATA();
   \   00000B44   0x.... 0x....      BL       LCD_RD_DATA
   \   00000B48   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   1408          			   if(data1==0x0004 && data2==0x0093 && data3==0x00E0){
   \   00000B4C   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000B50   0x2804             CMP      R0,#+4
   \   00000B52   0xD108             BNE.N    ??LCD_Initializtion_46
   \   00000B54   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000B58   0x2893             CMP      R0,#+147
   \   00000B5A   0xD104             BNE.N    ??LCD_Initializtion_46
   \   00000B5C   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000B60   0x28E0             CMP      R0,#+224
   \   00000B62   0xF000 0x83DD      BEQ.W    ??LCD_Initializtion_14
   1409          			   	  break;
   1410          			   }
   1411          			   else{
   1412          			   	  /*_LCD_WrtReg(0x00E6);					//设置像素频率
   1413          			         LCD_WrtRAM(0x0004);
   1414          			         LCD_WrtRAM(0x0093);
   1415          			         LCD_WrtRAM(0x00E0);*/
   1416          			         #if defined(TFT70)
   1417          			         RESET_1963=0;
   1418              				  RESET_1963=1;
   1419          							#endif
   1420          			         continue;
   1421          			   }
   1422          	   }
   \                     ??LCD_Initializtion_46: (+1)
   \   00000B66   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000B6A   0x1C40             ADDS     R0,R0,#+1
   \   00000B6C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000B70   0xE706             B.N      ??LCD_Initializtion_45
   1423          	   #else
   1424          	   	LCD_WrtReg(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
   1425          		LCD_WrtRAM(0x1D);		//2?êy1 
   1426          		LCD_WrtRAM(0x02);		//2?êy2 Divider M = 2, PLL = 300/(M+1) = 100MHz
   1427          		LCD_WrtRAM(0x04);		//2?êy3 Validate M and N values   
   1428          		HAL_Delay(1);
   1429          		LCD_WrtReg(0xE0);		// Start PLL command
   1430          		LCD_WrtRAM(0x01);		// enable PLL
   1431          		HAL_Delay(10);
   1432          		LCD_WrtReg(0xE0);		// Start PLL command again
   1433          		LCD_WrtRAM(0x03);		// now, use PLL output as system clock	
   1434          		HAL_Delay(12);  
   1435          		LCD_WrtReg(0x01);		//èí?′??
   1436          		HAL_Delay(10);
   1437          		
   1438          		LCD_WrtReg(0xE6);		//éè???????μ?ê,33Mhz
   1439          		LCD_WrtRAM(0x2F);
   1440          		LCD_WrtRAM(0xFF);
   1441          		LCD_WrtRAM(0xFF);
   1442          		
   1443          		LCD_WrtReg(0xB0);		//éè??LCD?￡ê?
   1444          		LCD_WrtRAM(0x20);		//24???￡ê?
   1445          		LCD_WrtRAM(0x00);		//TFT ?￡ê? 
   1446          	
   1447          		LCD_WrtRAM((SSD_HOR_RESOLUTION-1)>>8);//éè??LCD????????
   1448          		LCD_WrtRAM(SSD_HOR_RESOLUTION-1);		 
   1449          		LCD_WrtRAM((SSD_VER_RESOLUTION-1)>>8);//éè??LCD′1?±????
   1450          		LCD_WrtRAM(SSD_VER_RESOLUTION-1);		 
   1451          		LCD_WrtRAM(0x00);		//RGBDòáD 
   1452          		
   1453          		LCD_WrtReg(0xB4);		//Set horizontal period
   1454          		LCD_WrtRAM((SSD_HT-1)>>8);
   1455          		LCD_WrtRAM(SSD_HT-1);
   1456          		LCD_WrtRAM(SSD_HPS>>8);
   1457          		LCD_WrtRAM(SSD_HPS);
   1458          		LCD_WrtRAM(SSD_HOR_PULSE_WIDTH-1);
   1459          		LCD_WrtRAM(0x00);
   1460          		LCD_WrtRAM(0x00);
   1461          		LCD_WrtRAM(0x00);
   1462          		LCD_WrtReg(0xB6);		//Set vertical period
   1463          		LCD_WrtRAM((SSD_VT-1)>>8);
   1464          		LCD_WrtRAM(SSD_VT-1);
   1465          		LCD_WrtRAM(SSD_VPS>>8);
   1466          		LCD_WrtRAM(SSD_VPS);
   1467          		LCD_WrtRAM(SSD_VER_FRONT_PORCH-1);
   1468          		LCD_WrtRAM(0x00);
   1469          		LCD_WrtRAM(0x00);
   1470          		
   1471          		LCD_WrtReg(0xF0);	//éè??SSD1963ó?CPU?ó?ú?a16bit  
   1472          		LCD_WrtRAM(0x03);	//16-bit(565 format) data for 16bpp 
   1473          
   1474          		LCD_WrtReg(0x29);	//?a????ê?
   1475          		//éè??PWMê?3?  ±31aí¨1y????±è?éμ÷ 
   1476          		LCD_WrtReg(0xD0);	//éè??×??ˉ°×??oaDBC
   1477          		LCD_WrtRAM(0x00);	//disable
   1478          	
   1479          		LCD_WrtReg(0xBE);	//????PWMê?3?
   1480          		LCD_WrtRAM(0x05);	//1éè??PWM?μ?ê
   1481          		LCD_WrtRAM(0xFE);	//2éè??PWM????±è
   1482          		LCD_WrtRAM(0x01);	//3éè??C
   1483          		LCD_WrtRAM(0x00);	//4éè??D
   1484          		LCD_WrtRAM(0x00);	//5éè??E 
   1485          		LCD_WrtRAM(0x00);	//6éè??F 
   1486          		
   1487          		LCD_WrtReg(0xB8);	//éè??GPIO????
   1488          		LCD_WrtRAM(0x03);	//2??IO?úéè??3éê?3?
   1489          		LCD_WrtRAM(0x01);	//GPIOê1ó??y3￡μ?IO1|?ü 
   1490          		LCD_WrtReg(0xBA);
   1491          		LCD_WrtRAM(0X01);	//GPIO[1:0]=01,????LCD・??ò
   1492          		
   1493          		//LCD_SSD_BackLightSet(100);//±31aéè???a×?áá
   1494          		LCD_WrtReg(0xBE);	//????PWMê?3?
   1495          		LCD_WrtRAM(0x05);	//1éè??PWM?μ?ê
   1496          		LCD_WrtRAM(100*2.55);//2éè??PWM????±è
   1497          		LCD_WrtRAM(0x01);	//3éè??C
   1498          		LCD_WrtRAM(0xFF);	//4éè??D
   1499          		LCD_WrtRAM(0x00);	//5éè??E
   1500          		LCD_WrtRAM(0x00);	//6éè??F
   1501          			 
   1502          	//LCD_Display_Dir(0);		//??è??aêú?á
   1503          			//lcddev.dir=1;	//oá?á
   1504          			/*lcddev.wramcmd=0X2C;	//éè??D′è?GRAMμ???á? 
   1505          			lcddev.setxcmd=0X2A;	//éè??D′X×?±ê??á?
   1506          			lcddev.setycmd=0X2B;	//éè??D′Y×?±ê??á?
   1507          			lcddev.width=800;		//éè???í?è800
   1508          			lcddev.height=480;		//éè?????è480*/
   1509          	//LCD_LED=1;				//μ?áá±31a
   1510          	//LCD_Clear(WHITE);
   1511          	   LCD_WrtReg(0x0029); //开启显示
   1512                    //lcd_data_bus_test();
   1513                    ili9320_Clear(0x000000);
   1514          	#endif
   1515          	}
   1516          		else if(DeviceCode==0x9488)
   \                     ??LCD_Initializtion_44: (+1)
   \   00000B72   0xF249 0x4188      MOVW     R1,#+38024
   \   00000B76   0x4288             CMP      R0,R1
   \   00000B78   0xF040 0x80DF      BNE.W    ??LCD_Initializtion_47
   1517          		{
   1518          		#if 1
   1519          			//************* Start Initial Sequence **********//
   1520          			ILI9488_WriteCmd(0x00E0); 
   \   00000B7C   0x20E0             MOVS     R0,#+224
   \   00000B7E   0x.... 0x....      BL       ILI9488_WriteCmd
   1521          			ILI9488_WriteData(0x0000); 
   \   00000B82   0x2000             MOVS     R0,#+0
   \   00000B84   0x.... 0x....      BL       ILI9488_WriteData
   1522          			ILI9488_WriteData(0x0007); 
   \   00000B88   0x2007             MOVS     R0,#+7
   \   00000B8A   0x.... 0x....      BL       ILI9488_WriteData
   1523          			ILI9488_WriteData(0x000f); 
   \   00000B8E   0x200F             MOVS     R0,#+15
   \   00000B90   0x.... 0x....      BL       ILI9488_WriteData
   1524          			ILI9488_WriteData(0x000D); 
   \   00000B94   0x200D             MOVS     R0,#+13
   \   00000B96   0x.... 0x....      BL       ILI9488_WriteData
   1525          			ILI9488_WriteData(0x001B); 
   \   00000B9A   0x201B             MOVS     R0,#+27
   \   00000B9C   0x.... 0x....      BL       ILI9488_WriteData
   1526          			ILI9488_WriteData(0x000A); 
   \   00000BA0   0x200A             MOVS     R0,#+10
   \   00000BA2   0x.... 0x....      BL       ILI9488_WriteData
   1527          			ILI9488_WriteData(0x003c); 
   \   00000BA6   0x203C             MOVS     R0,#+60
   \   00000BA8   0x.... 0x....      BL       ILI9488_WriteData
   1528          			ILI9488_WriteData(0x0078); 
   \   00000BAC   0x2078             MOVS     R0,#+120
   \   00000BAE   0x.... 0x....      BL       ILI9488_WriteData
   1529          			ILI9488_WriteData(0x004A); 
   \   00000BB2   0x204A             MOVS     R0,#+74
   \   00000BB4   0x.... 0x....      BL       ILI9488_WriteData
   1530          			ILI9488_WriteData(0x0007); 
   \   00000BB8   0x2007             MOVS     R0,#+7
   \   00000BBA   0x.... 0x....      BL       ILI9488_WriteData
   1531          			ILI9488_WriteData(0x000E); 
   \   00000BBE   0x200E             MOVS     R0,#+14
   \   00000BC0   0x.... 0x....      BL       ILI9488_WriteData
   1532          			ILI9488_WriteData(0x0009); 
   \   00000BC4   0x2009             MOVS     R0,#+9
   \   00000BC6   0x.... 0x....      BL       ILI9488_WriteData
   1533          			ILI9488_WriteData(0x001B); 
   \   00000BCA   0x201B             MOVS     R0,#+27
   \   00000BCC   0x.... 0x....      BL       ILI9488_WriteData
   1534          			ILI9488_WriteData(0x001e); 
   \   00000BD0   0x201E             MOVS     R0,#+30
   \   00000BD2   0x.... 0x....      BL       ILI9488_WriteData
   1535          			ILI9488_WriteData(0x000f);  
   \   00000BD6   0x200F             MOVS     R0,#+15
   \   00000BD8   0x.... 0x....      BL       ILI9488_WriteData
   1536          
   1537          			ILI9488_WriteCmd(0x00E1); 
   \   00000BDC   0x20E1             MOVS     R0,#+225
   \   00000BDE   0x.... 0x....      BL       ILI9488_WriteCmd
   1538          			ILI9488_WriteData(0x0000); 
   \   00000BE2   0x2000             MOVS     R0,#+0
   \   00000BE4   0x.... 0x....      BL       ILI9488_WriteData
   1539          			ILI9488_WriteData(0x0022); 
   \   00000BE8   0x2022             MOVS     R0,#+34
   \   00000BEA   0x.... 0x....      BL       ILI9488_WriteData
   1540          			ILI9488_WriteData(0x0024); 
   \   00000BEE   0x2024             MOVS     R0,#+36
   \   00000BF0   0x.... 0x....      BL       ILI9488_WriteData
   1541          			ILI9488_WriteData(0x0006); 
   \   00000BF4   0x2006             MOVS     R0,#+6
   \   00000BF6   0x.... 0x....      BL       ILI9488_WriteData
   1542          			ILI9488_WriteData(0x0012); 
   \   00000BFA   0x2012             MOVS     R0,#+18
   \   00000BFC   0x.... 0x....      BL       ILI9488_WriteData
   1543          			ILI9488_WriteData(0x0007); 
   \   00000C00   0x2007             MOVS     R0,#+7
   \   00000C02   0x.... 0x....      BL       ILI9488_WriteData
   1544          			ILI9488_WriteData(0x0036); 
   \   00000C06   0x2036             MOVS     R0,#+54
   \   00000C08   0x.... 0x....      BL       ILI9488_WriteData
   1545          			ILI9488_WriteData(0x0047); 
   \   00000C0C   0x2047             MOVS     R0,#+71
   \   00000C0E   0x.... 0x....      BL       ILI9488_WriteData
   1546          			ILI9488_WriteData(0x0047); 
   \   00000C12   0x2047             MOVS     R0,#+71
   \   00000C14   0x.... 0x....      BL       ILI9488_WriteData
   1547          			ILI9488_WriteData(0x0006); 
   \   00000C18   0x2006             MOVS     R0,#+6
   \   00000C1A   0x.... 0x....      BL       ILI9488_WriteData
   1548          			ILI9488_WriteData(0x000a); 
   \   00000C1E   0x200A             MOVS     R0,#+10
   \   00000C20   0x.... 0x....      BL       ILI9488_WriteData
   1549          			ILI9488_WriteData(0x0007); 
   \   00000C24   0x2007             MOVS     R0,#+7
   \   00000C26   0x.... 0x....      BL       ILI9488_WriteData
   1550          			ILI9488_WriteData(0x0030); 
   \   00000C2A   0x2030             MOVS     R0,#+48
   \   00000C2C   0x.... 0x....      BL       ILI9488_WriteData
   1551          			ILI9488_WriteData(0x0037); 
   \   00000C30   0x2037             MOVS     R0,#+55
   \   00000C32   0x.... 0x....      BL       ILI9488_WriteData
   1552          			ILI9488_WriteData(0x000f); 
   \   00000C36   0x200F             MOVS     R0,#+15
   \   00000C38   0x.... 0x....      BL       ILI9488_WriteData
   1553          
   1554          			ILI9488_WriteCmd(0x00C0); 
   \   00000C3C   0x20C0             MOVS     R0,#+192
   \   00000C3E   0x.... 0x....      BL       ILI9488_WriteCmd
   1555          			ILI9488_WriteData(0x0010); 
   \   00000C42   0x2010             MOVS     R0,#+16
   \   00000C44   0x.... 0x....      BL       ILI9488_WriteData
   1556          			ILI9488_WriteData(0x0010); 
   \   00000C48   0x2010             MOVS     R0,#+16
   \   00000C4A   0x.... 0x....      BL       ILI9488_WriteData
   1557          
   1558          			ILI9488_WriteCmd(0x00C1); 
   \   00000C4E   0x20C1             MOVS     R0,#+193
   \   00000C50   0x.... 0x....      BL       ILI9488_WriteCmd
   1559          			ILI9488_WriteData(0x0041); 
   \   00000C54   0x2041             MOVS     R0,#+65
   \   00000C56   0x.... 0x....      BL       ILI9488_WriteData
   1560          
   1561          			LCD_WriteCommand(0x00C5); 
   \   00000C5A   0x20C5             MOVS     R0,#+197
   \   00000C5C   0x.... 0x....      BL       LCD_WriteCommand
   1562          			ILI9488_WriteData(0x0000); 
   \   00000C60   0x2000             MOVS     R0,#+0
   \   00000C62   0x.... 0x....      BL       ILI9488_WriteData
   1563          			ILI9488_WriteData(0x0022); 
   \   00000C66   0x2022             MOVS     R0,#+34
   \   00000C68   0x.... 0x....      BL       ILI9488_WriteData
   1564          			ILI9488_WriteData(0x0080); 
   \   00000C6C   0x2080             MOVS     R0,#+128
   \   00000C6E   0x.... 0x....      BL       ILI9488_WriteData
   1565          
   1566          			ILI9488_WriteCmd(0x0036); 
   \   00000C72   0x2036             MOVS     R0,#+54
   \   00000C74   0x.... 0x....      BL       ILI9488_WriteCmd
   1567          			//ILI9488_WriteData(0x0068);
   1568          			if(gCfgItems.overturn_180 != 0xEE)
   \   00000C78   0x.... 0x....      LDR.W    R0,??DataTable26
   \   00000C7C   0xF890 0x02A3      LDRB     R0,[R0, #+675]
   \   00000C80   0x28EE             CMP      R0,#+238
   \   00000C82   0xD003             BEQ.N    ??LCD_Initializtion_48
   1569          			{
   1570          				ILI9488_WriteData(0x0068); 
   \   00000C84   0x2068             MOVS     R0,#+104
   \   00000C86   0x.... 0x....      BL       ILI9488_WriteData
   \   00000C8A   0xE002             B.N      ??LCD_Initializtion_49
   1571          			}
   1572          			else
   1573          			{
   1574          				ILI9488_WriteData(0x00A8);
   \                     ??LCD_Initializtion_48: (+1)
   \   00000C8C   0x20A8             MOVS     R0,#+168
   \   00000C8E   0x.... 0x....      BL       ILI9488_WriteData
   1575          			}
   1576          
   1577          			ILI9488_WriteCmd(0x003A); //Interface Mode Control
   \                     ??LCD_Initializtion_49: (+1)
   \   00000C92   0x203A             MOVS     R0,#+58
   \   00000C94   0x.... 0x....      BL       ILI9488_WriteCmd
   1578          			ILI9488_WriteData(0x0055);
   \   00000C98   0x2055             MOVS     R0,#+85
   \   00000C9A   0x.... 0x....      BL       ILI9488_WriteData
   1579          
   1580          			ILI9488_WriteCmd(0X00B0);  //Interface Mode Control  
   \   00000C9E   0x20B0             MOVS     R0,#+176
   \   00000CA0   0x.... 0x....      BL       ILI9488_WriteCmd
   1581          			ILI9488_WriteData(0x0000); 
   \   00000CA4   0x2000             MOVS     R0,#+0
   \   00000CA6   0x.... 0x....      BL       ILI9488_WriteData
   1582          			ILI9488_WriteCmd(0x00B1);   //Frame rate 70HZ  
   \   00000CAA   0x20B1             MOVS     R0,#+177
   \   00000CAC   0x.... 0x....      BL       ILI9488_WriteCmd
   1583          			ILI9488_WriteData(0x00B0); 
   \   00000CB0   0x20B0             MOVS     R0,#+176
   \   00000CB2   0x.... 0x....      BL       ILI9488_WriteData
   1584          			ILI9488_WriteData(0x0011); 
   \   00000CB6   0x2011             MOVS     R0,#+17
   \   00000CB8   0x.... 0x....      BL       ILI9488_WriteData
   1585          			ILI9488_WriteCmd(0x00B4); 
   \   00000CBC   0x20B4             MOVS     R0,#+180
   \   00000CBE   0x.... 0x....      BL       ILI9488_WriteCmd
   1586          			ILI9488_WriteData(0x0002);   
   \   00000CC2   0x2002             MOVS     R0,#+2
   \   00000CC4   0x.... 0x....      BL       ILI9488_WriteData
   1587          			ILI9488_WriteCmd(0x00B6); //RGB/MCU Interface Control
   \   00000CC8   0x20B6             MOVS     R0,#+182
   \   00000CCA   0x.... 0x....      BL       ILI9488_WriteCmd
   1588          			ILI9488_WriteData(0x0002); 
   \   00000CCE   0x2002             MOVS     R0,#+2
   \   00000CD0   0x.... 0x....      BL       ILI9488_WriteData
   1589          			ILI9488_WriteData(0x0042); 
   \   00000CD4   0x2042             MOVS     R0,#+66
   \   00000CD6   0x.... 0x....      BL       ILI9488_WriteData
   1590          
   1591          			ILI9488_WriteCmd(0x00B7); 
   \   00000CDA   0x20B7             MOVS     R0,#+183
   \   00000CDC   0x.... 0x....      BL       ILI9488_WriteCmd
   1592          			ILI9488_WriteData(0x00C6); 
   \   00000CE0   0x20C6             MOVS     R0,#+198
   \   00000CE2   0x.... 0x....      BL       ILI9488_WriteData
   1593          
   1594          			//WriteComm(0XBE);
   1595          			//WriteData(0x00);
   1596          			//WriteData(0x04);
   1597          
   1598          			ILI9488_WriteCmd(0x00E9); 
   \   00000CE6   0x20E9             MOVS     R0,#+233
   \   00000CE8   0x.... 0x....      BL       ILI9488_WriteCmd
   1599          			ILI9488_WriteData(0x0000);
   \   00000CEC   0x2000             MOVS     R0,#+0
   \   00000CEE   0x.... 0x....      BL       ILI9488_WriteData
   1600          
   1601          			ILI9488_WriteCmd(0X00F7);    
   \   00000CF2   0x20F7             MOVS     R0,#+247
   \   00000CF4   0x.... 0x....      BL       ILI9488_WriteCmd
   1602          			ILI9488_WriteData(0x00A9); 
   \   00000CF8   0x20A9             MOVS     R0,#+169
   \   00000CFA   0x.... 0x....      BL       ILI9488_WriteData
   1603          			ILI9488_WriteData(0x0051); 
   \   00000CFE   0x2051             MOVS     R0,#+81
   \   00000D00   0x.... 0x....      BL       ILI9488_WriteData
   1604          			ILI9488_WriteData(0x002C); 
   \   00000D04   0x202C             MOVS     R0,#+44
   \   00000D06   0x.... 0x....      BL       ILI9488_WriteData
   1605          			ILI9488_WriteData(0x0082);
   \   00000D0A   0x2082             MOVS     R0,#+130
   \   00000D0C   0x.... 0x....      BL       ILI9488_WriteData
   1606          
   1607          			ILI9488_WriteCmd(0x0011); 
   \   00000D10   0x2011             MOVS     R0,#+17
   \   00000D12   0x.... 0x....      BL       ILI9488_WriteCmd
   1608          			HAL_Delay(120); 
   \   00000D16   0x2078             MOVS     R0,#+120
   \   00000D18   0x.... 0x....      BL       HAL_Delay
   1609          			ILI9488_WriteCmd(0x0029); 	
   \   00000D1C   0x2029             MOVS     R0,#+41
   \   00000D1E   0x.... 0x....      BL       ILI9488_WriteCmd
   1610          
   1611          			ili9320_SetWindows(0,0,480,320);
   \   00000D22   0xF44F 0x73A0      MOV      R3,#+320
   \   00000D26   0xF44F 0x72F0      MOV      R2,#+480
   \   00000D2A   0x2100             MOVS     R1,#+0
   \   00000D2C   0x4608             MOV      R0,R1
   \   00000D2E   0x.... 0x....      BL       ili9320_SetWindows
   1612          			ili9320_Clear(0x0000);
   \   00000D32   0x2000             MOVS     R0,#+0
   \   00000D34   0x.... 0x....      BL       ili9320_Clear
   \   00000D38   0xE2F2             B.N      ??LCD_Initializtion_14
   1613          
   1614          #else
   1615          	//************* Start Initial Sequence **********//
   1616          	/* Adjust Control 3 (F7h)  */
   1617          	ILI9488_WriteCmd(0X00F7);
   1618          	ILI9488_WriteData(0x00A9);
   1619          	ILI9488_WriteData(0x0051);
   1620          	ILI9488_WriteData(0x002C);
   1621          	ILI9488_WriteData(0x0082);	/* DSI write DCS command, use loose packet RGB 666 */
   1622          
   1623          	/* Power Control 1 (C0h)  */
   1624          	ILI9488_WriteCmd(0x00C0);
   1625          	ILI9488_WriteData(0x0011);
   1626          	ILI9488_WriteData(0x0009);
   1627          
   1628          	/* Power Control 2 (C1h) */
   1629          	ILI9488_WriteCmd(0x00C1);
   1630          	ILI9488_WriteData(0x0041);
   1631          
   1632          	/* VCOM Control (C5h)  */
   1633          	ILI9488_WriteCmd(0X00C5);
   1634          	ILI9488_WriteData(0x0000);
   1635          	ILI9488_WriteData(0x000A);
   1636          	ILI9488_WriteData(0x0080);
   1637          
   1638          	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
   1639          	ILI9488_WriteCmd(0x00B1);
   1640          	ILI9488_WriteData(0x00B0);
   1641          	ILI9488_WriteData(0x0011);
   1642          
   1643          	/* Display Inversion Control (B4h) */
   1644          	ILI9488_WriteCmd(0x00B4);
   1645          	ILI9488_WriteData(0x0002);
   1646          
   1647          	/* Display Function Control (B6h)  */
   1648          	ILI9488_WriteCmd(0x00B6);
   1649          	ILI9488_WriteData(0x0002);
   1650          	ILI9488_WriteData(0x0042);
   1651          
   1652          	/* Entry Mode Set (B7h)  */
   1653          	ILI9488_WriteCmd(0x00B7);
   1654          	ILI9488_WriteData(0x00c6);
   1655          
   1656          	/* HS Lanes Control (BEh) */
   1657          	ILI9488_WriteCmd(0x00BE);
   1658          	ILI9488_WriteData(0x0000);
   1659          	ILI9488_WriteData(0x0004);
   1660          
   1661          	/* Set Image Function (E9h)  */
   1662          	ILI9488_WriteCmd(0x00E9);
   1663          	ILI9488_WriteData(0x0000);
   1664          
   1665          	ILI9488_WriteCmd(0x0036);	/* oá?á(?????ú×ó±?) */
   1666          	ILI9488_WriteData(0x0068);
   1667          
   1668          	/* Interface Pixel Format (3Ah) */
   1669          	ILI9488_WriteCmd(0x003A);
   1670          	ILI9488_WriteData(0x0055);	/* 0x55 : 16 bits/pixel  */
   1671          
   1672          	/* PGAMCTRL (Positive Gamma Control) (E0h) */
   1673          	ILI9488_WriteCmd(0x00E0);
   1674          	ILI9488_WriteData(0x0000);
   1675          	ILI9488_WriteData(0x0007);
   1676          	ILI9488_WriteData(0x0010);
   1677          	ILI9488_WriteData(0x0009);
   1678          	ILI9488_WriteData(0x0017);
   1679          	ILI9488_WriteData(0x000B);
   1680          	ILI9488_WriteData(0x0041);
   1681          	ILI9488_WriteData(0x0089);
   1682          	ILI9488_WriteData(0x004B);
   1683          	ILI9488_WriteData(0x000A);
   1684          	ILI9488_WriteData(0x000C);
   1685          	ILI9488_WriteData(0x000E);
   1686          	ILI9488_WriteData(0x0018);
   1687          	ILI9488_WriteData(0x001B);
   1688          	ILI9488_WriteData(0x000F);
   1689          
   1690          	/* NGAMCTRL (Negative Gamma Control) (E1h)  */
   1691          	ILI9488_WriteCmd(0X00E1);
   1692          	ILI9488_WriteData(0x0000);
   1693          	ILI9488_WriteData(0x0017);
   1694          	ILI9488_WriteData(0x001A);
   1695          	ILI9488_WriteData(0x0004);
   1696          	ILI9488_WriteData(0x000E);
   1697          	ILI9488_WriteData(0x0006);
   1698          	ILI9488_WriteData(0x002F);
   1699          	ILI9488_WriteData(0x0045);
   1700          	ILI9488_WriteData(0x0043);
   1701          	ILI9488_WriteData(0x0002);
   1702          	ILI9488_WriteData(0x000A);
   1703          	ILI9488_WriteData(0x0009);
   1704          	ILI9488_WriteData(0x0032);
   1705          	ILI9488_WriteData(0x0036);
   1706          	ILI9488_WriteData(0x000F);
   1707          
   1708          	/* Sleep Out (11h */
   1709          	ILI9488_WriteCmd(0x0011);
   1710          	HAL_Delay(100);
   1711          	ILI9488_WriteCmd(0x0029);	/* Display ON (29h) */
   1712          
   1713          ILI9488_WriteCmd(0X002A); 		/* éè??X×?±ê */
   1714          ILI9488_WriteData(0x0000);	/* ?eê?μ? */
   1715          ILI9488_WriteData(0x0000);
   1716          ILI9488_WriteData(0x0001); /* ?áê?μ? */
   1717          ILI9488_WriteData(0x00df);
   1718          
   1719          ILI9488_WriteCmd(0X002B); 					/* éè??Y×?±ê*/
   1720          ILI9488_WriteData(0x0000);	 /* ?eê?μ? */
   1721          ILI9488_WriteData(0x0000);
   1722          ILI9488_WriteData(0x0001); 	/* ?áê?μ? */
   1723          ILI9488_WriteData(0x003f);
   1724          
   1725          
   1726          #endif
   1727                      //ili9320_Clear(0x0000);
   1728          		}
   1729          	else if(DeviceCode==0x9341)
   \                     ??LCD_Initializtion_47: (+1)
   \   00000D3A   0xF249 0x3141      MOVW     R1,#+37697
   \   00000D3E   0x4288             CMP      R0,R1
   \   00000D40   0xF040 0x8115      BNE.W    ??LCD_Initializtion_50
   1730          	{
   1731          		ILI9488_WriteCmd(0X01);//RESET
   \   00000D44   0x2001             MOVS     R0,#+1
   \   00000D46   0x.... 0x....      BL       ILI9488_WriteCmd
   1732          		Delay(150);
   \   00000D4A   0x2096             MOVS     R0,#+150
   \   00000D4C   0x.... 0x....      BL       Delay
   1733          		ILI9488_WriteCmd(0xCF);
   \   00000D50   0x20CF             MOVS     R0,#+207
   \   00000D52   0x.... 0x....      BL       ILI9488_WriteCmd
   1734          		ILI9488_WriteData(0x00);
   \   00000D56   0x2000             MOVS     R0,#+0
   \   00000D58   0x.... 0x....      BL       ILI9488_WriteData
   1735          		ILI9488_WriteData(0xDB);//83
   \   00000D5C   0x20DB             MOVS     R0,#+219
   \   00000D5E   0x.... 0x....      BL       ILI9488_WriteData
   1736          		ILI9488_WriteData(0X30);
   \   00000D62   0x2030             MOVS     R0,#+48
   \   00000D64   0x.... 0x....      BL       ILI9488_WriteData
   1737          
   1738          		ILI9488_WriteCmd(0xB1);           
   \   00000D68   0x20B1             MOVS     R0,#+177
   \   00000D6A   0x.... 0x....      BL       ILI9488_WriteCmd
   1739          		ILI9488_WriteData(0x00);
   \   00000D6E   0x2000             MOVS     R0,#+0
   \   00000D70   0x.... 0x....      BL       ILI9488_WriteData
   1740          		ILI9488_WriteData(0x18);
   \   00000D74   0x2018             MOVS     R0,#+24
   \   00000D76   0x.... 0x....      BL       ILI9488_WriteData
   1741          
   1742          		ILI9488_WriteCmd(0xED);
   \   00000D7A   0x20ED             MOVS     R0,#+237
   \   00000D7C   0x.... 0x....      BL       ILI9488_WriteCmd
   1743          		ILI9488_WriteData(0x64);
   \   00000D80   0x2064             MOVS     R0,#+100
   \   00000D82   0x.... 0x....      BL       ILI9488_WriteData
   1744          		ILI9488_WriteData(0x03);
   \   00000D86   0x2003             MOVS     R0,#+3
   \   00000D88   0x.... 0x....      BL       ILI9488_WriteData
   1745          		ILI9488_WriteData(0X12);
   \   00000D8C   0x2012             MOVS     R0,#+18
   \   00000D8E   0x.... 0x....      BL       ILI9488_WriteData
   1746          		ILI9488_WriteData(0x81);
   \   00000D92   0x2081             MOVS     R0,#+129
   \   00000D94   0x.... 0x....      BL       ILI9488_WriteData
   1747          
   1748          		ILI9488_WriteCmd(0xE8);
   \   00000D98   0x20E8             MOVS     R0,#+232
   \   00000D9A   0x.... 0x....      BL       ILI9488_WriteCmd
   1749          		ILI9488_WriteData(0x85); 
   \   00000D9E   0x2085             MOVS     R0,#+133
   \   00000DA0   0x.... 0x....      BL       ILI9488_WriteData
   1750          		ILI9488_WriteData(0x00); 
   \   00000DA4   0x2000             MOVS     R0,#+0
   \   00000DA6   0x.... 0x....      BL       ILI9488_WriteData
   1751          		ILI9488_WriteData(0x70); 
   \   00000DAA   0x2070             MOVS     R0,#+112
   \   00000DAC   0x.... 0x....      BL       ILI9488_WriteData
   1752          
   1753          		ILI9488_WriteCmd(0xCB);
   \   00000DB0   0x20CB             MOVS     R0,#+203
   \   00000DB2   0x.... 0x....      BL       ILI9488_WriteCmd
   1754          		ILI9488_WriteData(0x39);
   \   00000DB6   0x2039             MOVS     R0,#+57
   \   00000DB8   0x.... 0x....      BL       ILI9488_WriteData
   1755          		ILI9488_WriteData(0x2C);
   \   00000DBC   0x202C             MOVS     R0,#+44
   \   00000DBE   0x.... 0x....      BL       ILI9488_WriteData
   1756          		ILI9488_WriteData(0x00);
   \   00000DC2   0x2000             MOVS     R0,#+0
   \   00000DC4   0x.... 0x....      BL       ILI9488_WriteData
   1757          		ILI9488_WriteData(0x34);
   \   00000DC8   0x2034             MOVS     R0,#+52
   \   00000DCA   0x.... 0x....      BL       ILI9488_WriteData
   1758          		ILI9488_WriteData(0x02);
   \   00000DCE   0x2002             MOVS     R0,#+2
   \   00000DD0   0x.... 0x....      BL       ILI9488_WriteData
   1759          
   1760          		ILI9488_WriteCmd(0xF7);
   \   00000DD4   0x20F7             MOVS     R0,#+247
   \   00000DD6   0x.... 0x....      BL       ILI9488_WriteCmd
   1761          		ILI9488_WriteData(0x20);
   \   00000DDA   0x2020             MOVS     R0,#+32
   \   00000DDC   0x.... 0x....      BL       ILI9488_WriteData
   1762          
   1763          		ILI9488_WriteCmd(0xEA);
   \   00000DE0   0x20EA             MOVS     R0,#+234
   \   00000DE2   0x.... 0x....      BL       ILI9488_WriteCmd
   1764          		ILI9488_WriteData(0x00);
   \   00000DE6   0x2000             MOVS     R0,#+0
   \   00000DE8   0x.... 0x....      BL       ILI9488_WriteData
   1765          		ILI9488_WriteData(0x00);
   \   00000DEC   0x2000             MOVS     R0,#+0
   \   00000DEE   0x.... 0x....      BL       ILI9488_WriteData
   1766          
   1767          		ILI9488_WriteCmd(0xC0);
   \   00000DF2   0x20C0             MOVS     R0,#+192
   \   00000DF4   0x.... 0x....      BL       ILI9488_WriteCmd
   1768          		ILI9488_WriteData(0x22);
   \   00000DF8   0x2022             MOVS     R0,#+34
   \   00000DFA   0x.... 0x....      BL       ILI9488_WriteData
   1769          
   1770          		ILI9488_WriteCmd(0xC1);
   \   00000DFE   0x20C1             MOVS     R0,#+193
   \   00000E00   0x.... 0x....      BL       ILI9488_WriteCmd
   1771          		ILI9488_WriteData(0x12);
   \   00000E04   0x2012             MOVS     R0,#+18
   \   00000E06   0x.... 0x....      BL       ILI9488_WriteData
   1772          
   1773          		ILI9488_WriteCmd(0xC5);
   \   00000E0A   0x20C5             MOVS     R0,#+197
   \   00000E0C   0x.... 0x....      BL       ILI9488_WriteCmd
   1774          		ILI9488_WriteData(0x5C);
   \   00000E10   0x205C             MOVS     R0,#+92
   \   00000E12   0x.... 0x....      BL       ILI9488_WriteData
   1775          		ILI9488_WriteData(0x4C);
   \   00000E16   0x204C             MOVS     R0,#+76
   \   00000E18   0x.... 0x....      BL       ILI9488_WriteData
   1776          
   1777          		ILI9488_WriteCmd(0xC7);
   \   00000E1C   0x20C7             MOVS     R0,#+199
   \   00000E1E   0x.... 0x....      BL       ILI9488_WriteCmd
   1778          		ILI9488_WriteData(0x8F);
   \   00000E22   0x208F             MOVS     R0,#+143
   \   00000E24   0x.... 0x....      BL       ILI9488_WriteData
   1779          
   1780          		ILI9488_WriteCmd(0x36);
   \   00000E28   0x2036             MOVS     R0,#+54
   \   00000E2A   0x.... 0x....      BL       ILI9488_WriteCmd
   1781          		ILI9488_WriteData(0xe8);//use this to use ucgui
   \   00000E2E   0x20E8             MOVS     R0,#+232
   \   00000E30   0x.... 0x....      BL       ILI9488_WriteData
   1782          
   1783          
   1784          		ILI9488_WriteCmd(0x3A);
   \   00000E34   0x203A             MOVS     R0,#+58
   \   00000E36   0x.... 0x....      BL       ILI9488_WriteCmd
   1785          		ILI9488_WriteData(0x55);
   \   00000E3A   0x2055             MOVS     R0,#+85
   \   00000E3C   0x.... 0x....      BL       ILI9488_WriteData
   1786          
   1787          		ILI9488_WriteCmd(0xF2);
   \   00000E40   0x20F2             MOVS     R0,#+242
   \   00000E42   0x.... 0x....      BL       ILI9488_WriteCmd
   1788          		ILI9488_WriteData(0x02);
   \   00000E46   0x2002             MOVS     R0,#+2
   \   00000E48   0x.... 0x....      BL       ILI9488_WriteData
   1789          
   1790          		ILI9488_WriteCmd(0x26);
   \   00000E4C   0x2026             MOVS     R0,#+38
   \   00000E4E   0x.... 0x....      BL       ILI9488_WriteCmd
   1791          		ILI9488_WriteData(0x01);
   \   00000E52   0x2001             MOVS     R0,#+1
   \   00000E54   0x.... 0x....      BL       ILI9488_WriteData
   1792          
   1793          		ILI9488_WriteCmd(0xE0);
   \   00000E58   0x20E0             MOVS     R0,#+224
   \   00000E5A   0x.... 0x....      BL       ILI9488_WriteCmd
   1794          		ILI9488_WriteData(0x0F);
   \   00000E5E   0x200F             MOVS     R0,#+15
   \   00000E60   0x.... 0x....      BL       ILI9488_WriteData
   1795          		ILI9488_WriteData(0x20);
   \   00000E64   0x2020             MOVS     R0,#+32
   \   00000E66   0x.... 0x....      BL       ILI9488_WriteData
   1796          		ILI9488_WriteData(0x19);
   \   00000E6A   0x2019             MOVS     R0,#+25
   \   00000E6C   0x.... 0x....      BL       ILI9488_WriteData
   1797          		ILI9488_WriteData(0x0F);
   \   00000E70   0x200F             MOVS     R0,#+15
   \   00000E72   0x.... 0x....      BL       ILI9488_WriteData
   1798          		ILI9488_WriteData(0x10);
   \   00000E76   0x2010             MOVS     R0,#+16
   \   00000E78   0x.... 0x....      BL       ILI9488_WriteData
   1799          		ILI9488_WriteData(0x08);
   \   00000E7C   0x2008             MOVS     R0,#+8
   \   00000E7E   0x.... 0x....      BL       ILI9488_WriteData
   1800          		ILI9488_WriteData(0x4A);
   \   00000E82   0x204A             MOVS     R0,#+74
   \   00000E84   0x.... 0x....      BL       ILI9488_WriteData
   1801          		ILI9488_WriteData(0xF6);
   \   00000E88   0x20F6             MOVS     R0,#+246
   \   00000E8A   0x.... 0x....      BL       ILI9488_WriteData
   1802          		ILI9488_WriteData(0x3A);
   \   00000E8E   0x203A             MOVS     R0,#+58
   \   00000E90   0x.... 0x....      BL       ILI9488_WriteData
   1803          		ILI9488_WriteData(0x0F);
   \   00000E94   0x200F             MOVS     R0,#+15
   \   00000E96   0x.... 0x....      BL       ILI9488_WriteData
   1804          		ILI9488_WriteData(0x14);
   \   00000E9A   0x2014             MOVS     R0,#+20
   \   00000E9C   0x.... 0x....      BL       ILI9488_WriteData
   1805          		ILI9488_WriteData(0x09);
   \   00000EA0   0x2009             MOVS     R0,#+9
   \   00000EA2   0x.... 0x....      BL       ILI9488_WriteData
   1806          		ILI9488_WriteData(0x18);
   \   00000EA6   0x2018             MOVS     R0,#+24
   \   00000EA8   0x.... 0x....      BL       ILI9488_WriteData
   1807          		ILI9488_WriteData(0x0B);
   \   00000EAC   0x200B             MOVS     R0,#+11
   \   00000EAE   0x.... 0x....      BL       ILI9488_WriteData
   1808          		ILI9488_WriteData(0x08);
   \   00000EB2   0x2008             MOVS     R0,#+8
   \   00000EB4   0x.... 0x....      BL       ILI9488_WriteData
   1809          		ILI9488_WriteData(0xE1);
   \   00000EB8   0x20E1             MOVS     R0,#+225
   \   00000EBA   0x.... 0x....      BL       ILI9488_WriteData
   1810          		ILI9488_WriteData(0x00);
   \   00000EBE   0x2000             MOVS     R0,#+0
   \   00000EC0   0x.... 0x....      BL       ILI9488_WriteData
   1811          		ILI9488_WriteData(0x1E);
   \   00000EC4   0x201E             MOVS     R0,#+30
   \   00000EC6   0x.... 0x....      BL       ILI9488_WriteData
   1812          		ILI9488_WriteData(0x1E);
   \   00000ECA   0x201E             MOVS     R0,#+30
   \   00000ECC   0x.... 0x....      BL       ILI9488_WriteData
   1813          		ILI9488_WriteData(0x05);
   \   00000ED0   0x2005             MOVS     R0,#+5
   \   00000ED2   0x.... 0x....      BL       ILI9488_WriteData
   1814          		ILI9488_WriteData(0x0F);
   \   00000ED6   0x200F             MOVS     R0,#+15
   \   00000ED8   0x.... 0x....      BL       ILI9488_WriteData
   1815          		ILI9488_WriteData(0x04);
   \   00000EDC   0x2004             MOVS     R0,#+4
   \   00000EDE   0x.... 0x....      BL       ILI9488_WriteData
   1816          		ILI9488_WriteData(0x31);
   \   00000EE2   0x2031             MOVS     R0,#+49
   \   00000EE4   0x.... 0x....      BL       ILI9488_WriteData
   1817          		ILI9488_WriteData(0x33);
   \   00000EE8   0x2033             MOVS     R0,#+51
   \   00000EEA   0x.... 0x....      BL       ILI9488_WriteData
   1818          		ILI9488_WriteData(0x43);
   \   00000EEE   0x2043             MOVS     R0,#+67
   \   00000EF0   0x.... 0x....      BL       ILI9488_WriteData
   1819          		ILI9488_WriteData(0x04);
   \   00000EF4   0x2004             MOVS     R0,#+4
   \   00000EF6   0x.... 0x....      BL       ILI9488_WriteData
   1820          		ILI9488_WriteData(0x0B);
   \   00000EFA   0x200B             MOVS     R0,#+11
   \   00000EFC   0x.... 0x....      BL       ILI9488_WriteData
   1821          		ILI9488_WriteData(0x06);
   \   00000F00   0x2006             MOVS     R0,#+6
   \   00000F02   0x.... 0x....      BL       ILI9488_WriteData
   1822          		ILI9488_WriteData(0x27);
   \   00000F06   0x2027             MOVS     R0,#+39
   \   00000F08   0x.... 0x....      BL       ILI9488_WriteData
   1823          		ILI9488_WriteData(0x34);
   \   00000F0C   0x2034             MOVS     R0,#+52
   \   00000F0E   0x.... 0x....      BL       ILI9488_WriteData
   1824          		ILI9488_WriteData(0x0F);
   \   00000F12   0x200F             MOVS     R0,#+15
   \   00000F14   0x.... 0x....      BL       ILI9488_WriteData
   1825          
   1826          		ILI9488_WriteCmd(0x11);
   \   00000F18   0x2011             MOVS     R0,#+17
   \   00000F1A   0x.... 0x....      BL       ILI9488_WriteCmd
   1827          
   1828          		Delay(5);
   \   00000F1E   0x2005             MOVS     R0,#+5
   \   00000F20   0x.... 0x....      BL       Delay
   1829          
   1830          		ILI9488_WriteCmd(0x29);
   \   00000F24   0x2029             MOVS     R0,#+41
   \   00000F26   0x.... 0x....      BL       ILI9488_WriteCmd
   1831          
   1832          		ILI9488_WriteCmd(0x2A);
   \   00000F2A   0x202A             MOVS     R0,#+42
   \   00000F2C   0x.... 0x....      BL       ILI9488_WriteCmd
   1833          		ILI9488_WriteData(0x00);
   \   00000F30   0x2000             MOVS     R0,#+0
   \   00000F32   0x.... 0x....      BL       ILI9488_WriteData
   1834          		ILI9488_WriteData(0x00);
   \   00000F36   0x2000             MOVS     R0,#+0
   \   00000F38   0x.... 0x....      BL       ILI9488_WriteData
   1835          		// LCD_WR_DATA(0x00);
   1836          		// LCD_WR_DATA(0xEF);
   1837          		ILI9488_WriteData(0x01);
   \   00000F3C   0x2001             MOVS     R0,#+1
   \   00000F3E   0x.... 0x....      BL       ILI9488_WriteData
   1838          		ILI9488_WriteData(0x3F);
   \   00000F42   0x203F             MOVS     R0,#+63
   \   00000F44   0x.... 0x....      BL       ILI9488_WriteData
   1839          		ILI9488_WriteCmd(0x2B);
   \   00000F48   0x202B             MOVS     R0,#+43
   \   00000F4A   0x.... 0x....      BL       ILI9488_WriteCmd
   1840          		ILI9488_WriteData(0x00);
   \   00000F4E   0x2000             MOVS     R0,#+0
   \   00000F50   0x.... 0x....      BL       ILI9488_WriteData
   1841          		ILI9488_WriteData(0x00);
   \   00000F54   0x2000             MOVS     R0,#+0
   \   00000F56   0x.... 0x....      BL       ILI9488_WriteData
   1842          		//  LCD_WR_DATA(0x01);
   1843          		ILI9488_WriteData(0x00);
   \   00000F5A   0x2000             MOVS     R0,#+0
   \   00000F5C   0x.... 0x....      BL       ILI9488_WriteData
   1844          		ILI9488_WriteData(0xEF);
   \   00000F60   0x20EF             MOVS     R0,#+239
   \   00000F62   0x.... 0x....      BL       ILI9488_WriteData
   1845          		ILI9488_WriteCmd(0x2C);	
   \   00000F66   0x202C             MOVS     R0,#+44
   \   00000F68   0x.... 0x....      BL       ILI9488_WriteCmd
   \   00000F6C   0xE1D8             B.N      ??LCD_Initializtion_14
   1846          	}		
   1847          		else if(DeviceCode==0x1505)
   \                     ??LCD_Initializtion_50: (+1)
   \   00000F6E   0xF241 0x5105      MOVW     R1,#+5381
   \   00000F72   0x4288             CMP      R0,R1
   \   00000F74   0xF040 0x80FF      BNE.W    ??LCD_Initializtion_51
   1848          			{
   1849          			//HC-chen 2017.12.14
   1850          			LCD_WriteReg(0x00e5,0x8000);
   \   00000F78   0xF44F 0x4100      MOV      R1,#+32768
   \   00000F7C   0x20E5             MOVS     R0,#+229
   \   00000F7E   0x.... 0x....      BL       LCD_WriteReg
   1851          			LCD_WriteReg(0x0000,0x0001);
   \   00000F82   0x2101             MOVS     R1,#+1
   \   00000F84   0x2000             MOVS     R0,#+0
   \   00000F86   0x.... 0x....      BL       LCD_WriteReg
   1852          			//HC-chen 2017.10.11
   1853          			//if(gCfgItems.OVERTURN_180==0) //不翻转
   1854          			//{
   1855          			LCD_WriteReg(0x0001,0x0100);
   \   00000F8A   0xF44F 0x7180      MOV      R1,#+256
   \   00000F8E   0x2001             MOVS     R0,#+1
   \   00000F90   0x.... 0x....      BL       LCD_WriteReg
   1856          			// }
   1857          			//else
   1858          			//{
   1859          			//LCD_WriteReg(0x0001,0x0000);
   1860          			// } 
   1861          			Delay(150);
   \   00000F94   0x2096             MOVS     R0,#+150
   \   00000F96   0x.... 0x....      BL       Delay
   1862          			//LCD_WriteReg(0x0001,0x0100);
   1863          			LCD_WriteReg(0x0002,0x0700);
   \   00000F9A   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000F9E   0x2002             MOVS     R0,#+2
   \   00000FA0   0x.... 0x....      BL       LCD_WriteReg
   1864          			//LCD_WriteReg(0x0003,0x1030);
   1865          			LCD_WriteReg(0x0003,0x1018);
   \   00000FA4   0xF241 0x0118      MOVW     R1,#+4120
   \   00000FA8   0x2003             MOVS     R0,#+3
   \   00000FAA   0x.... 0x....      BL       LCD_WriteReg
   1866          			LCD_WriteReg(0x0004,0x0000);
   \   00000FAE   0x2100             MOVS     R1,#+0
   \   00000FB0   0x2004             MOVS     R0,#+4
   \   00000FB2   0x.... 0x....      BL       LCD_WriteReg
   1867          			LCD_WriteReg(0x0008,0x0202);
   \   00000FB6   0xF240 0x2502      MOVW     R5,#+514
   \   00000FBA   0x4629             MOV      R1,R5
   \   00000FBC   0x2008             MOVS     R0,#+8
   \   00000FBE   0x.... 0x....      BL       LCD_WriteReg
   1868          			LCD_WriteReg(0x0009,0x0000);
   \   00000FC2   0x2100             MOVS     R1,#+0
   \   00000FC4   0x2009             MOVS     R0,#+9
   \   00000FC6   0x.... 0x....      BL       LCD_WriteReg
   1869          			LCD_WriteReg(0x000a,0x0000);	
   \   00000FCA   0x2100             MOVS     R1,#+0
   \   00000FCC   0x200A             MOVS     R0,#+10
   \   00000FCE   0x.... 0x....      BL       LCD_WriteReg
   1870          			LCD_WriteReg(0x000c,0x0000);
   \   00000FD2   0x2100             MOVS     R1,#+0
   \   00000FD4   0x200C             MOVS     R0,#+12
   \   00000FD6   0x.... 0x....      BL       LCD_WriteReg
   1871          			LCD_WriteReg(0x000d,0x0000);
   \   00000FDA   0x2100             MOVS     R1,#+0
   \   00000FDC   0x200D             MOVS     R0,#+13
   \   00000FDE   0x.... 0x....      BL       LCD_WriteReg
   1872          			LCD_WriteReg(0x000f,0x0000);
   \   00000FE2   0x2100             MOVS     R1,#+0
   \   00000FE4   0x200F             MOVS     R0,#+15
   \   00000FE6   0x.... 0x....      BL       LCD_WriteReg
   1873          			//*********************************************Power On
   1874          			LCD_WriteReg(0x0010,0x0000);
   \   00000FEA   0x2100             MOVS     R1,#+0
   \   00000FEC   0x2010             MOVS     R0,#+16
   \   00000FEE   0x.... 0x....      BL       LCD_WriteReg
   1875          			LCD_WriteReg(0x0011,0x0000);
   \   00000FF2   0x2100             MOVS     R1,#+0
   \   00000FF4   0x2011             MOVS     R0,#+17
   \   00000FF6   0x.... 0x....      BL       LCD_WriteReg
   1876          			LCD_WriteReg(0x0012,0x0000);
   \   00000FFA   0x2100             MOVS     R1,#+0
   \   00000FFC   0x2012             MOVS     R0,#+18
   \   00000FFE   0x.... 0x....      BL       LCD_WriteReg
   1877          			LCD_WriteReg(0x0013,0x0000);
   \   00001002   0x2100             MOVS     R1,#+0
   \   00001004   0x2013             MOVS     R0,#+19
   \   00001006   0x.... 0x....      BL       LCD_WriteReg
   1878          			Delay(50);
   \   0000100A   0x2032             MOVS     R0,#+50
   \   0000100C   0x.... 0x....      BL       Delay
   1879          			LCD_WriteReg(0x0010,0x17b0);
   \   00001010   0xF241 0x71B0      MOVW     R1,#+6064
   \   00001014   0x2010             MOVS     R0,#+16
   \   00001016   0x.... 0x....      BL       LCD_WriteReg
   1880          			LCD_WriteReg(0x0011,0x0037);
   \   0000101A   0x2137             MOVS     R1,#+55
   \   0000101C   0x2011             MOVS     R0,#+17
   \   0000101E   0x.... 0x....      BL       LCD_WriteReg
   1881          			Delay(50);
   \   00001022   0x2032             MOVS     R0,#+50
   \   00001024   0x.... 0x....      BL       Delay
   1882          			LCD_WriteReg(0x0012,0x0138);
   \   00001028   0xF44F 0x719C      MOV      R1,#+312
   \   0000102C   0x2012             MOVS     R0,#+18
   \   0000102E   0x.... 0x....      BL       LCD_WriteReg
   1883          			Delay(50);
   \   00001032   0x2032             MOVS     R0,#+50
   \   00001034   0x.... 0x....      BL       Delay
   1884          			LCD_WriteReg(0x0013,0x1700);
   \   00001038   0xF44F 0x51B8      MOV      R1,#+5888
   \   0000103C   0x2013             MOVS     R0,#+19
   \   0000103E   0x.... 0x....      BL       LCD_WriteReg
   1885          			LCD_WriteReg(0x0029,0x001f);//0x000d
   \   00001042   0x211F             MOVS     R1,#+31
   \   00001044   0x2029             MOVS     R0,#+41
   \   00001046   0x.... 0x....      BL       LCD_WriteReg
   1886          			Delay(50);
   \   0000104A   0x2032             MOVS     R0,#+50
   \   0000104C   0x.... 0x....      BL       Delay
   1887          			LCD_WriteReg(0x0020,0x0000);
   \   00001050   0x2100             MOVS     R1,#+0
   \   00001052   0x2020             MOVS     R0,#+32
   \   00001054   0x.... 0x....      BL       LCD_WriteReg
   1888          			LCD_WriteReg(0x0021,0x0000);
   \   00001058   0x2100             MOVS     R1,#+0
   \   0000105A   0x2021             MOVS     R0,#+33
   \   0000105C   0x.... 0x....      BL       LCD_WriteReg
   1889          			//*********************************************Set gamma
   1890          			//LCD_WriteReg(0x0030,0x0001);
   1891          			//LCD_WriteReg(0x0031,0x0606);
   1892          			//LCD_WriteReg(0x0032,0x0304);
   1893          			//LCD_WriteReg(0x0033,0x0202);
   1894          			//LCD_WriteReg(0x0034,0x0202);
   1895          			//LCD_WriteReg(0x0035,0x0103);
   1896          			//LCD_WriteReg(0x0036,0x011d);
   1897          			//LCD_WriteReg(0x0037,0x0404);
   1898          			//LCD_WriteReg(0x0038,0x0404);
   1899          			//LCD_WriteReg(0x0039,0x0404);
   1900          			//LCD_WriteReg(0x003c,0x0700);
   1901          			//LCD_WriteReg(0x003d,0x0a1f);
   1902          			LCD_WriteReg(0x0030,0x0707);
   \   00001060   0xF240 0x7407      MOVW     R4,#+1799
   \   00001064   0x4621             MOV      R1,R4
   \   00001066   0x2030             MOVS     R0,#+48
   \   00001068   0x.... 0x....      BL       LCD_WriteReg
   1903          			LCD_WriteReg(0x0031,0x0007); //0x0707
   \   0000106C   0x2107             MOVS     R1,#+7
   \   0000106E   0x2031             MOVS     R0,#+49
   \   00001070   0x.... 0x....      BL       LCD_WriteReg
   1904          			LCD_WriteReg(0x0032,0x0603); 
   \   00001074   0xF240 0x6103      MOVW     R1,#+1539
   \   00001078   0x2032             MOVS     R0,#+50
   \   0000107A   0x.... 0x....      BL       LCD_WriteReg
   1905          			LCD_WriteReg(0x0033,0x0700); 
   \   0000107E   0xF44F 0x61E0      MOV      R1,#+1792
   \   00001082   0x2033             MOVS     R0,#+51
   \   00001084   0x.... 0x....      BL       LCD_WriteReg
   1906          			LCD_WriteReg(0x0034,0x0202); 
   \   00001088   0x4629             MOV      R1,R5
   \   0000108A   0x2034             MOVS     R0,#+52
   \   0000108C   0x.... 0x....      BL       LCD_WriteReg
   1907          			LCD_WriteReg(0x0035,0x0002); //?0x0606
   \   00001090   0x2102             MOVS     R1,#+2
   \   00001092   0x2035             MOVS     R0,#+53
   \   00001094   0x.... 0x....      BL       LCD_WriteReg
   1908          			LCD_WriteReg(0x0036,0x1F0F);
   \   00001098   0xF641 0x710F      MOVW     R1,#+7951
   \   0000109C   0x2036             MOVS     R0,#+54
   \   0000109E   0x.... 0x....      BL       LCD_WriteReg
   1909          			LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
   \   000010A2   0x4621             MOV      R1,R4
   \   000010A4   0x2037             MOVS     R0,#+55
   \   000010A6   0x.... 0x....      BL       LCD_WriteReg
   1910          			LCD_WriteReg(0x0038,0x0000); 
   \   000010AA   0x2100             MOVS     R1,#+0
   \   000010AC   0x2038             MOVS     R0,#+56
   \   000010AE   0x.... 0x....      BL       LCD_WriteReg
   1911          			LCD_WriteReg(0x0039,0x0000); 
   \   000010B2   0x2100             MOVS     R1,#+0
   \   000010B4   0x2039             MOVS     R0,#+57
   \   000010B6   0x.... 0x....      BL       LCD_WriteReg
   1912          			LCD_WriteReg(0x003A,0x0707); 
   \   000010BA   0x4621             MOV      R1,R4
   \   000010BC   0x203A             MOVS     R0,#+58
   \   000010BE   0x.... 0x....      BL       LCD_WriteReg
   1913          			LCD_WriteReg(0x003B,0x0000); //0x0303
   \   000010C2   0x2100             MOVS     R1,#+0
   \   000010C4   0x203B             MOVS     R0,#+59
   \   000010C6   0x.... 0x....      BL       LCD_WriteReg
   1914          			LCD_WriteReg(0x003C,0x0007); //?0x0707
   \   000010CA   0x2107             MOVS     R1,#+7
   \   000010CC   0x203C             MOVS     R0,#+60
   \   000010CE   0x.... 0x....      BL       LCD_WriteReg
   1915          			LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
   \   000010D2   0x2100             MOVS     R1,#+0
   \   000010D4   0x203D             MOVS     R0,#+61
   \   000010D6   0x.... 0x....      BL       LCD_WriteReg
   1916          		
   1917          			//**********************************************Set Gram aera
   1918          			LCD_WriteReg(0x0050,0x0000);
   \   000010DA   0x2100             MOVS     R1,#+0
   \   000010DC   0x2050             MOVS     R0,#+80
   \   000010DE   0x.... 0x....      BL       LCD_WriteReg
   1919          			LCD_WriteReg(0x0051,0x00ef);
   \   000010E2   0x21EF             MOVS     R1,#+239
   \   000010E4   0x2051             MOVS     R0,#+81
   \   000010E6   0x.... 0x....      BL       LCD_WriteReg
   1920          			LCD_WriteReg(0x0052,0x0000);
   \   000010EA   0x2100             MOVS     R1,#+0
   \   000010EC   0x2052             MOVS     R0,#+82
   \   000010EE   0x.... 0x....      BL       LCD_WriteReg
   1921          			LCD_WriteReg(0x0053,0x013f);
   \   000010F2   0xF240 0x113F      MOVW     R1,#+319
   \   000010F6   0x2053             MOVS     R0,#+83
   \   000010F8   0x.... 0x....      BL       LCD_WriteReg
   1922          			//LCD_WriteReg(0x0060,0x2700);
   1923          			//HC-chen 2017.10.11
   1924          			//if(gCfgItems.OVERTURN_180==0) //不翻转
   1925          			//{
   1926          			LCD_WriteReg(0x0060,0x2700);
   \   000010FC   0xF44F 0x511C      MOV      R1,#+9984
   \   00001100   0x2060             MOVS     R0,#+96
   \   00001102   0x.... 0x....      BL       LCD_WriteReg
   1927          			//}
   1928          			//else
   1929          			//{
   1930          			//LCD_WriteReg(0x0060,0xA700);
   1931          			//}
   1932          			LCD_WriteReg(0x0061,0x0001);
   \   00001106   0x2101             MOVS     R1,#+1
   \   00001108   0x2061             MOVS     R0,#+97
   \   0000110A   0x.... 0x....      BL       LCD_WriteReg
   1933          			LCD_WriteReg(0x006a,0x0000);
   \   0000110E   0x2100             MOVS     R1,#+0
   \   00001110   0x206A             MOVS     R0,#+106
   \   00001112   0x.... 0x....      BL       LCD_WriteReg
   1934          			//*********************************************Paratial display
   1935          			LCD_WriteReg(0x0090,0x0010);
   \   00001116   0x2110             MOVS     R1,#+16
   \   00001118   0x2090             MOVS     R0,#+144
   \   0000111A   0x.... 0x....      BL       LCD_WriteReg
   1936          			LCD_WriteReg(0x0092,0x0000);
   \   0000111E   0x2100             MOVS     R1,#+0
   \   00001120   0x2092             MOVS     R0,#+146
   \   00001122   0x.... 0x....      BL       LCD_WriteReg
   1937          			LCD_WriteReg(0x0093,0x0003);
   \   00001126   0x2103             MOVS     R1,#+3
   \   00001128   0x2093             MOVS     R0,#+147
   \   0000112A   0x.... 0x....      BL       LCD_WriteReg
   1938          			LCD_WriteReg(0x0095,0x0101);
   \   0000112E   0xF240 0x1101      MOVW     R1,#+257
   \   00001132   0x2095             MOVS     R0,#+149
   \   00001134   0x.... 0x....      BL       LCD_WriteReg
   1939          			LCD_WriteReg(0x0097,0x0000);
   \   00001138   0x2100             MOVS     R1,#+0
   \   0000113A   0x2097             MOVS     R0,#+151
   \   0000113C   0x.... 0x....      BL       LCD_WriteReg
   1940          			LCD_WriteReg(0x0098,0x0000);
   \   00001140   0x2100             MOVS     R1,#+0
   \   00001142   0x2098             MOVS     R0,#+152
   \   00001144   0x.... 0x....      BL       LCD_WriteReg
   1941          			//******************************************** Plan Control
   1942          			LCD_WriteReg(0x0007,0x0021);
   \   00001148   0x2121             MOVS     R1,#+33
   \   0000114A   0x2007             MOVS     R0,#+7
   \   0000114C   0x.... 0x....      BL       LCD_WriteReg
   1943          			Delay(50);
   \   00001150   0x2032             MOVS     R0,#+50
   \   00001152   0x.... 0x....      BL       Delay
   1944          			LCD_WriteReg(0x0007,0x0031);
   \   00001156   0x2131             MOVS     R1,#+49
   \   00001158   0x2007             MOVS     R0,#+7
   \   0000115A   0x.... 0x....      BL       LCD_WriteReg
   1945          			Delay(50);
   \   0000115E   0x2032             MOVS     R0,#+50
   \   00001160   0x.... 0x....      BL       Delay
   1946          			LCD_WriteReg(0x0007,0x0173);
   \   00001164   0xF240 0x1173      MOVW     R1,#+371
   \   00001168   0x2007             MOVS     R0,#+7
   \   0000116A   0x.... 0x....      BL       LCD_WriteReg
   1947          			Delay(50);
   \   0000116E   0x2032             MOVS     R0,#+50
   \   00001170   0x.... 0x....      BL       Delay
   \   00001174   0xE0D4             B.N      ??LCD_Initializtion_14
   1948          			//LLCD_WRITE_CMD(0x0022);
   1949          			}
   1950          			else //if(DeviceCode == 0x8552)//ST7789
   1951          			{
   1952          						
   1953          				//---------------------------------------------------------------------------------------------------//
   1954          				ILI9488_WriteCmd(0x11);
   \                     ??LCD_Initializtion_51: (+1)
   \   00001176   0x2011             MOVS     R0,#+17
   \   00001178   0x.... 0x....      BL       ILI9488_WriteCmd
   1955          				Delay(120); //Delay 120ms
   \   0000117C   0x2078             MOVS     R0,#+120
   \   0000117E   0x.... 0x....      BL       Delay
   1956          				//------------------------------display and color format setting--------------------------------//
   1957          				ILI9488_WriteCmd(0x36);
   \   00001182   0x2036             MOVS     R0,#+54
   \   00001184   0x.... 0x....      BL       ILI9488_WriteCmd
   1958          				//LCD_WR_DATA(0x00);
   1959          				//if(gCfgItems.OVERTURN_180 != 1) //不翻转
   1960          				//{
   1961          					ILI9488_WriteData(0xA4);//
   \   00001188   0x20A4             MOVS     R0,#+164
   \   0000118A   0x.... 0x....      BL       ILI9488_WriteData
   1962          				//}
   1963          				//else
   1964          				//{
   1965          					//LCD_WR_DATA(0x64);
   1966          				//}
   1967          		
   1968          				ILI9488_WriteCmd(0x3a);
   \   0000118E   0x203A             MOVS     R0,#+58
   \   00001190   0x.... 0x....      BL       ILI9488_WriteCmd
   1969          				ILI9488_WriteData(0x05);
   \   00001194   0x2005             MOVS     R0,#+5
   \   00001196   0x.... 0x....      BL       ILI9488_WriteData
   1970          				//--------------------------------ST7789V Frame rate setting----------------------------------//
   1971          				ILI9488_WriteCmd(0xb2);
   \   0000119A   0x20B2             MOVS     R0,#+178
   \   0000119C   0x.... 0x....      BL       ILI9488_WriteCmd
   1972          				ILI9488_WriteData(0x0c);
   \   000011A0   0x200C             MOVS     R0,#+12
   \   000011A2   0x.... 0x....      BL       ILI9488_WriteData
   1973          				ILI9488_WriteData(0x0c);
   \   000011A6   0x200C             MOVS     R0,#+12
   \   000011A8   0x.... 0x....      BL       ILI9488_WriteData
   1974          				ILI9488_WriteData(0x00);
   \   000011AC   0x2000             MOVS     R0,#+0
   \   000011AE   0x.... 0x....      BL       ILI9488_WriteData
   1975          				ILI9488_WriteData(0x33);
   \   000011B2   0x2033             MOVS     R0,#+51
   \   000011B4   0x.... 0x....      BL       ILI9488_WriteData
   1976          				ILI9488_WriteData(0x33);
   \   000011B8   0x2033             MOVS     R0,#+51
   \   000011BA   0x.... 0x....      BL       ILI9488_WriteData
   1977          				ILI9488_WriteCmd(0xb7);
   \   000011BE   0x20B7             MOVS     R0,#+183
   \   000011C0   0x.... 0x....      BL       ILI9488_WriteCmd
   1978          				ILI9488_WriteData(0x35);
   \   000011C4   0x2035             MOVS     R0,#+53
   \   000011C6   0x.... 0x....      BL       ILI9488_WriteData
   1979          				//---------------------------------ST7789V Power setting--------------------------------------//
   1980          				ILI9488_WriteCmd(0xbb);
   \   000011CA   0x20BB             MOVS     R0,#+187
   \   000011CC   0x.... 0x....      BL       ILI9488_WriteCmd
   1981          				ILI9488_WriteData(0x29);
   \   000011D0   0x2029             MOVS     R0,#+41
   \   000011D2   0x.... 0x....      BL       ILI9488_WriteData
   1982          				ILI9488_WriteCmd(0xc0);
   \   000011D6   0x20C0             MOVS     R0,#+192
   \   000011D8   0x.... 0x....      BL       ILI9488_WriteCmd
   1983          				ILI9488_WriteData(0x2c);
   \   000011DC   0x202C             MOVS     R0,#+44
   \   000011DE   0x.... 0x....      BL       ILI9488_WriteData
   1984          				ILI9488_WriteCmd(0xc2);
   \   000011E2   0x20C2             MOVS     R0,#+194
   \   000011E4   0x.... 0x....      BL       ILI9488_WriteCmd
   1985          				ILI9488_WriteData(0x01);
   \   000011E8   0x2001             MOVS     R0,#+1
   \   000011EA   0x.... 0x....      BL       ILI9488_WriteData
   1986          				ILI9488_WriteCmd(0xc3);
   \   000011EE   0x20C3             MOVS     R0,#+195
   \   000011F0   0x.... 0x....      BL       ILI9488_WriteCmd
   1987          				ILI9488_WriteData(0x10);
   \   000011F4   0x2010             MOVS     R0,#+16
   \   000011F6   0x.... 0x....      BL       ILI9488_WriteData
   1988          				ILI9488_WriteCmd(0xc4);
   \   000011FA   0x20C4             MOVS     R0,#+196
   \   000011FC   0x.... 0x....      BL       ILI9488_WriteCmd
   1989          				ILI9488_WriteCmd(0x20);
   \   00001200   0x2020             MOVS     R0,#+32
   \   00001202   0x.... 0x....      BL       ILI9488_WriteCmd
   1990          				ILI9488_WriteCmd(0xc6);
   \   00001206   0x20C6             MOVS     R0,#+198
   \   00001208   0x.... 0x....      BL       ILI9488_WriteCmd
   1991          				ILI9488_WriteData(0x0f);
   \   0000120C   0x200F             MOVS     R0,#+15
   \   0000120E   0x.... 0x....      BL       ILI9488_WriteData
   1992          				ILI9488_WriteCmd(0xd0);
   \   00001212   0x20D0             MOVS     R0,#+208
   \   00001214   0x.... 0x....      BL       ILI9488_WriteCmd
   1993          				ILI9488_WriteData(0xa4);
   \   00001218   0x20A4             MOVS     R0,#+164
   \   0000121A   0x.... 0x....      BL       ILI9488_WriteData
   1994          				ILI9488_WriteData(0xa1);
   \   0000121E   0x20A1             MOVS     R0,#+161
   \   00001220   0x.... 0x....      BL       ILI9488_WriteData
   1995          				//--------------------------------ST7789V gamma setting---------------------------------------//
   1996          				ILI9488_WriteCmd(0xe0);
   \   00001224   0x20E0             MOVS     R0,#+224
   \   00001226   0x.... 0x....      BL       ILI9488_WriteCmd
   1997          				ILI9488_WriteData(0xd0);
   \   0000122A   0x20D0             MOVS     R0,#+208
   \   0000122C   0x.... 0x....      BL       ILI9488_WriteData
   1998          				ILI9488_WriteData(0x00);
   \   00001230   0x2000             MOVS     R0,#+0
   \   00001232   0x.... 0x....      BL       ILI9488_WriteData
   1999          				ILI9488_WriteData(0x02);
   \   00001236   0x2002             MOVS     R0,#+2
   \   00001238   0x.... 0x....      BL       ILI9488_WriteData
   2000          				ILI9488_WriteData(0x07);
   \   0000123C   0x2007             MOVS     R0,#+7
   \   0000123E   0x.... 0x....      BL       ILI9488_WriteData
   2001          				ILI9488_WriteData(0x0a);
   \   00001242   0x200A             MOVS     R0,#+10
   \   00001244   0x.... 0x....      BL       ILI9488_WriteData
   2002          				ILI9488_WriteData(0x28);
   \   00001248   0x2028             MOVS     R0,#+40
   \   0000124A   0x.... 0x....      BL       ILI9488_WriteData
   2003          				ILI9488_WriteData(0x32);
   \   0000124E   0x2032             MOVS     R0,#+50
   \   00001250   0x.... 0x....      BL       ILI9488_WriteData
   2004          				ILI9488_WriteData(0x44);
   \   00001254   0x2044             MOVS     R0,#+68
   \   00001256   0x.... 0x....      BL       ILI9488_WriteData
   2005          				ILI9488_WriteData(0x42);
   \   0000125A   0x2042             MOVS     R0,#+66
   \   0000125C   0x.... 0x....      BL       ILI9488_WriteData
   2006          				ILI9488_WriteData(0x06);
   \   00001260   0x2006             MOVS     R0,#+6
   \   00001262   0x.... 0x....      BL       ILI9488_WriteData
   2007          				ILI9488_WriteData(0x0e);
   \   00001266   0x200E             MOVS     R0,#+14
   \   00001268   0x.... 0x....      BL       ILI9488_WriteData
   2008          				ILI9488_WriteData(0x12);
   \   0000126C   0x2012             MOVS     R0,#+18
   \   0000126E   0x.... 0x....      BL       ILI9488_WriteData
   2009          				ILI9488_WriteData(0x14);
   \   00001272   0x2014             MOVS     R0,#+20
   \   00001274   0x.... 0x....      BL       ILI9488_WriteData
   2010          				ILI9488_WriteData(0x17);
   \   00001278   0x2017             MOVS     R0,#+23
   \   0000127A   0x.... 0x....      BL       ILI9488_WriteData
   2011          				ILI9488_WriteCmd(0xe1);
   \   0000127E   0x20E1             MOVS     R0,#+225
   \   00001280   0x.... 0x....      BL       ILI9488_WriteCmd
   2012          				ILI9488_WriteData(0xd0);
   \   00001284   0x20D0             MOVS     R0,#+208
   \   00001286   0x.... 0x....      BL       ILI9488_WriteData
   2013          				ILI9488_WriteData(0x00);
   \   0000128A   0x2000             MOVS     R0,#+0
   \   0000128C   0x.... 0x....      BL       ILI9488_WriteData
   2014          				ILI9488_WriteData(0x02);
   \   00001290   0x2002             MOVS     R0,#+2
   \   00001292   0x.... 0x....      BL       ILI9488_WriteData
   2015          				ILI9488_WriteData(0x07);
   \   00001296   0x2007             MOVS     R0,#+7
   \   00001298   0x.... 0x....      BL       ILI9488_WriteData
   2016          				ILI9488_WriteData(0x0a);
   \   0000129C   0x200A             MOVS     R0,#+10
   \   0000129E   0x.... 0x....      BL       ILI9488_WriteData
   2017          				ILI9488_WriteData(0x28);
   \   000012A2   0x2028             MOVS     R0,#+40
   \   000012A4   0x.... 0x....      BL       ILI9488_WriteData
   2018          				ILI9488_WriteData(0x31);
   \   000012A8   0x2031             MOVS     R0,#+49
   \   000012AA   0x.... 0x....      BL       ILI9488_WriteData
   2019          				ILI9488_WriteData(0x54);
   \   000012AE   0x2054             MOVS     R0,#+84
   \   000012B0   0x.... 0x....      BL       ILI9488_WriteData
   2020          				ILI9488_WriteData(0x47);
   \   000012B4   0x2047             MOVS     R0,#+71
   \   000012B6   0x.... 0x....      BL       ILI9488_WriteData
   2021          				ILI9488_WriteData(0x0e);
   \   000012BA   0x200E             MOVS     R0,#+14
   \   000012BC   0x.... 0x....      BL       ILI9488_WriteData
   2022          				ILI9488_WriteData(0x1c);
   \   000012C0   0x201C             MOVS     R0,#+28
   \   000012C2   0x.... 0x....      BL       ILI9488_WriteData
   2023          				ILI9488_WriteData(0x17);
   \   000012C6   0x2017             MOVS     R0,#+23
   \   000012C8   0x.... 0x....      BL       ILI9488_WriteData
   2024          				ILI9488_WriteData(0x1b);
   \   000012CC   0x201B             MOVS     R0,#+27
   \   000012CE   0x.... 0x....      BL       ILI9488_WriteData
   2025          				ILI9488_WriteData(0x1e);
   \   000012D2   0x201E             MOVS     R0,#+30
   \   000012D4   0x.... 0x....      BL       ILI9488_WriteData
   2026          				ILI9488_WriteCmd(0x29); 		
   \   000012D8   0x2029             MOVS     R0,#+41
   \   000012DA   0x.... 0x....      BL       ILI9488_WriteCmd
   2027          
   2028          				ILI9488_WriteCmd(0x2A);
   \   000012DE   0x202A             MOVS     R0,#+42
   \   000012E0   0x.... 0x....      BL       ILI9488_WriteCmd
   2029          				ILI9488_WriteData(0x00);
   \   000012E4   0x2000             MOVS     R0,#+0
   \   000012E6   0x.... 0x....      BL       ILI9488_WriteData
   2030          				ILI9488_WriteData(0x00);
   \   000012EA   0x2000             MOVS     R0,#+0
   \   000012EC   0x.... 0x....      BL       ILI9488_WriteData
   2031          				ILI9488_WriteData(0x01);
   \   000012F0   0x2001             MOVS     R0,#+1
   \   000012F2   0x.... 0x....      BL       ILI9488_WriteData
   2032          				ILI9488_WriteData(0x3F);
   \   000012F6   0x203F             MOVS     R0,#+63
   \   000012F8   0x.... 0x....      BL       ILI9488_WriteData
   2033          				ILI9488_WriteCmd(0x2B);
   \   000012FC   0x202B             MOVS     R0,#+43
   \   000012FE   0x.... 0x....      BL       ILI9488_WriteCmd
   2034          				ILI9488_WriteData(0x00);
   \   00001302   0x2000             MOVS     R0,#+0
   \   00001304   0x.... 0x....      BL       ILI9488_WriteData
   2035          				ILI9488_WriteData(0x00);
   \   00001308   0x2000             MOVS     R0,#+0
   \   0000130A   0x.... 0x....      BL       ILI9488_WriteData
   2036          				ILI9488_WriteData(0x00);
   \   0000130E   0x2000             MOVS     R0,#+0
   \   00001310   0x.... 0x....      BL       ILI9488_WriteData
   2037          				ILI9488_WriteData(0xEF);
   \   00001314   0x20EF             MOVS     R0,#+239
   \   00001316   0x.... 0x....      BL       ILI9488_WriteData
   2038          				ILI9488_WriteCmd(0x2C);		
   \   0000131A   0x202C             MOVS     R0,#+44
   \   0000131C   0x.... 0x....      BL       ILI9488_WriteCmd
   2039          			
   2040          			} 
   2041          
   2042          			//Lcd_Light_ON;
   2043          			//ili9320_Clear(Blue);
   2044          			//Delay(1200); 
   2045          			//ili9320_Clear(Green);
   2046          			//Delay(1200); 
   2047          			ili9320_Clear(Black);
   \                     ??LCD_Initializtion_14: (+1)
   \   00001320   0x2000             MOVS     R0,#+0
   \   00001322   0xE8BD 0x4076      POP      {R1,R2,R4-R6,LR}
   \   00001326   0x....             B.N      ili9320_Clear
   2048          			//Delay(1200);
   2049                
   2050          }
   2051          
   2052          /****************************************************************************
   2053          * 名    称：void ili9320_SetCursor(u16 x,u16 y)
   2054          * 功    能：设置屏幕座标
   2055          * 入口参数：x      行座标
   2056          *           y      列座标
   2057          * 出口参数：无
   2058          * 说    明：
   2059          * 调用方法：ili9320_SetCursor(10,10);
   2060          ****************************************************************************/
   2061          //inline void ili9320_SetCursor(u16 x,u16 y)

   \                                 In section .text, align 2, keep-with-next
   2062          void ili9320_SetCursor(u16 x,u16 y)
   2063          {
   \                     ili9320_SetCursor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460C             MOV      R4,R1
   2064          	if(DeviceCode==0x8989)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable26_1
   \   0000000A   0x8800             LDRH     R0,[R0, #+0]
   \   0000000C   0xF648 0x1189      MOVW     R1,#+35209
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD10C             BNE.N    ??ili9320_SetCursor_0
   2065          	{
   2066          	 	LCD_WriteReg(0x004e,y);        //行
   \   00000014   0x4621             MOV      R1,R4
   \   00000016   0x204E             MOVS     R0,#+78
   \   00000018   0x.... 0x....      BL       LCD_WriteReg
   2067              	LCD_WriteReg(0x004f,0x13f-x);  //列
   \   0000001C   0xF240 0x103F      MOVW     R0,#+319
   \   00000020   0x1B41             SUBS     R1,R0,R5
   \   00000022   0xB289             UXTH     R1,R1
   \   00000024   0x204F             MOVS     R0,#+79
   \   00000026   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000002A   0x.... 0x....      B.W      LCD_WriteReg
   2068          	}
   2069          	else if((DeviceCode==0x9919))
   \                     ??ili9320_SetCursor_0: (+1)
   \   0000002E   0xF649 0x1119      MOVW     R1,#+39193
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xD109             BNE.N    ??ili9320_SetCursor_1
   2070          	{
   2071          		LCD_WriteReg(0x004e,x); // 行
   \   00000036   0x4629             MOV      R1,R5
   \   00000038   0x204E             MOVS     R0,#+78
   \   0000003A   0x.... 0x....      BL       LCD_WriteReg
   2072            		LCD_WriteReg(0x004f,y); // 列	
   \   0000003E   0x4621             MOV      R1,R4
   \   00000040   0x204F             MOVS     R0,#+79
   \   00000042   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000046   0x.... 0x....      B.W      LCD_WriteReg
   2073          	}
   2074            else if((DeviceCode==0x5761))      //SSD1963
   \                     ??ili9320_SetCursor_1: (+1)
   \   0000004A   0xF245 0x7161      MOVW     R1,#+22369
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD11F             BNE.N    ??ili9320_SetCursor_2
   2075          	{
   2076          		LCD_WrtReg(0x002A);	
   \   00000052   0x202A             MOVS     R0,#+42
   \   00000054   0x.... 0x....      BL       LCD_WrtReg
   2077              LCD_WrtRAM(x>>8);	    
   \   00000058   0x0A28             LSRS     R0,R5,#+8
   \   0000005A   0x.... 0x....      BL       LCD_WrtRAM
   2078              LCD_WrtRAM(x&0x00ff);
   \   0000005E   0xB2E8             UXTB     R0,R5
   \   00000060   0x.... 0x....      BL       LCD_WrtRAM
   2079              LCD_WrtRAM(HDP>>8);	    
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x.... 0x....      BL       LCD_WrtRAM
   2080              LCD_WrtRAM(HDP&0x00ff);
   \   0000006A   0x201F             MOVS     R0,#+31
   \   0000006C   0x.... 0x....      BL       LCD_WrtRAM
   2081              LCD_WrtReg(0x002b);	
   \   00000070   0x202B             MOVS     R0,#+43
   \   00000072   0x.... 0x....      BL       LCD_WrtReg
   2082              LCD_WrtRAM(y>>8);	    
   \   00000076   0x0A20             LSRS     R0,R4,#+8
   \   00000078   0x.... 0x....      BL       LCD_WrtRAM
   2083              LCD_WrtRAM(y&0x00ff);
   \   0000007C   0xB2E0             UXTB     R0,R4
   \   0000007E   0x.... 0x....      BL       LCD_WrtRAM
   2084              LCD_WrtRAM(VDP>>8);	    
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      BL       LCD_WrtRAM
   2085              LCD_WrtRAM(VDP&0x00ff);	
   \   00000088   0x20DF             MOVS     R0,#+223
   \   0000008A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000008E   0x.... 0x....      B.W      LCD_WrtRAM
   2086          	}
   2087          	else if(DeviceCode == 0x9488)
   \                     ??ili9320_SetCursor_2: (+1)
   \   00000092   0xF249 0x4188      MOVW     R1,#+38024
   \   00000096   0x4288             CMP      R0,R1
   \   00000098   0xD123             BNE.N    ??ili9320_SetCursor_3
   2088          		{
   2089          			ILI9488_WriteCmd(0X002A); 
   \   0000009A   0x202A             MOVS     R0,#+42
   \   0000009C   0x.... 0x....      BL       ILI9488_WriteCmd
   2090          			ILI9488_WriteData(x>>8); 
   \   000000A0   0x0A2E             LSRS     R6,R5,#+8
   \   000000A2   0x4630             MOV      R0,R6
   \   000000A4   0x.... 0x....      BL       ILI9488_WriteData
   2091          			ILI9488_WriteData(x&0X00FF); 
   \   000000A8   0xB2ED             UXTB     R5,R5
   \   000000AA   0x4628             MOV      R0,R5
   \   000000AC   0x.... 0x....      BL       ILI9488_WriteData
   2092          			ILI9488_WriteData(x>>8); 
   \   000000B0   0x4630             MOV      R0,R6
   \   000000B2   0x.... 0x....      BL       ILI9488_WriteData
   2093          			ILI9488_WriteData(x&0X00FF);			
   \   000000B6   0x4628             MOV      R0,R5
   \   000000B8   0x.... 0x....      BL       ILI9488_WriteData
   2094          			//ILI9488_WriteData(0X01); 
   2095          			//ILI9488_WriteData(0XDF);			
   2096          			ILI9488_WriteCmd(0X002B); 
   \   000000BC   0x202B             MOVS     R0,#+43
   \   000000BE   0x.... 0x....      BL       ILI9488_WriteCmd
   2097          			ILI9488_WriteData(y>>8); 
   \   000000C2   0x0A25             LSRS     R5,R4,#+8
   \   000000C4   0x4628             MOV      R0,R5
   \   000000C6   0x.... 0x....      BL       ILI9488_WriteData
   2098          			ILI9488_WriteData(y&0X00FF);
   \   000000CA   0xB2E4             UXTB     R4,R4
   \   000000CC   0x4620             MOV      R0,R4
   \   000000CE   0x.... 0x....      BL       ILI9488_WriteData
   2099          			ILI9488_WriteData(y>>8); 
   \   000000D2   0x4628             MOV      R0,R5
   \   000000D4   0x.... 0x....      BL       ILI9488_WriteData
   2100          			ILI9488_WriteData(y&0X00FF);			
   \   000000D8   0x4620             MOV      R0,R4
   \   000000DA   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000DE   0x.... 0x....      B.W      ILI9488_WriteData
   2101          			//ILI9488_WriteData(0X01); 
   2102          			//ILI9488_WriteData(0X3F);			
   2103          		}				
   2104          	else if((DeviceCode==0x9325)||(DeviceCode==0x9328)||(DeviceCode==0x1505))
   \                     ??ili9320_SetCursor_3: (+1)
   \   000000E2   0xF249 0x3125      MOVW     R1,#+37669
   \   000000E6   0x4288             CMP      R0,R1
   \   000000E8   0xD007             BEQ.N    ??ili9320_SetCursor_4
   \   000000EA   0xF249 0x3128      MOVW     R1,#+37672
   \   000000EE   0x4288             CMP      R0,R1
   \   000000F0   0xD003             BEQ.N    ??ili9320_SetCursor_4
   \   000000F2   0xF241 0x5105      MOVW     R1,#+5381
   \   000000F6   0x4288             CMP      R0,R1
   \   000000F8   0xD10C             BNE.N    ??ili9320_SetCursor_5
   2105          	{
   2106            		LCD_WriteReg(0x0020,y); // 行
   \                     ??ili9320_SetCursor_4: (+1)
   \   000000FA   0x4621             MOV      R1,R4
   \   000000FC   0x2020             MOVS     R0,#+32
   \   000000FE   0x.... 0x....      BL       LCD_WriteReg
   2107            		LCD_WriteReg(0x0021,0x13f-x); // 列
   \   00000102   0xF240 0x103F      MOVW     R0,#+319
   \   00000106   0x1B41             SUBS     R1,R0,R5
   \   00000108   0xB289             UXTH     R1,R1
   \   0000010A   0x2021             MOVS     R0,#+33
   \   0000010C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000110   0x.... 0x....      B.W      LCD_WriteReg
   2108          	}
   2109          	else
   2110          	{
   2111          		ILI9488_WriteCmd(0X2A); 
   \                     ??ili9320_SetCursor_5: (+1)
   \   00000114   0x202A             MOVS     R0,#+42
   \   00000116   0x.... 0x....      BL       ILI9488_WriteCmd
   2112          		ILI9488_WriteData(x>>8); 
   \   0000011A   0x0A28             LSRS     R0,R5,#+8
   \   0000011C   0x.... 0x....      BL       ILI9488_WriteData
   2113          		ILI9488_WriteData(x&0XFF);  
   \   00000120   0xB2E8             UXTB     R0,R5
   \   00000122   0x.... 0x....      BL       ILI9488_WriteData
   2114          		
   2115          		ILI9488_WriteCmd(0X2B); 
   \   00000126   0x202B             MOVS     R0,#+43
   \   00000128   0x.... 0x....      BL       ILI9488_WriteCmd
   2116          		ILI9488_WriteData(y>>8); 
   \   0000012C   0x0A20             LSRS     R0,R4,#+8
   \   0000012E   0x.... 0x....      BL       ILI9488_WriteData
   2117          		ILI9488_WriteData(y&0XFF);
   \   00000132   0xB2E0             UXTB     R0,R4
   \   00000134   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000138   0x.... 0x....      B.W      ILI9488_WriteData
   2118          	}  
   2119            
   2120                	
   2121          }
   2122          /****************************************************************************
   2123          * 名    称：void ili9320_SetWindows(u16 StartX,u16 StartY,u16 EndX,u16 EndY)
   2124          * 功    能：设置窗口区域
   2125          * 入口参数：StartX     行起始座标
   2126          *           StartY     列起始座标
   2127          *           EndX       行结束座标
   2128          *           EndY       列结束座标
   2129          * 出口参数：无
   2130          * 说    明：
   2131          * 调用方法：ili9320_SetWindows(0,0,100,100)；
   2132          ****************************************************************************/
   2133          //inline void ili9320_SetWindows(u16 StartX,u16 StartY,u16 EndX,u16 EndY)

   \                                 In section .text, align 2, keep-with-next
   2134          void ili9320_SetWindows(u16 StartX,u16 StartY,u16 width,u16 heigh)
   2135          {
   \                     ili9320_SetWindows: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
   2136          	u16 s_h,s_l, e_h, e_l;
   2137          	
   2138          	u16 xEnd, yEnd;
   2139          	xEnd = StartX + width;
   \   0000000C   0xEB06 0x0804      ADD      R8,R6,R4
   \   00000010   0x46C1             MOV      R9,R8
   2140            yEnd = StartY + heigh-1;
   \   00000012   0x1978             ADDS     R0,R7,R5
   \   00000014   0xF1A0 0x0A01      SUB      R10,R0,#+1
   \   00000018   0x46D3             MOV      R11,R10
   2141            if(DeviceCode==0x8989)
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable26_1
   \   0000001E   0x8800             LDRH     R0,[R0, #+0]
   \   00000020   0xF648 0x1189      MOVW     R1,#+35209
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD111             BNE.N    ??ili9320_SetWindows_0
   2142            {
   2143            	
   2144          	/*LCD_WriteReg(0x0044, (StartX & 0xff) | (xEnd << 8));
   2145          	 LCD_WriteReg(0x0045, StartY);
   2146          	 LCD_WriteReg(0x0046, yEnd);*/
   2147          	 LCD_WriteReg(0x0044, (StartY& 0xff) | (yEnd << 8));
   \   00000028   0xB2E8             UXTB     R0,R5
   \   0000002A   0xEA40 0x210B      ORR      R1,R0,R11, LSL #+8
   \   0000002E   0xB289             UXTH     R1,R1
   \   00000030   0x2044             MOVS     R0,#+68
   \   00000032   0x.... 0x....      BL       LCD_WriteReg
   2148          	 LCD_WriteReg(0x0045, StartX);
   \   00000036   0x4621             MOV      R1,R4
   \   00000038   0x2045             MOVS     R0,#+69
   \   0000003A   0x.... 0x....      BL       LCD_WriteReg
   2149          	 LCD_WriteReg(0x0046, xEnd);
   \   0000003E   0x4649             MOV      R1,R9
   \   00000040   0xB289             UXTH     R1,R1
   \   00000042   0x2046             MOVS     R0,#+70
   \   00000044   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000048   0x.... 0x....      B.W      LCD_WriteReg
   2150              
   2151            }
   2152          	else if(DeviceCode == 0X9488)
   \                     ??ili9320_SetWindows_0: (+1)
   \   0000004C   0xF249 0x4188      MOVW     R1,#+38024
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD023             BEQ.N    ??ili9320_SetWindows_1
   2153          	{
   2154          	 	s_h = (StartX >> 8) & 0X00ff;
   2155          		s_l = StartX & 0X00ff;
   2156          		e_h = ((StartX + width - 1) >> 8) & 0X00ff;
   2157          		e_l = (StartX + width - 1) & 0X00ff;
   2158          		
   2159          		ILI9488_WriteCmd(0x002A);
   2160          		ILI9488_WriteData(s_h);
   2161          		ILI9488_WriteData(s_l);
   2162          		ILI9488_WriteData(e_h);
   2163          		ILI9488_WriteData(e_l);
   2164          
   2165          		s_h = (StartY >> 8) & 0X00ff;
   2166          		s_l = StartY & 0X00ff;
   2167          		e_h = ((StartY + heigh - 1) >> 8) & 0X00ff;
   2168          		e_l = (StartY + heigh - 1) & 0X00ff;
   2169          		
   2170          		ILI9488_WriteCmd(0x002B);
   2171          		ILI9488_WriteData(s_h);
   2172          		ILI9488_WriteData(s_l);
   2173          		ILI9488_WriteData(e_h);
   2174          		ILI9488_WriteData(e_l);		
   2175          	}	
   2176            else if((DeviceCode==0x9325)||(DeviceCode==0x9328)||(DeviceCode==0x1505))
   \   00000054   0xF249 0x3125      MOVW     R1,#+37669
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD007             BEQ.N    ??ili9320_SetWindows_2
   \   0000005C   0xF249 0x3128      MOVW     R1,#+37672
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xD003             BEQ.N    ??ili9320_SetWindows_2
   \   00000064   0xF241 0x5105      MOVW     R1,#+5381
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xD117             BNE.N    ??ili9320_SetWindows_1
   2177            {
   2178          	 /* LCD_WriteReg(0x0050, StartX);
   2179          	  LCD_WriteReg(0x0052, StartY);
   2180          	  LCD_WriteReg(0x0051, xEnd);
   2181          	  LCD_WriteReg(0x0053, yEnd);*/
   2182          	  LCD_WriteReg(0x0050,StartY);        //Specify the start/end positions of the window address in the horizontal direction by an address unit
   \                     ??ili9320_SetWindows_2: (+1)
   \   0000006C   0x4629             MOV      R1,R5
   \   0000006E   0x2050             MOVS     R0,#+80
   \   00000070   0x.... 0x....      BL       LCD_WriteReg
   2183          		LCD_WriteReg(0x0051,yEnd);        //Specify the start positions of the window address in the vertical direction by an address unit 
   \   00000074   0x4659             MOV      R1,R11
   \   00000076   0xB289             UXTH     R1,R1
   \   00000078   0x2051             MOVS     R0,#+81
   \   0000007A   0x.... 0x....      BL       LCD_WriteReg
   2184          		LCD_WriteReg(0x0052,320 - xEnd); 
   \   0000007E   0xF5C9 0x71A0      RSB      R1,R9,#+320
   \   00000082   0xB289             UXTH     R1,R1
   \   00000084   0x2052             MOVS     R0,#+82
   \   00000086   0x.... 0x....      BL       LCD_WriteReg
   2185          		LCD_WriteReg(0x0053,320 - StartX - 1);        //Specify the end positions of the window address in the vertical direction by an address unit
   \   0000008A   0xF240 0x103F      MOVW     R0,#+319
   \   0000008E   0x1B01             SUBS     R1,R0,R4
   \   00000090   0xB289             UXTH     R1,R1
   \   00000092   0x2053             MOVS     R0,#+83
   \   00000094   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000098   0x.... 0x....      B.W      LCD_WriteReg
   2186          	
   2187            }	
   2188          	else
   2189          	 {
   2190          	 	s_h = (StartX >> 8) & 0Xff;
   2191          		s_l = StartX & 0Xff;
   2192          		e_h = ((StartX + width - 1) >> 8) & 0Xff;
   2193          		e_l = (StartX + width - 1) & 0Xff;
   2194          		
   2195          		ILI9488_WriteCmd(0x2A);
   \                     ??ili9320_SetWindows_1: (+1)
   \   0000009C   0x202A             MOVS     R0,#+42
   \   0000009E   0x.... 0x....      BL       ILI9488_WriteCmd
   2196          		ILI9488_WriteData(s_h);
   \   000000A2   0x0A20             LSRS     R0,R4,#+8
   \   000000A4   0x.... 0x....      BL       ILI9488_WriteData
   2197          		ILI9488_WriteData(s_l);
   \   000000A8   0xB2E0             UXTB     R0,R4
   \   000000AA   0x.... 0x....      BL       ILI9488_WriteData
   2198          		ILI9488_WriteData(e_h);
   \   000000AE   0x1930             ADDS     R0,R6,R4
   \   000000B0   0x1E40             SUBS     R0,R0,#+1
   \   000000B2   0x1200             ASRS     R0,R0,#+8
   \   000000B4   0xB2C0             UXTB     R0,R0
   \   000000B6   0x.... 0x....      BL       ILI9488_WriteData
   2199          		ILI9488_WriteData(e_l);
   \   000000BA   0xF1A8 0x0001      SUB      R0,R8,#+1
   \   000000BE   0xB2C0             UXTB     R0,R0
   \   000000C0   0x.... 0x....      BL       ILI9488_WriteData
   2200          
   2201          		s_h = (StartY >> 8) & 0Xff;
   2202          		s_l = StartY & 0Xff;
   2203          		e_h = ((StartY + heigh - 1) >> 8) & 0Xff;
   2204          		e_l = (StartY + heigh - 1) & 0Xff;
   2205          		
   2206          		ILI9488_WriteCmd(0x2B);
   \   000000C4   0x202B             MOVS     R0,#+43
   \   000000C6   0x.... 0x....      BL       ILI9488_WriteCmd
   2207          		ILI9488_WriteData(s_h);
   \   000000CA   0x0A28             LSRS     R0,R5,#+8
   \   000000CC   0x.... 0x....      BL       ILI9488_WriteData
   2208          		ILI9488_WriteData(s_l);
   \   000000D0   0xB2E8             UXTB     R0,R5
   \   000000D2   0x.... 0x....      BL       ILI9488_WriteData
   2209          		ILI9488_WriteData(e_h);
   \   000000D6   0x1978             ADDS     R0,R7,R5
   \   000000D8   0x1E40             SUBS     R0,R0,#+1
   \   000000DA   0x1200             ASRS     R0,R0,#+8
   \   000000DC   0xB2C0             UXTB     R0,R0
   \   000000DE   0x.... 0x....      BL       ILI9488_WriteData
   2210          		ILI9488_WriteData(e_l);
   \   000000E2   0xFA5F 0xF08A      UXTB     R0,R10
   \   000000E6   0xE8BD 0x4FF2      POP      {R1,R4-R11,LR}
   \   000000EA   0x.... 0x....      B.W      ILI9488_WriteData
   2211          	 }
   2212          	#if 0
   2213            else
   2214            {
   2215          	 /* LCD_WriteReg(0x0050, StartX);
   2216          	  LCD_WriteReg(0x0052, StartY);
   2217          	  LCD_WriteReg(0x0051, xEnd);
   2218          	  LCD_WriteReg(0x0053, yEnd);*/
   2219          	  	//**LCD_WriteReg(0x0050,StartY);        //Specify the start/end positions of the window address in the horizontal direction by an address unit
   2220          		//**LCD_WriteReg(0x0051,yEnd);        //Specify the start positions of the window address in the vertical direction by an address unit 
   2221          		//**LCD_WriteReg(0x0052,320 - xEnd); 
   2222          		//**LCD_WriteReg(0x0053,320 - StartX - 1);        //Specify the end positions of the window address in the vertical direction by an address unit
   2223              	LCD_WrtReg(0X002A);
   2224          	LCD_WrtRAM(StartX>>8);
   2225          	LCD_WrtRAM(StartX&0X00FF);
   2226          	LCD_WrtRAM(xEnd>>8);
   2227          	LCD_WrtRAM(xEnd&0X00FF);
   2228          		
   2229          	LCD_WrtReg(0X002B);	
   2230          	LCD_WrtRAM(StartY>>8);	
   2231          	LCD_WrtRAM(StartY&0X00FF);
   2232          	LCD_WrtRAM(yEnd>>8);	
   2233          	LCD_WrtRAM(yEnd&0X00FF);      //**
   2234          	
   2235            }
   2236          	#endif
   2237          }
   2238          
   2239          /****************************************************************************
   2240          * 名    称：void ili9320_Clear(u16 dat)
   2241          * 功    能：将屏幕填充成指定的颜色，如清屏，则填充 0xffff
   2242          * 入口参数：dat      填充值
   2243          * 出口参数：无
   2244          * 说    明：
   2245          * 调用方法：ili9320_Clear(0xffff);
   2246          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2247          void ili9320_Clear(u16 Color)
   2248          {
   \                     ili9320_Clear: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   2249            u32 index=0;
   \   00000004   0x2500             MOVS     R5,#+0
   2250            //**ili9320_SetCursor(0,0); 
   2251            //**LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */    
   2252            //**for(index=0;index<76800;index++)
   2253            //**{
   2254               //**LCD->LCD_RAM=Color;
   2255            //**}
   2256            
   2257            unsigned int count; 
   2258          	
   2259          	if(DeviceCode ==0x9488)
   \   00000006   0x....             LDR.N    R0,??DataTable26_1
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0xF249 0x4188      MOVW     R1,#+38024
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD114             BNE.N    ??ili9320_Clear_0
   2260          	{
   2261          		ili9320_SetCursor(0,0);
   \   00000012   0x4629             MOV      R1,R5
   \   00000014   0x4608             MOV      R0,R1
   \   00000016   0x.... 0x....      BL       ili9320_SetCursor
   2262              ili9320_SetWindows(0,0,480,320);
   \   0000001A   0xF44F 0x73A0      MOV      R3,#+320
   \   0000001E   0xF44F 0x72F0      MOV      R2,#+480
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4608             MOV      R0,R1
   \   00000026   0x.... 0x....      BL       ili9320_SetWindows
   2263          		LCD_WriteRAM_Prepare();
   \   0000002A   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   \   0000002E   0x....             LDR.N    R0,??DataTable26_2  ;; 0x60020000
   2264              for(index=0;index<320*480;index++)
   \                     ??ili9320_Clear_1: (+1)
   \   00000030   0xF5B5 0x3F16      CMP      R5,#+153600
   \   00000034   0xD23F             BCS.N    ??ili9320_Clear_2
   2265              {
   2266                  LCD->LCD_RAM=Color;
   \   00000036   0x8004             STRH     R4,[R0, #+0]
   2267              }
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
   \   0000003A   0xE7F9             B.N      ??ili9320_Clear_1
   2268          	}
   2269          	else if(DeviceCode == 0x5761)
   \                     ??ili9320_Clear_0: (+1)
   \   0000003C   0xF245 0x7161      MOVW     R1,#+22369
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD12B             BNE.N    ??ili9320_Clear_3
   2270          	{
   2271          	    LCD_WrtReg(0x002a);	
   \   00000044   0x202A             MOVS     R0,#+42
   \   00000046   0x.... 0x....      BL       LCD_WrtReg
   2272          	    LCD_WrtRAM(0);	    
   \   0000004A   0x4628             MOV      R0,R5
   \   0000004C   0x.... 0x....      BL       LCD_WrtRAM
   2273          	    LCD_WrtRAM(0);
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x.... 0x....      BL       LCD_WrtRAM
   2274          	    LCD_WrtRAM(HDP>>8);	    
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0x.... 0x....      BL       LCD_WrtRAM
   2275          	    LCD_WrtRAM(HDP&0x00ff);
   \   0000005C   0x201F             MOVS     R0,#+31
   \   0000005E   0x.... 0x....      BL       LCD_WrtRAM
   2276          	    LCD_WrtReg(0x002b);	
   \   00000062   0x202B             MOVS     R0,#+43
   \   00000064   0x.... 0x....      BL       LCD_WrtReg
   2277          	    LCD_WrtRAM(0);	    
   \   00000068   0x4628             MOV      R0,R5
   \   0000006A   0x.... 0x....      BL       LCD_WrtRAM
   2278          	    LCD_WrtRAM(0);
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x.... 0x....      BL       LCD_WrtRAM
   2279          	    LCD_WrtRAM(VDP>>8);	    
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x.... 0x....      BL       LCD_WrtRAM
   2280          	    LCD_WrtRAM(VDP&0x00ff);
   \   0000007A   0x20DF             MOVS     R0,#+223
   \   0000007C   0x.... 0x....      BL       LCD_WrtRAM
   2281          	    LCD_WrtReg(0x002c);	
   \   00000080   0x202C             MOVS     R0,#+44
   \   00000082   0x.... 0x....      BL       LCD_WrtReg
   2282          	    LCD_WrtReg(0x002c);
   \   00000086   0x202C             MOVS     R0,#+44
   \   00000088   0x.... 0x....      BL       LCD_WrtReg
   2283          	    for(count=0;count<(HDP+1)*(VDP+1);count++)
   \                     ??ili9320_Clear_4: (+1)
   \   0000008C   0x....             LDR.N    R0,??DataTable26_3  ;; 0x5dc00
   \   0000008E   0x4285             CMP      R5,R0
   \   00000090   0xD211             BCS.N    ??ili9320_Clear_2
   2284          			{
   2285          	       LCD_WrtRAM(Color);
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       LCD_WrtRAM
   2286          			}
   \   00000098   0x1C6D             ADDS     R5,R5,#+1
   \   0000009A   0xE7F7             B.N      ??ili9320_Clear_4
   2287          	}
   2288          	else
   2289          	{
   2290          		  ili9320_SetCursor(0,0); 
   \                     ??ili9320_Clear_3: (+1)
   \   0000009C   0x4629             MOV      R1,R5
   \   0000009E   0x4608             MOV      R0,R1
   \   000000A0   0x.... 0x....      BL       ili9320_SetCursor
   2291          		  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   \   000000A4   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   2292          		  for(index=0;index<76800;index++)
   \   000000A8   0x....             LDR.N    R0,??DataTable26_2  ;; 0x60020000
   \   000000AA   0xE001             B.N      ??ili9320_Clear_5
   2293          		  {
   2294          		     LCD->LCD_RAM=Color;
   \                     ??ili9320_Clear_6: (+1)
   \   000000AC   0x8004             STRH     R4,[R0, #+0]
   2295          		  }		
   \   000000AE   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ili9320_Clear_5: (+1)
   \   000000B0   0xF5B5 0x3F96      CMP      R5,#+76800
   \   000000B4   0xD3FA             BCC.N    ??ili9320_Clear_6
   2296          	}
   2297          }    //**
   \                     ??ili9320_Clear_2: (+1)
   \   000000B6   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2298          
   2299          /****************************************************************************
   2300          * 名    称：u16 ili9320_GetPoint(u16 x,u16 y)
   2301          * 功    能：获取指定座标的颜色值
   2302          * 入口参数：x      行座标
   2303          *           y      列座标
   2304          * 出口参数：当前座标颜色值
   2305          * 说    明：
   2306          * 调用方法：i=ili9320_GetPoint(10,10);
   2307          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2308          u16 ili9320_GetPoint(u16 x,u16 y)
   2309          {
   \                     ili9320_GetPoint: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2310            ili9320_SetCursor(x,y);
   \   00000002   0x.... 0x....      BL       ili9320_SetCursor
   2311            return (ili9320_BGR2RGB(LCD_ReadRAM()));
   \   00000006   0x.... 0x....      BL       LCD_ReadRAM
   \   0000000A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000E   0x....             B.N      ili9320_BGR2RGB
   2312          }
   2313          /****************************************************************************
   2314          * 名    称：void ili9320_SetPoint(u16 x,u16 y,u16 point)
   2315          * 功    能：在指定座标画点
   2316          * 入口参数：x      行座标
   2317          *           y      列座标
   2318          *           point  点的颜色
   2319          * 出口参数：无
   2320          * 说    明：
   2321          * 调用方法：ili9320_SetPoint(10,10,0x0fe0);
   2322          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2323          void ili9320_SetPoint(u16 x,u16 y,u16 point)
   2324          {
   \                     ili9320_SetPoint: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4614             MOV      R4,R2
   2325          	if(DeviceCode == 0x9488)
   \   00000004   0x....             LDR.N    R2,??DataTable26_1
   \   00000006   0x8812             LDRH     R2,[R2, #+0]
   \   00000008   0xF249 0x4388      MOVW     R3,#+38024
   \   0000000C   0x429A             CMP      R2,R3
   \   0000000E   0xD105             BNE.N    ??ili9320_SetPoint_0
   2326          	{
   2327          		if ( (x>480)||(y>320) ) return;
   \   00000010   0xF5B0 0x7FF0      CMP      R0,#+480
   \   00000014   0xDC0B             BGT.N    ??ili9320_SetPoint_1
   \   00000016   0xF5B1 0x7FA0      CMP      R1,#+320
   \   0000001A   0xDC08             BGT.N    ??ili9320_SetPoint_1
   2328          	}
   2329            //**if ( (x>320)||(y>240) ) return;
   2330            ili9320_SetCursor(x,y);    /*设置光标位置*/
   \                     ??ili9320_SetPoint_0: (+1)
   \   0000001C   0x.... 0x....      BL       ili9320_SetCursor
   2331          
   2332            LCD_WriteRAM_Prepare();     /* 开始写入GRAM*/
   \   00000020   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   2333            LCD_WriteRAM(point);
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x.... 0x....      B.W      LCD_WriteRAM
   \                     ??ili9320_SetPoint_1: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   2334          }
   2335          
   2336          
   2337          /****************************************************************************
   2338          * 名    称：void ili9320_DrawPicture(u16 StartX,u16 StartY,u16 EndX,u16 EndY,u16 *pic)
   2339          * 功    能：在指定座标范围显示一副图片
   2340          * 入口参数：StartX     行起始座标
   2341          *           StartY     列起始座标
   2342          *           EndX       行结束座标
   2343          *           EndY       列结束座标
   2344                      pic        图片头指针
   2345          * 出口参数：无
   2346          * 说    明：图片取模格式为水平扫描，16位颜色模式
   2347          * 调用方法：ili9320_DrawPicture(0,0,100,100,(u16*)demo);
   2348          * 作    者： www.armjishu.com
   2349          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2350          void ili9320_DrawPicture(u16 StartX,u16 StartY,u16 EndX,u16 EndY,u16 *pic)
   2351          {
   \                     ili9320_DrawPicture: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4681             MOV      R9,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x461D             MOV      R5,R3
   2352            u32  i, total;
   2353            u16 data1,data2,data3;
   2354            u16 *picturepointer = pic;
   \   0000000A   0x9E0A             LDR      R6,[SP, #+40]
   2355            u16 x,y;
   2356            
   2357            printf("ili9320_DrawPicture StartX %d StartY %d EndX %d EndY %d \n\r", StartX, StartY, EndX, EndY);
   \   0000000C   0x4617             MOV      R7,R2
   \   0000000E   0x9500             STR      R5,[SP, #+0]
   \   00000010   0x463B             MOV      R3,R7
   \   00000012   0x4622             MOV      R2,R4
   \   00000014   0x4649             MOV      R1,R9
   \   00000016   0x.... 0x....      ADR.W    R0,`?<Constant "ili9320_DrawPicture S...">`
   \   0000001A   0x.... 0x....      BL       printf
   2358          
   2359            x=StartX;
   2360            y=StartY;
   \   0000001E   0x46A2             MOV      R10,R4
   2361            
   2362            total = (EndX - StartX + 1)*(EndY - StartY + 1 )/2;
   \   00000020   0xEBA7 0x0009      SUB      R0,R7,R9
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x1B29             SUBS     R1,R5,R4
   \   00000028   0x1C49             ADDS     R1,R1,#+1
   \   0000002A   0x4348             MULS     R0,R1,R0
   \   0000002C   0xEB00 0x70D0      ADD      R0,R0,R0, LSR #+31
   \   00000030   0x1047             ASRS     R7,R0,#+1
   2363          
   2364            for (i=0;i<total;i++)
   \   00000032   0xF04F 0x0800      MOV      R8,#+0
   \   00000036   0xE038             B.N      ??ili9320_DrawPicture_0
   2365            {
   2366                data1 = *picturepointer++;
   \                     ??ili9320_DrawPicture_1: (+1)
   \   00000038   0xF836 0x0B02      LDRH     R0,[R6], #+2
   2367                data2 = *picturepointer++;
   \   0000003C   0xF836 0xBB02      LDRH     R11,[R6], #+2
   2368                data3 = ((data1 >>3)& 0x001f) |((data1>>5) & 0x07E0) | ((data2<<8) & 0xF800);
   2369                ili9320_SetPoint(x,y,data3);
   \   00000040   0xF3C0 0x01C4      UBFX     R1,R0,#+3,#+5
   \   00000044   0x0940             LSRS     R0,R0,#+5
   \   00000046   0xF400 0x60FC      AND      R0,R0,#0x7E0
   \   0000004A   0x4308             ORRS     R0,R0,R1
   \   0000004C   0xEA4F 0x210B      LSL      R1,R11,#+8
   \   00000050   0xF401 0x4178      AND      R1,R1,#0xF800
   \   00000054   0xEA41 0x0200      ORR      R2,R1,R0
   \   00000058   0x4651             MOV      R1,R10
   \   0000005A   0x4648             MOV      R0,R9
   \   0000005C   0xB280             UXTH     R0,R0
   \   0000005E   0x.... 0x....      BL       ili9320_SetPoint
   2370                y++;
   \   00000062   0xF10A 0x0A01      ADD      R10,R10,#+1
   2371                if(y > EndY)
   \   00000066   0xFA1F 0xFA8A      UXTH     R10,R10
   \   0000006A   0x4555             CMP      R5,R10
   \   0000006C   0xD202             BCS.N    ??ili9320_DrawPicture_2
   2372                {
   2373                    x++;
   \   0000006E   0xF109 0x0901      ADD      R9,R9,#+1
   2374                    y=StartY;
   \   00000072   0x46A2             MOV      R10,R4
   2375                }
   2376          
   2377          
   2378                data1 = data2;
   2379                data2 = *picturepointer++;
   \                     ??ili9320_DrawPicture_2: (+1)
   \   00000074   0xF836 0x0B02      LDRH     R0,[R6], #+2
   2380                data3 = ((data1 >>11)& 0x001f) |((data2<<3) & 0x07E0) | ((data2) & 0xF800);
   2381                ili9320_SetPoint(x,y,data3);
   \   00000078   0x00C1             LSLS     R1,R0,#+3
   \   0000007A   0xF401 0x61FC      AND      R1,R1,#0x7E0
   \   0000007E   0xEA41 0x21DB      ORR      R1,R1,R11, LSR #+11
   \   00000082   0xF400 0x4078      AND      R0,R0,#0xF800
   \   00000086   0xEA40 0x0201      ORR      R2,R0,R1
   \   0000008A   0x4651             MOV      R1,R10
   \   0000008C   0x4648             MOV      R0,R9
   \   0000008E   0xB280             UXTH     R0,R0
   \   00000090   0x.... 0x....      BL       ili9320_SetPoint
   2382                y++;
   \   00000094   0xF10A 0x0A01      ADD      R10,R10,#+1
   2383                if(y > EndY)
   \   00000098   0xFA1F 0xFA8A      UXTH     R10,R10
   \   0000009C   0x4555             CMP      R5,R10
   \   0000009E   0xD202             BCS.N    ??ili9320_DrawPicture_3
   2384                {
   2385                    x++;
   \   000000A0   0xF109 0x0901      ADD      R9,R9,#+1
   2386                    y=StartY;
   \   000000A4   0x46A2             MOV      R10,R4
   2387                }
   2388            }
   \                     ??ili9320_DrawPicture_3: (+1)
   \   000000A6   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??ili9320_DrawPicture_0: (+1)
   \   000000AA   0x45B8             CMP      R8,R7
   \   000000AC   0xD3C4             BCC.N    ??ili9320_DrawPicture_1
   2389          
   2390          }
   \   000000AE   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   2391          
   2392          /****************************************************************************
   2393          * 名    称：void ili9320_PutChar(u16 x,u16 y,u8 c,u16 charColor,u16 bkColor)
   2394          * 功    能：在指定座标显示一个8x16点阵的ascii字符
   2395          * 入口参数：x          行座标
   2396          *           y          列座标
   2397          *           charColor  字符的颜色
   2398          *           bkColor    字符背景颜色
   2399          * 出口参数：无
   2400          * 说    明：显示范围限定为可显示的ascii码
   2401          * 调用方法：ili9320_PutChar(10,10,'a',0x0000,0xffff);
   2402          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2403          void ili9320_PutChar(u16 x,u16 y,u8 c,u16 charColor,u16 bkColor)  // Lihao
   2404          {
   \                     ili9320_PutChar: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
   2405            u16 i=0;
   2406            u16 j=0;
   2407            
   2408            u8 tmp_char=0;
   2409            
   2410            if(HyalineBackColor == bkColor)
   \   0000000E   0x2C01             CMP      R4,#+1
   \   00000010   0xF04F 0x0900      MOV      R9,#+0
   \   00000014   0xD127             BNE.N    ??ili9320_PutChar_0
   2411            {
   2412              for (i=0;i<16;i++)
   \   00000016   0xE015             B.N      ??ili9320_PutChar_1
   2413              {
   2414                tmp_char=ascii_8x16[((c-0x20)*16)+i];
   2415                for (j=0;j<8;j++)
   2416                {
   2417                  if ( (tmp_char >> 7-j) & 0x01 == 0x01)
   \                     ??ili9320_PutChar_2: (+1)
   \   00000018   0xF1CB 0x0007      RSB      R0,R11,#+7
   \   0000001C   0xFA4A 0xF000      ASR      R0,R10,R0
   \   00000020   0x07C0             LSLS     R0,R0,#+31
   \   00000022   0xD508             BPL.N    ??ili9320_PutChar_3
   2418                    {
   2419                      ili9320_SetPoint(x+j,y+i,charColor); // 字符颜色
   \   00000024   0x4642             MOV      R2,R8
   \   00000026   0xEB09 0x0106      ADD      R1,R9,R6
   \   0000002A   0xB289             UXTH     R1,R1
   \   0000002C   0xEB0B 0x0005      ADD      R0,R11,R5
   \   00000030   0xB280             UXTH     R0,R0
   \   00000032   0x.... 0x....      BL       ili9320_SetPoint
   2420                    }
   2421                    else
   2422                    {
   2423                      // do nothing // 透明背景
   2424                    }
   2425                }
   \                     ??ili9320_PutChar_3: (+1)
   \   00000036   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??ili9320_PutChar_4: (+1)
   \   0000003A   0xF1BB 0x0F08      CMP      R11,#+8
   \   0000003E   0xDBEB             BLT.N    ??ili9320_PutChar_2
   \   00000040   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??ili9320_PutChar_1: (+1)
   \   00000044   0xF1B9 0x0F10      CMP      R9,#+16
   \   00000048   0xDA36             BGE.N    ??ili9320_PutChar_5
   \   0000004A   0xEB09 0x1007      ADD      R0,R9,R7, LSL #+4
   \   0000004E   0x.... 0x....      ADR.W    R1,ascii_8x16
   \   00000052   0x1840             ADDS     R0,R0,R1
   \   00000054   0xF5A0 0x7000      SUB      R0,R0,#+512
   \   00000058   0xF890 0xA000      LDRB     R10,[R0, #+0]
   \   0000005C   0xF04F 0x0B00      MOV      R11,#+0
   \   00000060   0xE7EB             B.N      ??ili9320_PutChar_4
   2426              }
   2427            }
   2428            else
   2429            {
   2430                  for (i=0;i<16;i++)
   \                     ??ili9320_PutChar_6: (+1)
   \   00000062   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??ili9320_PutChar_0: (+1)
   \   00000066   0xF1B9 0x0F10      CMP      R9,#+16
   \   0000006A   0xDA25             BGE.N    ??ili9320_PutChar_5
   2431              {
   2432                tmp_char=ascii_8x16[((c-0x20)*16)+i];
   \   0000006C   0xEB09 0x1007      ADD      R0,R9,R7, LSL #+4
   \   00000070   0x.... 0x....      ADR.W    R1,ascii_8x16
   \   00000074   0x1840             ADDS     R0,R0,R1
   \   00000076   0xF5A0 0x7000      SUB      R0,R0,#+512
   \   0000007A   0xF890 0xA000      LDRB     R10,[R0, #+0]
   2433                for (j=0;j<8;j++)
   \   0000007E   0xF04F 0x0B00      MOV      R11,#+0
   \   00000082   0xE006             B.N      ??ili9320_PutChar_7
   2434                {
   2435                  if ( (tmp_char >> 7-j) & 0x01 == 0x01)
   2436                    {
   2437                      ili9320_SetPoint(x+j,y+i,charColor); // 字符颜色
   2438                    }
   2439                    else
   2440                    {
   2441                      ili9320_SetPoint(x+j,y+i,bkColor); // 背景颜色
   \                     ??ili9320_PutChar_8: (+1)
   \   00000084   0x4622             MOV      R2,R4
   \   00000086   0xB289             UXTH     R1,R1
   \   00000088   0xB280             UXTH     R0,R0
   \   0000008A   0x.... 0x....      BL       ili9320_SetPoint
   2442                    }
   \                     ??ili9320_PutChar_9: (+1)
   \   0000008E   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??ili9320_PutChar_7: (+1)
   \   00000092   0xF1BB 0x0F08      CMP      R11,#+8
   \   00000096   0xDAE4             BGE.N    ??ili9320_PutChar_6
   \   00000098   0xEB0B 0x0005      ADD      R0,R11,R5
   \   0000009C   0xEB09 0x0106      ADD      R1,R9,R6
   \   000000A0   0xF1CB 0x0207      RSB      R2,R11,#+7
   \   000000A4   0xFA4A 0xF202      ASR      R2,R10,R2
   \   000000A8   0x07D2             LSLS     R2,R2,#+31
   \   000000AA   0xD5EB             BPL.N    ??ili9320_PutChar_8
   \   000000AC   0x4642             MOV      R2,R8
   \   000000AE   0xB289             UXTH     R1,R1
   \   000000B0   0xB280             UXTH     R0,R0
   \   000000B2   0x.... 0x....      BL       ili9320_SetPoint
   \   000000B6   0xE7EA             B.N      ??ili9320_PutChar_9
   2443                }
   2444              }
   2445            }			
   2446          }
   \                     ??ili9320_PutChar_5: (+1)
   \   000000B8   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   2447          
   2448          /****************************************************************************
   2449          * 名    称：void ili9320_PutChar(u16 x,u16 y,u8 c,u16 charColor,u16 bkColor)
   2450          * 功    能：在指定座标显示一个8x16点阵的ascii字符
   2451          * 入口参数：x          行座标
   2452          *           y          列座标
   2453          *           charColor  字符的颜色
   2454          *           bkColor    字符背景颜色
   2455          * 出口参数：无
   2456          * 说    明：显示范围限定为可显示的ascii码
   2457          * 调用方法：ili9320_PutChar(10,10,'a',0x0000,0xffff);
   2458          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2459          void ili9320_PutChar_16x24(u16 x,u16 y,u8 c,u16 charColor,u16 bkColor)
   2460          {
   \                     ili9320_PutChar_16x24: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4617             MOV      R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
   2461          
   2462            u16 i=0;
   2463            u16 j=0;
   2464            
   2465            u16 tmp_char=0;
   2466          
   2467            if(HyalineBackColor == bkColor)
   \   0000000E   0x2C01             CMP      R4,#+1
   \   00000010   0xF04F 0x0900      MOV      R9,#+0
   \   00000014   0xD128             BNE.N    ??ili9320_PutChar_16x24_0
   2468            {
   2469              for (i=0;i<24;i++)
   \   00000016   0xE013             B.N      ??ili9320_PutChar_16x24_1
   2470              {
   2471                tmp_char=ASCII_Table_16x24[((c-0x20)*24)+i];
   2472                for (j=0;j<16;j++)
   2473                {
   2474                  if ( (tmp_char >> j) & 0x01 == 0x01)
   \                     ??ili9320_PutChar_16x24_2: (+1)
   \   00000018   0xFA4A 0xF00B      ASR      R0,R10,R11
   \   0000001C   0x07C0             LSLS     R0,R0,#+31
   \   0000001E   0xD508             BPL.N    ??ili9320_PutChar_16x24_3
   2475                    {
   2476                      ili9320_SetPoint(x+j,y+i,charColor); // 字符颜色
   \   00000020   0x4642             MOV      R2,R8
   \   00000022   0xEB09 0x0106      ADD      R1,R9,R6
   \   00000026   0xB289             UXTH     R1,R1
   \   00000028   0xEB0B 0x0005      ADD      R0,R11,R5
   \   0000002C   0xB280             UXTH     R0,R0
   \   0000002E   0x.... 0x....      BL       ili9320_SetPoint
   2477                    }
   2478                    else
   2479                    {
   2480                        // do nothing // 透明背景
   2481                    }
   2482                }
   \                     ??ili9320_PutChar_16x24_3: (+1)
   \   00000032   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??ili9320_PutChar_16x24_4: (+1)
   \   00000036   0xF1BB 0x0F10      CMP      R11,#+16
   \   0000003A   0xDBED             BLT.N    ??ili9320_PutChar_16x24_2
   \   0000003C   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??ili9320_PutChar_16x24_1: (+1)
   \   00000040   0xF1B9 0x0F18      CMP      R9,#+24
   \   00000044   0xDA3A             BGE.N    ??ili9320_PutChar_16x24_5
   \   00000046   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \   0000004A   0xEB09 0x00C0      ADD      R0,R9,R0, LSL #+3
   \   0000004E   0x.... 0x....      ADR.W    R1,ASCII_Table_16x24
   \   00000052   0xEB01 0x0040      ADD      R0,R1,R0, LSL #+1
   \   00000056   0xF5A0 0x60C0      SUB      R0,R0,#+1536
   \   0000005A   0xF8B0 0xA000      LDRH     R10,[R0, #+0]
   \   0000005E   0xF04F 0x0B00      MOV      R11,#+0
   \   00000062   0xE7E8             B.N      ??ili9320_PutChar_16x24_4
   2483              }
   2484            }
   2485            else
   2486            {
   2487              for (i=0;i<24;i++)
   \                     ??ili9320_PutChar_16x24_6: (+1)
   \   00000064   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??ili9320_PutChar_16x24_0: (+1)
   \   00000068   0xF1B9 0x0F18      CMP      R9,#+24
   \   0000006C   0xDA26             BGE.N    ??ili9320_PutChar_16x24_5
   2488              {
   2489                tmp_char=ASCII_Table_16x24[((c-0x20)*24)+i];
   \   0000006E   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \   00000072   0xEB09 0x00C0      ADD      R0,R9,R0, LSL #+3
   \   00000076   0x.... 0x....      ADR.W    R1,ASCII_Table_16x24
   \   0000007A   0xEB01 0x0040      ADD      R0,R1,R0, LSL #+1
   \   0000007E   0xF5A0 0x60C0      SUB      R0,R0,#+1536
   \   00000082   0xF8B0 0xA000      LDRH     R10,[R0, #+0]
   2490                for (j=0;j<16;j++)
   \   00000086   0xF04F 0x0B00      MOV      R11,#+0
   \   0000008A   0xE006             B.N      ??ili9320_PutChar_16x24_7
   2491                {
   2492                  if ( (tmp_char >> j) & 0x01 == 0x01)
   2493                    {
   2494                      ili9320_SetPoint(x+j,y+i,charColor); // 字符颜色
   2495                    }
   2496                    else
   2497                    {
   2498                      ili9320_SetPoint(x+j,y+i,bkColor); // 背景颜色
   \                     ??ili9320_PutChar_16x24_8: (+1)
   \   0000008C   0x4622             MOV      R2,R4
   \   0000008E   0xB289             UXTH     R1,R1
   \   00000090   0xB280             UXTH     R0,R0
   \   00000092   0x.... 0x....      BL       ili9320_SetPoint
   2499                    }
   \                     ??ili9320_PutChar_16x24_9: (+1)
   \   00000096   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??ili9320_PutChar_16x24_7: (+1)
   \   0000009A   0xF1BB 0x0F10      CMP      R11,#+16
   \   0000009E   0xDAE1             BGE.N    ??ili9320_PutChar_16x24_6
   \   000000A0   0xEB0B 0x0005      ADD      R0,R11,R5
   \   000000A4   0xEB09 0x0106      ADD      R1,R9,R6
   \   000000A8   0xFA4A 0xF20B      ASR      R2,R10,R11
   \   000000AC   0x07D2             LSLS     R2,R2,#+31
   \   000000AE   0xD5ED             BPL.N    ??ili9320_PutChar_16x24_8
   \   000000B0   0x4642             MOV      R2,R8
   \   000000B2   0xB289             UXTH     R1,R1
   \   000000B4   0xB280             UXTH     R0,R0
   \   000000B6   0x.... 0x....      BL       ili9320_SetPoint
   \   000000BA   0xE7EC             B.N      ??ili9320_PutChar_16x24_9
   2500                }
   2501              }
   2502            }
   2503          }
   \                     ??ili9320_PutChar_16x24_5: (+1)
   \   000000BC   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   2504          /****************************************************************************
   2505          * 名    称：u16 ili9320_BGR2RGB(u16 c)
   2506          * 功    能：RRRRRGGGGGGBBBBB 改为 BBBBBGGGGGGRRRRR 格式
   2507          * 入口参数：c      BRG 颜色值
   2508          * 出口参数：RGB 颜色值
   2509          * 说    明：内部函数调用
   2510          * 调用方法：
   2511          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2512          u16 ili9320_BGR2RGB(u16 c)
   2513          {
   2514            u16  r, g, b, rgb;
   2515          
   2516            b = (c>>0)  & 0x1f;
   2517            g = (c>>5)  & 0x3f;
   2518            r = (c>>11) & 0x1f;
   2519            
   2520            rgb =  (b<<11) + (g<<5) + (r<<0);
   2521          
   2522            return( rgb );
   \                     ili9320_BGR2RGB: (+1)
   \   00000000   0xF400 0x61FC      AND      R1,R0,#0x7E0
   \   00000004   0xEB01 0x21C0      ADD      R1,R1,R0, LSL #+11
   \   00000008   0xEB01 0x20D0      ADD      R0,R1,R0, LSR #+11
   \   0000000C   0xB280             UXTH     R0,R0
   \   0000000E   0x4770             BX       LR               ;; return
   2523          }
   2524          
   2525          /****************************************************************************
   2526          * 名    称：void ili9320_BackLight(u8 status)
   2527          * 功    能：开、关液晶背光
   2528          * 入口参数：status     1:背光开  0:背光关
   2529          * 出口参数：无
   2530          * 说    明：
   2531          * 调用方法：ili9320_BackLight(1);
   2532          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2533          void ili9320_BackLight(u8 status)
   2534          {
   2535          //#if 0 //skyblue 2016-12-13 
   2536            if ( status >= 1 )
   \                     ili9320_BackLight: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0x1E49             SUBS     R1,R1,#+1
   \   00000004   0x4189             SBCS     R1,R1,R1
   \   00000006   0x43C9             MVNS     R1,R1
   \   00000008   0x0FC9             LSRS     R1,R1,#+31
   \   0000000A   0x....             LDR.N    R0,??DataTable26_4  ;; 0x422281b4
   \   0000000C   0x6001             STR      R1,[R0, #+0]
   2537            {
   2538              Lcd_Light_ON;
   2539            }
   2540            else
   2541            {
   2542              Lcd_Light_OFF;
   2543            }
   2544          //#endif  //skyblue 2016-12-13   
   2545          }
   \   0000000E   0x4770             BX       LR               ;; return
   2546          
   2547          /****************************************************************************
   2548          * 名    称：void ili9320_Delay(vu32 nCount)
   2549          * 功    能：延时
   2550          * 入口参数：nCount   延时值
   2551          * 出口参数：无
   2552          * 说    明：
   2553          * 调用方法：ili9320_Delay(10000);
   2554          ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2555          void ili9320_Delay(vu32 nCount)
   2556          {
   \                     ili9320_Delay: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
   \   00000002   0xB401             PUSH     {R0}
   2557             Delay(nCount);
   \   00000004   0x9800             LDR      R0,[SP, #+0]
   \   00000006   0xB002             ADD      SP,SP,#+8
   \   00000008   0x.... 0x....      B.W      Delay
   2558            //for(; nCount != 0; nCount--);
   2559          }

   \                                 In section .text, align 2, keep-with-next
   2560          void LCD_WindowMax (unsigned int xsta,unsigned int ysta,unsigned int xend,unsigned int yend)  //**
   2561          {
   \                     LCD_WindowMax: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
   2562          	LCD_WrtReg(0X002A);
   \   0000000A   0x202A             MOVS     R0,#+42
   \   0000000C   0x.... 0x....      BL       LCD_WrtReg
   2563          	LCD_WrtRAM(xsta>>8);
   \   00000010   0x0A20             LSRS     R0,R4,#+8
   \   00000012   0xB280             UXTH     R0,R0
   \   00000014   0x.... 0x....      BL       LCD_WrtRAM
   2564          	LCD_WrtRAM(xsta&0X00FF);
   \   00000018   0xB2E0             UXTB     R0,R4
   \   0000001A   0x.... 0x....      BL       LCD_WrtRAM
   2565          	LCD_WrtRAM(xend>>8);
   \   0000001E   0x0A30             LSRS     R0,R6,#+8
   \   00000020   0xB280             UXTH     R0,R0
   \   00000022   0x.... 0x....      BL       LCD_WrtRAM
   2566          	LCD_WrtRAM(xend&0X00FF);
   \   00000026   0xB2F0             UXTB     R0,R6
   \   00000028   0x.... 0x....      BL       LCD_WrtRAM
   2567          		
   2568          	LCD_WrtReg(0X002B);	
   \   0000002C   0x202B             MOVS     R0,#+43
   \   0000002E   0x.... 0x....      BL       LCD_WrtReg
   2569          	LCD_WrtRAM(ysta>>8);	
   \   00000032   0x0A28             LSRS     R0,R5,#+8
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0x.... 0x....      BL       LCD_WrtRAM
   2570          	LCD_WrtRAM(ysta&0X00FF);
   \   0000003A   0xB2E8             UXTB     R0,R5
   \   0000003C   0x.... 0x....      BL       LCD_WrtRAM
   2571          	LCD_WrtRAM(yend>>8);	
   \   00000040   0x0A38             LSRS     R0,R7,#+8
   \   00000042   0xB280             UXTH     R0,R0
   \   00000044   0x.... 0x....      BL       LCD_WrtRAM
   2572          	LCD_WrtRAM(yend&0X00FF);			
   \   00000048   0xB2F8             UXTB     R0,R7
   \   0000004A   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   0000004E   0x.... 0x....      B.W      LCD_WrtRAM
   2573          }
   2574          
   2575          

   \                                 In section .text, align 2, keep-with-next
   2576          void LCD_Fill2(uint8_t xsta, uint16_t ysta, uint8_t xend, uint16_t yend, uint16_t colour)   //**
   2577          {                    
   \                     LCD_Fill2: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
   2578              u32 n;
   2579              LCD_WindowMax (xsta, ysta, xend, yend); 
   \   0000000A   0x.... 0x....      BL       LCD_WindowMax
   2580              LCD_WriteRAM_Prepare();         	   	   
   \   0000000E   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   2581              n=(u32)(yend-ysta+1)*(xend-xsta+1);    
   \   00000012   0x1B78             SUBS     R0,R7,R5
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x1B31             SUBS     R1,R6,R4
   \   00000018   0x1C49             ADDS     R1,R1,#+1
   \   0000001A   0xFB01 0xF500      MUL      R5,R1,R0
   \   0000001E   0x9C06             LDR      R4,[SP, #+24]
   \   00000020   0xE002             B.N      ??LCD_Fill2_0
   2582              while(n--){LCD_WrtRAM(colour);}  
   \                     ??LCD_Fill2_1: (+1)
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       LCD_WrtRAM
   \                     ??LCD_Fill2_0: (+1)
   \   00000028   0x4628             MOV      R0,R5
   \   0000002A   0x1E45             SUBS     R5,R0,#+1
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD1F8             BNE.N    ??LCD_Fill2_1
   2583          }
   \   00000030   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x40021014         DC32     0x40021014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x40011800         DC32     0x40011800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x00061A80         DC32     0x61a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x60020000         DC32     0x60020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x6001FFFE         DC32     0x6001fffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x........         DC32     DeviceCode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0x........         DC32     gCfgItems

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0x........         DC32     DeviceCode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \   00000000   0x60020000         DC32     0x60020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_3:
   \   00000000   0x0005DC00         DC32     0x5dc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_4:
   \   00000000   0x422281B4         DC32     0x422281b4

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ili9320_DrawPicture S...">`:
   \   00000000   0x69 0x6C          DC8 69H, 6CH, 69H, 39H, 33H, 32H, 30H, 5FH
   \              0x69 0x39    
   \              0x33 0x32    
   \              0x30 0x5F    
   \   00000008   0x44 0x72          DC8 44H, 72H, 61H, 77H, 50H, 69H, 63H, 74H
   \              0x61 0x77    
   \              0x50 0x69    
   \              0x63 0x74    
   \   00000010   0x75 0x72          DC8 75H, 72H, 65H, 20H, 53H, 74H, 61H, 72H
   \              0x65 0x20    
   \              0x53 0x74    
   \              0x61 0x72    
   \   00000018   0x74 0x58          DC8 74H, 58H, 20H, 25H, 64H, 20H, 53H, 74H
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x53 0x74    
   \   00000020   0x61 0x72          DC8 61H, 72H, 74H, 59H, 20H, 25H, 64H, 20H
   \              0x74 0x59    
   \              0x20 0x25    
   \              0x64 0x20    
   \   00000028   0x45 0x6E          DC8 45H, 6EH, 64H, 58H, 20H, 25H, 64H, 20H
   \              0x64 0x58    
   \              0x20 0x25    
   \              0x64 0x20    
   \   00000030   0x45 0x6E          DC8 45H, 6EH, 64H, 59H, 20H, 25H, 64H, 20H
   \              0x64 0x59    
   \              0x20 0x25    
   \              0x64 0x20    
   \   00000038   0x0A 0x0D          DC8 0AH, 0DH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Delay
       0   Delay_nms
      16   GPIO_Init_TFT
       0   ILI9488_ReadRAM
       0   ILI9488_WriteCmd
       0   ILI9488_WriteData
      32   LCD_CtrlLinesConfig
        32   -> GPIO_Init_TFT
        32   -> GPIO_ResetBits
        32   -> GPIO_SetBits
        32   -> RCC_AHBPeriphClockCmd_tft
        32   -> RCC_APB2PeriphClockCmd_tft
      32   LCD_DrawChinaChar
        32   -> LCD_WriteRAM
        32   -> LCD_WriteRAM_Prepare
        32   -> ili9320_SetCursor
     120   LCD_FSMCConfig
       120   -> FSMC_NORSRAMCmd
       120   -> FSMC_NORSRAMInit
      24   LCD_Fill2
        24   -> LCD_WindowMax
        24   -> LCD_WriteRAM_Prepare
        24   -> LCD_WrtRAM
      24   LCD_Initializtion
        24   -> Delay
        24   -> HAL_Delay
        24   -> ILI9488_ReadRAM
        24   -> ILI9488_WriteCmd
        24   -> ILI9488_WriteData
        24   -> LCD_RD_DATA
        24   -> LCD_ReadReg
        24   -> LCD_WriteCommand
        24   -> LCD_WriteReg
        24   -> LCD_WrtRAM
        24   -> LCD_WrtReg
        24   -> LCD_X_Init
         0   -> ili9320_Clear
        24   -> ili9320_Clear
        24   -> ili9320_Delay
        24   -> ili9320_SetWindows
       0   LCD_RD_DATA
       0   LCD_ReadRAM
       0   LCD_ReadReg
       0   LCD_ReadSta
      24   LCD_SetCursor
        24   -> ILI9488_WriteCmd
         0   -> ILI9488_WriteData
        24   -> ILI9488_WriteData
         0   -> LCD_WriteReg
        24   -> LCD_WriteReg
      24   LCD_WindowMax
         0   -> LCD_WrtRAM
        24   -> LCD_WrtRAM
        24   -> LCD_WrtReg
       0   LCD_WriteCommand
       0   LCD_WriteRAM
       0   LCD_WriteRAM_Prepare
         0   -> LCD_WrtReg
       0   LCD_WriteReg
       0   LCD_WrtRAM
       0   LCD_WrtReg
       8   LCD_X_Init
         8   -> LCD_CtrlLinesConfig
         0   -> LCD_FSMCConfig
      48   LCD_setWindowArea
        48   -> ILI9488_WriteCmd
         0   -> ILI9488_WriteData
        48   -> ILI9488_WriteData
         0   -> LCD_WriteReg
        48   -> LCD_WriteReg
         0   -> LCD_WrtRAM
        48   -> LCD_WrtRAM
        48   -> LCD_WrtReg
       0   RCC_AHBPeriphClockCmd_tft
       0   RCC_APB2PeriphClockCmd_tft
       8   Read_ID
         8   -> LCD_RD_DATA
         8   -> LCD_WrtReg
       8   get_lshift_freq
         0   -> LCD_RD_DATA
         8   -> LCD_RD_DATA
         8   -> LCD_WrtReg
       0   ili9320_BGR2RGB
       0   ili9320_BackLight
      16   ili9320_Clear
        16   -> LCD_WriteRAM_Prepare
        16   -> LCD_WrtRAM
        16   -> LCD_WrtReg
        16   -> ili9320_SetCursor
        16   -> ili9320_SetWindows
       8   ili9320_Delay
         0   -> Delay
      40   ili9320_DrawPicture
        40   -> ili9320_SetPoint
        40   -> printf
       8   ili9320_GetPoint
         8   -> LCD_ReadRAM
         0   -> ili9320_BGR2RGB
         8   -> ili9320_SetCursor
      40   ili9320_PutChar
        40   -> ili9320_SetPoint
      40   ili9320_PutChar_16x24
        40   -> ili9320_SetPoint
      16   ili9320_SetCursor
        16   -> ILI9488_WriteCmd
         0   -> ILI9488_WriteData
        16   -> ILI9488_WriteData
         0   -> LCD_WriteReg
        16   -> LCD_WriteReg
         0   -> LCD_WrtRAM
        16   -> LCD_WrtRAM
        16   -> LCD_WrtReg
       8   ili9320_SetPoint
         0   -> LCD_WriteRAM
         8   -> LCD_WriteRAM_Prepare
         8   -> ili9320_SetCursor
      40   ili9320_SetWindows
        40   -> ILI9488_WriteCmd
         0   -> ILI9488_WriteData
        40   -> ILI9488_WriteData
         0   -> LCD_WriteReg
        40   -> LCD_WriteReg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      60  ?<Constant "ili9320_DrawPicture S...">
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_2
       4  ??DataTable26_3
       4  ??DataTable26_4
    4560  ASCII_Table_16x24
      24  Delay
      22  Delay_nms
       2  DeviceCode
     156  GPIO_Init_TFT
       6  ILI9488_ReadRAM
       6  ILI9488_WriteCmd
       6  ILI9488_WriteData
     190  LCD_CtrlLinesConfig
     114  LCD_DrawChinaChar
     110  LCD_FSMCConfig
      50  LCD_Fill2
    4904  LCD_Initializtion
       6  LCD_RD_DATA
       8  LCD_ReadRAM
       6  LCD_ReadReg
       6  LCD_ReadSta
     122  LCD_SetCursor
      82  LCD_WindowMax
       6  LCD_WriteCommand
       6  LCD_WriteRAM
      48  LCD_WriteRAM_Prepare
       8  LCD_WriteReg
       6  LCD_WrtRAM
       6  LCD_WrtReg
      12  LCD_X_Init
     424  LCD_setWindowArea
      24  RCC_AHBPeriphClockCmd_tft
      24  RCC_APB2PeriphClockCmd_tft
      30  Read_ID
    1536  ascii_8x16
      22  get_lshift_freq
      16  ili9320_BGR2RGB
      16  ili9320_BackLight
     184  ili9320_Clear
      12  ili9320_Delay
     178  ili9320_DrawPicture
      16  ili9320_GetPoint
     188  ili9320_PutChar
     192  ili9320_PutChar_16x24
     316  ili9320_SetCursor
      48  ili9320_SetPoint
     238  ili9320_SetWindows

 
      2 bytes in section .bss
 14 050 bytes in section .text
 
 14 050 bytes of CODE memory
      2 bytes of DATA memory

Errors: none
Warnings: 36
