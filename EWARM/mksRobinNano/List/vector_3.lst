###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:06:21
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\vector_3.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\vector_3.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\vector_3.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\vector_3.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\vector_3.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          /**
     24            vector_3.cpp - Vector library for bed leveling
     25            Copyright (c) 2012 Lars Brubaker.  All right reserved.
     26          
     27            This library is free software; you can redistribute it and/or
     28            modify it under the terms of the GNU Lesser General Public
     29            License as published by the Free Software Foundation; either
     30            version 2.1 of the License, or (at your option) any later version.
     31          
     32            This library is distributed in the hope that it will be useful,
     33            but WITHOUT ANY WARRANTY; without even the implied warranty of
     34            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     35            Lesser General Public License for more details.
     36          
     37            You should have received a copy of the GNU Lesser General Public
     38            License along with this library; if not, write to the Free Software
     39            Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     40          */
     41          #include <math.h>
     42          #include "Marlin.h"

  #define UNUSED(x) ((void)(x))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Inc\mks_cfg.h",613  Warning[Pe083]: 
          type qualifier specified more than once

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xE003             B.N      ??serialprintPGM_0
   \                     ??serialprintPGM_1: (+1)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x4803             LDR.N    R0,??serialprintPGM_2
   \   0000000A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serialprintPGM_0: (+1)
   \   0000000E   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0xD1F7             BNE.N    ??serialprintPGM_1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   \                     ??serialprintPGM_2:
   \   00000018   0x........         DC32     Serial3

    }
    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
     43          
     44          #if 1//HAS_ABL
     45          #include "vector_3.h"
     46          

   \                                 In section .text, align 2, keep-with-next
     47          vector_3::vector_3() : x(0), y(0), z(0) { }
   \                     _ZN8vector_3C1Ev: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
   \   00000004   0x6041             STR      R1,[R0, #+4]
   \   00000006   0x6081             STR      R1,[R0, #+8]
   \   00000008   0x4770             BX       LR               ;; return
     48          

   \                                 In section .text, align 2, keep-with-next
     49          vector_3::vector_3(float x_, float y_, float z_) : x(x_), y(y_), z(z_) { }
   \                     _ZN8vector_3C1Efff: (+1)
   \   00000000   0x6001             STR      R1,[R0, #+0]
   \   00000002   0x6042             STR      R2,[R0, #+4]
   \   00000004   0x6083             STR      R3,[R0, #+8]
   \   00000006   0x4770             BX       LR               ;; return
     50          

   \                                 In section .text, align 2, keep-with-next
     51          vector_3 vector_3::cross(vector_3 left, vector_3 right) {
   \                     _ZN8vector_35crossES_S_: (+1)
   \   00000000   0xE92D 0x47FE      PUSH     {R1-R10,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4604             MOV      R4,R0
     52            return vector_3(left.y * right.z - left.z * right.y,
     53                            left.z * right.x - left.x * right.z,
     54                            left.x * right.y - left.y * right.x);
   \   00000008   0x9D10             LDR      R5,[SP, #+64]
   \   0000000A   0x461E             MOV      R6,R3
   \   0000000C   0x4617             MOV      R7,R2
   \   0000000E   0xF8DD 0x803C      LDR      R8,[SP, #+60]
   \   00000012   0x4608             MOV      R0,R1
   \   00000014   0x4641             MOV      R1,R8
   \   00000016   0x.... 0x....      BL       __aeabi_fmul
   \   0000001A   0x4681             MOV      R9,R0
   \   0000001C   0x980E             LDR      R0,[SP, #+56]
   \   0000001E   0x4639             MOV      R1,R7
   \   00000020   0x.... 0x....      BL       __aeabi_fmul
   \   00000024   0x4601             MOV      R1,R0
   \   00000026   0x4648             MOV      R0,R9
   \   00000028   0x.... 0x....      BL       __aeabi_fsub
   \   0000002C   0x4603             MOV      R3,R0
   \   0000002E   0x4699             MOV      R9,R3
   \   00000030   0x980E             LDR      R0,[SP, #+56]
   \   00000032   0x4631             MOV      R1,R6
   \   00000034   0x.... 0x....      BL       __aeabi_fmul
   \   00000038   0x4682             MOV      R10,R0
   \   0000003A   0x9803             LDR      R0,[SP, #+12]
   \   0000003C   0x4629             MOV      R1,R5
   \   0000003E   0x.... 0x....      BL       __aeabi_fmul
   \   00000042   0x4601             MOV      R1,R0
   \   00000044   0x4650             MOV      R0,R10
   \   00000046   0x.... 0x....      BL       __aeabi_fsub
   \   0000004A   0x4602             MOV      R2,R0
   \   0000004C   0x464B             MOV      R3,R9
   \   0000004E   0x4691             MOV      R9,R2
   \   00000050   0x469A             MOV      R10,R3
   \   00000052   0x4638             MOV      R0,R7
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x.... 0x....      BL       __aeabi_fmul
   \   0000005A   0x4605             MOV      R5,R0
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0x4641             MOV      R1,R8
   \   00000060   0x.... 0x....      BL       __aeabi_fmul
   \   00000064   0x4601             MOV      R1,R0
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       __aeabi_fsub
   \   0000006C   0x4601             MOV      R1,R0
   \   0000006E   0x4653             MOV      R3,R10
   \   00000070   0x464A             MOV      R2,R9
   \   00000072   0xA800             ADD      R0,SP,#+0
   \   00000074   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   00000078   0xA800             ADD      R0,SP,#+0
   \   0000007A   0xC80E             LDM      R0!,{R1-R3}
   \   0000007C   0xC40E             STM      R4!,{R1-R3}
   \   0000007E   0x380C             SUBS     R0,R0,#+12
   \   00000080   0xB006             ADD      SP,SP,#+24
   \   00000082   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
     55          }
     56          

   \                                 In section .text, align 2, keep-with-next
     57          vector_3 vector_3::operator+(vector_3 v) { return vector_3((x + v.x), (y + v.y), (z + v.z)); }
   \                     _ZN8vector_3plES_: (+1)
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB5FE             PUSH     {R1-R7,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x68A9             LDR      R1,[R5, #+8]
   \   0000000A   0x980A             LDR      R0,[SP, #+40]
   \   0000000C   0x.... 0x....      BL       __aeabi_fadd
   \   00000010   0x4603             MOV      R3,R0
   \   00000012   0x461E             MOV      R6,R3
   \   00000014   0x6869             LDR      R1,[R5, #+4]
   \   00000016   0x9809             LDR      R0,[SP, #+36]
   \   00000018   0x.... 0x....      BL       __aeabi_fadd
   \   0000001C   0x4602             MOV      R2,R0
   \   0000001E   0x4633             MOV      R3,R6
   \   00000020   0x4616             MOV      R6,R2
   \   00000022   0x461F             MOV      R7,R3
   \   00000024   0x6829             LDR      R1,[R5, #+0]
   \   00000026   0x9808             LDR      R0,[SP, #+32]
   \   00000028   0x.... 0x....      BL       __aeabi_fadd
   \   0000002C   0x4601             MOV      R1,R0
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   00000038   0xA800             ADD      R0,SP,#+0
   \   0000003A   0xC80E             LDM      R0!,{R1-R3}
   \   0000003C   0xC40E             STM      R4!,{R1-R3}
   \   0000003E   0x380C             SUBS     R0,R0,#+12
   \   00000040   0xBCFE             POP      {R1-R7}
   \   00000042   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return

   \                                 In section .text, align 2, keep-with-next
     58          vector_3 vector_3::operator-(vector_3 v) { return vector_3((x - v.x), (y - v.y), (z - v.z)); }
   \                     _ZN8vector_3miES_: (+1)
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB5FE             PUSH     {R1-R7,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x68A8             LDR      R0,[R5, #+8]
   \   0000000A   0x990A             LDR      R1,[SP, #+40]
   \   0000000C   0x.... 0x....      BL       __aeabi_fsub
   \   00000010   0x4603             MOV      R3,R0
   \   00000012   0x461E             MOV      R6,R3
   \   00000014   0x6868             LDR      R0,[R5, #+4]
   \   00000016   0x9909             LDR      R1,[SP, #+36]
   \   00000018   0x.... 0x....      BL       __aeabi_fsub
   \   0000001C   0x4602             MOV      R2,R0
   \   0000001E   0x4633             MOV      R3,R6
   \   00000020   0x4616             MOV      R6,R2
   \   00000022   0x461F             MOV      R7,R3
   \   00000024   0x6828             LDR      R0,[R5, #+0]
   \   00000026   0x9908             LDR      R1,[SP, #+32]
   \   00000028   0x.... 0x....      BL       __aeabi_fsub
   \   0000002C   0x4601             MOV      R1,R0
   \   0000002E   0x463B             MOV      R3,R7
   \   00000030   0x4632             MOV      R2,R6
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   00000038   0xA800             ADD      R0,SP,#+0
   \   0000003A   0xC80E             LDM      R0!,{R1-R3}
   \   0000003C   0xC40E             STM      R4!,{R1-R3}
   \   0000003E   0x380C             SUBS     R0,R0,#+12
   \   00000040   0xBCFE             POP      {R1-R7}
   \   00000042   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          vector_3 vector_3::get_normal() {
   \                     _ZN8vector_310get_normalEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
     61            vector_3 normalized = vector_3(x, y, z);
   \   00000006   0x688B             LDR      R3,[R1, #+8]
   \   00000008   0x684A             LDR      R2,[R1, #+4]
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       _ZN8vector_3C1Efff
     62            normalized.normalize();
   \   00000012   0x.... 0x....      BL       _ZN8vector_39normalizeEv
     63            return normalized;
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0xC80E             LDM      R0!,{R1-R3}
   \   0000001A   0xC40E             STM      R4!,{R1-R3}
   \   0000001C   0x380C             SUBS     R0,R0,#+12
   \   0000001E   0xB004             ADD      SP,SP,#+16
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
     64          }
     65          

   \                                 In section .text, align 2, keep-with-next
     66          float vector_3::get_length() { return SQRT(sq(x) + sq(y) + sq(z)); }
   \                     _ZN8vector_310get_lengthEv: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x6837             LDR      R7,[R6, #+0]
   \   00000008   0xF04F 0x0802      MOV      R8,#+2
   \   0000000C   0xF04F 0x557E      MOV      R5,#+1065353216
   \   00000010   0x462C             MOV      R4,R5
   \   00000012   0xE004             B.N      ??get_length_0
   \                     ??get_length_1: (+1)
   \   00000014   0x4638             MOV      R0,R7
   \   00000016   0x4639             MOV      R1,R7
   \   00000018   0x.... 0x....      BL       __aeabi_fmul
   \   0000001C   0x4607             MOV      R7,R0
   \                     ??get_length_0: (+1)
   \   0000001E   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \   00000022   0xD504             BPL.N    ??get_length_2
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x4639             MOV      R1,R7
   \   00000028   0x.... 0x....      BL       __aeabi_fmul
   \   0000002C   0x4604             MOV      R4,R0
   \                     ??get_length_2: (+1)
   \   0000002E   0xEA5F 0x0858      LSRS     R8,R8,#+1
   \   00000032   0xD1EF             BNE.N    ??get_length_1
   \   00000034   0xF8D6 0x8004      LDR      R8,[R6, #+4]
   \   00000038   0xF04F 0x0902      MOV      R9,#+2
   \   0000003C   0x462F             MOV      R7,R5
   \   0000003E   0xE004             B.N      ??get_length_3
   \                     ??get_length_4: (+1)
   \   00000040   0x4640             MOV      R0,R8
   \   00000042   0x4641             MOV      R1,R8
   \   00000044   0x.... 0x....      BL       __aeabi_fmul
   \   00000048   0x4680             MOV      R8,R0
   \                     ??get_length_3: (+1)
   \   0000004A   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000004E   0xD504             BPL.N    ??get_length_5
   \   00000050   0x4638             MOV      R0,R7
   \   00000052   0x4641             MOV      R1,R8
   \   00000054   0x.... 0x....      BL       __aeabi_fmul
   \   00000058   0x4607             MOV      R7,R0
   \                     ??get_length_5: (+1)
   \   0000005A   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   0000005E   0xD1EF             BNE.N    ??get_length_4
   \   00000060   0x68B6             LDR      R6,[R6, #+8]
   \   00000062   0xF04F 0x0802      MOV      R8,#+2
   \   00000066   0xE004             B.N      ??get_length_6
   \                     ??get_length_7: (+1)
   \   00000068   0x4630             MOV      R0,R6
   \   0000006A   0x4631             MOV      R1,R6
   \   0000006C   0x.... 0x....      BL       __aeabi_fmul
   \   00000070   0x4606             MOV      R6,R0
   \                     ??get_length_6: (+1)
   \   00000072   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \   00000076   0xD504             BPL.N    ??get_length_8
   \   00000078   0x4628             MOV      R0,R5
   \   0000007A   0x4631             MOV      R1,R6
   \   0000007C   0x.... 0x....      BL       __aeabi_fmul
   \   00000080   0x4605             MOV      R5,R0
   \                     ??get_length_8: (+1)
   \   00000082   0xEA5F 0x0858      LSRS     R8,R8,#+1
   \   00000086   0xD1EF             BNE.N    ??get_length_7
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x4639             MOV      R1,R7
   \   0000008C   0x.... 0x....      BL       __aeabi_fadd
   \   00000090   0x4629             MOV      R1,R5
   \   00000092   0x.... 0x....      BL       __aeabi_fadd
   \   00000096   0xE8BD 0x43F2      POP      {R1,R4-R9,LR}
   \   0000009A   0x.... 0x....      B.W      sqrtf
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void vector_3::normalize() {
   \                     _ZN8vector_39normalizeEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     69            const float inv_length = 1.0 / get_length();
   \   00000004   0x.... 0x....      BL       _ZN8vector_310get_lengthEv
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0xF04F 0x507E      MOV      R0,#+1065353216
   \   0000000E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000012   0x4605             MOV      R5,R0
     70            x *= inv_length;
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x4629             MOV      R1,R5
   \   00000018   0x.... 0x....      BL       __aeabi_fmul
   \   0000001C   0x6020             STR      R0,[R4, #+0]
     71            y *= inv_length;
   \   0000001E   0x6860             LDR      R0,[R4, #+4]
   \   00000020   0x4629             MOV      R1,R5
   \   00000022   0x.... 0x....      BL       __aeabi_fmul
   \   00000026   0x6060             STR      R0,[R4, #+4]
     72            z *= inv_length;
   \   00000028   0x68A0             LDR      R0,[R4, #+8]
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x.... 0x....      BL       __aeabi_fmul
   \   00000030   0x60A0             STR      R0,[R4, #+8]
     73          }
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     74          

   \                                 In section .text, align 2, keep-with-next
     75          void vector_3::apply_rotation(matrix_3x3 matrix) {
   \                     _ZN8vector_314apply_rotationE10matrix_3x3: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000006   0x4604             MOV      R4,R0
     76            const float resultX = x * matrix.matrix[3 * 0 + 0] + y * matrix.matrix[3 * 1 + 0] + z * matrix.matrix[3 * 2 + 0],
     77                        resultY = x * matrix.matrix[3 * 0 + 1] + y * matrix.matrix[3 * 1 + 1] + z * matrix.matrix[3 * 2 + 1],
   \   00000008   0x68A5             LDR      R5,[R4, #+8]
   \   0000000A   0x6866             LDR      R6,[R4, #+4]
   \   0000000C   0x6827             LDR      R7,[R4, #+0]
   \   0000000E   0x4610             MOV      R0,R2
   \   00000010   0x4639             MOV      R1,R7
   \   00000012   0x.... 0x....      BL       __aeabi_fmul
   \   00000016   0x4680             MOV      R8,R0
   \   00000018   0x980B             LDR      R0,[SP, #+44]
   \   0000001A   0x4631             MOV      R1,R6
   \   0000001C   0x.... 0x....      BL       __aeabi_fmul
   \   00000020   0x4641             MOV      R1,R8
   \   00000022   0x.... 0x....      BL       __aeabi_fadd
   \   00000026   0x4680             MOV      R8,R0
   \   00000028   0x980E             LDR      R0,[SP, #+56]
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x.... 0x....      BL       __aeabi_fmul
   \   00000030   0x4641             MOV      R1,R8
   \   00000032   0x.... 0x....      BL       __aeabi_fadd
   \   00000036   0x4680             MOV      R8,R0
     78                        resultZ = x * matrix.matrix[3 * 0 + 2] + y * matrix.matrix[3 * 1 + 2] + z * matrix.matrix[3 * 2 + 2];
   \   00000038   0x9809             LDR      R0,[SP, #+36]
   \   0000003A   0x4639             MOV      R1,R7
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x4681             MOV      R9,R0
   \   00000042   0x980C             LDR      R0,[SP, #+48]
   \   00000044   0x4631             MOV      R1,R6
   \   00000046   0x.... 0x....      BL       __aeabi_fmul
   \   0000004A   0x4649             MOV      R1,R9
   \   0000004C   0x.... 0x....      BL       __aeabi_fadd
   \   00000050   0x4681             MOV      R9,R0
   \   00000052   0x980F             LDR      R0,[SP, #+60]
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x.... 0x....      BL       __aeabi_fmul
   \   0000005A   0x4649             MOV      R1,R9
   \   0000005C   0x.... 0x....      BL       __aeabi_fadd
   \   00000060   0x4681             MOV      R9,R0
     79            x = resultX;
   \   00000062   0x9807             LDR      R0,[SP, #+28]
   \   00000064   0x4639             MOV      R1,R7
   \   00000066   0x.... 0x....      BL       __aeabi_fmul
   \   0000006A   0x4607             MOV      R7,R0
   \   0000006C   0x980A             LDR      R0,[SP, #+40]
   \   0000006E   0x4631             MOV      R1,R6
   \   00000070   0x.... 0x....      BL       __aeabi_fmul
   \   00000074   0x4639             MOV      R1,R7
   \   00000076   0x.... 0x....      BL       __aeabi_fadd
   \   0000007A   0x4606             MOV      R6,R0
   \   0000007C   0x980D             LDR      R0,[SP, #+52]
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0x.... 0x....      BL       __aeabi_fmul
   \   00000084   0x4631             MOV      R1,R6
   \   00000086   0x.... 0x....      BL       __aeabi_fadd
   \   0000008A   0x6020             STR      R0,[R4, #+0]
     80            y = resultY;
   \   0000008C   0xF8C4 0x8004      STR      R8,[R4, #+4]
     81            z = resultZ;
   \   00000090   0xF8C4 0x9008      STR      R9,[R4, #+8]
     82          }
   \   00000094   0xE8BD 0x03F0      POP      {R4-R9}
   \   00000098   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void vector_3::debug(const char * const title) {
   \                     _ZN8vector_35debugEPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
     85            serialprintPGM(title);
   \   00000006   0x.... 0x....      BL       _Z14serialprintPGMPKc
     86            SERIAL_PROTOCOLPGM(" x: ");
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant " x: ">`
   \   0000000E   0x.... 0x....      BL       _Z14serialprintPGMPKc
     87            SERIAL_PROTOCOL_F(x, 6);
   \   00000012   0x....             LDR.N    R5,??DataTable4
   \   00000014   0x2006             MOVS     R0,#+6
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0x.... 0x....      BL       __aeabi_f2d
   \   0000001E   0x4602             MOV      R2,R0
   \   00000020   0x460B             MOV      R3,R1
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       _ZN5Print5printEdi
     88            SERIAL_PROTOCOLPGM(" y: ");
   \   00000028   0x.... 0x....      ADR.W    R0,`?<Constant " y: ">`
   \   0000002C   0x.... 0x....      BL       _Z14serialprintPGMPKc
     89            SERIAL_PROTOCOL_F(y, 6);
   \   00000030   0x2006             MOVS     R0,#+6
   \   00000032   0x9000             STR      R0,[SP, #+0]
   \   00000034   0x6860             LDR      R0,[R4, #+4]
   \   00000036   0x.... 0x....      BL       __aeabi_f2d
   \   0000003A   0x4602             MOV      R2,R0
   \   0000003C   0x460B             MOV      R3,R1
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       _ZN5Print5printEdi
     90            SERIAL_PROTOCOLPGM(" z: ");
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant " z: ">`
   \   00000048   0x.... 0x....      BL       _Z14serialprintPGMPKc
     91            SERIAL_PROTOCOL_F(z, 6);
   \   0000004C   0x2006             MOVS     R0,#+6
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x68A0             LDR      R0,[R4, #+8]
   \   00000052   0x.... 0x....      BL       __aeabi_f2d
   \   00000056   0x4602             MOV      R2,R0
   \   00000058   0x460B             MOV      R3,R1
   \   0000005A   0x4628             MOV      R0,R5
   \   0000005C   0x.... 0x....      BL       _ZN5Print5printEdi
     92            SERIAL_EOL();
   \   00000060   0x210A             MOVS     R1,#+10
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000068   0x.... 0x....      B.W      _ZN10USARTClass5writeEh
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void apply_rotation_xyz(matrix_3x3 matrix, float &x, float &y, float &z) {
   \                     _Z18apply_rotation_xyz10matrix_3x3RfS0_S0_: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB5F0             PUSH     {R4-R7,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x9E17             LDR      R6,[SP, #+92]
   \   00000008   0x9D18             LDR      R5,[SP, #+96]
   \   0000000A   0x9C19             LDR      R4,[SP, #+100]
     96            vector_3 vector = vector_3(x, y, z);
   \   0000000C   0x6823             LDR      R3,[R4, #+0]
   \   0000000E   0x682A             LDR      R2,[R5, #+0]
   \   00000010   0x6831             LDR      R1,[R6, #+0]
   \   00000012   0xA806             ADD      R0,SP,#+24
   \   00000014   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   00000018   0x4607             MOV      R7,R0
     97            vector.apply_rotation(matrix);
   \   0000001A   0xA90E             ADD      R1,SP,#+56
   \   0000001C   0xB083             SUB      SP,SP,#+12
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x2224             MOVS     R2,#+36
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0E             POP      {R1-R3}
   \   00000028   0x4638             MOV      R0,R7
   \   0000002A   0x.... 0x....      BL       _ZN8vector_314apply_rotationE10matrix_3x3
     98            x = vector.x;
   \   0000002E   0x9806             LDR      R0,[SP, #+24]
   \   00000030   0x6030             STR      R0,[R6, #+0]
     99            y = vector.y;
   \   00000032   0x9807             LDR      R0,[SP, #+28]
   \   00000034   0x6028             STR      R0,[R5, #+0]
    100            z = vector.z;
   \   00000036   0x9808             LDR      R0,[SP, #+32]
   \   00000038   0x6020             STR      R0,[R4, #+0]
    101          }
   \   0000003A   0xB009             ADD      SP,SP,#+36
   \   0000003C   0xBCF0             POP      {R4-R7}
   \   0000003E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    102          

   \                                 In section .text, align 2, keep-with-next
    103          matrix_3x3 matrix_3x3::create_from_rows(vector_3 row_0, vector_3 row_1, vector_3 row_2) {
   \                     _ZN10matrix_3x316create_from_rowsE8vector_3S0_S0_: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
    104            //row_0.debug(PSTR("row_0"));
    105            //row_1.debug(PSTR("row_1"));
    106            //row_2.debug(PSTR("row_2"));
    107            matrix_3x3 new_matrix;
    108            new_matrix.matrix[0] = row_0.x; new_matrix.matrix[1] = row_0.y; new_matrix.matrix[2] = row_0.z;
   \   00000004   0x9100             STR      R1,[SP, #+0]
   \   00000006   0x9201             STR      R2,[SP, #+4]
   \   00000008   0x9302             STR      R3,[SP, #+8]
    109            new_matrix.matrix[3] = row_1.x; new_matrix.matrix[4] = row_1.y; new_matrix.matrix[5] = row_1.z;
   \   0000000A   0x990A             LDR      R1,[SP, #+40]
   \   0000000C   0x9103             STR      R1,[SP, #+12]
   \   0000000E   0x990B             LDR      R1,[SP, #+44]
   \   00000010   0x9104             STR      R1,[SP, #+16]
   \   00000012   0x990C             LDR      R1,[SP, #+48]
   \   00000014   0x9105             STR      R1,[SP, #+20]
    110            new_matrix.matrix[6] = row_2.x; new_matrix.matrix[7] = row_2.y; new_matrix.matrix[8] = row_2.z;
   \   00000016   0x990D             LDR      R1,[SP, #+52]
   \   00000018   0x9106             STR      R1,[SP, #+24]
   \   0000001A   0x990E             LDR      R1,[SP, #+56]
   \   0000001C   0x9107             STR      R1,[SP, #+28]
   \   0000001E   0x990F             LDR      R1,[SP, #+60]
   \   00000020   0x9108             STR      R1,[SP, #+32]
    111            //new_matrix.debug(PSTR("new_matrix"));
    112            return new_matrix;
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x2224             MOVS     R2,#+36
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000002A   0xB009             ADD      SP,SP,#+36
   \   0000002C   0xBD00             POP      {PC}             ;; return
    113          }
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void matrix_3x3::set_to_identity() {
    116            matrix[0] = 1; matrix[1] = 0; matrix[2] = 0;
   \                     _ZN10matrix_3x315set_to_identityEv: (+1)
   \   00000000   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000004   0x6001             STR      R1,[R0, #+0]
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x6042             STR      R2,[R0, #+4]
   \   0000000A   0x6082             STR      R2,[R0, #+8]
    117            matrix[3] = 0; matrix[4] = 1; matrix[5] = 0;
   \   0000000C   0x60C2             STR      R2,[R0, #+12]
   \   0000000E   0x6101             STR      R1,[R0, #+16]
   \   00000010   0x6142             STR      R2,[R0, #+20]
    118            matrix[6] = 0; matrix[7] = 0; matrix[8] = 1;
   \   00000012   0x6182             STR      R2,[R0, #+24]
   \   00000014   0x61C2             STR      R2,[R0, #+28]
   \   00000016   0x6201             STR      R1,[R0, #+32]
    119          }
   \   00000018   0x4770             BX       LR               ;; return
    120          

   \                                 In section .text, align 2, keep-with-next
    121          matrix_3x3 matrix_3x3::create_look_at(vector_3 target) {
   \                     _ZN10matrix_3x314create_look_atE8vector_3: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0xB096             SUB      SP,SP,#+88
   \   00000004   0x4604             MOV      R4,R0
    122            vector_3 z_row = target.get_normal();
   \   00000006   0xA916             ADD      R1,SP,#+88
   \   00000008   0xA80C             ADD      R0,SP,#+48
   \   0000000A   0x.... 0x....      BL       _ZN8vector_310get_normalEv
    123            vector_3 x_row = vector_3(1, 0, -target.x / target.z).get_normal();
   \   0000000E   0x9816             LDR      R0,[SP, #+88]
   \   00000010   0x9918             LDR      R1,[SP, #+96]
   \   00000012   0x.... 0x....      BL       __aeabi_fdiv
   \   00000016   0xF080 0x4000      EOR      R0,R0,#0x80000000
   \   0000001A   0x4603             MOV      R3,R0
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000022   0xA809             ADD      R0,SP,#+36
   \   00000024   0x.... 0x....      BL       _ZN8vector_3C1Efff
   \   00000028   0xA909             ADD      R1,SP,#+36
   \   0000002A   0xA806             ADD      R0,SP,#+24
   \   0000002C   0x.... 0x....      BL       _ZN8vector_310get_normalEv
   \   00000030   0xA806             ADD      R0,SP,#+24
   \   00000032   0x466A             MOV      R2,SP
   \   00000034   0xC80A             LDM      R0!,{R1,R3}
   \   00000036   0xC20A             STM      R2!,{R1,R3}
   \   00000038   0x6803             LDR      R3,[R0, #0]
   \   0000003A   0x6013             STR      R3,[R2, #+0]
   \   0000003C   0xA80C             ADD      R0,SP,#+48
   \   0000003E   0xE890 0x000E      LDM      R0,{R1-R3}
   \   00000042   0xA803             ADD      R0,SP,#+12
   \   00000044   0x.... 0x....      BL       _ZN8vector_35crossES_S_
    124            vector_3 y_row = vector_3::cross(z_row, x_row).get_normal();
   \   00000048   0xA812             ADD      R0,SP,#+72
   \   0000004A   0xA903             ADD      R1,SP,#+12
   \   0000004C   0xC92C             LDM      R1!,{R2,R3,R5}
   \   0000004E   0xC02C             STM      R0!,{R2,R3,R5}
   \   00000050   0xA912             ADD      R1,SP,#+72
   \   00000052   0xA800             ADD      R0,SP,#+0
   \   00000054   0x.... 0x....      BL       _ZN8vector_310get_normalEv
   \   00000058   0xA80F             ADD      R0,SP,#+60
   \   0000005A   0xA900             ADD      R1,SP,#+0
   \   0000005C   0xC92C             LDM      R1!,{R2,R3,R5}
   \   0000005E   0xC02C             STM      R0!,{R2,R3,R5}
    125          
    126            // x_row.debug(PSTR("x_row"));
    127            // y_row.debug(PSTR("y_row"));
    128            // z_row.debug(PSTR("z_row"));
    129          
    130            // create the matrix already correctly transposed
    131            matrix_3x3 rot = matrix_3x3::create_from_rows(x_row, y_row, z_row);
    132          
    133            // rot.debug(PSTR("rot"));
    134            return rot;
   \   00000060   0xA80C             ADD      R0,SP,#+48
   \   00000062   0xAA03             ADD      R2,SP,#+12
   \   00000064   0xC80A             LDM      R0!,{R1,R3}
   \   00000066   0xC20A             STM      R2!,{R1,R3}
   \   00000068   0x6803             LDR      R3,[R0, #0]
   \   0000006A   0x6013             STR      R3,[R2, #+0]
   \   0000006C   0xA80F             ADD      R0,SP,#+60
   \   0000006E   0x466A             MOV      R2,SP
   \   00000070   0xC80A             LDM      R0!,{R1,R3}
   \   00000072   0xC20A             STM      R2!,{R1,R3}
   \   00000074   0x462B             MOV      R3,R5
   \   00000076   0x6013             STR      R3,[R2, #+0]
   \   00000078   0xA806             ADD      R0,SP,#+24
   \   0000007A   0xE890 0x000E      LDM      R0,{R1-R3}
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0x.... 0x....      BL       _ZN10matrix_3x316create_from_rowsE8vector_3S0_S0_
   \   00000084   0xB019             ADD      SP,SP,#+100
   \   00000086   0xBD30             POP      {R4,R5,PC}       ;; return
    135          }
    136          

   \                                 In section .text, align 2, keep-with-next
    137          matrix_3x3 matrix_3x3::transpose(matrix_3x3 original) {
   \                     _ZN10matrix_3x39transposeES_: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
    138            matrix_3x3 new_matrix;
    139            new_matrix.matrix[0] = original.matrix[0]; new_matrix.matrix[1] = original.matrix[3]; new_matrix.matrix[2] = original.matrix[6];
   \   00000006   0x9100             STR      R1,[SP, #+0]
   \   00000008   0x990E             LDR      R1,[SP, #+56]
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   \   0000000C   0x9911             LDR      R1,[SP, #+68]
   \   0000000E   0x9102             STR      R1,[SP, #+8]
    140            new_matrix.matrix[3] = original.matrix[1]; new_matrix.matrix[4] = original.matrix[4]; new_matrix.matrix[5] = original.matrix[7];
   \   00000010   0x4611             MOV      R1,R2
   \   00000012   0x9103             STR      R1,[SP, #+12]
   \   00000014   0x990F             LDR      R1,[SP, #+60]
   \   00000016   0x9104             STR      R1,[SP, #+16]
   \   00000018   0x9912             LDR      R1,[SP, #+72]
   \   0000001A   0x9105             STR      R1,[SP, #+20]
    141            new_matrix.matrix[6] = original.matrix[2]; new_matrix.matrix[7] = original.matrix[5]; new_matrix.matrix[8] = original.matrix[8];
   \   0000001C   0x4619             MOV      R1,R3
   \   0000001E   0x9106             STR      R1,[SP, #+24]
   \   00000020   0x9910             LDR      R1,[SP, #+64]
   \   00000022   0x9107             STR      R1,[SP, #+28]
   \   00000024   0x9913             LDR      R1,[SP, #+76]
   \   00000026   0x9108             STR      R1,[SP, #+32]
    142            return new_matrix;
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x2224             MOVS     R2,#+36
   \   0000002C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000030   0xB00A             ADD      SP,SP,#+40
   \   00000032   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    143          }
    144          

   \                                 In section .text, align 2, keep-with-next
    145          void matrix_3x3::debug(const char * const title) {
   \                     _ZN10matrix_3x35debugEPKc: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x4608             MOV      R0,R1
    146            serialprintPGM(title);
   \   00000008   0x.... 0x....      BL       _Z14serialprintPGMPKc
    147            uint8_t count = 0;
   \   0000000C   0x2400             MOVS     R4,#+0
    148            for (uint8_t i = 0; i < 3; i++) {
   \   0000000E   0x4625             MOV      R5,R4
   \   00000010   0x....             LDR.N    R6,??DataTable4
   \   00000012   0xE023             B.N      ??debug_0
    149              for (uint8_t j = 0; j < 3; j++) {
    150                if (matrix[count] >= 0.0) SERIAL_PROTOCOLCHAR('+');
   \                     ??debug_1: (+1)
   \   00000014   0xB2E4             UXTB     R4,R4
   \   00000016   0x46A1             MOV      R9,R4
   \   00000018   0xF858 0x0029      LDR      R0,[R8, R9, LSL #+2]
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000022   0xD803             BHI.N    ??debug_2
   \   00000024   0x212B             MOVS     R1,#+43
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    151                SERIAL_PROTOCOL_F(matrix[count], 6);
   \                     ??debug_2: (+1)
   \   0000002C   0x2006             MOVS     R0,#+6
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0xF858 0x0029      LDR      R0,[R8, R9, LSL #+2]
   \   00000034   0x.... 0x....      BL       __aeabi_f2d
   \   00000038   0x4602             MOV      R2,R0
   \   0000003A   0x460B             MOV      R3,R1
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0x.... 0x....      BL       _ZN5Print5printEdi
    152                SERIAL_PROTOCOLCHAR(' ');
   \   00000042   0x2120             MOVS     R1,#+32
   \   00000044   0x4630             MOV      R0,R6
   \   00000046   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    153                count++;
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
    154              }
   \   0000004C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??debug_3: (+1)
   \   0000004E   0x2F03             CMP      R7,#+3
   \   00000050   0xDBE0             BLT.N    ??debug_1
    155              SERIAL_EOL();
   \   00000052   0x210A             MOVS     R1,#+10
   \   00000054   0x4630             MOV      R0,R6
   \   00000056   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   0000005A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??debug_0: (+1)
   \   0000005C   0x2D03             CMP      R5,#+3
   \   0000005E   0xDA01             BGE.N    ??debug_4
   \   00000060   0x2700             MOVS     R7,#+0
   \   00000062   0xE7F4             B.N      ??debug_3
    156            }
    157          }
   \                     ??debug_4: (+1)
   \   00000064   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp vector_3::subobject vector_3()
   \                     _ZN8vector_3C2Ev: (+1)
   \   00000000   0x....             B.N      _ZN8vector_3C1Ev

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp vector_3::subobject vector_3(float, float, float)
   \                     _ZN8vector_3C2Efff: (+1)
   \   00000000   0x....             B.N      _ZN8vector_3C1Efff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " x: ">`:
   \   00000000   0x20 0x78          DC8 " x: "
   \              0x3A 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " y: ">`:
   \   00000000   0x20 0x79          DC8 " y: "
   \              0x3A 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " z: ">`:
   \   00000000   0x20 0x7A          DC8 " z: "
   \              0x3A 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    158          
    159          #endif // HAS_ABL
    160          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      84   apply_rotation_xyz(matrix_3x3, float &, float &, float &)
        84   -> __aeabi_memcpy4
        72   -> vector_3::apply_rotation(matrix_3x3)
        72   -> vector_3::vector_3(float, float, float)
      40   matrix_3x3::create_from_rows(vector_3, vector_3, vector_3)
        40   -> __aeabi_memcpy4
     112   matrix_3x3::create_look_at(vector_3)
       112   -> __aeabi_fdiv
       112   -> matrix_3x3::create_from_rows(vector_3, vector_3, vector_3)
       112   -> vector_3::cross(vector_3, vector_3)
       112   -> vector_3::get_normal()
       112   -> vector_3::vector_3(float, float, float)
      32   matrix_3x3::debug(char const *)
        32   -> Print::print(double, int)
        32   -> USARTClass::write(uint8_t)
        32   -> __aeabi_cfrcmple
        32   -> __aeabi_f2d
        32   -> serialprintPGM(char const *)
       0   matrix_3x3::set_to_identity()
      56   matrix_3x3::transpose(matrix_3x3)
        56   -> __aeabi_memcpy4
       8   serialprintPGM(char const *)
         8   -> USARTClass::write(uint8_t)
      40   vector_3::apply_rotation(matrix_3x3)
        40   -> __aeabi_fadd
        40   -> __aeabi_fmul
      56   vector_3::cross(vector_3, vector_3)
        56   -> __aeabi_fmul
        56   -> __aeabi_fsub
        56   -> vector_3::vector_3(float, float, float)
      16   vector_3::debug(char const *)
        16   -> Print::print(double, int)
         0   -> USARTClass::write(uint8_t)
        16   -> __aeabi_f2d
        16   -> serialprintPGM(char const *)
      32   vector_3::get_length()
        32   -> __aeabi_fadd
        32   -> __aeabi_fmul
         0   -> sqrtf
      24   vector_3::get_normal()
        24   -> vector_3::normalize()
        24   -> vector_3::vector_3(float, float, float)
      16   vector_3::normalize()
        16   -> __aeabi_fdiv
        16   -> __aeabi_fmul
        16   -> vector_3::get_length()
      40   vector_3::operator+(vector_3)
        40   -> __aeabi_fadd
        40   -> vector_3::vector_3(float, float, float)
      40   vector_3::operator-(vector_3)
        40   -> __aeabi_fsub
        40   -> vector_3::vector_3(float, float, float)
       0   vector_3::subobject vector_3()
         0   -> vector_3::vector_3()
       0   vector_3::subobject vector_3(float, float, float)
         0   -> vector_3::vector_3(float, float, float)
       0   vector_3::vector_3()
       0   vector_3::vector_3(float, float, float)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant " x: ">
       8  ?<Constant " y: ">
       8  ?<Constant " z: ">
       4  ??DataTable4
      66  apply_rotation_xyz(matrix_3x3, float &, float &, float &)
      46  matrix_3x3::create_from_rows(vector_3, vector_3, vector_3)
     136  matrix_3x3::create_look_at(vector_3)
     104  matrix_3x3::debug(char const *)
      26  matrix_3x3::set_to_identity()
      54  matrix_3x3::transpose(matrix_3x3)
      28  serialprintPGM(char const *)
     156  vector_3::apply_rotation(matrix_3x3)
     134  vector_3::cross(vector_3, vector_3)
     108  vector_3::debug(char const *)
     158  vector_3::get_length()
      34  vector_3::get_normal()
      52  vector_3::normalize()
      70  vector_3::operator+(vector_3)
      70  vector_3::operator-(vector_3)
       2  vector_3::subobject vector_3()
       2  vector_3::subobject vector_3(float, float, float)
      10  vector_3::vector_3()
       8  vector_3::vector_3(float, float, float)
       1  -- Other

 
     1 byte  in section .rodata
 1 292 bytes in section .text
 
 1 264 bytes of CODE  memory (+ 28 bytes shared)
     0 bytes of CONST memory (+  1 byte  shared)

Errors: none
Warnings: 7
