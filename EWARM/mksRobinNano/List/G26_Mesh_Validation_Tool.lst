###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:05:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\G26_Mesh_Validation_Tool.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\G26_Mesh_Validation_Tool.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\G26_Mesh_Validation_Tool.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\G26_Mesh_Validation_Tool.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\G26_Mesh_Validation_Tool.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          /**
     24           * Marlin Firmware -- G26 - Mesh Validation Tool
     25           */
     26          
     27          #include "MarlinConfig.h"

  #define UNUSED(x) ((void)(x))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Inc\mks_cfg.h",613  Warning[Pe083]: 
          type qualifier specified more than once
     28          
     29          #if 1//ENABLED(G26_MESH_VALIDATION)
     30          
     31            #include "Marlin.h"

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xE003             B.N      ??serialprintPGM_0
   \                     ??serialprintPGM_1: (+1)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x4803             LDR.N    R0,??serialprintPGM_2
   \   0000000A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serialprintPGM_0: (+1)
   \   0000000E   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0xD1F7             BNE.N    ??serialprintPGM_1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   \                     ??serialprintPGM_2:
   \   00000018   0x........         DC32     Serial3

   \                                 In section .text, align 4
   \   __interwork __softfp void set_current_from_destination()
   \                     _Z28set_current_from_destinationv: (+1)
   \   00000000   0x2210             MOVS     R2,#+16
   \   00000002   0x4902             LDR.N    R1,??set_current_from_destination_0
   \   00000004   0x4802             LDR.N    R0,??set_current_from_destination_0+0x4
   \   00000006   0x.... 0x....      B.W      memcpy
   \   0000000A   0xBF00             Nop      
   \                     ??set_current_from_destination_0:
   \   0000000C   0x........         DC32     destination
   \   00000010   0x........         DC32     current_position

   \                                 In section .text, align 4
   \   __interwork __softfp void set_destination_from_current()
   \                     _Z28set_destination_from_currentv: (+1)
   \   00000000   0x2210             MOVS     R2,#+16
   \   00000002   0x4902             LDR.N    R1,??set_destination_from_current_0
   \   00000004   0x4802             LDR.N    R0,??set_destination_from_current_0+0x4
   \   00000006   0x.... 0x....      B.W      memcpy
   \   0000000A   0xBF00             Nop      
   \                     ??set_destination_from_current_0:
   \   0000000C   0x........         DC32     current_position
   \   00000010   0x........         DC32     destination

   \                                 In section .text, align 4
   \   __interwork __softfp bool position_is_reachable_IS_KINEMATIC(float const &, float const &)
   \                     _Z34position_is_reachable_IS_KINEMATICRKfS0_: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4859             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0
   \   0000000A   0xF9B0 0x1058      LDRSH    R1,[R0, #+88]
   \   0000000E   0x078A             LSLS     R2,R1,#+30
   \   00000010   0xD54E             BPL.N    ??position_is_reachable_IS_KINEMATIC_1
   \   00000012   0xF8D0 0x8054      LDR      R8,[R0, #+84]
   \   00000016   0xF04F 0x0902      MOV      R9,#+2
   \   0000001A   0xF04F 0x567E      MOV      R6,#+1065353216
   \   0000001E   0x4637             MOV      R7,R6
   \   00000020   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_2
   \                     ??position_is_reachable_IS_KINEMATIC_3: (+1)
   \   00000022   0x4640             MOV      R0,R8
   \   00000024   0x4641             MOV      R1,R8
   \   00000026   0x.... 0x....      BL       __aeabi_fmul
   \   0000002A   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_2: (+1)
   \   0000002C   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000030   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_4
   \   00000032   0x4638             MOV      R0,R7
   \   00000034   0x4641             MOV      R1,R8
   \   00000036   0x.... 0x....      BL       __aeabi_fmul
   \   0000003A   0x4607             MOV      R7,R0
   \                     ??position_is_reachable_IS_KINEMATIC_4: (+1)
   \   0000003C   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   00000040   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_3
   \   00000042   0xF8D5 0x8000      LDR      R8,[R5, #+0]
   \   00000046   0xF04F 0x0902      MOV      R9,#+2
   \   0000004A   0x4635             MOV      R5,R6
   \   0000004C   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_5
   \                     ??position_is_reachable_IS_KINEMATIC_6: (+1)
   \   0000004E   0x4640             MOV      R0,R8
   \   00000050   0x4641             MOV      R1,R8
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_5: (+1)
   \   00000058   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000005C   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_7
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x4641             MOV      R1,R8
   \   00000062   0x.... 0x....      BL       __aeabi_fmul
   \   00000066   0x4605             MOV      R5,R0
   \                     ??position_is_reachable_IS_KINEMATIC_7: (+1)
   \   00000068   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   0000006C   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_6
   \   0000006E   0x6824             LDR      R4,[R4, #+0]
   \   00000070   0xF04F 0x0802      MOV      R8,#+2
   \   00000074   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_8
   \                     ??position_is_reachable_IS_KINEMATIC_9: (+1)
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x4621             MOV      R1,R4
   \   0000007A   0x.... 0x....      BL       __aeabi_fmul
   \   0000007E   0x4604             MOV      R4,R0
   \                     ??position_is_reachable_IS_KINEMATIC_8: (+1)
   \   00000080   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \   00000084   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_10
   \   00000086   0x4630             MOV      R0,R6
   \   00000088   0x4621             MOV      R1,R4
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x4606             MOV      R6,R0
   \                     ??position_is_reachable_IS_KINEMATIC_10: (+1)
   \   00000090   0xEA5F 0x0858      LSRS     R8,R8,#+1
   \   00000094   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_9
   \   00000096   0x4628             MOV      R0,R5
   \   00000098   0x4631             MOV      R1,R6
   \   0000009A   0x.... 0x....      BL       __aeabi_fadd
   \   0000009E   0x4601             MOV      R1,R0
   \   000000A0   0x4638             MOV      R0,R7
   \   000000A2   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000A6   0xD801             BHI.N    ??position_is_reachable_IS_KINEMATIC_11
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xE05F             B.N      ??position_is_reachable_IS_KINEMATIC_12
   \                     ??position_is_reachable_IS_KINEMATIC_11: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xE05D             B.N      ??position_is_reachable_IS_KINEMATIC_12
   \                     ??position_is_reachable_IS_KINEMATIC_1: (+1)
   \   000000B0   0xF44F 0x7040      MOV      R0,#+768
   \   000000B4   0x4201             TST      R1,R0
   \   000000B6   0xD059             BEQ.N    ??position_is_reachable_IS_KINEMATIC_12
   \   000000B8   0x482E             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x4
   \   000000BA   0x6801             LDR      R1,[R0, #+0]
   \   000000BC   0x482E             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x8
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x.... 0x....      BL       __aeabi_fadd
   \   000000C4   0x4680             MOV      R8,R0
   \   000000C6   0xF04F 0x0902      MOV      R9,#+2
   \   000000CA   0xF04F 0x567E      MOV      R6,#+1065353216
   \   000000CE   0x4637             MOV      R7,R6
   \   000000D0   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_13
   \                     ??position_is_reachable_IS_KINEMATIC_14: (+1)
   \   000000D2   0x4640             MOV      R0,R8
   \   000000D4   0x4641             MOV      R1,R8
   \   000000D6   0x.... 0x....      BL       __aeabi_fmul
   \   000000DA   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_13: (+1)
   \   000000DC   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000000E0   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_15
   \   000000E2   0x4638             MOV      R0,R7
   \   000000E4   0x4641             MOV      R1,R8
   \   000000E6   0x.... 0x....      BL       __aeabi_fmul
   \   000000EA   0x4607             MOV      R7,R0
   \                     ??position_is_reachable_IS_KINEMATIC_15: (+1)
   \   000000EC   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   000000F0   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_14
   \   000000F2   0x6829             LDR      R1,[R5, #+0]
   \   000000F4   0x4821             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0xC  ;; 0xc2c80000
   \   000000F6   0x.... 0x....      BL       __aeabi_fadd
   \   000000FA   0x4680             MOV      R8,R0
   \   000000FC   0xF04F 0x0902      MOV      R9,#+2
   \   00000100   0x4635             MOV      R5,R6
   \   00000102   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_16
   \                     ??position_is_reachable_IS_KINEMATIC_17: (+1)
   \   00000104   0x4640             MOV      R0,R8
   \   00000106   0x4641             MOV      R1,R8
   \   00000108   0x.... 0x....      BL       __aeabi_fmul
   \   0000010C   0x4680             MOV      R8,R0
   \                     ??position_is_reachable_IS_KINEMATIC_16: (+1)
   \   0000010E   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000112   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_18
   \   00000114   0x4628             MOV      R0,R5
   \   00000116   0x4641             MOV      R1,R8
   \   00000118   0x.... 0x....      BL       __aeabi_fmul
   \   0000011C   0x4605             MOV      R5,R0
   \                     ??position_is_reachable_IS_KINEMATIC_18: (+1)
   \   0000011E   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   00000122   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_17
   \   00000124   0x6821             LDR      R1,[R4, #+0]
   \   00000126   0x4816             LDR.N    R0,??position_is_reachable_IS_KINEMATIC_0+0x10  ;; 0x42600000
   \   00000128   0x.... 0x....      BL       __aeabi_fadd
   \   0000012C   0x4604             MOV      R4,R0
   \   0000012E   0xF04F 0x0802      MOV      R8,#+2
   \   00000132   0xE004             B.N      ??position_is_reachable_IS_KINEMATIC_19
   \                     ??position_is_reachable_IS_KINEMATIC_20: (+1)
   \   00000134   0x4620             MOV      R0,R4
   \   00000136   0x4621             MOV      R1,R4
   \   00000138   0x.... 0x....      BL       __aeabi_fmul
   \   0000013C   0x4604             MOV      R4,R0
   \                     ??position_is_reachable_IS_KINEMATIC_19: (+1)
   \   0000013E   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \   00000142   0xD504             BPL.N    ??position_is_reachable_IS_KINEMATIC_21
   \   00000144   0x4630             MOV      R0,R6
   \   00000146   0x4621             MOV      R1,R4
   \   00000148   0x.... 0x....      BL       __aeabi_fmul
   \   0000014C   0x4606             MOV      R6,R0
   \                     ??position_is_reachable_IS_KINEMATIC_21: (+1)
   \   0000014E   0xEA5F 0x0858      LSRS     R8,R8,#+1
   \   00000152   0xD1EF             BNE.N    ??position_is_reachable_IS_KINEMATIC_20
   \   00000154   0x4628             MOV      R0,R5
   \   00000156   0x4631             MOV      R1,R6
   \   00000158   0x.... 0x....      BL       __aeabi_fadd
   \   0000015C   0x4601             MOV      R1,R0
   \   0000015E   0x4638             MOV      R0,R7
   \   00000160   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000164   0xD801             BHI.N    ??position_is_reachable_IS_KINEMATIC_22
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0xE000             B.N      ??position_is_reachable_IS_KINEMATIC_12
   \                     ??position_is_reachable_IS_KINEMATIC_22: (+1)
   \   0000016A   0x2000             MOVS     R0,#+0

    }
    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
   \                     ??position_is_reachable_IS_KINEMATIC_12: (+1)
   \   0000016C   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??position_is_reachable_IS_KINEMATIC_0:
   \   00000170   0x........         DC32     mksCfg
   \   00000174   0x........         DC32     L1
   \   00000178   0x........         DC32     L2
   \   0000017C   0xC2C80000         DC32     0xc2c80000
   \   00000180   0x42600000         DC32     0x42600000

   \                                 In section .text, align 4
   \   __interwork __softfp bool position_is_reachable_IS_CARTESIAN(float const &, float const &)
   \                     _Z34position_is_reachable_IS_CARTESIANRKfS0_: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x468B             MOV      R11,R1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       __aeabi_f2d
   \   0000000C   0x4604             MOV      R4,R0
   \   0000000E   0x460D             MOV      R5,R1
   \   00000010   0xF8DF 0x8094      LDR.W    R8,??position_is_reachable_IS_CARTESIAN_0  ;; 0xd2f1a9fc
   \   00000014   0xF8DF 0x9094      LDR.W    R9,??position_is_reachable_IS_CARTESIAN_0+0x4  ;; 0xbf50624d
   \   00000018   0xF8DF 0xA094      LDR.W    R10,??position_is_reachable_IS_CARTESIAN_0+0x8
   \   0000001C   0xF8DA 0x0008      LDR      R0,[R10, #+8]
   \   00000020   0x.... 0x....      BL       __aeabi_f2d
   \   00000024   0x4642             MOV      R2,R8
   \   00000026   0x464B             MOV      R3,R9
   \   00000028   0x.... 0x....      BL       __aeabi_dadd
   \   0000002C   0x4602             MOV      R2,R0
   \   0000002E   0x460B             MOV      R3,R1
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000038   0xD832             BHI.N    ??position_is_reachable_IS_CARTESIAN_1
   \   0000003A   0x4646             MOV      R6,R8
   \   0000003C   0x4F1D             LDR.N    R7,??position_is_reachable_IS_CARTESIAN_0+0xC  ;; 0x3f50624d
   \   0000003E   0xF8DA 0x0014      LDR      R0,[R10, #+20]
   \   00000042   0x.... 0x....      BL       __aeabi_f2d
   \   00000046   0x4632             MOV      R2,R6
   \   00000048   0x463B             MOV      R3,R7
   \   0000004A   0x.... 0x....      BL       __aeabi_dadd
   \   0000004E   0x4622             MOV      R2,R4
   \   00000050   0x462B             MOV      R3,R5
   \   00000052   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000056   0xD823             BHI.N    ??position_is_reachable_IS_CARTESIAN_1
   \   00000058   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   0000005C   0x.... 0x....      BL       __aeabi_f2d
   \   00000060   0x4604             MOV      R4,R0
   \   00000062   0x460D             MOV      R5,R1
   \   00000064   0xF8DA 0x000C      LDR      R0,[R10, #+12]
   \   00000068   0x.... 0x....      BL       __aeabi_f2d
   \   0000006C   0x4642             MOV      R2,R8
   \   0000006E   0x464B             MOV      R3,R9
   \   00000070   0x.... 0x....      BL       __aeabi_dadd
   \   00000074   0x4602             MOV      R2,R0
   \   00000076   0x460B             MOV      R3,R1
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000080   0xD80E             BHI.N    ??position_is_reachable_IS_CARTESIAN_1
   \   00000082   0xF8DA 0x0018      LDR      R0,[R10, #+24]
   \   00000086   0x.... 0x....      BL       __aeabi_f2d
   \   0000008A   0x4632             MOV      R2,R6
   \   0000008C   0x463B             MOV      R3,R7
   \   0000008E   0x.... 0x....      BL       __aeabi_dadd
   \   00000092   0x4622             MOV      R2,R4
   \   00000094   0x462B             MOV      R3,R5
   \   00000096   0x.... 0x....      BL       __aeabi_cdrcmple
   \   0000009A   0xD801             BHI.N    ??position_is_reachable_IS_CARTESIAN_1
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0xE000             B.N      ??position_is_reachable_IS_CARTESIAN_2
   \                     ??position_is_reachable_IS_CARTESIAN_1: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??position_is_reachable_IS_CARTESIAN_2: (+1)
   \   000000A2   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \   000000A6   0xBF00             Nop      
   \                     ??position_is_reachable_IS_CARTESIAN_0:
   \   000000A8   0xD2F1A9FC         DC32     0xd2f1a9fc
   \   000000AC   0xBF50624D         DC32     0xbf50624d
   \   000000B0   0x........         DC32     mksCfg
   \   000000B4   0x3F50624D         DC32     0x3f50624d
     32            #include "planner.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void Planner::set_e_position_mm(float const &)
   \                     _ZN7Planner17set_e_position_mmERKf: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      B.W      _ZN7Planner15set_position_mmE8AxisEnumRKf

      static constexpr int8_t next_block_index(const int8_t block_index) { return BLOCK_MOD(block_index + 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\planner.h",627  Warning[Pe815]: 
          type qualifier on return type is meaningless

      static constexpr int8_t prev_block_index(const int8_t block_index) { return BLOCK_MOD(block_index - 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\planner.h",628  Warning[Pe815]: 
          type qualifier on return type is meaningless
     33            #include "stepper.h"
     34            #include "temperature.h"

   \                                 In section .text, align 4
   \   __interwork __softfp float Temperature::degHotend(uint8_t)
   \                     _ZN11Temperature9degHotendEh: (+1)
   \   00000000   0x4901             LDR.N    R1,??degHotend_0
   \   00000002   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000006   0x4770             BX       LR               ;; return
   \                     ??degHotend_0:
   \   00000008   0x........         DC32     _ZN11Temperature19current_temperatureE

   \                                 In section .text, align 4
   \   __interwork __softfp float Temperature::degBed()
   \                     _ZN11Temperature6degBedEv: (+1)
   \   00000000   0x4801             LDR.N    R0,??degBed_0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   \   00000006   0xBF00             Nop      
   \                     ??degBed_0:
   \   00000008   0x........         DC32     _ZN11Temperature23current_temperature_bedE

   \                                 In section .text, align 4
   \   __interwork __softfp void Temperature::setTargetHotend(float, uint8_t)
   \                     _ZN11Temperature15setTargetHotendEfh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1

        target_temperature[HOTEND_INDEX] = celsius;
                                         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\temperature.h",406  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \   00000004   0x.... 0x....      BL       __aeabi_f2iz
   \   00000008   0x4903             LDR.N    R1,??setTargetHotend_0
   \   0000000A   0xF841 0x0024      STR      R0,[R1, R4, LSL #+2]
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xE8BD 0x4010      POP      {R4,LR}
   \   00000014   0x.... 0x....      B.W      _ZN11Temperature21start_watching_heaterEh
   \                     ??setTargetHotend_0:
   \   00000018   0x........         DC32     _ZN11Temperature18target_temperatureE

   \                                 In section .text, align 4
   \   __interwork __softfp void Temperature::setTargetBed(float)
   \                     _ZN11Temperature12setTargetBedEf: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4809             LDR.N    R0,??setTargetBed_0
   \   00000006   0xF9B0 0x5032      LDRSH    R5,[R0, #+50]
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       __aeabi_i2f
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000018   0xD202             BCS.N    ??setTargetBed_1
   \   0000001A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000001E   0x4605             MOV      R5,R0
   \                     ??setTargetBed_1: (+1)
   \   00000020   0x4803             LDR.N    R0,??setTargetBed_0+0x4
   \   00000022   0x8005             STRH     R5,[R0, #+0]

          target_temperature_bed =
                                 ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\temperature.h",414  Warning[Pa093]: 
          implicit conversion from floating point to integer
   \   00000024   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000028   0x.... 0x....      B.W      _ZN11Temperature18start_watching_bedEv
   \                     ??setTargetBed_0:
   \   0000002C   0x........         DC32     mksCfg
   \   00000030   0x........         DC32     _ZN11Temperature22target_temperature_bedE
     35            #include "ultralcd.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void lcd_setstatusPGM(char const *, int8_t)
   \                     _Z16lcd_setstatusPGMPKca: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     36            #include "gcode.h"

   \                                 In section .text, align 4
   \   __interwork __softfp bool GCodeParser::seen(char)
   \                     _ZN11GCodeParser4seenEc: (+1)
   \   00000000   0xF1A0 0x0141      SUB      R1,R0,#+65
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x291A             CMP      R1,#+26
   \   00000008   0xD301             BCC.N    ??seen_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4770             BX       LR
   \                     ??seen_0: (+1)
   \   0000000E   0x10C8             ASRS     R0,R1,#+3
   \   00000010   0x4A0A             LDR.N    R2,??seen_1
   \   00000012   0x5C80             LDRB     R0,[R0, R2]
   \   00000014   0xF001 0x0207      AND      R2,R1,#0x7
   \   00000018   0x40D0             LSRS     R0,R0,R2
   \   0000001A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000001E   0xD00B             BEQ.N    ??seen_2
   \   00000020   0x4A07             LDR.N    R2,??seen_1+0x4
   \   00000022   0x5C89             LDRB     R1,[R1, R2]
   \   00000024   0x4A07             LDR.N    R2,??seen_1+0x8
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xD004             BEQ.N    ??seen_3
   \   0000002A   0x4B07             LDR.N    R3,??seen_1+0xC
   \   0000002C   0x681B             LDR      R3,[R3, #+0]
   \   0000002E   0x18C9             ADDS     R1,R1,R3
   \   00000030   0x6011             STR      R1,[R2, #+0]
   \   00000032   0x4770             BX       LR
   \                     ??seen_3: (+1)
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x6011             STR      R1,[R2, #+0]
   \                     ??seen_2: (+1)
   \   00000038   0x4770             BX       LR               ;; return
   \   0000003A   0xBF00             Nop      
   \                     ??seen_1:
   \   0000003C   0x........         DC32     _ZN11GCodeParser8codebitsE
   \   00000040   0x........         DC32     _ZN11GCodeParser5paramE
   \   00000044   0x........         DC32     _ZN11GCodeParser9value_ptrE
   \   00000048   0x........         DC32     _ZN11GCodeParser11command_ptrE

   \                                 In section .text, align 4
   \   __interwork __softfp bool GCodeParser::has_value()
   \                     _ZN11GCodeParser9has_valueEv: (+1)
   \   00000000   0x4803             LDR.N    R0,??has_value_0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ.N    ??has_value_1
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x4770             BX       LR
   \                     ??has_value_1: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4770             BX       LR               ;; return
   \                     ??has_value_0:
   \   00000010   0x........         DC32     _ZN11GCodeParser9value_ptrE

   \                                 In section .text, align 2
   \   __interwork __softfp bool GCodeParser::seenval(char)
   \                     _ZN11GCodeParser7seenvalEc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN11GCodeParser4seenEc
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD003             BEQ.N    ??seenval_0
   \   0000000A   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000E   0x.... 0x....      B.W      _ZN11GCodeParser9has_valueEv
   \                     ??seenval_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp float GCodeParser::value_float()
   \                     _ZN11GCodeParser11value_floatEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4A12             LDR.N    R2,??value_float_0
   \   00000004   0x6810             LDR      R0,[R2, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD01D             BEQ.N    ??value_float_1
   \   0000000A   0x4604             MOV      R4,R0
   \   0000000C   0xE000             B.N      ??value_float_2
   \                     ??value_float_3: (+1)
   \   0000000E   0x1C64             ADDS     R4,R4,#+1
   \                     ??value_float_2: (+1)
   \   00000010   0xF994 0x5000      LDRSB    R5,[R4, #+0]
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD001             BEQ.N    ??value_float_4
   \   00000018   0x2D20             CMP      R5,#+32
   \   0000001A   0xD106             BNE.N    ??value_float_5
   \                     ??value_float_4: (+1)
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x.... 0x....      BL       strtod
   \   00000022   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000026   0x.... 0x....      B.W      __aeabi_d2f
   \                     ??value_float_5: (+1)
   \   0000002A   0x2D45             CMP      R5,#+69
   \   0000002C   0xD001             BEQ.N    ??value_float_6
   \   0000002E   0x2D65             CMP      R5,#+101
   \   00000030   0xD1ED             BNE.N    ??value_float_3
   \                     ??value_float_6: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x7020             STRB     R0,[R4, #+0]
   \   00000036   0x4601             MOV      R1,R0
   \   00000038   0x6810             LDR      R0,[R2, #+0]
   \   0000003A   0x.... 0x....      BL       strtod
   \   0000003E   0x.... 0x....      BL       __aeabi_d2f
   \   00000042   0x7025             STRB     R5,[R4, #+0]
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??value_float_1: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   0000004A   0xBF00             Nop      
   \                     ??value_float_0:
   \   0000004C   0x........         DC32     _ZN11GCodeParser9value_ptrE

   \                                 In section .text, align 4
   \   __interwork __softfp int32_t GCodeParser::value_long()
   \                     _ZN11GCodeParser10value_longEv: (+1)
   \   00000000   0x4804             LDR.N    R0,??value_long_0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD003             BEQ.N    ??value_long_1
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x.... 0x....      B.W      strtol
   \                     ??value_long_1: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR               ;; return
   \                     ??value_long_0:
   \   00000014   0x........         DC32     _ZN11GCodeParser9value_ptrE

    FORCE_INLINE static millis_t value_millis_from_seconds() { return value_float() * 1000UL; }
                                                                      ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\gcode.h",207  Warning[Pa093]: 
          implicit conversion from floating point to integer

   \                                 In section .text, align 2
   \   __interwork __softfp int16_t GCodeParser::value_int()
   \                     _ZN11GCodeParser9value_intEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN11GCodeParser10value_longEv
   \   00000006   0xB200             SXTH     R0,R0
   \   00000008   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp uint8_t GCodeParser::value_byte()
   \                     _ZN11GCodeParser10value_byteEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN11GCodeParser10value_longEv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD501             BPL.N    ??value_byte_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE007             B.N      ??value_byte_1
   \                     ??value_byte_0: (+1)
   \   0000000E   0x.... 0x....      BL       _ZN11GCodeParser10value_longEv
   \   00000012   0x28FF             CMP      R0,#+255
   \   00000014   0xDD01             BLE.N    ??value_byte_2
   \   00000016   0x20FF             MOVS     R0,#+255
   \   00000018   0xE001             B.N      ??value_byte_1
   \                     ??value_byte_2: (+1)
   \   0000001A   0x.... 0x....      BL       _ZN11GCodeParser10value_longEv
   \                     ??value_byte_1: (+1)
   \   0000001E   0xB2C0             UXTB     R0,R0
   \   00000020   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp bool GCodeParser::value_bool()
   \                     _ZN11GCodeParser10value_boolEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN11GCodeParser9has_valueEv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD006             BEQ.N    ??value_bool_0
   \   0000000A   0x.... 0x....      BL       _ZN11GCodeParser10value_byteEv
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x4180             SBCS     R0,R0,R0
   \   00000012   0x43C0             MVNS     R0,R0
   \   00000014   0x0FC0             LSRS     R0,R0,#+31
   \   00000016   0xBD02             POP      {R1,PC}
   \                     ??value_bool_0: (+1)
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp float GCodeParser::value_linear_units()
   \                     _ZN11GCodeParser18value_linear_unitsEv: (+1)
   \   00000000   0x.... 0x....      B.W      _ZN11GCodeParser11value_floatEv

   \                                 In section .text, align 2
   \   __interwork __softfp float GCodeParser::value_celsius()
   \                     _ZN11GCodeParser13value_celsiusEv: (+1)
   \   00000000   0x.... 0x....      B.W      _ZN11GCodeParser11value_floatEv

   \                                 In section .text, align 2
   \   __interwork __softfp bool GCodeParser::boolval(char)
   \                     _ZN11GCodeParser7boolvalEc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD003             BEQ.N    ??boolval_0
   \   0000000C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000010   0x.... 0x....      B.W      _ZN11GCodeParser10value_boolEv
   \                     ??boolval_0: (+1)
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001A   0x.... 0x....      B.W      _ZN11GCodeParser4seenEc

   \                                 In section .text, align 2
   \   __interwork __softfp float GCodeParser::linearval(char, float)
   \                     _ZN11GCodeParser9linearvalEcf: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ.N    ??linearval_0
   \   0000000C   0x.... 0x....      BL       _ZN11GCodeParser18value_linear_unitsEv
   \   00000010   0x4604             MOV      R4,R0
   \                     ??linearval_0: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
     37            #include "bitmap_flags.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void bitmap_set(unsigned int *, uint8_t, uint8_t)
   \                     _Z10bitmap_setPjhh: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xF850 0x3022      LDR      R3,[R0, R2, LSL #+2]
   \   00000006   0x2401             MOVS     R4,#+1
   \   00000008   0xFA04 0xF101      LSL      R1,R4,R1
   \   0000000C   0x4319             ORRS     R1,R1,R3
   \   0000000E   0xF840 0x1022      STR      R1,[R0, R2, LSL #+2]
   \   00000012   0xBC10             POP      {R4}
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp bool is_bitmap_set(unsigned int *, uint8_t, uint8_t)
   \                     _Z13is_bitmap_setPjhh: (+1)
   \   00000000   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \   00000004   0x40C8             LSRS     R0,R0,R1
   \   00000006   0xF000 0x0001      AND      R0,R0,#0x1
   \   0000000A   0x4770             BX       LR               ;; return
     38          
     39            //#if ENABLED(MESH_BED_LEVELING)
     40              #include "mesh_bed_leveling.h"

  				cx= (x - (MESH_MIN_X_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
  				  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",83  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				cx= (x - (MESH_MIN_X_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  				  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",87  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				cy= (y - (MESH_MIN_Y_IS_KINEMATIC)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  				  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",95  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				cy= (y - (MESH_MIN_Y_IS_Cartesian)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  				  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",97  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				px = (x - (MESH_MIN_X_IS_KINEMATIC) + 0.5 * (MESH_X_DIST_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
  				   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",105  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				px = (x - (MESH_MIN_X_IS_Cartesian) + 0.5 * (MESH_X_DIST_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  				   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",107  Warning[Pa093]: 
          implicit conversion from floating point to integer

        	py = (y - (MESH_MIN_Y_IS_KINEMATIC) + 0.5 * (MESH_Y_DIST_IS_KINEMATIC)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
        	   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",115  Warning[Pa093]: 
          implicit conversion from floating point to integer

  				py = (y - (MESH_MIN_Y_IS_Cartesian) + 0.5 * (MESH_Y_DIST_IS_Cartesian)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  				   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h",117  Warning[Pa093]: 
          implicit conversion from floating point to integer
     41            //#elif ENABLED(AUTO_BED_LEVELING_UBL)
     42              #include "ubl.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void debug_current_and_destination(char const *)
   \                     _Z29debug_current_and_destinationPKc: (+1)
   \   00000000   0x4770             BX       LR               ;; return

  	#define MESH_X_DIST_IS_KINEMATIC (float(MESH_MAX_X_IS_KINEMATIC - (MESH_MIN_X_IS_KINEMATIC)) / float(GRID_MAX_POINTS_X - 1))
  	        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",74  Warning[Pe047]: 
          incompatible redefinition of macro "MESH_X_DIST_IS_KINEMATIC"
          (declared at line 41 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h")

  	#define MESH_Y_DIST_IS_KINEMATIC (float(MESH_MAX_Y_IS_KINEMATIC - (MESH_MIN_Y_IS_KINEMATIC)) / float(GRID_MAX_POINTS_Y - 1))
  	        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",75  Warning[Pe047]: 
          incompatible redefinition of macro "MESH_Y_DIST_IS_KINEMATIC"
          (declared at line 42 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h")

  	#define MESH_X_DIST_IS_Cartesian (float(MESH_MAX_X_IS_Cartesian - (MESH_MIN_X_IS_Cartesian)) / float(GRID_MAX_POINTS_X - 1))
  	        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",76  Warning[Pe047]: 
          incompatible redefinition of macro "MESH_X_DIST_IS_Cartesian"
          (declared at line 43 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h")

  	#define MESH_Y_DIST_IS_Cartesian (float(MESH_MAX_Y_IS_Cartesian - (MESH_MIN_Y_IS_Cartesian)) / float(GRID_MAX_POINTS_Y - 1))
  	        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",77  Warning[Pe047]: 
          incompatible redefinition of macro "MESH_Y_DIST_IS_Cartesian"
          (declared at line 44 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\mesh_bed_leveling.h")

          	cx = (x - (MESH_MIN_X_IS_KINEMATIC)) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
          	   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",182  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					cx = (x - (MESH_MIN_X_IS_Cartesian)) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",184  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					cy = (y - (MESH_MIN_Y_IS_KINEMATIC)) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",195  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					cy = (y - (MESH_MIN_Y_IS_Cartesian)) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",197  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					px= (x - (MESH_MIN_X_IS_KINEMATIC) + (MESH_X_DIST_IS_KINEMATIC) * 0.5) * (1.0 / (MESH_X_DIST_IS_KINEMATIC));
  					  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",208  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					px= (x - (MESH_MIN_X_IS_Cartesian) + (MESH_X_DIST_IS_Cartesian) * 0.5) * (1.0 / (MESH_X_DIST_IS_Cartesian));
  					  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",210  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					py = (y - (MESH_MIN_Y_IS_KINEMATIC) + (MESH_Y_DIST_IS_KINEMATIC) * 0.5) * (1.0 / (MESH_Y_DIST_IS_KINEMATIC));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",219  Warning[Pa093]: 
          implicit conversion from floating point to integer

  					py = (y - (MESH_MIN_Y_IS_Cartesian) + (MESH_Y_DIST_IS_Cartesian) * 0.5) * (1.0 / (MESH_Y_DIST_IS_Cartesian));
  					   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\ubl.h",221  Warning[Pa093]: 
          implicit conversion from floating point to integer

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::mesh_index_to_xpos(uint8_t)
   \                     _ZN20unified_bed_leveling18mesh_index_to_xposEh: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4F4A             LDR.N    R7,??mesh_index_to_xpos_0
   \   00000008   0xF897 0x6060      LDRB     R6,[R7, #+96]
   \   0000000C   0xF107 0x0008      ADD      R0,R7,#+8
   \   00000010   0xF8B0 0x1050      LDRH     R1,[R0, #+80]
   \   00000014   0xF240 0x3202      MOVW     R2,#+770
   \   00000018   0x4211             TST      R1,R2
   \   0000001A   0xD02B             BEQ.N    ??mesh_index_to_xpos_1
   \   0000001C   0x42B5             CMP      R5,R6
   \   0000001E   0xD203             BCS.N    ??mesh_index_to_xpos_2
   \   00000020   0x4844             LDR.N    R0,??mesh_index_to_xpos_0+0x4
   \   00000022   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000026   0xE081             B.N      ??mesh_index_to_xpos_3
   \                     ??mesh_index_to_xpos_2: (+1)
   \   00000028   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   0000002C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000030   0x4682             MOV      R10,R0
   \   00000032   0x4C41             LDR.N    R4,??mesh_index_to_xpos_0+0x8
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x4651             MOV      R1,R10
   \   00000038   0x.... 0x....      BL       __aeabi_fadd
   \   0000003C   0x4607             MOV      R7,R0
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       __aeabi_ui2f
   \   00000044   0x4605             MOV      R5,R0
   \   00000046   0x6860             LDR      R0,[R4, #+4]
   \   00000048   0x4651             MOV      R1,R10
   \   0000004A   0x.... 0x....      BL       __aeabi_fsub
   \   0000004E   0x4639             MOV      R1,R7
   \   00000050   0x.... 0x....      BL       __aeabi_fsub
   \   00000054   0x4604             MOV      R4,R0
   \   00000056   0x1E70             SUBS     R0,R6,#+1
   \   00000058   0x.... 0x....      BL       __aeabi_i2f
   \   0000005C   0x4601             MOV      R1,R0
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       __aeabi_fdiv
   \   00000064   0x4629             MOV      R1,R5
   \   00000066   0x.... 0x....      BL       __aeabi_fmul
   \   0000006A   0x4639             MOV      R1,R7
   \   0000006C   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000070   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_xpos_1: (+1)
   \   00000074   0x42B5             CMP      R5,R6
   \   00000076   0xD203             BCS.N    ??mesh_index_to_xpos_4
   \   00000078   0x482E             LDR.N    R0,??mesh_index_to_xpos_0+0x4
   \   0000007A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000007E   0xE055             B.N      ??mesh_index_to_xpos_3
   \                     ??mesh_index_to_xpos_4: (+1)
   \   00000080   0xF8D0 0x800C      LDR      R8,[R0, #+12]
   \   00000084   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000088   0x4641             MOV      R1,R8
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x4681             MOV      R9,R0
   \   00000090   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   00000094   0x.... 0x....      BL       __aeabi_ui2f
   \   00000098   0x4682             MOV      R10,R0
   \   0000009A   0x4648             MOV      R0,R9
   \   0000009C   0x4649             MOV      R1,R9
   \   0000009E   0x.... 0x....      BL       __aeabi_fsub
   \   000000A2   0x4651             MOV      R1,R10
   \   000000A4   0x.... 0x....      BL       __aeabi_fadd
   \   000000A8   0x4604             MOV      R4,R0
   \   000000AA   0xF107 0x0060      ADD      R0,R7,#+96
   \   000000AE   0xF8D0 0xB00C      LDR      R11,[R0, #+12]
   \   000000B2   0x68B8             LDR      R0,[R7, #+8]
   \   000000B4   0x4659             MOV      R1,R11
   \   000000B6   0x.... 0x....      BL       __aeabi_fadd
   \   000000BA   0x4607             MOV      R7,R0
   \   000000BC   0x4621             MOV      R1,R4
   \   000000BE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000C2   0xD201             BCS.N    ??mesh_index_to_xpos_5
   \   000000C4   0x9400             STR      R4,[SP, #+0]
   \   000000C6   0xE000             B.N      ??mesh_index_to_xpos_6
   \                     ??mesh_index_to_xpos_5: (+1)
   \   000000C8   0x9700             STR      R7,[SP, #+0]
   \                     ??mesh_index_to_xpos_6: (+1)
   \   000000CA   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000CE   0x4649             MOV      R1,R9
   \   000000D0   0x.... 0x....      BL       __aeabi_fmul
   \   000000D4   0x4651             MOV      R1,R10
   \   000000D6   0x.... 0x....      BL       __aeabi_fsub
   \   000000DA   0x4681             MOV      R9,R0
   \   000000DC   0x4640             MOV      R0,R8
   \   000000DE   0x4659             MOV      R1,R11
   \   000000E0   0x.... 0x....      BL       __aeabi_fadd
   \   000000E4   0x4601             MOV      R1,R0
   \   000000E6   0x4648             MOV      R0,R9
   \   000000E8   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000EC   0xD300             BCC.N    ??mesh_index_to_xpos_7
   \   000000EE   0x4689             MOV      R9,R1
   \                     ??mesh_index_to_xpos_7: (+1)
   \   000000F0   0x4638             MOV      R0,R7
   \   000000F2   0x4621             MOV      R1,R4
   \   000000F4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000F8   0xD300             BCC.N    ??mesh_index_to_xpos_8
   \   000000FA   0x463C             MOV      R4,R7
   \                     ??mesh_index_to_xpos_8: (+1)
   \   000000FC   0x4628             MOV      R0,R5
   \   000000FE   0x.... 0x....      BL       __aeabi_ui2f
   \   00000102   0x4605             MOV      R5,R0
   \   00000104   0x4648             MOV      R0,R9
   \   00000106   0x4621             MOV      R1,R4
   \   00000108   0x.... 0x....      BL       __aeabi_fsub
   \   0000010C   0x4604             MOV      R4,R0
   \   0000010E   0x1E70             SUBS     R0,R6,#+1
   \   00000110   0x.... 0x....      BL       __aeabi_i2f
   \   00000114   0x4601             MOV      R1,R0
   \   00000116   0x4620             MOV      R0,R4
   \   00000118   0x.... 0x....      BL       __aeabi_fdiv
   \   0000011C   0x4629             MOV      R1,R5
   \   0000011E   0x.... 0x....      BL       __aeabi_fmul
   \   00000122   0x9900             LDR      R1,[SP, #+0]
   \   00000124   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000128   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_xpos_3: (+1)
   \   0000012C   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \                     ??mesh_index_to_xpos_0:
   \   00000130   0x........         DC32     mksCfg
   \   00000134   0x........         DC32     _ZN20unified_bed_leveling19_mesh_index_to_xposE
   \   00000138   0x........         DC32     mksTmp

   \                                 In section .text, align 4
   \   __interwork __softfp float unified_bed_leveling::mesh_index_to_ypos(uint8_t)
   \                     _ZN20unified_bed_leveling18mesh_index_to_yposEh: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4F49             LDR.N    R7,??mesh_index_to_ypos_0
   \   00000008   0xF897 0x6061      LDRB     R6,[R7, #+97]
   \   0000000C   0xF107 0x000C      ADD      R0,R7,#+12
   \   00000010   0xF8B0 0x104C      LDRH     R1,[R0, #+76]
   \   00000014   0xF240 0x3202      MOVW     R2,#+770
   \   00000018   0x4211             TST      R1,R2
   \   0000001A   0xD02B             BEQ.N    ??mesh_index_to_ypos_1
   \   0000001C   0x42B5             CMP      R5,R6
   \   0000001E   0xD203             BCS.N    ??mesh_index_to_ypos_2
   \   00000020   0x4843             LDR.N    R0,??mesh_index_to_ypos_0+0x4
   \   00000022   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000026   0xE07F             B.N      ??mesh_index_to_ypos_3
   \                     ??mesh_index_to_ypos_2: (+1)
   \   00000028   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   0000002C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000030   0x4682             MOV      R10,R0
   \   00000032   0x4C40             LDR.N    R4,??mesh_index_to_ypos_0+0x8
   \   00000034   0x68A0             LDR      R0,[R4, #+8]
   \   00000036   0x4651             MOV      R1,R10
   \   00000038   0x.... 0x....      BL       __aeabi_fadd
   \   0000003C   0x4607             MOV      R7,R0
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       __aeabi_ui2f
   \   00000044   0x4605             MOV      R5,R0
   \   00000046   0x68E0             LDR      R0,[R4, #+12]
   \   00000048   0x4651             MOV      R1,R10
   \   0000004A   0x.... 0x....      BL       __aeabi_fsub
   \   0000004E   0x4639             MOV      R1,R7
   \   00000050   0x.... 0x....      BL       __aeabi_fsub
   \   00000054   0x4604             MOV      R4,R0
   \   00000056   0x1E70             SUBS     R0,R6,#+1
   \   00000058   0x.... 0x....      BL       __aeabi_i2f
   \   0000005C   0x4601             MOV      R1,R0
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       __aeabi_fdiv
   \   00000064   0x4629             MOV      R1,R5
   \   00000066   0x.... 0x....      BL       __aeabi_fmul
   \   0000006A   0x4639             MOV      R1,R7
   \   0000006C   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000070   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_ypos_1: (+1)
   \   00000074   0x42B5             CMP      R5,R6
   \   00000076   0xD203             BCS.N    ??mesh_index_to_ypos_4
   \   00000078   0x482D             LDR.N    R0,??mesh_index_to_ypos_0+0x4
   \   0000007A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000007E   0xE053             B.N      ??mesh_index_to_ypos_3
   \                     ??mesh_index_to_ypos_4: (+1)
   \   00000080   0xF8D0 0x800C      LDR      R8,[R0, #+12]
   \   00000084   0xF04F 0x507C      MOV      R0,#+1056964608
   \   00000088   0x4641             MOV      R1,R8
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x4681             MOV      R9,R0
   \   00000090   0xF897 0x0098      LDRB     R0,[R7, #+152]
   \   00000094   0x.... 0x....      BL       __aeabi_ui2f
   \   00000098   0x4682             MOV      R10,R0
   \   0000009A   0x4648             MOV      R0,R9
   \   0000009C   0x4649             MOV      R1,R9
   \   0000009E   0x.... 0x....      BL       __aeabi_fsub
   \   000000A2   0x4651             MOV      R1,R10
   \   000000A4   0x.... 0x....      BL       __aeabi_fadd
   \   000000A8   0x4604             MOV      R4,R0
   \   000000AA   0xF8D7 0xB070      LDR      R11,[R7, #+112]
   \   000000AE   0x68F8             LDR      R0,[R7, #+12]
   \   000000B0   0x4659             MOV      R1,R11
   \   000000B2   0x.... 0x....      BL       __aeabi_fadd
   \   000000B6   0x4607             MOV      R7,R0
   \   000000B8   0x4621             MOV      R1,R4
   \   000000BA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000BE   0xD201             BCS.N    ??mesh_index_to_ypos_5
   \   000000C0   0x9400             STR      R4,[SP, #+0]
   \   000000C2   0xE000             B.N      ??mesh_index_to_ypos_6
   \                     ??mesh_index_to_ypos_5: (+1)
   \   000000C4   0x9700             STR      R7,[SP, #+0]
   \                     ??mesh_index_to_ypos_6: (+1)
   \   000000C6   0xF04F 0x4080      MOV      R0,#+1073741824
   \   000000CA   0x4649             MOV      R1,R9
   \   000000CC   0x.... 0x....      BL       __aeabi_fmul
   \   000000D0   0x4651             MOV      R1,R10
   \   000000D2   0x.... 0x....      BL       __aeabi_fsub
   \   000000D6   0x4681             MOV      R9,R0
   \   000000D8   0x4640             MOV      R0,R8
   \   000000DA   0x4659             MOV      R1,R11
   \   000000DC   0x.... 0x....      BL       __aeabi_fadd
   \   000000E0   0x4601             MOV      R1,R0
   \   000000E2   0x4648             MOV      R0,R9
   \   000000E4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000E8   0xD300             BCC.N    ??mesh_index_to_ypos_7
   \   000000EA   0x4689             MOV      R9,R1
   \                     ??mesh_index_to_ypos_7: (+1)
   \   000000EC   0x4638             MOV      R0,R7
   \   000000EE   0x4621             MOV      R1,R4
   \   000000F0   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000F4   0xD300             BCC.N    ??mesh_index_to_ypos_8
   \   000000F6   0x463C             MOV      R4,R7
   \                     ??mesh_index_to_ypos_8: (+1)
   \   000000F8   0x4628             MOV      R0,R5
   \   000000FA   0x.... 0x....      BL       __aeabi_ui2f
   \   000000FE   0x4605             MOV      R5,R0
   \   00000100   0x4648             MOV      R0,R9
   \   00000102   0x4621             MOV      R1,R4
   \   00000104   0x.... 0x....      BL       __aeabi_fsub
   \   00000108   0x4604             MOV      R4,R0
   \   0000010A   0x1E70             SUBS     R0,R6,#+1
   \   0000010C   0x.... 0x....      BL       __aeabi_i2f
   \   00000110   0x4601             MOV      R1,R0
   \   00000112   0x4620             MOV      R0,R4
   \   00000114   0x.... 0x....      BL       __aeabi_fdiv
   \   00000118   0x4629             MOV      R1,R5
   \   0000011A   0x.... 0x....      BL       __aeabi_fmul
   \   0000011E   0x9900             LDR      R1,[SP, #+0]
   \   00000120   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000124   0x.... 0x....      B.W      __aeabi_fadd
   \                     ??mesh_index_to_ypos_3: (+1)
   \   00000128   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   \                     ??mesh_index_to_ypos_0:
   \   0000012C   0x........         DC32     mksCfg
   \   00000130   0x........         DC32     _ZN20unified_bed_leveling19_mesh_index_to_yposE
   \   00000134   0x........         DC32     mksTmp
     43            //#endif
     44          
     45            #define EXTRUSION_MULTIPLIER 1.0
     46            #define RETRACTION_MULTIPLIER 1.0
     47            #define PRIME_LENGTH 10.0
     48            #define OOZE_AMOUNT 0.3
     49          
     50            #define SIZE_OF_INTERSECTION_CIRCLES 5
     51            #define SIZE_OF_CROSSHAIRS 3
     52          
     53            #if SIZE_OF_CROSSHAIRS >= SIZE_OF_INTERSECTION_CIRCLES
     54              #error "SIZE_OF_CROSSHAIRS must be less than SIZE_OF_INTERSECTION_CIRCLES."
     55            #endif
     56          
     57            #define G26_OK false
     58            #define G26_ERR true
     59          
     60            /**
     61             *   G26 Mesh Validation Tool
     62             *
     63             *   G26 is a Mesh Validation Tool intended to provide support for the Marlin Unified Bed Leveling System.
     64             *   In order to fully utilize and benefit from the Marlin Unified Bed Leveling System an accurate Mesh must
     65             *   be defined. G29 is designed to allow the user to quickly validate the correctness of her Mesh. It will
     66             *   first heat the bed and nozzle. It will then print lines and circles along the Mesh Cell boundaries and
     67             *   the intersections of those lines (respectively).
     68             *
     69             *   This action allows the user to immediately see where the Mesh is properly defined and where it needs to
     70             *   be edited. The command will generate the Mesh lines closest to the nozzle's starting position. Alternatively
     71             *   the user can specify the X and Y position of interest with command parameters. This allows the user to
     72             *   focus on a particular area of the Mesh where attention is needed.
     73             *
     74             *   B #  Bed         Set the Bed Temperature. If not specified, a default of 60 C. will be assumed.
     75             *
     76             *   C    Current     When searching for Mesh Intersection points to draw, use the current nozzle location
     77             *                    as the base for any distance comparison.
     78             *
     79             *   D    Disable     Disable the Unified Bed Leveling System. In the normal case the user is invoking this
     80             *                    command to see how well a Mesh as been adjusted to match a print surface. In order to do
     81             *                    this the Unified Bed Leveling System is turned on by the G26 command. The D parameter
     82             *                    alters the command's normal behaviour and disables the Unified Bed Leveling System even if
     83             *                    it is on.
     84             *
     85             *   H #  Hotend      Set the Nozzle Temperature. If not specified, a default of 205 C. will be assumed.
     86             *
     87             *   F #  Filament    Used to specify the diameter of the filament being used. If not specified
     88             *                    1.75mm filament is assumed. If you are not getting acceptable results by using the
     89             *                    'correct' numbers, you can scale this number up or down a little bit to change the amount
     90             *                    of filament that is being extruded during the printing of the various lines on the bed.
     91             *
     92             *   K    Keep-On     Keep the heaters turned on at the end of the command.
     93             *
     94             *   L #  Layer       Layer height. (Height of nozzle above bed)  If not specified .20mm will be used.
     95             *
     96             *   O #  Ooooze      How much your nozzle will Ooooze filament while getting in position to print. This
     97             *                    is over kill, but using this parameter will let you get the very first 'circle' perfect
     98             *                    so you have a trophy to peel off of the bed and hang up to show how perfectly you have your
     99             *                    Mesh calibrated. If not specified, a filament length of .3mm is assumed.
    100             *
    101             *   P #  Prime       Prime the nozzle with specified length of filament. If this parameter is not
    102             *                    given, no prime action will take place. If the parameter specifies an amount, that much
    103             *                    will be purged before continuing. If no amount is specified the command will start
    104             *                    purging filament until the user provides an LCD Click and then it will continue with
    105             *                    printing the Mesh. You can carefully remove the spent filament with a needle nose
    106             *                    pliers while holding the LCD Click wheel in a depressed state. If you do not have
    107             *                    an LCD, you must specify a value if you use P.
    108             *
    109             *   Q #  Multiplier  Retraction Multiplier. Normally not needed. Retraction defaults to 1.0mm and
    110             *                    un-retraction is at 1.2mm   These numbers will be scaled by the specified amount
    111             *
    112             *   R #  Repeat      Prints the number of patterns given as a parameter, starting at the current location.
    113             *                    If a parameter isn't given, every point will be printed unless G26 is interrupted.
    114             *                    This works the same way that the UBL G29 P4 R parameter works.
    115             *
    116             *                    NOTE:  If you do not have an LCD, you -must- specify R. This is to ensure that you are
    117             *                    aware that there's some risk associated with printing without the ability to abort in
    118             *                    cases where mesh point Z value may be inaccurate. As above, if you do not include a
    119             *                    parameter, every point will be printed.
    120             *
    121             *   S #  Nozzle      Used to control the size of nozzle diameter. If not specified, a .4mm nozzle is assumed.
    122             *
    123             *   U #  Random      Randomize the order that the circles are drawn on the bed. The search for the closest
    124             *                    undrawn cicle is still done. But the distance to the location for each circle has a
    125             *                    random number of the size specified added to it. Specifying S50 will give an interesting
    126             *                    deviation from the normal behaviour on a 10 x 10 Mesh.
    127             *
    128             *   X #  X Coord.    Specify the starting location of the drawing activity.
    129             *
    130             *   Y #  Y Coord.    Specify the starting location of the drawing activity.
    131             */
    132          
    133            // External references
    134          
    135            extern Planner planner;
    136            #if ENABLED(ULTRA_LCD)
    137              extern char lcd_status_message[];
    138            #endif

   \                                 In section .text, align 4
    139            inline void sync_plan_position_e() { planner.set_e_position_mm(current_position[E_AXIS]); }
   \                     _Z20sync_plan_position_ev: (+1)
   \   00000000   0x4801             LDR.N    R0,??sync_plan_position_e_0
   \   00000002   0x.... 0x....      B.W      _ZN7Planner17set_e_position_mmERKf
   \   00000006   0xBF00             Nop      
   \                     ??sync_plan_position_e_0:
   \   00000008   0x........         DC32     current_position+0xC
    140          
    141            // Private functions
    142          
    143            //static uint16_t circle_flags[16], horizontal_mesh_line_flags[16], vertical_mesh_line_flags[16];

   \                                 In section .data, align 4
    144            static unsigned int circle_flags[16], horizontal_mesh_line_flags[16], vertical_mesh_line_flags[16], continue_with_closest = 0;
    145            float g26_e_axis_feedrate = 0.020,
    146                  random_deviation = 0.0;
    147          
    148            static bool g26_retracted = false; // Track the retracted state of the nozzle so mismatched
   \                     g26_retracted:
   \   00000000   0x00               DC8 0
   \   00000001   0x00               DC8 0
   \   00000002   0x00 0x00          DC8 0, 0
   \   00000004   0x00 0x00          DC8 0, 0
   \   00000006   0x00 0x00          DC8 0, 0
   \                     g26_e_axis_feedrate:
   \   00000008   0x3CA3D70A         DC32 3CA3D70AH
   \                     random_deviation:
   \   0000000C   0x00000000         DC32 0H
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000018   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000038   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000048   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000058   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000068   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000078   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000088   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000098   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    149                                               // retracts/recovers won't result in a bad state.
    150          
    151            static float g26_extrusion_multiplier,
    152                         g26_retraction_multiplier,
    153                         g26_layer_height,
    154                         g26_prime_length,
    155                         g26_x_pos, g26_y_pos;
    156          
    157            static int16_t g26_bed_temp,
    158                           g26_hotend_temp;
    159          
    160            static int8_t g26_prime_flag;
    161          
    162            #if ENABLED(NEWPANEL)
    163          
    164              /**
    165               * If the LCD is clicked, cancel, wait for release, return true
    166               */
    167              bool user_canceled() {
    168                if (!is_lcd_clicked()) return false; // Return if the button isn't pressed
    169                lcd_setstatusPGM(PSTR("Mesh Validation Stopped."), 99);
    170                #if ENABLED(ULTIPANEL)
    171                  lcd_quick_feedback();
    172                #endif
    173                wait_for_release();
    174                return true;
    175              }
    176          
    177              bool exit_from_g26() {
    178                lcd_setstatusPGM(PSTR("Leaving G26"), -1);
    179                wait_for_release();
    180                return G26_ERR;
    181              }
    182          
    183            #endif
    184          

   \                                 In section .text, align 2, keep-with-next
    185            void G26_line_to_destination(const float &feed_rate) {
   \                     _Z23G26_line_to_destinationRKf: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    186              const float save_feedrate = feedrate_mm_s;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable23
   \   00000006   0x6825             LDR      R5,[R4, #+0]
    187              feedrate_mm_s = feed_rate;      // use specified feed rate
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    188              prepare_move_to_destination();  // will ultimately call ubl.line_to_destination_cartesian or ubl.prepare_linear_move_to for UBL_SEGMENTED
   \   0000000C   0x.... 0x....      BL       _Z27prepare_move_to_destinationv
    189              feedrate_mm_s = save_feedrate;  // restore global feed rate
   \   00000010   0x6025             STR      R5,[R4, #+0]
    190            }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    191          

   \                                 In section .text, align 2, keep-with-next
    192            void move_to(const float &rx, const float &ry, const float &z, const float &e_delta) {
   \                     _Z7move_toRKfS0_S0_S0_: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
    193              float feed_value;
    194              static float last_z = -999.99;
    195          
    196              bool has_xy_component = (rx != current_position[X_AXIS] || ry != current_position[Y_AXIS]); // Check if X or Y is involved in the movement.
   \   0000000C   0x.... 0x....      LDR.W    R7,??DataTable23_1
   \   00000010   0xF8D7 0x8000      LDR      R8,[R7, #+0]
   \   00000014   0x6820             LDR      R0,[R4, #+0]
   \   00000016   0x4641             MOV      R1,R8
   \   00000018   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000001C   0xD104             BNE.N    ??move_to_0
   \   0000001E   0x6828             LDR      R0,[R5, #+0]
   \   00000020   0x6879             LDR      R1,[R7, #+4]
   \   00000022   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000026   0xD002             BEQ.N    ??move_to_1
   \                     ??move_to_0: (+1)
   \   00000028   0xF04F 0x0901      MOV      R9,#+1
   \   0000002C   0xE001             B.N      ??move_to_2
   \                     ??move_to_1: (+1)
   \   0000002E   0xF04F 0x0900      MOV      R9,#+0
    197          
    198              if (z != last_z) {
   \                     ??move_to_2: (+1)
   \   00000032   0x6832             LDR      R2,[R6, #+0]
   \   00000034   0x.... 0x....      LDR.W    R10,??DataTable23_2
   \   00000038   0x.... 0x....      LDR.W    R3,??DataTable23_3
   \   0000003C   0x4610             MOV      R0,R2
   \   0000003E   0x6819             LDR      R1,[R3, #+0]
   \   00000040   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000044   0xD01B             BEQ.N    ??move_to_3
    199                last_z = z;
   \   00000046   0x601A             STR      R2,[R3, #+0]
    200                feed_value = planner.max_feedrate_mm_s[Z_AXIS]/(3.0);  // Base the feed rate off of the configured Z_AXIS feed rate
   \   00000048   0xF8DA 0x0008      LDR      R0,[R10, #+8]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable23_4  ;; 0x40400000
   \   00000050   0x.... 0x....      BL       __aeabi_fdiv
   \   00000054   0x9000             STR      R0,[SP, #+0]
    201          
    202                destination[X_AXIS] = current_position[X_AXIS];
   \   00000056   0x.... 0x....      LDR.W    R11,??DataTable23_5
   \   0000005A   0xF8CB 0x8000      STR      R8,[R11, #+0]
    203                destination[Y_AXIS] = current_position[Y_AXIS];
   \   0000005E   0x6878             LDR      R0,[R7, #+4]
   \   00000060   0xF8CB 0x0004      STR      R0,[R11, #+4]
    204                destination[Z_AXIS] = z;                          // We know the last_z==z or we wouldn't be in this block of code.
   \   00000064   0x6830             LDR      R0,[R6, #+0]
   \   00000066   0xF8CB 0x0008      STR      R0,[R11, #+8]
    205                destination[E_AXIS] = current_position[E_AXIS];
   \   0000006A   0x68F8             LDR      R0,[R7, #+12]
   \   0000006C   0xF8CB 0x000C      STR      R0,[R11, #+12]
    206          
    207                G26_line_to_destination(feed_value);
   \   00000070   0xA800             ADD      R0,SP,#+0
   \   00000072   0x.... 0x....      BL       _Z23G26_line_to_destinationRKf
    208          
    209                stepper.synchronize();
   \   00000076   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
    210                set_destination_from_current();
   \   0000007A   0x.... 0x....      BL       _Z28set_destination_from_currentv
    211              }
    212          
    213              // Check if X or Y is involved in the movement.
    214              // Yes: a 'normal' movement. No: a retract() or recover()
    215              feed_value = has_xy_component ? PLANNER_XY_FEEDRATE() / 10.0 : planner.max_feedrate_mm_s[E_AXIS] / 1.5;
   \                     ??move_to_3: (+1)
   \   0000007E   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000082   0xD00E             BEQ.N    ??move_to_4
   \   00000084   0xF8DA 0x1004      LDR      R1,[R10, #+4]
   \   00000088   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000008C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000090   0xD200             BCS.N    ??move_to_5
   \   00000092   0x4601             MOV      R1,R0
   \                     ??move_to_5: (+1)
   \   00000094   0x4608             MOV      R0,R1
   \   00000096   0x.... 0x....      LDR.W    R1,??DataTable23_6  ;; 0x41200000
   \   0000009A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0xE006             B.N      ??move_to_6
   \                     ??move_to_4: (+1)
   \   000000A2   0xF8DA 0x000C      LDR      R0,[R10, #+12]
   \   000000A6   0xF04F 0x517F      MOV      R1,#+1069547520
   \   000000AA   0x.... 0x....      BL       __aeabi_fdiv
   \   000000AE   0x9000             STR      R0,[SP, #+0]
    216          
    217              if (g26_debug_flag) SERIAL_ECHOLNPAIR("in move_to() feed_value for XY:", feed_value);
   \                     ??move_to_6: (+1)
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable23_7
   \   000000B4   0x7800             LDRB     R0,[R0, #+0]
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xD009             BEQ.N    ??move_to_7
   \   000000BA   0x9900             LDR      R1,[SP, #+0]
   \   000000BC   0x.... 0x....      ADR.W    R0,`?<Constant "in move_to() feed_val...">`
   \   000000C0   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000000C4   0x210A             MOVS     R1,#+10
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable23_8
   \   000000CA   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    218          
    219              destination[X_AXIS] = rx;
   \                     ??move_to_7: (+1)
   \   000000CE   0x.... 0x....      LDR.W    R11,??DataTable23_5
   \   000000D2   0x6820             LDR      R0,[R4, #+0]
   \   000000D4   0xF8CB 0x0000      STR      R0,[R11, #+0]
    220              destination[Y_AXIS] = ry;
   \   000000D8   0x6828             LDR      R0,[R5, #+0]
   \   000000DA   0xF8CB 0x0004      STR      R0,[R11, #+4]
    221              destination[E_AXIS] += e_delta;
   \   000000DE   0xF8DB 0x100C      LDR      R1,[R11, #+12]
   \   000000E2   0x9802             LDR      R0,[SP, #+8]
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x.... 0x....      BL       __aeabi_fadd
   \   000000EA   0xF8CB 0x000C      STR      R0,[R11, #+12]
    222          
    223              G26_line_to_destination(feed_value);
   \   000000EE   0xA800             ADD      R0,SP,#+0
   \   000000F0   0x.... 0x....      BL       _Z23G26_line_to_destinationRKf
    224          
    225              stepper.synchronize();
   \   000000F4   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
    226              set_destination_from_current();
   \   000000F8   0x.... 0x....      BL       _Z28set_destination_from_currentv
    227            }
   \   000000FC   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return

   \                                 In section .data, align 4
   \                     ??last_z:
   \   00000000   0xC479FF5C         DC32 0C479FF5CH
    228          

   \                                 In section .text, align 2
    229            FORCE_INLINE void move_to(const float where[XYZE], const float &de) { move_to(where[X_AXIS], where[Y_AXIS], where[Z_AXIS], de); }
   \                     _Z7move_toPKfRS_: (+1)
   \   00000000   0x460B             MOV      R3,R1
   \   00000002   0xF100 0x0208      ADD      R2,R0,#+8
   \   00000006   0x1D01             ADDS     R1,R0,#+4
   \   00000008   0x.... 0x....      B.W      _Z7move_toRKfS0_S0_S0_
    230          

   \                                 In section .text, align 2, keep-with-next
    231            void retract_filament(const float where[XYZE]) {
   \                     _Z16retract_filamentPKf: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
    232              if (!g26_retracted) { // Only retract if we are not already retracted!
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable23_9
   \   0000000A   0x7801             LDRB     R1,[R0, #+0]
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD10B             BNE.N    ??retract_filament_0
    233                g26_retracted = true;
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    234                move_to(where, -1.0 * g26_retraction_multiplier);
   \   00000014   0x6941             LDR      R1,[R0, #+20]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable23_10  ;; 0xbf800000
   \   0000001A   0x.... 0x....      BL       __aeabi_fmul
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       _Z7move_toPKfRS_
    235              }
    236            }
   \                     ??retract_filament_0: (+1)
   \   00000028   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    237          

   \                                 In section .text, align 2, keep-with-next
    238            void recover_filament(const float where[XYZE]) {
   \                     _Z16recover_filamentPKf: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4605             MOV      R5,R0
    239              if (g26_retracted) { // Only un-retract if we are retracted.
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable23_9
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD011             BEQ.N    ??recover_filament_0
    240                move_to(where, 1.2 * g26_retraction_multiplier);
   \   0000000E   0x6960             LDR      R0,[R4, #+20]
   \   00000010   0x.... 0x....      BL       __aeabi_f2d
   \   00000014   0xF04F 0x3233      MOV      R2,#+858993459
   \   00000018   0x.... 0x....      LDR.W    R3,??DataTable23_11  ;; 0x3ff33333
   \   0000001C   0x.... 0x....      BL       __aeabi_dmul
   \   00000020   0x.... 0x....      BL       __aeabi_d2f
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0xA900             ADD      R1,SP,#+0
   \   00000028   0x4628             MOV      R0,R5
   \   0000002A   0x.... 0x....      BL       _Z7move_toPKfRS_
    241                g26_retracted = false;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x7020             STRB     R0,[R4, #+0]
    242              }
    243            }
   \                     ??recover_filament_0: (+1)
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    244          
    245            /**
    246             * Prime the nozzle if needed. Return true on error.
    247             */

   \                                 In section .text, align 4
    248            inline bool prime_nozzle() {
   \                     _Z12prime_nozzlev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    249          
    250              #if ENABLED(NEWPANEL)
    251                float Total_Prime = 0.0;
    252          
    253                if (g26_prime_flag == -1) {  // The user wants to control how much filament gets purged
    254          
    255                  lcd_external_control = true;
    256                  lcd_setstatusPGM(PSTR("User-Controlled Prime"), 99);
    257                  lcd_chirp();
    258          
    259                  set_destination_from_current();
    260          
    261                  recover_filament(destination); // Make sure G26 doesn't think the filament is retracted().
    262          
    263                  while (!is_lcd_clicked()) {
    264                    lcd_chirp();
    265                    destination[E_AXIS] += 0.25;
    266                    #ifdef PREVENT_LENGTHY_EXTRUDE
    267                      Total_Prime += 0.25;
    268                      if (Total_Prime >= EXTRUDE_MAXLENGTH) return G26_ERR;
    269                    #endif
    270                    G26_line_to_destination(planner.max_feedrate_mm_s[E_AXIS] / 15.0);
    271          
    272                    stepper.synchronize();    // Without this synchronize, the purge is more consistent,
    273                                              // but because the planner has a buffer, we won't be able
    274                                              // to stop as quickly. So we put up with the less smooth
    275                                              // action to give the user a more responsive 'Stop'.
    276                    set_destination_from_current();
    277                    idle();
    278                  }
    279          
    280                  wait_for_release();
    281          
    282                  strcpy_P(lcd_status_message, PSTR("Done Priming")); // We can't do lcd_setstatusPGM() without having it continue;
    283                                                                      // So... We cheat to get a message up.
    284                  lcd_setstatusPGM(PSTR("Done Priming"), 99);
    285                  lcd_quick_feedback();
    286                  lcd_external_control = false;
    287                }
    288                else
    289              #endif
    290              {
    291                #if ENABLED(ULTRA_LCD)
    292                  lcd_setstatusPGM(PSTR("Fixed Length Prime."), 99);
    293                  lcd_quick_feedback();
    294                #endif
    295                set_destination_from_current();
   \   00000004   0x.... 0x....      BL       _Z28set_destination_from_currentv
    296                destination[E_AXIS] += g26_prime_length;
   \   00000008   0x4C0C             LDR.N    R4,??prime_nozzle_0
   \   0000000A   0x68E1             LDR      R1,[R4, #+12]
   \   0000000C   0x480C             LDR.N    R0,??prime_nozzle_0+0x4
   \   0000000E   0x69C0             LDR      R0,[R0, #+28]
   \   00000010   0x.... 0x....      BL       __aeabi_fadd
   \   00000014   0x60E0             STR      R0,[R4, #+12]
    297                G26_line_to_destination(planner.max_feedrate_mm_s[E_AXIS] / 15.0);
   \   00000016   0x480B             LDR.N    R0,??prime_nozzle_0+0x8
   \   00000018   0x68C0             LDR      R0,[R0, #+12]
   \   0000001A   0x490B             LDR.N    R1,??prime_nozzle_0+0xC  ;; 0x41700000
   \   0000001C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0x.... 0x....      BL       _Z23G26_line_to_destinationRKf
    298                stepper.synchronize();
   \   00000028   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
    299                set_destination_from_current();
   \   0000002C   0x.... 0x....      BL       _Z28set_destination_from_currentv
    300                retract_filament(destination);
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       _Z16retract_filamentPKf
    301              }
    302          
    303              return G26_OK;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   \   0000003A   0xBF00             Nop      
   \                     ??prime_nozzle_0:
   \   0000003C   0x........         DC32     destination
   \   00000040   0x........         DC32     g26_retracted
   \   00000044   0x........         DC32     _ZN7Planner17max_feedrate_mm_sE
   \   00000048   0x41700000         DC32     0x41700000
    304            }
    305          

   \                                 In section .text, align 2, keep-with-next
    306            mesh_index_pair find_closest_circle_to_print(const float &X, const float &Y) {
   \                     _Z28find_closest_circle_to_printRKfS0_: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
    307              //const 
    308              float mx,my;
    309              float closest = 99999.99;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable23_12  ;; 0x47c34fff
   \   0000000A   0x9003             STR      R0,[SP, #+12]
    310              mesh_index_pair return_val;
    311          
    312              return_val.x_index = return_val.y_index = -1;
   \   0000000C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000010   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000014   0xF88D 0x0004      STRB     R0,[SP, #+4]
    313          
    314              for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R7,??DataTable23_9
   \   00000020   0xE003             B.N      ??find_closest_circle_to_print_0
   \                     ??find_closest_circle_to_print_1: (+1)
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0xB2C0             UXTB     R0,R0
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \                     ??find_closest_circle_to_print_0: (+1)
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable23_13
   \   00000030   0xF891 0x1060      LDRB     R1,[R1, #+96]
   \   00000034   0x4288             CMP      R0,R1
   \   00000036   0xF280 0x80F5      BGE.W    ??find_closest_circle_to_print_2
    315                for (uint8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
   \   0000003A   0x2600             MOVS     R6,#+0
   \   0000003C   0xE04E             B.N      ??find_closest_circle_to_print_3
    316                  if (!is_bitmap_set(circle_flags, i, j)) {
   \                     ??find_closest_circle_to_print_4: (+1)
   \   0000003E   0x4658             MOV      R0,R11
   \   00000040   0x4659             MOV      R1,R11
   \   00000042   0x.... 0x....      BL       __aeabi_fmul
   \   00000046   0x4683             MOV      R11,R0
   \                     ??find_closest_circle_to_print_5: (+1)
   \   00000048   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   0000004C   0xD504             BPL.N    ??find_closest_circle_to_print_6
   \   0000004E   0x4648             MOV      R0,R9
   \   00000050   0x4659             MOV      R1,R11
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x4681             MOV      R9,R0
   \                     ??find_closest_circle_to_print_6: (+1)
   \   00000058   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   0000005C   0xD1EF             BNE.N    ??find_closest_circle_to_print_4
    317                    
    318                      if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_BILINEAR)
    319                      {
    320                          mx = _GET_MESH_X_ABL(i);  // We found a circle that needs to be printed
    321                          my = _GET_MESH_Y_ABL(j);
    322                      }
    323                      else if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL)
    324                      {
    325                          mx = _GET_MESH_X_MBL(i);  // We found a circle that needs to be printed
    326                          my = _GET_MESH_Y_MBL(j);            
    327                      }
    328                      else if(BED_LEVELING_METHOD & MESH_BED_LEVELING)
    329                      {
    330                          mx = _GET_MESH_X_UBL(i);  // We found a circle that needs to be printed
    331                          my = _GET_MESH_Y_UBL(j);           
    332                      }
    333                          
    334                          
    335          
    336                    // Get the distance to this intersection
    337                    float f = HYPOT(X - mx, Y - my);
    338          
    339                    // It is possible that we are being called with the values
    340                    // to let us find the closest circle to the start position.
    341                    // But if this is not the case, add a small weighting to the
    342                    // distance calculation to help it choose a better place to continue.
    343                    f += HYPOT(g26_x_pos - mx, g26_y_pos - my) / 15.0;
   \   0000005E   0x9804             LDR      R0,[SP, #+16]
   \   00000060   0x.... 0x....      BL       __aeabi_f2d
   \   00000064   0x4682             MOV      R10,R0
   \   00000066   0x468B             MOV      R11,R1
   \   00000068   0x4640             MOV      R0,R8
   \   0000006A   0x4649             MOV      R1,R9
   \   0000006C   0x.... 0x....      BL       __aeabi_fadd
   \   00000070   0x.... 0x....      BL       sqrtf
   \   00000074   0x.... 0x....      BL       __aeabi_f2d
   \   00000078   0x2200             MOVS     R2,#+0
   \   0000007A   0x.... 0x....      LDR.W    R3,??DataTable23_14  ;; 0x402e0000
   \   0000007E   0x.... 0x....      BL       __aeabi_ddiv
   \   00000082   0x4652             MOV      R2,R10
   \   00000084   0x465B             MOV      R3,R11
   \   00000086   0x.... 0x....      BL       __aeabi_dadd
   \   0000008A   0x.... 0x....      BL       __aeabi_d2f
   \   0000008E   0x4680             MOV      R8,R0
    344          #if 0
    345                    // Add in the specified amount of Random Noise to our search
    346                    if (random_deviation > 1.0)
    347                      f += random(0.0, random_deviation);
    348          #else
    349                      if (random_deviation > 1.0)
   \   00000090   0x68F8             LDR      R0,[R7, #+12]
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable23_15  ;; 0x3f800001
   \   00000096   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000009A   0xD810             BHI.N    ??find_closest_circle_to_print_7
    350                      {
    351                        int16_t randData = rand()% (int)random_deviation;
   \   0000009C   0x.... 0x....      BL       rand
   \   000000A0   0x4681             MOV      R9,R0
   \   000000A2   0x68F8             LDR      R0,[R7, #+12]
   \   000000A4   0x.... 0x....      BL       __aeabi_f2iz
   \   000000A8   0xFB99 0xF1F0      SDIV     R1,R9,R0
   \   000000AC   0xFB00 0x9011      MLS      R0,R0,R1,R9
    352                        f += randData;
   \   000000B0   0xB200             SXTH     R0,R0
   \   000000B2   0x.... 0x....      BL       __aeabi_i2f
   \   000000B6   0x4641             MOV      R1,R8
   \   000000B8   0x.... 0x....      BL       __aeabi_fadd
   \   000000BC   0x4680             MOV      R8,R0
    353                      }
    354          #endif
    355                    if (f < closest) {
   \                     ??find_closest_circle_to_print_7: (+1)
   \   000000BE   0x4640             MOV      R0,R8
   \   000000C0   0x9903             LDR      R1,[SP, #+12]
   \   000000C2   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000C6   0xD208             BCS.N    ??find_closest_circle_to_print_8
    356                      closest = f;              // We found a closer location that is still
   \   000000C8   0xF8CD 0x800C      STR      R8,[SP, #+12]
    357                      return_val.x_index = i;   // un-printed  --- save the data for it
   \   000000CC   0x9800             LDR      R0,[SP, #+0]
   \   000000CE   0xF88D 0x0004      STRB     R0,[SP, #+4]
    358                      return_val.y_index = j;
   \   000000D2   0xF88D 0x6005      STRB     R6,[SP, #+5]
    359                      return_val.distance = closest;
   \   000000D6   0x9803             LDR      R0,[SP, #+12]
   \   000000D8   0x9002             STR      R0,[SP, #+8]
    360                    }
   \                     ??find_closest_circle_to_print_8: (+1)
   \   000000DA   0x1C76             ADDS     R6,R6,#+1
   \                     ??find_closest_circle_to_print_3: (+1)
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable23_13
   \   000000E0   0xF890 0x0061      LDRB     R0,[R0, #+97]
   \   000000E4   0xB2F6             UXTB     R6,R6
   \   000000E6   0x4286             CMP      R6,R0
   \   000000E8   0xD29B             BCS.N    ??find_closest_circle_to_print_1
   \   000000EA   0x4632             MOV      R2,R6
   \   000000EC   0x9900             LDR      R1,[SP, #+0]
   \   000000EE   0xB2C9             UXTB     R1,R1
   \   000000F0   0xF107 0x0028      ADD      R0,R7,#+40
   \   000000F4   0x.... 0x....      BL       _Z13is_bitmap_setPjhh
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xD1EE             BNE.N    ??find_closest_circle_to_print_8
   \   000000FC   0x.... 0x....      LDR.W    R0,??DataTable23_13
   \   00000100   0xF890 0x0040      LDRB     R0,[R0, #+64]
   \   00000104   0x0701             LSLS     R1,R0,#+28
   \   00000106   0xD515             BPL.N    ??find_closest_circle_to_print_9
   \   00000108   0x.... 0x....      LDR.W    R5,??DataTable24
   \   0000010C   0x.... 0x....      LDR.W    R8,??DataTable24_1
   \   00000110   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000114   0x9900             LDR      R1,[SP, #+0]
   \   00000116   0x682A             LDR      R2,[R5, #+0]
   \   00000118   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   0000011C   0x.... 0x....      BL       __aeabi_i2f
   \   00000120   0x4604             MOV      R4,R0
   \   00000122   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000126   0x6869             LDR      R1,[R5, #+4]
   \   00000128   0xFB01 0x0006      MLA      R0,R1,R6,R0
   \   0000012C   0x.... 0x....      BL       __aeabi_i2f
   \   00000130   0x4605             MOV      R5,R0
   \   00000132   0xE016             B.N      ??find_closest_circle_to_print_10
   \                     ??find_closest_circle_to_print_9: (+1)
   \   00000134   0x06C1             LSLS     R1,R0,#+27
   \   00000136   0xD509             BPL.N    ??find_closest_circle_to_print_11
   \   00000138   0x9800             LDR      R0,[SP, #+0]
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable24_2
   \   0000013E   0xF851 0x4020      LDR      R4,[R1, R0, LSL #+2]
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable24_3
   \   00000146   0xF850 0x5026      LDR      R5,[R0, R6, LSL #+2]
   \   0000014A   0xE00A             B.N      ??find_closest_circle_to_print_10
   \                     ??find_closest_circle_to_print_11: (+1)
   \   0000014C   0x0680             LSLS     R0,R0,#+26
   \   0000014E   0xD508             BPL.N    ??find_closest_circle_to_print_10
   \   00000150   0x9800             LDR      R0,[SP, #+0]
   \   00000152   0xB2C0             UXTB     R0,R0
   \   00000154   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   00000158   0x4604             MOV      R4,R0
   \   0000015A   0x4630             MOV      R0,R6
   \   0000015C   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000160   0x4605             MOV      R5,R0
   \                     ??find_closest_circle_to_print_10: (+1)
   \   00000162   0x9807             LDR      R0,[SP, #+28]
   \   00000164   0x6800             LDR      R0,[R0, #+0]
   \   00000166   0x4621             MOV      R1,R4
   \   00000168   0x.... 0x....      BL       __aeabi_fsub
   \   0000016C   0x4681             MOV      R9,R0
   \   0000016E   0xF04F 0x0A02      MOV      R10,#+2
   \   00000172   0xF04F 0x587E      MOV      R8,#+1065353216
   \   00000176   0xE004             B.N      ??find_closest_circle_to_print_12
   \                     ??find_closest_circle_to_print_13: (+1)
   \   00000178   0x4648             MOV      R0,R9
   \   0000017A   0x4649             MOV      R1,R9
   \   0000017C   0x.... 0x....      BL       __aeabi_fmul
   \   00000180   0x4681             MOV      R9,R0
   \                     ??find_closest_circle_to_print_12: (+1)
   \   00000182   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   00000186   0xD504             BPL.N    ??find_closest_circle_to_print_14
   \   00000188   0x4640             MOV      R0,R8
   \   0000018A   0x4649             MOV      R1,R9
   \   0000018C   0x.... 0x....      BL       __aeabi_fmul
   \   00000190   0x4680             MOV      R8,R0
   \                     ??find_closest_circle_to_print_14: (+1)
   \   00000192   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   00000196   0xD1EF             BNE.N    ??find_closest_circle_to_print_13
   \   00000198   0x9808             LDR      R0,[SP, #+32]
   \   0000019A   0x6800             LDR      R0,[R0, #+0]
   \   0000019C   0x4629             MOV      R1,R5
   \   0000019E   0x.... 0x....      BL       __aeabi_fsub
   \   000001A2   0x4683             MOV      R11,R0
   \   000001A4   0xF04F 0x0902      MOV      R9,#+2
   \   000001A8   0xF04F 0x5A7E      MOV      R10,#+1065353216
   \   000001AC   0xE004             B.N      ??find_closest_circle_to_print_15
   \                     ??find_closest_circle_to_print_16: (+1)
   \   000001AE   0x4658             MOV      R0,R11
   \   000001B0   0x4659             MOV      R1,R11
   \   000001B2   0x.... 0x....      BL       __aeabi_fmul
   \   000001B6   0x4683             MOV      R11,R0
   \                     ??find_closest_circle_to_print_15: (+1)
   \   000001B8   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000001BC   0xD504             BPL.N    ??find_closest_circle_to_print_17
   \   000001BE   0x4650             MOV      R0,R10
   \   000001C0   0x4659             MOV      R1,R11
   \   000001C2   0x.... 0x....      BL       __aeabi_fmul
   \   000001C6   0x4682             MOV      R10,R0
   \                     ??find_closest_circle_to_print_17: (+1)
   \   000001C8   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   000001CC   0xD1EF             BNE.N    ??find_closest_circle_to_print_16
   \   000001CE   0x4640             MOV      R0,R8
   \   000001D0   0x4651             MOV      R1,R10
   \   000001D2   0x.... 0x....      BL       __aeabi_fadd
   \   000001D6   0x.... 0x....      BL       sqrtf
   \   000001DA   0x9004             STR      R0,[SP, #+16]
   \   000001DC   0x6A38             LDR      R0,[R7, #+32]
   \   000001DE   0x4621             MOV      R1,R4
   \   000001E0   0x.... 0x....      BL       __aeabi_fsub
   \   000001E4   0x4681             MOV      R9,R0
   \   000001E6   0xF04F 0x0A02      MOV      R10,#+2
   \   000001EA   0xF04F 0x587E      MOV      R8,#+1065353216
   \   000001EE   0xE004             B.N      ??find_closest_circle_to_print_18
   \                     ??find_closest_circle_to_print_19: (+1)
   \   000001F0   0x4648             MOV      R0,R9
   \   000001F2   0x4649             MOV      R1,R9
   \   000001F4   0x.... 0x....      BL       __aeabi_fmul
   \   000001F8   0x4681             MOV      R9,R0
   \                     ??find_closest_circle_to_print_18: (+1)
   \   000001FA   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   000001FE   0xD504             BPL.N    ??find_closest_circle_to_print_20
   \   00000200   0x4640             MOV      R0,R8
   \   00000202   0x4649             MOV      R1,R9
   \   00000204   0x.... 0x....      BL       __aeabi_fmul
   \   00000208   0x4680             MOV      R8,R0
   \                     ??find_closest_circle_to_print_20: (+1)
   \   0000020A   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   0000020E   0xD1EF             BNE.N    ??find_closest_circle_to_print_19
   \   00000210   0x6A78             LDR      R0,[R7, #+36]
   \   00000212   0x4629             MOV      R1,R5
   \   00000214   0x.... 0x....      BL       __aeabi_fsub
   \   00000218   0x4683             MOV      R11,R0
   \   0000021A   0xF04F 0x0A02      MOV      R10,#+2
   \   0000021E   0xF04F 0x597E      MOV      R9,#+1065353216
   \   00000222   0xE711             B.N      ??find_closest_circle_to_print_5
    361                  }
    362                }
    363              }
    364              bitmap_set(circle_flags, return_val.x_index, return_val.y_index);   // Mark this location as done.
   \                     ??find_closest_circle_to_print_2: (+1)
   \   00000224   0xF89D 0x2005      LDRB     R2,[SP, #+5]
   \   00000228   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000022C   0x.... 0x....      LDR.W    R0,??DataTable24_4
   \   00000230   0x.... 0x....      BL       _Z10bitmap_setPjhh
    365              return return_val;
   \   00000234   0xE9DD 0x0101      LDRD     R0,R1,[SP, #+4]
   \   00000238   0x9A06             LDR      R2,[SP, #+24]
   \   0000023A   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
   \   0000023E   0xB009             ADD      SP,SP,#+36
   \   00000240   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    366            }
    367          
    368            /**
    369             * print_line_from_here_to_there() takes two cartesian coordinates and draws a line from one
    370             * to the other. But there are really three sets of coordinates involved. The first coordinate
    371             * is the present location of the nozzle. We don't necessarily want to print from this location.
    372             * We first need to move the nozzle to the start of line segment where we want to print. Once
    373             * there, we can use the two coordinates supplied to draw the line.
    374             *
    375             * Note:  Although we assume the first set of coordinates is the start of the line and the second
    376             * set of coordinates is the end of the line, it does not always work out that way. This function
    377             * optimizes the movement to minimize the travel distance before it can start printing. This saves
    378             * a lot of time and eliminates a lot of nonsensical movement of the nozzle. However, it does
    379             * cause a lot of very little short retracement of th nozzle when it draws the very first line
    380             * segment of a 'circle'. The time this requires is very short and is easily saved by the other
    381             * cases where the optimization comes into play.
    382             */

   \                                 In section .text, align 2, keep-with-next
    383            void print_line_from_here_to_there(const float &sx, const float &sy, const float &sz, const float &ex, const float &ey, const float &ez) {
   \                     _Z29print_line_from_here_to_thereRKfS0_S0_S0_S0_S0_: (+1)
   \   00000000   0xE92D 0x4FFC      PUSH     {R2-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x....             LDR.N    R0,??DataTable23_1
   \   0000000C   0x6840             LDR      R0,[R0, #+4]
   \   0000000E   0x6829             LDR      R1,[R5, #+0]
   \   00000010   0x.... 0x....      BL       __aeabi_fsub
   \   00000014   0x4606             MOV      R6,R0
    384              const float dx_s = current_position[X_AXIS] - sx,   // find our distance from the start of the actual line segment
    385                          dy_s = current_position[Y_AXIS] - sy,
    386                          dist_start = HYPOT2(dx_s, dy_s),        // We don't need to do a sqrt(), we can compare the distance^2
   \   00000016   0x....             LDR.N    R0,??DataTable23_1
   \   00000018   0xF8D0 0x8000      LDR      R8,[R0, #+0]
   \   0000001C   0x4640             MOV      R0,R8
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x.... 0x....      BL       __aeabi_fsub
   \   00000024   0x4682             MOV      R10,R0
   \   00000026   0xF04F 0x0902      MOV      R9,#+2
   \   0000002A   0xF04F 0x5B7E      MOV      R11,#+1065353216
   \   0000002E   0x465F             MOV      R7,R11
   \   00000030   0xE004             B.N      ??print_line_from_here_to_there_0
   \                     ??print_line_from_here_to_there_1: (+1)
   \   00000032   0x4650             MOV      R0,R10
   \   00000034   0x4651             MOV      R1,R10
   \   00000036   0x.... 0x....      BL       __aeabi_fmul
   \   0000003A   0x4682             MOV      R10,R0
   \                     ??print_line_from_here_to_there_0: (+1)
   \   0000003C   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000040   0xD504             BPL.N    ??print_line_from_here_to_there_2
   \   00000042   0x4638             MOV      R0,R7
   \   00000044   0x4651             MOV      R1,R10
   \   00000046   0x.... 0x....      BL       __aeabi_fmul
   \   0000004A   0x4607             MOV      R7,R0
   \                     ??print_line_from_here_to_there_2: (+1)
   \   0000004C   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   00000050   0xD1EF             BNE.N    ??print_line_from_here_to_there_1
   \   00000052   0xF04F 0x0902      MOV      R9,#+2
   \   00000056   0x46DA             MOV      R10,R11
   \   00000058   0xE004             B.N      ??print_line_from_here_to_there_3
   \                     ??print_line_from_here_to_there_4: (+1)
   \   0000005A   0x4630             MOV      R0,R6
   \   0000005C   0x4631             MOV      R1,R6
   \   0000005E   0x.... 0x....      BL       __aeabi_fmul
   \   00000062   0x4606             MOV      R6,R0
   \                     ??print_line_from_here_to_there_3: (+1)
   \   00000064   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   00000068   0xD504             BPL.N    ??print_line_from_here_to_there_5
   \   0000006A   0x4650             MOV      R0,R10
   \   0000006C   0x4631             MOV      R1,R6
   \   0000006E   0x.... 0x....      BL       __aeabi_fmul
   \   00000072   0x4682             MOV      R10,R0
   \                     ??print_line_from_here_to_there_5: (+1)
   \   00000074   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   00000078   0xD1EF             BNE.N    ??print_line_from_here_to_there_4
   \   0000007A   0x4638             MOV      R0,R7
   \   0000007C   0x4651             MOV      R1,R10
   \   0000007E   0x.... 0x....      BL       __aeabi_fadd
   \   00000082   0x9000             STR      R0,[SP, #+0]
   \   00000084   0x9E10             LDR      R6,[SP, #+64]
    387                                                                  // to save computation time
    388                          dx_e = current_position[X_AXIS] - ex,   // find our distance from the end of the actual line segment
    389                          dy_e = current_position[Y_AXIS] - ey,
   \   00000086   0x....             LDR.N    R0,??DataTable23_1
   \   00000088   0x6840             LDR      R0,[R0, #+4]
   \   0000008A   0x6831             LDR      R1,[R6, #+0]
   \   0000008C   0x.... 0x....      BL       __aeabi_fsub
   \   00000090   0x4607             MOV      R7,R0
    390                          dist_end = HYPOT2(dx_e, dy_e),
   \   00000092   0x4640             MOV      R0,R8
   \   00000094   0x9906             LDR      R1,[SP, #+24]
   \   00000096   0x6809             LDR      R1,[R1, #+0]
   \   00000098   0x.... 0x....      BL       __aeabi_fsub
   \   0000009C   0x4682             MOV      R10,R0
   \   0000009E   0xF04F 0x0902      MOV      R9,#+2
   \   000000A2   0x46D8             MOV      R8,R11
   \   000000A4   0xE004             B.N      ??print_line_from_here_to_there_6
   \                     ??print_line_from_here_to_there_7: (+1)
   \   000000A6   0x4650             MOV      R0,R10
   \   000000A8   0x4651             MOV      R1,R10
   \   000000AA   0x.... 0x....      BL       __aeabi_fmul
   \   000000AE   0x4682             MOV      R10,R0
   \                     ??print_line_from_here_to_there_6: (+1)
   \   000000B0   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000000B4   0xD504             BPL.N    ??print_line_from_here_to_there_8
   \   000000B6   0x4640             MOV      R0,R8
   \   000000B8   0x4651             MOV      R1,R10
   \   000000BA   0x.... 0x....      BL       __aeabi_fmul
   \   000000BE   0x4680             MOV      R8,R0
   \                     ??print_line_from_here_to_there_8: (+1)
   \   000000C0   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   000000C4   0xD1EF             BNE.N    ??print_line_from_here_to_there_7
   \   000000C6   0xF04F 0x0902      MOV      R9,#+2
   \   000000CA   0x46DA             MOV      R10,R11
   \   000000CC   0xE004             B.N      ??print_line_from_here_to_there_9
   \                     ??print_line_from_here_to_there_10: (+1)
   \   000000CE   0x4638             MOV      R0,R7
   \   000000D0   0x4639             MOV      R1,R7
   \   000000D2   0x.... 0x....      BL       __aeabi_fmul
   \   000000D6   0x4607             MOV      R7,R0
   \                     ??print_line_from_here_to_there_9: (+1)
   \   000000D8   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000000DC   0xD504             BPL.N    ??print_line_from_here_to_there_11
   \   000000DE   0x4650             MOV      R0,R10
   \   000000E0   0x4639             MOV      R1,R7
   \   000000E2   0x.... 0x....      BL       __aeabi_fmul
   \   000000E6   0x4682             MOV      R10,R0
   \                     ??print_line_from_here_to_there_11: (+1)
   \   000000E8   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   000000EC   0xD1EF             BNE.N    ??print_line_from_here_to_there_10
   \   000000EE   0x4640             MOV      R0,R8
   \   000000F0   0x4651             MOV      R1,R10
   \   000000F2   0x.... 0x....      BL       __aeabi_fadd
   \   000000F6   0x4607             MOV      R7,R0
    391          
    392                          line_length = HYPOT(ex - sx, ey - sy);
   \   000000F8   0x9806             LDR      R0,[SP, #+24]
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0x6821             LDR      R1,[R4, #+0]
   \   000000FE   0x.... 0x....      BL       __aeabi_fsub
   \   00000102   0x4682             MOV      R10,R0
   \   00000104   0xF04F 0x0902      MOV      R9,#+2
   \   00000108   0x46D8             MOV      R8,R11
   \   0000010A   0xE004             B.N      ??print_line_from_here_to_there_12
   \                     ??print_line_from_here_to_there_13: (+1)
   \   0000010C   0x4650             MOV      R0,R10
   \   0000010E   0x4651             MOV      R1,R10
   \   00000110   0x.... 0x....      BL       __aeabi_fmul
   \   00000114   0x4682             MOV      R10,R0
   \                     ??print_line_from_here_to_there_12: (+1)
   \   00000116   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000011A   0xD504             BPL.N    ??print_line_from_here_to_there_14
   \   0000011C   0x4640             MOV      R0,R8
   \   0000011E   0x4651             MOV      R1,R10
   \   00000120   0x.... 0x....      BL       __aeabi_fmul
   \   00000124   0x4680             MOV      R8,R0
   \                     ??print_line_from_here_to_there_14: (+1)
   \   00000126   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   0000012A   0xD1EF             BNE.N    ??print_line_from_here_to_there_13
   \   0000012C   0x6830             LDR      R0,[R6, #+0]
   \   0000012E   0x6829             LDR      R1,[R5, #+0]
   \   00000130   0x.... 0x....      BL       __aeabi_fsub
   \   00000134   0x4681             MOV      R9,R0
   \   00000136   0xF04F 0x0A02      MOV      R10,#+2
   \   0000013A   0xE004             B.N      ??print_line_from_here_to_there_15
   \                     ??print_line_from_here_to_there_16: (+1)
   \   0000013C   0x4648             MOV      R0,R9
   \   0000013E   0x4649             MOV      R1,R9
   \   00000140   0x.... 0x....      BL       __aeabi_fmul
   \   00000144   0x4681             MOV      R9,R0
   \                     ??print_line_from_here_to_there_15: (+1)
   \   00000146   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   0000014A   0xD504             BPL.N    ??print_line_from_here_to_there_17
   \   0000014C   0x4658             MOV      R0,R11
   \   0000014E   0x4649             MOV      R1,R9
   \   00000150   0x.... 0x....      BL       __aeabi_fmul
   \   00000154   0x4683             MOV      R11,R0
   \                     ??print_line_from_here_to_there_17: (+1)
   \   00000156   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   0000015A   0xD1EF             BNE.N    ??print_line_from_here_to_there_16
   \   0000015C   0x4640             MOV      R0,R8
   \   0000015E   0x4659             MOV      R1,R11
   \   00000160   0x.... 0x....      BL       __aeabi_fadd
   \   00000164   0x.... 0x....      BL       sqrtf
   \   00000168   0x4681             MOV      R9,R0
   \   0000016A   0xF8DD 0x8044      LDR      R8,[SP, #+68]
    393          
    394              // If the end point of the line is closer to the nozzle, flip the direction,
    395              // moving from the end to the start. On very small lines the optimization isn't worth it.
    396              if (dist_end < dist_start && (SIZE_OF_INTERSECTION_CIRCLES) < FABS(line_length))
   \   0000016E   0x4638             MOV      R0,R7
   \   00000170   0x9900             LDR      R1,[SP, #+0]
   \   00000172   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000176   0xD210             BCS.N    ??print_line_from_here_to_there_18
   \   00000178   0xF029 0x4000      BIC      R0,R9,#0x80000000
   \   0000017C   0x.... 0x....      LDR.W    R1,??DataTable24_5  ;; 0x40a00001
   \   00000180   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000184   0xD809             BHI.N    ??print_line_from_here_to_there_18
    397                return print_line_from_here_to_there(ex, ey, ez, sx, sy, sz);
   \   00000186   0x9805             LDR      R0,[SP, #+20]
   \   00000188   0x9001             STR      R0,[SP, #+4]
   \   0000018A   0x9500             STR      R5,[SP, #+0]
   \   0000018C   0x4623             MOV      R3,R4
   \   0000018E   0x4642             MOV      R2,R8
   \   00000190   0x4631             MOV      R1,R6
   \   00000192   0x9806             LDR      R0,[SP, #+24]
   \   00000194   0xF7FF 0xFF34      BL       _Z29print_line_from_here_to_thereRKfS0_S0_S0_S0_S0_
   \   00000198   0xE043             B.N      ??print_line_from_here_to_there_19
    398          
    399              // Decide whether to retract & bump
    400          
    401              if (dist_start > 2.0) {
   \                     ??print_line_from_here_to_there_18: (+1)
   \   0000019A   0x....             LDR.N    R7,??DataTable23_5
   \   0000019C   0x9800             LDR      R0,[SP, #+0]
   \   0000019E   0x.... 0x....      LDR.W    R1,??DataTable24_6  ;; 0x40000001
   \   000001A2   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000001A6   0xD821             BHI.N    ??print_line_from_here_to_there_20
    402                retract_filament(destination);
   \   000001A8   0x4638             MOV      R0,R7
   \   000001AA   0x.... 0x....      BL       _Z16retract_filamentPKf
    403                //todo:  parameterize the bump height with a define
    404                move_to(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS] + 0.500, 0.0);  // Z bump to minimize scraping
   \   000001AE   0x....             LDR.N    R0,??DataTable23_1
   \   000001B0   0x6881             LDR      R1,[R0, #+8]
   \   000001B2   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000001B6   0x.... 0x....      BL       __aeabi_fadd
   \   000001BA   0x9003             STR      R0,[SP, #+12]
   \   000001BC   0x2000             MOVS     R0,#+0
   \   000001BE   0x9002             STR      R0,[SP, #+8]
   \   000001C0   0xAB02             ADD      R3,SP,#+8
   \   000001C2   0xAA03             ADD      R2,SP,#+12
   \   000001C4   0x.... 0x....      LDR.W    R1,??DataTable24_7
   \   000001C8   0x....             LDR.N    R0,??DataTable23_1
   \   000001CA   0x.... 0x....      BL       _Z7move_toRKfS0_S0_S0_
    405                move_to(sx, sy, sz + 0.500, 0.0); // Get to the starting point with no extrusion while bumped
   \   000001CE   0x9805             LDR      R0,[SP, #+20]
   \   000001D0   0x6801             LDR      R1,[R0, #+0]
   \   000001D2   0xF04F 0x507C      MOV      R0,#+1056964608
   \   000001D6   0x.... 0x....      BL       __aeabi_fadd
   \   000001DA   0x9000             STR      R0,[SP, #+0]
   \   000001DC   0x2000             MOVS     R0,#+0
   \   000001DE   0x9001             STR      R0,[SP, #+4]
   \   000001E0   0xAB01             ADD      R3,SP,#+4
   \   000001E2   0xAA00             ADD      R2,SP,#+0
   \   000001E4   0x4629             MOV      R1,R5
   \   000001E6   0x4620             MOV      R0,R4
   \   000001E8   0x.... 0x....      BL       _Z7move_toRKfS0_S0_S0_
    406              }
    407          
    408              move_to(sx, sy, sz, 0.0); // Get to the starting point with no extrusion / un-Z bump
   \                     ??print_line_from_here_to_there_20: (+1)
   \   000001EC   0x2000             MOVS     R0,#+0
   \   000001EE   0x9001             STR      R0,[SP, #+4]
   \   000001F0   0xAB01             ADD      R3,SP,#+4
   \   000001F2   0x9A05             LDR      R2,[SP, #+20]
   \   000001F4   0x4629             MOV      R1,R5
   \   000001F6   0x4620             MOV      R0,R4
   \   000001F8   0x.... 0x....      BL       _Z7move_toRKfS0_S0_S0_
    409          
    410              const float e_pos_delta = line_length * g26_e_axis_feedrate * g26_extrusion_multiplier;
   \   000001FC   0x.... 0x....      LDR.W    R4,??DataTable24_8
   \   00000200   0x68A0             LDR      R0,[R4, #+8]
   \   00000202   0x4649             MOV      R1,R9
   \   00000204   0x.... 0x....      BL       __aeabi_fmul
   \   00000208   0x6921             LDR      R1,[R4, #+16]
   \   0000020A   0x.... 0x....      BL       __aeabi_fmul
   \   0000020E   0x9000             STR      R0,[SP, #+0]
    411          
    412              recover_filament(destination);
   \   00000210   0x4638             MOV      R0,R7
   \   00000212   0x.... 0x....      BL       _Z16recover_filamentPKf
    413              move_to(ex, ey, ez, e_pos_delta);  // Get to the ending point with an appropriate amount of extrusion
   \   00000216   0xAB00             ADD      R3,SP,#+0
   \   00000218   0x4642             MOV      R2,R8
   \   0000021A   0x4631             MOV      R1,R6
   \   0000021C   0x9806             LDR      R0,[SP, #+24]
   \   0000021E   0x.... 0x....      BL       _Z7move_toRKfS0_S0_S0_
    414            }
   \                     ??print_line_from_here_to_there_19: (+1)
   \   00000222   0xB007             ADD      SP,SP,#+28
   \   00000224   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    415          

   \                                 In section .text, align 4
    416            inline bool look_for_lines_to_connect() {
   \                     _Z25look_for_lines_to_connectv: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
    417              float sx, sy, ex, ey;
    418          
    419              for (uint8_t i = 0; i < GRID_MAX_POINTS_X; i++) {
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0xF8DF 0x574C      LDR.W    R5,??look_for_lines_to_connect_0
   \   0000000C   0xF8DF 0x774C      LDR.W    R7,??look_for_lines_to_connect_0+0x4
   \   00000010   0xE001             B.N      ??look_for_lines_to_connect_1
   \                     ??look_for_lines_to_connect_2: (+1)
   \   00000012   0x1C64             ADDS     R4,R4,#+1
   \   00000014   0xB2E4             UXTB     R4,R4
   \                     ??look_for_lines_to_connect_1: (+1)
   \   00000016   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xF280 0x8397      BGE.W    ??look_for_lines_to_connect_3
    420                for (uint8_t j = 0; j < GRID_MAX_POINTS_Y; j++) {
   \   00000020   0x2600             MOVS     R6,#+0
   \   00000022   0xE047             B.N      ??look_for_lines_to_connect_4
    421          
    422                  #if ENABLED(NEWPANEL)
    423                    if (user_canceled()) return true;     // Check if the user wants to stop the Mesh Validation
    424                  #endif
    425          
    426                  if (i < GRID_MAX_POINTS_X) { // We can't connect to anything to the right than GRID_MAX_POINTS_X.
    427                                               // This is already a half circle because we are at the edge of the bed.
    428          
    429                    if (is_bitmap_set(circle_flags, i, j) && is_bitmap_set(circle_flags, i + 1, j)) { // check if we can do a line to the left
    430                      if (!is_bitmap_set(horizontal_mesh_line_flags, i, j)) {
    431          
    432                        //
    433                        // We found two circles that need a horizontal line to connect them
    434                        // Print it!
    435                        //
    436                        if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_BILINEAR)
    437                        {
    438                            sx = _GET_MESH_X_ABL(  i  ) + (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // right edge
    439                            ex = _GET_MESH_X_ABL(i + 1) - (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // left edge
    440          
    441                            sx = constrain(sx, X_MIN_POS + 1, X_MAX_POS - 1);
    442                            sy = ey = constrain(_GET_MESH_Y_ABL(j), Y_MIN_POS + 1, Y_MAX_POS - 1);
    443                            ex = constrain(ex, X_MIN_POS + 1, X_MAX_POS - 1);                  
    444                        }
    445                        else if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL)
    446                        {
    447                            sx = _GET_MESH_X_UBL(  i  ) + (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // right edge
    448                            ex = _GET_MESH_X_UBL(i + 1) - (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // left edge       
    449                            
    450                            sx = constrain(sx, X_MIN_POS + 1, X_MAX_POS - 1);
    451                            sy = ey = constrain(_GET_MESH_Y_UBL(j), Y_MIN_POS + 1, Y_MAX_POS - 1);
    452                            ex = constrain(ex, X_MIN_POS + 1, X_MAX_POS - 1);                  
    453                        }
    454                        else if(BED_LEVELING_METHOD & MESH_BED_LEVELING)
    455                        {
    456                            sx = _GET_MESH_X_MBL(  i  ) + (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // right edge
    457                            ex = _GET_MESH_X_MBL(i + 1) - (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // left edge   
    458                            
    459                            sx = constrain(sx, X_MIN_POS + 1, X_MAX_POS - 1);
    460                            sy = ey = constrain(_GET_MESH_Y_MBL(j), Y_MIN_POS + 1, Y_MAX_POS - 1);
    461                            ex = constrain(ex, X_MIN_POS + 1, X_MAX_POS - 1);                  
    462                        }
    463          
    464          
    465                      if(MACHINETPYE & IS_KINEMATIC)
    466                      {
    467                        if (position_is_reachable_IS_KINEMATIC(sx, sy) && position_is_reachable_IS_KINEMATIC(ex, ey)) {
    468          
    469                          if (g26_debug_flag) {
    470                            SERIAL_ECHOPAIR(" Connecting with horizontal line (sx=", sx);
    471                            SERIAL_ECHOPAIR(", sy=", sy);
    472                            SERIAL_ECHOPAIR(") -> (ex=", ex);
    473                            SERIAL_ECHOPAIR(", ey=", ey);
    474                            SERIAL_CHAR(')');
    475                            SERIAL_EOL();
    476                            //debug_current_and_destination(PSTR("Connecting horizontal line."));
    477                          }
    478                          print_line_from_here_to_there(sx, sy, g26_layer_height, ex, ey, g26_layer_height);
    479                        }
    480                      }
    481                      else
    482                      {
    483                            if (position_is_reachable_IS_CARTESIAN(sx, sy) && position_is_reachable_IS_CARTESIAN(ex, ey)) {
    484              
    485                              if (g26_debug_flag) {
    486                                SERIAL_ECHOPAIR(" Connecting with horizontal line (sx=", sx);
    487                                SERIAL_ECHOPAIR(", sy=", sy);
    488                                SERIAL_ECHOPAIR(") -> (ex=", ex);
    489                                SERIAL_ECHOPAIR(", ey=", ey);
    490                                SERIAL_CHAR(')');
    491                                SERIAL_EOL();
    492                                //debug_current_and_destination(PSTR("Connecting horizontal line."));
    493                              }
    494                              print_line_from_here_to_there(sx, sy, g26_layer_height, ex, ey, g26_layer_height);
    495                            }
    496                      }
    497                      
    498                        bitmap_set(horizontal_mesh_line_flags, i, j);   // Mark it as done so we don't do it again, even if we skipped it
    499                      }
    500                    }
    501          
    502                    if (j < GRID_MAX_POINTS_Y) { // We can't connect to anything further back than GRID_MAX_POINTS_Y.
    503                                                     // This is already a half circle because we are at the edge  of the bed.
    504          
    505                      if (is_bitmap_set(circle_flags, i, j) && is_bitmap_set(circle_flags, i, j + 1)) { // check if we can do a line straight down
    506                        if (!is_bitmap_set( vertical_mesh_line_flags, i, j)) {
    507                          //
    508                          // We found two circles that need a vertical line to connect them
    509                          // Print it!
    510                          //
    511                          if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_BILINEAR)
    512                          {
    513                              sy = _GET_MESH_Y_ABL(  j  ) + (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // top edge
    514                              ey = _GET_MESH_Y_ABL(j + 1) - (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // bottom edge
    515          
    516                              sx = ex = constrain(_GET_MESH_X_ABL(i), X_MIN_POS + 1, X_MAX_POS - 1);
    517                              sy = constrain(sy, Y_MIN_POS + 1, Y_MAX_POS - 1);
    518                              ey = constrain(ey, Y_MIN_POS + 1, Y_MAX_POS - 1);
    519                          }
    520                          else if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL)
    521                          {
    522                              sy = _GET_MESH_Y_UBL(  j  ) + (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // top edge
    523                              ey = _GET_MESH_Y_UBL(j + 1) - (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // bottom edge
    524          
    525                              sx = ex = constrain(_GET_MESH_X_UBL(i), X_MIN_POS + 1, X_MAX_POS - 1);
    526                              sy = constrain(sy, Y_MIN_POS + 1, Y_MAX_POS - 1);
    527                              ey = constrain(ey, Y_MIN_POS + 1, Y_MAX_POS - 1);
    528                          }
    529                          else if(BED_LEVELING_METHOD & MESH_BED_LEVELING)
    530                          {
    531                              sy = _GET_MESH_Y_MBL(  j  ) + (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // top edge
    532                              ey = _GET_MESH_Y_MBL(j + 1) - (SIZE_OF_INTERSECTION_CIRCLES - (SIZE_OF_CROSSHAIRS)); // bottom edge
    533          
    534                              sx = ex = constrain(_GET_MESH_X_MBL(i), X_MIN_POS + 1, X_MAX_POS - 1);
    535                              sy = constrain(sy, Y_MIN_POS + 1, Y_MAX_POS - 1);
    536                              ey = constrain(ey, Y_MIN_POS + 1, Y_MAX_POS - 1);
    537                          }
    538                          
    539                          if(MACHINETPYE & IS_KINEMATIC)
    540                          {
    541                              if (position_is_reachable_IS_KINEMATIC(sx, sy) && position_is_reachable_IS_KINEMATIC(ex, ey)) {
    542          
    543                                if (g26_debug_flag) {
    544                                  SERIAL_ECHOPAIR(" Connecting with vertical line (sx=", sx);
    545                                  SERIAL_ECHOPAIR(", sy=", sy);
    546                                  SERIAL_ECHOPAIR(") -> (ex=", ex);
    547                                  SERIAL_ECHOPAIR(", ey=", ey);
    548                                  SERIAL_CHAR(')');
    549                                  SERIAL_EOL();
    550          
    551                                  //#if ENABLED(AUTO_BED_LEVELING_UBL)
    552                                  if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL)
    553                                    debug_current_and_destination(PSTR("Connecting vertical line."));
    554                                  //#endif
    555                                }
    556                                print_line_from_here_to_there(sx, sy, g26_layer_height, ex, ey, g26_layer_height);
    557                              }
    558                          }
    559                          else
    560                          {
    561                              if (position_is_reachable_IS_CARTESIAN(sx, sy) && position_is_reachable_IS_CARTESIAN(ex, ey)) {
   \                     ??look_for_lines_to_connect_5: (+1)
   \   00000024   0x.... 0x....      BL       _Z34position_is_reachable_IS_CARTESIANRKfS0_
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD03C             BEQ.N    ??look_for_lines_to_connect_6
   \   0000002C   0xA904             ADD      R1,SP,#+16
   \   0000002E   0xA805             ADD      R0,SP,#+20
   \   00000030   0x.... 0x....      BL       _Z34position_is_reachable_IS_CARTESIANRKfS0_
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD036             BEQ.N    ??look_for_lines_to_connect_6
    562          
    563                                if (g26_debug_flag) {
   \   00000038   0xF8DF 0x0724      LDR.W    R0,??look_for_lines_to_connect_0+0x8
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD025             BEQ.N    ??look_for_lines_to_connect_7
    564                                  SERIAL_ECHOPAIR(" Connecting with vertical line (sx=", sx);
   \   00000042   0x9903             LDR      R1,[SP, #+12]
   \   00000044   0xF8DF 0x071C      LDR.W    R0,??look_for_lines_to_connect_0+0xC
   \   00000048   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    565                                  SERIAL_ECHOPAIR(", sy=", sy);
   \   0000004C   0x9902             LDR      R1,[SP, #+8]
   \   0000004E   0xF8DF 0x0718      LDR.W    R0,??look_for_lines_to_connect_0+0x10
   \   00000052   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    566                                  SERIAL_ECHOPAIR(") -> (ex=", ex);
   \   00000056   0x9905             LDR      R1,[SP, #+20]
   \   00000058   0xF8DF 0x0710      LDR.W    R0,??look_for_lines_to_connect_0+0x14
   \   0000005C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    567                                  SERIAL_ECHOPAIR(", ey=", ey);
   \   00000060   0x9904             LDR      R1,[SP, #+16]
   \   00000062   0xF8DF 0x070C      LDR.W    R0,??look_for_lines_to_connect_0+0x18
   \   00000066   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
    568                                  SERIAL_CHAR(')');
   \   0000006A   0xF8DF 0x8708      LDR.W    R8,??look_for_lines_to_connect_0+0x1C
   \   0000006E   0x2129             MOVS     R1,#+41
   \   00000070   0x4640             MOV      R0,R8
   \   00000072   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    569                                  SERIAL_EOL();
   \   00000076   0x210A             MOVS     R1,#+10
   \   00000078   0x4640             MOV      R0,R8
   \   0000007A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    570          
    571                                  //#if ENABLED(AUTO_BED_LEVELING_UBL)
    572                                  if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL)
   \   0000007E   0xF895 0x0040      LDRB     R0,[R5, #+64]
   \   00000082   0x06C0             LSLS     R0,R0,#+27
   \   00000084   0xD503             BPL.N    ??look_for_lines_to_connect_7
    573                                    debug_current_and_destination(PSTR("Connecting vertical line."));
   \   00000086   0xF8DF 0x06F0      LDR.W    R0,??look_for_lines_to_connect_0+0x20
   \   0000008A   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
    574                                  //#endif
    575                                }
    576                                print_line_from_here_to_there(sx, sy, g26_layer_height, ex, ey, g26_layer_height);
   \                     ??look_for_lines_to_connect_7: (+1)
   \   0000008E   0xF107 0x0018      ADD      R0,R7,#+24
   \   00000092   0x9001             STR      R0,[SP, #+4]
   \   00000094   0xA804             ADD      R0,SP,#+16
   \   00000096   0x9000             STR      R0,[SP, #+0]
   \   00000098   0xAB05             ADD      R3,SP,#+20
   \   0000009A   0xF107 0x0218      ADD      R2,R7,#+24
   \   0000009E   0xA902             ADD      R1,SP,#+8
   \   000000A0   0xA803             ADD      R0,SP,#+12
   \   000000A2   0x.... 0x....      BL       _Z29print_line_from_here_to_thereRKfS0_S0_S0_S0_S0_
    577                              }
    578                            }    
    579                          
    580                          bitmap_set(vertical_mesh_line_flags, i, j);   // Mark it as done so we don't do it again, even if skipped
   \                     ??look_for_lines_to_connect_6: (+1)
   \   000000A6   0x4632             MOV      R2,R6
   \   000000A8   0x4621             MOV      R1,R4
   \   000000AA   0x9806             LDR      R0,[SP, #+24]
   \   000000AC   0x.... 0x....      BL       _Z10bitmap_setPjhh
   \                     ??look_for_lines_to_connect_8: (+1)
   \   000000B0   0x1C76             ADDS     R6,R6,#+1
   \   000000B2   0xB2F6             UXTB     R6,R6
   \                     ??look_for_lines_to_connect_4: (+1)
   \   000000B4   0xF105 0x0060      ADD      R0,R5,#+96
   \   000000B8   0x9006             STR      R0,[SP, #+24]
   \   000000BA   0x7840             LDRB     R0,[R0, #+1]
   \   000000BC   0x4286             CMP      R6,R0
   \   000000BE   0xDAA8             BGE.N    ??look_for_lines_to_connect_2
   \   000000C0   0xF895 0x0060      LDRB     R0,[R5, #+96]
   \   000000C4   0x4284             CMP      R4,R0
   \   000000C6   0xDAF3             BGE.N    ??look_for_lines_to_connect_8
   \   000000C8   0x4632             MOV      R2,R6
   \   000000CA   0x4621             MOV      R1,R4
   \   000000CC   0xF107 0x0028      ADD      R0,R7,#+40
   \   000000D0   0x.... 0x....      BL       _Z13is_bitmap_setPjhh
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xF000 0x81A1      BEQ.W    ??look_for_lines_to_connect_9
   \   000000DA   0xF104 0x0901      ADD      R9,R4,#+1
   \   000000DE   0x4632             MOV      R2,R6
   \   000000E0   0x4649             MOV      R1,R9
   \   000000E2   0xB2C9             UXTB     R1,R1
   \   000000E4   0xF107 0x0028      ADD      R0,R7,#+40
   \   000000E8   0x.... 0x....      BL       _Z13is_bitmap_setPjhh
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xF000 0x8195      BEQ.W    ??look_for_lines_to_connect_9
   \   000000F2   0x4632             MOV      R2,R6
   \   000000F4   0x4621             MOV      R1,R4
   \   000000F6   0xF107 0x0068      ADD      R0,R7,#+104
   \   000000FA   0x.... 0x....      BL       _Z13is_bitmap_setPjhh
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xF040 0x818C      BNE.W    ??look_for_lines_to_connect_9
   \   00000104   0xF895 0x0040      LDRB     R0,[R5, #+64]
   \   00000108   0xF105 0x0808      ADD      R8,R5,#+8
   \   0000010C   0x0701             LSLS     R1,R0,#+28
   \   0000010E   0xD56A             BPL.N    ??look_for_lines_to_connect_10
   \   00000110   0xF8DF 0x9668      LDR.W    R9,??look_for_lines_to_connect_0+0x24
   \   00000114   0xF8DF 0xA668      LDR.W    R10,??look_for_lines_to_connect_0+0x28
   \   00000118   0xF8DA 0xB000      LDR      R11,[R10, #+0]
   \   0000011C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000120   0xFB00 0xB004      MLA      R0,R0,R4,R11
   \   00000124   0x1C80             ADDS     R0,R0,#+2
   \   00000126   0x.... 0x....      BL       __aeabi_i2f
   \   0000012A   0x9003             STR      R0,[SP, #+12]
   \   0000012C   0x1C60             ADDS     R0,R4,#+1
   \   0000012E   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \   00000132   0xFB01 0xB000      MLA      R0,R1,R0,R11
   \   00000136   0x1E80             SUBS     R0,R0,#+2
   \   00000138   0x.... 0x....      BL       __aeabi_i2f
   \   0000013C   0x9005             STR      R0,[SP, #+20]
   \   0000013E   0x68A8             LDR      R0,[R5, #+8]
   \   00000140   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000144   0x.... 0x....      BL       __aeabi_fadd
   \   00000148   0x4601             MOV      R1,R0
   \   0000014A   0x9803             LDR      R0,[SP, #+12]
   \   0000014C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000150   0xD201             BCS.N    ??look_for_lines_to_connect_11
   \   00000152   0x9103             STR      R1,[SP, #+12]
   \   00000154   0xE00A             B.N      ??look_for_lines_to_connect_12
   \                     ??look_for_lines_to_connect_11: (+1)
   \   00000156   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   0000015A   0xF8DF 0x1628      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   0000015E   0x.... 0x....      BL       __aeabi_fadd
   \   00000162   0x9903             LDR      R1,[SP, #+12]
   \   00000164   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000168   0xD200             BCS.N    ??look_for_lines_to_connect_12
   \   0000016A   0x9003             STR      R0,[SP, #+12]
   \                     ??look_for_lines_to_connect_12: (+1)
   \   0000016C   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \   00000170   0xF8D9 0x1004      LDR      R1,[R9, #+4]
   \   00000174   0xFB01 0x0006      MLA      R0,R1,R6,R0
   \   00000178   0x.... 0x....      BL       __aeabi_i2f
   \   0000017C   0x4681             MOV      R9,R0
   \   0000017E   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000182   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000186   0x.... 0x....      BL       __aeabi_fadd
   \   0000018A   0x4601             MOV      R1,R0
   \   0000018C   0x4648             MOV      R0,R9
   \   0000018E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000192   0xD201             BCS.N    ??look_for_lines_to_connect_13
   \   00000194   0x4689             MOV      R9,R1
   \   00000196   0xE00A             B.N      ??look_for_lines_to_connect_14
   \                     ??look_for_lines_to_connect_13: (+1)
   \   00000198   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   0000019C   0xF8DF 0x15E4      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   000001A0   0x.... 0x....      BL       __aeabi_fadd
   \   000001A4   0x4649             MOV      R1,R9
   \   000001A6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001AA   0xD200             BCS.N    ??look_for_lines_to_connect_14
   \   000001AC   0x4681             MOV      R9,R0
   \                     ??look_for_lines_to_connect_14: (+1)
   \   000001AE   0xF8CD 0x9010      STR      R9,[SP, #+16]
   \   000001B2   0xF8CD 0x9008      STR      R9,[SP, #+8]
   \   000001B6   0x68A8             LDR      R0,[R5, #+8]
   \   000001B8   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000001BC   0x.... 0x....      BL       __aeabi_fadd
   \   000001C0   0x4601             MOV      R1,R0
   \   000001C2   0x9805             LDR      R0,[SP, #+20]
   \   000001C4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001C8   0xF0C0 0x80C4      BCC.W    ??look_for_lines_to_connect_15
   \   000001CC   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   000001D0   0xF8DF 0x15B0      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   000001D4   0x.... 0x....      BL       __aeabi_fadd
   \   000001D8   0x9905             LDR      R1,[SP, #+20]
   \   000001DA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001DE   0xF080 0x80CB      BCS.W    ??look_for_lines_to_connect_16
   \   000001E2   0x9005             STR      R0,[SP, #+20]
   \   000001E4   0xE0C8             B.N      ??look_for_lines_to_connect_16
   \                     ??look_for_lines_to_connect_10: (+1)
   \   000001E6   0x06C1             LSLS     R1,R0,#+27
   \   000001E8   0xD562             BPL.N    ??look_for_lines_to_connect_17
   \   000001EA   0x4620             MOV      R0,R4
   \   000001EC   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000001F0   0xF04F 0x4180      MOV      R1,#+1073741824
   \   000001F4   0x.... 0x....      BL       __aeabi_fadd
   \   000001F8   0x9003             STR      R0,[SP, #+12]
   \   000001FA   0x4648             MOV      R0,R9
   \   000001FC   0xB2C0             UXTB     R0,R0
   \   000001FE   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   00000202   0xF04F 0x4140      MOV      R1,#-1073741824
   \   00000206   0x.... 0x....      BL       __aeabi_fadd
   \   0000020A   0x9005             STR      R0,[SP, #+20]
   \   0000020C   0x68A8             LDR      R0,[R5, #+8]
   \   0000020E   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000212   0x.... 0x....      BL       __aeabi_fadd
   \   00000216   0x4601             MOV      R1,R0
   \   00000218   0x9803             LDR      R0,[SP, #+12]
   \   0000021A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000021E   0xD201             BCS.N    ??look_for_lines_to_connect_18
   \   00000220   0x9103             STR      R1,[SP, #+12]
   \   00000222   0xE00A             B.N      ??look_for_lines_to_connect_19
   \                     ??look_for_lines_to_connect_18: (+1)
   \   00000224   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   00000228   0xF8DF 0x1558      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   0000022C   0x.... 0x....      BL       __aeabi_fadd
   \   00000230   0x9903             LDR      R1,[SP, #+12]
   \   00000232   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000236   0xD200             BCS.N    ??look_for_lines_to_connect_19
   \   00000238   0x9003             STR      R0,[SP, #+12]
   \                     ??look_for_lines_to_connect_19: (+1)
   \   0000023A   0x4630             MOV      R0,R6
   \   0000023C   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000240   0x4681             MOV      R9,R0
   \   00000242   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000246   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000024A   0x.... 0x....      BL       __aeabi_fadd
   \   0000024E   0x4602             MOV      R2,R0
   \   00000250   0x4648             MOV      R0,R9
   \   00000252   0x4611             MOV      R1,R2
   \   00000254   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000258   0xD312             BCC.N    ??look_for_lines_to_connect_20
   \   0000025A   0x4630             MOV      R0,R6
   \   0000025C   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   00000260   0x4681             MOV      R9,R0
   \   00000262   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   00000266   0xF8DF 0x151C      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   0000026A   0x.... 0x....      BL       __aeabi_fadd
   \   0000026E   0x4602             MOV      R2,R0
   \   00000270   0x4649             MOV      R1,R9
   \   00000272   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000276   0xD303             BCC.N    ??look_for_lines_to_connect_20
   \   00000278   0x4630             MOV      R0,R6
   \   0000027A   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   0000027E   0x4602             MOV      R2,R0
   \                     ??look_for_lines_to_connect_20: (+1)
   \   00000280   0x9204             STR      R2,[SP, #+16]
   \   00000282   0x9202             STR      R2,[SP, #+8]
   \   00000284   0x68A8             LDR      R0,[R5, #+8]
   \   00000286   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000028A   0x.... 0x....      BL       __aeabi_fadd
   \   0000028E   0x4601             MOV      R1,R0
   \   00000290   0x9805             LDR      R0,[SP, #+20]
   \   00000292   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000296   0xD35D             BCC.N    ??look_for_lines_to_connect_15
   \   00000298   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   0000029C   0xF8DF 0x14E4      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   000002A0   0x.... 0x....      BL       __aeabi_fadd
   \   000002A4   0x9905             LDR      R1,[SP, #+20]
   \   000002A6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000002AA   0xD265             BCS.N    ??look_for_lines_to_connect_16
   \   000002AC   0x9005             STR      R0,[SP, #+20]
   \   000002AE   0xE063             B.N      ??look_for_lines_to_connect_16
   \                     ??look_for_lines_to_connect_17: (+1)
   \   000002B0   0x0680             LSLS     R0,R0,#+26
   \   000002B2   0xD561             BPL.N    ??look_for_lines_to_connect_16
   \   000002B4   0xF8DF 0x94D0      LDR.W    R9,??look_for_lines_to_connect_0+0x30
   \   000002B8   0xF859 0x0024      LDR      R0,[R9, R4, LSL #+2]
   \   000002BC   0xF04F 0x4180      MOV      R1,#+1073741824
   \   000002C0   0x.... 0x....      BL       __aeabi_fadd
   \   000002C4   0x9003             STR      R0,[SP, #+12]
   \   000002C6   0xEB09 0x0084      ADD      R0,R9,R4, LSL #+2
   \   000002CA   0x6840             LDR      R0,[R0, #+4]
   \   000002CC   0xF04F 0x4140      MOV      R1,#-1073741824
   \   000002D0   0x.... 0x....      BL       __aeabi_fadd
   \   000002D4   0x9005             STR      R0,[SP, #+20]
   \   000002D6   0x68A8             LDR      R0,[R5, #+8]
   \   000002D8   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000002DC   0x.... 0x....      BL       __aeabi_fadd
   \   000002E0   0x4601             MOV      R1,R0
   \   000002E2   0x9803             LDR      R0,[SP, #+12]
   \   000002E4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000002E8   0xD201             BCS.N    ??look_for_lines_to_connect_21
   \   000002EA   0x9103             STR      R1,[SP, #+12]
   \   000002EC   0xE00A             B.N      ??look_for_lines_to_connect_22
   \                     ??look_for_lines_to_connect_21: (+1)
   \   000002EE   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   000002F2   0xF8DF 0x1490      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   000002F6   0x.... 0x....      BL       __aeabi_fadd
   \   000002FA   0x9903             LDR      R1,[SP, #+12]
   \   000002FC   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000300   0xD200             BCS.N    ??look_for_lines_to_connect_22
   \   00000302   0x9003             STR      R0,[SP, #+12]
   \                     ??look_for_lines_to_connect_22: (+1)
   \   00000304   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000308   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000030C   0x.... 0x....      BL       __aeabi_fadd
   \   00000310   0x4602             MOV      R2,R0
   \   00000312   0xF8DF 0x9478      LDR.W    R9,??look_for_lines_to_connect_0+0x34
   \   00000316   0xF859 0x9026      LDR      R9,[R9, R6, LSL #+2]
   \   0000031A   0x4648             MOV      R0,R9
   \   0000031C   0x4611             MOV      R1,R2
   \   0000031E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000322   0xD30B             BCC.N    ??look_for_lines_to_connect_23
   \   00000324   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   00000328   0xF8DF 0x1458      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   0000032C   0x.... 0x....      BL       __aeabi_fadd
   \   00000330   0x4602             MOV      R2,R0
   \   00000332   0x4649             MOV      R1,R9
   \   00000334   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000338   0xD300             BCC.N    ??look_for_lines_to_connect_23
   \   0000033A   0x464A             MOV      R2,R9
   \                     ??look_for_lines_to_connect_23: (+1)
   \   0000033C   0x9204             STR      R2,[SP, #+16]
   \   0000033E   0x9202             STR      R2,[SP, #+8]
   \   00000340   0x68A8             LDR      R0,[R5, #+8]
   \   00000342   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000346   0x.... 0x....      BL       __aeabi_fadd
   \   0000034A   0x4601             MOV      R1,R0
   \   0000034C   0x9805             LDR      R0,[SP, #+20]
   \   0000034E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000352   0xD206             BCS.N    ??look_for_lines_to_connect_24
   \                     ??look_for_lines_to_connect_15: (+1)
   \   00000354   0x68A8             LDR      R0,[R5, #+8]
   \   00000356   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000035A   0x.... 0x....      BL       __aeabi_fadd
   \   0000035E   0x9005             STR      R0,[SP, #+20]
   \   00000360   0xE00A             B.N      ??look_for_lines_to_connect_16
   \                     ??look_for_lines_to_connect_24: (+1)
   \   00000362   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   00000366   0xF8DF 0x141C      LDR.W    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   0000036A   0x.... 0x....      BL       __aeabi_fadd
   \   0000036E   0x9905             LDR      R1,[SP, #+20]
   \   00000370   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000374   0xD200             BCS.N    ??look_for_lines_to_connect_16
   \   00000376   0x9005             STR      R0,[SP, #+20]
   \                     ??look_for_lines_to_connect_16: (+1)
   \   00000378   0xF105 0x0040      ADD      R0,R5,#+64
   \   0000037C   0x8B00             LDRH     R0,[R0, #+24]
   \   0000037E   0xF240 0x3102      MOVW     R1,#+770
   \   00000382   0x4208             TST      R0,R1
   \   00000384   0xA902             ADD      R1,SP,#+8
   \   00000386   0xA803             ADD      R0,SP,#+12
   \   00000388   0xD00A             BEQ.N    ??look_for_lines_to_connect_25
   \   0000038A   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   0000038E   0x2800             CMP      R0,#+0
   \   00000390   0xD03E             BEQ.N    ??look_for_lines_to_connect_26
   \   00000392   0xA904             ADD      R1,SP,#+16
   \   00000394   0xA805             ADD      R0,SP,#+20
   \   00000396   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   0000039A   0x2800             CMP      R0,#+0
   \   0000039C   0xD10A             BNE.N    ??look_for_lines_to_connect_27
   \   0000039E   0xE037             B.N      ??look_for_lines_to_connect_26
   \                     ??look_for_lines_to_connect_25: (+1)
   \   000003A0   0x.... 0x....      BL       _Z34position_is_reachable_IS_CARTESIANRKfS0_
   \   000003A4   0x2800             CMP      R0,#+0
   \   000003A6   0xD033             BEQ.N    ??look_for_lines_to_connect_26
   \   000003A8   0xA904             ADD      R1,SP,#+16
   \   000003AA   0xA805             ADD      R0,SP,#+20
   \   000003AC   0x.... 0x....      BL       _Z34position_is_reachable_IS_CARTESIANRKfS0_
   \   000003B0   0x2800             CMP      R0,#+0
   \   000003B2   0xD02D             BEQ.N    ??look_for_lines_to_connect_26
   \                     ??look_for_lines_to_connect_27: (+1)
   \   000003B4   0xF8DF 0x03A8      LDR.W    R0,??look_for_lines_to_connect_0+0x8
   \   000003B8   0x7800             LDRB     R0,[R0, #+0]
   \   000003BA   0x2800             CMP      R0,#+0
   \   000003BC   0xD01C             BEQ.N    ??look_for_lines_to_connect_28
   \   000003BE   0x9903             LDR      R1,[SP, #+12]
   \   000003C0   0xF8DF 0x03CC      LDR.W    R0,??look_for_lines_to_connect_0+0x38
   \   000003C4   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000003C8   0x9902             LDR      R1,[SP, #+8]
   \   000003CA   0xF8DF 0x039C      LDR.W    R0,??look_for_lines_to_connect_0+0x10
   \   000003CE   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000003D2   0x9905             LDR      R1,[SP, #+20]
   \   000003D4   0xF8DF 0x0394      LDR.W    R0,??look_for_lines_to_connect_0+0x14
   \   000003D8   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000003DC   0x9904             LDR      R1,[SP, #+16]
   \   000003DE   0x48E4             LDR.N    R0,??look_for_lines_to_connect_0+0x18
   \   000003E0   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   000003E4   0xF8DF 0x838C      LDR.W    R8,??look_for_lines_to_connect_0+0x1C
   \   000003E8   0x2129             MOVS     R1,#+41
   \   000003EA   0x4640             MOV      R0,R8
   \   000003EC   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   000003F0   0x210A             MOVS     R1,#+10
   \   000003F2   0x4640             MOV      R0,R8
   \   000003F4   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??look_for_lines_to_connect_28: (+1)
   \   000003F8   0xF107 0x0018      ADD      R0,R7,#+24
   \   000003FC   0x9001             STR      R0,[SP, #+4]
   \   000003FE   0xA804             ADD      R0,SP,#+16
   \   00000400   0x9000             STR      R0,[SP, #+0]
   \   00000402   0xAB05             ADD      R3,SP,#+20
   \   00000404   0xF107 0x0218      ADD      R2,R7,#+24
   \   00000408   0xA902             ADD      R1,SP,#+8
   \   0000040A   0xA803             ADD      R0,SP,#+12
   \   0000040C   0x.... 0x....      BL       _Z29print_line_from_here_to_thereRKfS0_S0_S0_S0_S0_
   \                     ??look_for_lines_to_connect_26: (+1)
   \   00000410   0x4632             MOV      R2,R6
   \   00000412   0x4621             MOV      R1,R4
   \   00000414   0xF107 0x0068      ADD      R0,R7,#+104
   \   00000418   0x.... 0x....      BL       _Z10bitmap_setPjhh
   \                     ??look_for_lines_to_connect_9: (+1)
   \   0000041C   0x9806             LDR      R0,[SP, #+24]
   \   0000041E   0x7840             LDRB     R0,[R0, #+1]
   \   00000420   0x4286             CMP      R6,R0
   \   00000422   0xF6BF 0xAE45      BGE.W    ??look_for_lines_to_connect_8
   \   00000426   0x4632             MOV      R2,R6
   \   00000428   0x4621             MOV      R1,R4
   \   0000042A   0xF107 0x0028      ADD      R0,R7,#+40
   \   0000042E   0x.... 0x....      BL       _Z13is_bitmap_setPjhh
   \   00000432   0x2800             CMP      R0,#+0
   \   00000434   0xF43F 0xAE3C      BEQ.W    ??look_for_lines_to_connect_8
   \   00000438   0xF106 0x0901      ADD      R9,R6,#+1
   \   0000043C   0x464A             MOV      R2,R9
   \   0000043E   0xB2D2             UXTB     R2,R2
   \   00000440   0x4621             MOV      R1,R4
   \   00000442   0xF107 0x0028      ADD      R0,R7,#+40
   \   00000446   0x.... 0x....      BL       _Z13is_bitmap_setPjhh
   \   0000044A   0x2800             CMP      R0,#+0
   \   0000044C   0xF43F 0xAE30      BEQ.W    ??look_for_lines_to_connect_8
   \   00000450   0xF107 0x00A8      ADD      R0,R7,#+168
   \   00000454   0x9006             STR      R0,[SP, #+24]
   \   00000456   0x4632             MOV      R2,R6
   \   00000458   0x4621             MOV      R1,R4
   \   0000045A   0x.... 0x....      BL       _Z13is_bitmap_setPjhh
   \   0000045E   0x2800             CMP      R0,#+0
   \   00000460   0xF47F 0xAE26      BNE.W    ??look_for_lines_to_connect_8
   \   00000464   0xF895 0x0040      LDRB     R0,[R5, #+64]
   \   00000468   0xF105 0x0808      ADD      R8,R5,#+8
   \   0000046C   0x0701             LSLS     R1,R0,#+28
   \   0000046E   0xD568             BPL.N    ??look_for_lines_to_connect_29
   \   00000470   0xF8DF 0x9308      LDR.W    R9,??look_for_lines_to_connect_0+0x24
   \   00000474   0xF8DF 0xA308      LDR.W    R10,??look_for_lines_to_connect_0+0x28
   \   00000478   0xF8DA 0xB004      LDR      R11,[R10, #+4]
   \   0000047C   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \   00000480   0xFB00 0xB006      MLA      R0,R0,R6,R11
   \   00000484   0x1C80             ADDS     R0,R0,#+2
   \   00000486   0x.... 0x....      BL       __aeabi_i2f
   \   0000048A   0x9002             STR      R0,[SP, #+8]
   \   0000048C   0x1C70             ADDS     R0,R6,#+1
   \   0000048E   0xF8D9 0x1004      LDR      R1,[R9, #+4]
   \   00000492   0xFB01 0xB000      MLA      R0,R1,R0,R11
   \   00000496   0x1E80             SUBS     R0,R0,#+2
   \   00000498   0x.... 0x....      BL       __aeabi_i2f
   \   0000049C   0x9004             STR      R0,[SP, #+16]
   \   0000049E   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000004A2   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \   000004A6   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   000004AA   0x.... 0x....      BL       __aeabi_i2f
   \   000004AE   0x4681             MOV      R9,R0
   \   000004B0   0x68A8             LDR      R0,[R5, #+8]
   \   000004B2   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000004B6   0x.... 0x....      BL       __aeabi_fadd
   \   000004BA   0x4601             MOV      R1,R0
   \   000004BC   0x4648             MOV      R0,R9
   \   000004BE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000004C2   0xD201             BCS.N    ??look_for_lines_to_connect_30
   \   000004C4   0x4689             MOV      R9,R1
   \   000004C6   0xE009             B.N      ??look_for_lines_to_connect_31
   \                     ??look_for_lines_to_connect_30: (+1)
   \   000004C8   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   000004CC   0x49AD             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   000004CE   0x.... 0x....      BL       __aeabi_fadd
   \   000004D2   0x4649             MOV      R1,R9
   \   000004D4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000004D8   0xD200             BCS.N    ??look_for_lines_to_connect_31
   \   000004DA   0x4681             MOV      R9,R0
   \                     ??look_for_lines_to_connect_31: (+1)
   \   000004DC   0xF8CD 0x9014      STR      R9,[SP, #+20]
   \   000004E0   0xF8CD 0x900C      STR      R9,[SP, #+12]
   \   000004E4   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   000004E8   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000004EC   0x.... 0x....      BL       __aeabi_fadd
   \   000004F0   0x4601             MOV      R1,R0
   \   000004F2   0x9802             LDR      R0,[SP, #+8]
   \   000004F4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000004F8   0xD201             BCS.N    ??look_for_lines_to_connect_32
   \   000004FA   0x9102             STR      R1,[SP, #+8]
   \   000004FC   0xE009             B.N      ??look_for_lines_to_connect_33
   \                     ??look_for_lines_to_connect_32: (+1)
   \   000004FE   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   00000502   0x49A0             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   00000504   0x.... 0x....      BL       __aeabi_fadd
   \   00000508   0x9902             LDR      R1,[SP, #+8]
   \   0000050A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000050E   0xD200             BCS.N    ??look_for_lines_to_connect_33
   \   00000510   0x9002             STR      R0,[SP, #+8]
   \                     ??look_for_lines_to_connect_33: (+1)
   \   00000512   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000516   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000051A   0x.... 0x....      BL       __aeabi_fadd
   \   0000051E   0x4601             MOV      R1,R0
   \   00000520   0x9804             LDR      R0,[SP, #+16]
   \   00000522   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000526   0xF0C0 0x80C2      BCC.W    ??look_for_lines_to_connect_34
   \   0000052A   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   0000052E   0x4995             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   00000530   0x.... 0x....      BL       __aeabi_fadd
   \   00000534   0x9904             LDR      R1,[SP, #+16]
   \   00000536   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000053A   0xF080 0x80CA      BCS.W    ??look_for_lines_to_connect_35
   \   0000053E   0x9004             STR      R0,[SP, #+16]
   \   00000540   0xE0C7             B.N      ??look_for_lines_to_connect_35
   \                     ??look_for_lines_to_connect_29: (+1)
   \   00000542   0x06C1             LSLS     R1,R0,#+27
   \   00000544   0xD560             BPL.N    ??look_for_lines_to_connect_36
   \   00000546   0x4630             MOV      R0,R6
   \   00000548   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   0000054C   0xF04F 0x4180      MOV      R1,#+1073741824
   \   00000550   0x.... 0x....      BL       __aeabi_fadd
   \   00000554   0x9002             STR      R0,[SP, #+8]
   \   00000556   0x4648             MOV      R0,R9
   \   00000558   0xB2C0             UXTB     R0,R0
   \   0000055A   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   0000055E   0xF04F 0x4140      MOV      R1,#-1073741824
   \   00000562   0x.... 0x....      BL       __aeabi_fadd
   \   00000566   0x9004             STR      R0,[SP, #+16]
   \   00000568   0x4620             MOV      R0,R4
   \   0000056A   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000056E   0x4681             MOV      R9,R0
   \   00000570   0x68A8             LDR      R0,[R5, #+8]
   \   00000572   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000576   0x.... 0x....      BL       __aeabi_fadd
   \   0000057A   0x4602             MOV      R2,R0
   \   0000057C   0x4648             MOV      R0,R9
   \   0000057E   0x4611             MOV      R1,R2
   \   00000580   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000584   0xD311             BCC.N    ??look_for_lines_to_connect_37
   \   00000586   0x4620             MOV      R0,R4
   \   00000588   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   0000058C   0x4681             MOV      R9,R0
   \   0000058E   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   00000592   0x497C             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   00000594   0x.... 0x....      BL       __aeabi_fadd
   \   00000598   0x4602             MOV      R2,R0
   \   0000059A   0x4649             MOV      R1,R9
   \   0000059C   0x.... 0x....      BL       __aeabi_cfcmple
   \   000005A0   0xD303             BCC.N    ??look_for_lines_to_connect_37
   \   000005A2   0x4620             MOV      R0,R4
   \   000005A4   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000005A8   0x4602             MOV      R2,R0
   \                     ??look_for_lines_to_connect_37: (+1)
   \   000005AA   0x9205             STR      R2,[SP, #+20]
   \   000005AC   0x9203             STR      R2,[SP, #+12]
   \   000005AE   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   000005B2   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000005B6   0x.... 0x....      BL       __aeabi_fadd
   \   000005BA   0x4601             MOV      R1,R0
   \   000005BC   0x9802             LDR      R0,[SP, #+8]
   \   000005BE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000005C2   0xD201             BCS.N    ??look_for_lines_to_connect_38
   \   000005C4   0x9102             STR      R1,[SP, #+8]
   \   000005C6   0xE009             B.N      ??look_for_lines_to_connect_39
   \                     ??look_for_lines_to_connect_38: (+1)
   \   000005C8   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   000005CC   0x496D             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   000005CE   0x.... 0x....      BL       __aeabi_fadd
   \   000005D2   0x9902             LDR      R1,[SP, #+8]
   \   000005D4   0x.... 0x....      BL       __aeabi_cfcmple
   \   000005D8   0xD200             BCS.N    ??look_for_lines_to_connect_39
   \   000005DA   0x9002             STR      R0,[SP, #+8]
   \                     ??look_for_lines_to_connect_39: (+1)
   \   000005DC   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   000005E0   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000005E4   0x.... 0x....      BL       __aeabi_fadd
   \   000005E8   0x4601             MOV      R1,R0
   \   000005EA   0x9804             LDR      R0,[SP, #+16]
   \   000005EC   0x.... 0x....      BL       __aeabi_cfcmple
   \   000005F0   0xD35D             BCC.N    ??look_for_lines_to_connect_34
   \   000005F2   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   000005F6   0x4963             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   000005F8   0x.... 0x....      BL       __aeabi_fadd
   \   000005FC   0x9904             LDR      R1,[SP, #+16]
   \   000005FE   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000602   0xD266             BCS.N    ??look_for_lines_to_connect_35
   \   00000604   0x9004             STR      R0,[SP, #+16]
   \   00000606   0xE064             B.N      ??look_for_lines_to_connect_35
   \                     ??look_for_lines_to_connect_36: (+1)
   \   00000608   0x0680             LSLS     R0,R0,#+26
   \   0000060A   0xD562             BPL.N    ??look_for_lines_to_connect_35
   \   0000060C   0xF8DF 0x917C      LDR.W    R9,??look_for_lines_to_connect_0+0x34
   \   00000610   0xF859 0x0026      LDR      R0,[R9, R6, LSL #+2]
   \   00000614   0xF04F 0x4180      MOV      R1,#+1073741824
   \   00000618   0x.... 0x....      BL       __aeabi_fadd
   \   0000061C   0x9002             STR      R0,[SP, #+8]
   \   0000061E   0xEB09 0x0086      ADD      R0,R9,R6, LSL #+2
   \   00000622   0x6840             LDR      R0,[R0, #+4]
   \   00000624   0xF04F 0x4140      MOV      R1,#-1073741824
   \   00000628   0x.... 0x....      BL       __aeabi_fadd
   \   0000062C   0x9004             STR      R0,[SP, #+16]
   \   0000062E   0xF8DF 0x9158      LDR.W    R9,??look_for_lines_to_connect_0+0x30
   \   00000632   0xF859 0x9024      LDR      R9,[R9, R4, LSL #+2]
   \   00000636   0x68A8             LDR      R0,[R5, #+8]
   \   00000638   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000063C   0x.... 0x....      BL       __aeabi_fadd
   \   00000640   0x4601             MOV      R1,R0
   \   00000642   0x4648             MOV      R0,R9
   \   00000644   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000648   0xD201             BCS.N    ??look_for_lines_to_connect_40
   \   0000064A   0x4689             MOV      R9,R1
   \   0000064C   0xE009             B.N      ??look_for_lines_to_connect_41
   \                     ??look_for_lines_to_connect_40: (+1)
   \   0000064E   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \   00000652   0x494C             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   00000654   0x.... 0x....      BL       __aeabi_fadd
   \   00000658   0x4649             MOV      R1,R9
   \   0000065A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000065E   0xD200             BCS.N    ??look_for_lines_to_connect_41
   \   00000660   0x4681             MOV      R9,R0
   \                     ??look_for_lines_to_connect_41: (+1)
   \   00000662   0xF8CD 0x9014      STR      R9,[SP, #+20]
   \   00000666   0xF8CD 0x900C      STR      R9,[SP, #+12]
   \   0000066A   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   0000066E   0xF04F 0x517E      MOV      R1,#+1065353216
   \   00000672   0x.... 0x....      BL       __aeabi_fadd
   \   00000676   0x4601             MOV      R1,R0
   \   00000678   0x9802             LDR      R0,[SP, #+8]
   \   0000067A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000067E   0xD201             BCS.N    ??look_for_lines_to_connect_42
   \   00000680   0x9102             STR      R1,[SP, #+8]
   \   00000682   0xE009             B.N      ??look_for_lines_to_connect_43
   \                     ??look_for_lines_to_connect_42: (+1)
   \   00000684   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   00000688   0x493E             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   0000068A   0x.... 0x....      BL       __aeabi_fadd
   \   0000068E   0x9902             LDR      R1,[SP, #+8]
   \   00000690   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000694   0xD200             BCS.N    ??look_for_lines_to_connect_43
   \   00000696   0x9002             STR      R0,[SP, #+8]
   \                     ??look_for_lines_to_connect_43: (+1)
   \   00000698   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   0000069C   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000006A0   0x.... 0x....      BL       __aeabi_fadd
   \   000006A4   0x4601             MOV      R1,R0
   \   000006A6   0x9804             LDR      R0,[SP, #+16]
   \   000006A8   0x.... 0x....      BL       __aeabi_cfcmple
   \   000006AC   0xD207             BCS.N    ??look_for_lines_to_connect_44
   \                     ??look_for_lines_to_connect_34: (+1)
   \   000006AE   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   000006B2   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000006B6   0x.... 0x....      BL       __aeabi_fadd
   \   000006BA   0x9004             STR      R0,[SP, #+16]
   \   000006BC   0xE009             B.N      ??look_for_lines_to_connect_35
   \                     ??look_for_lines_to_connect_44: (+1)
   \   000006BE   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   000006C2   0x4930             LDR.N    R1,??look_for_lines_to_connect_0+0x2C  ;; 0xbf800000
   \   000006C4   0x.... 0x....      BL       __aeabi_fadd
   \   000006C8   0x9904             LDR      R1,[SP, #+16]
   \   000006CA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000006CE   0xD200             BCS.N    ??look_for_lines_to_connect_35
   \   000006D0   0x9004             STR      R0,[SP, #+16]
   \                     ??look_for_lines_to_connect_35: (+1)
   \   000006D2   0xF105 0x0040      ADD      R0,R5,#+64
   \   000006D6   0x8B00             LDRH     R0,[R0, #+24]
   \   000006D8   0xF240 0x3102      MOVW     R1,#+770
   \   000006DC   0x4208             TST      R0,R1
   \   000006DE   0xA902             ADD      R1,SP,#+8
   \   000006E0   0xA803             ADD      R0,SP,#+12
   \   000006E2   0xF43F 0xAC9F      BEQ.W    ??look_for_lines_to_connect_5
   \   000006E6   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   000006EA   0x2800             CMP      R0,#+0
   \   000006EC   0xF43F 0xACDB      BEQ.W    ??look_for_lines_to_connect_6
   \   000006F0   0xA904             ADD      R1,SP,#+16
   \   000006F2   0xA805             ADD      R0,SP,#+20
   \   000006F4   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   000006F8   0x2800             CMP      R0,#+0
   \   000006FA   0xF43F 0xACD4      BEQ.W    ??look_for_lines_to_connect_6
   \   000006FE   0x4818             LDR.N    R0,??look_for_lines_to_connect_0+0x8
   \   00000700   0x7800             LDRB     R0,[R0, #+0]
   \   00000702   0x2800             CMP      R0,#+0
   \   00000704   0xF43F 0xACC3      BEQ.W    ??look_for_lines_to_connect_7
   \   00000708   0x9903             LDR      R1,[SP, #+12]
   \   0000070A   0x4816             LDR.N    R0,??look_for_lines_to_connect_0+0xC
   \   0000070C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000710   0x9902             LDR      R1,[SP, #+8]
   \   00000712   0x4815             LDR.N    R0,??look_for_lines_to_connect_0+0x10
   \   00000714   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000718   0x9905             LDR      R1,[SP, #+20]
   \   0000071A   0x4814             LDR.N    R0,??look_for_lines_to_connect_0+0x14
   \   0000071C   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000720   0x9904             LDR      R1,[SP, #+16]
   \   00000722   0x4813             LDR.N    R0,??look_for_lines_to_connect_0+0x18
   \   00000724   0x.... 0x....      BL       _Z17serial_echopair_PPKcf
   \   00000728   0xF8DF 0x8048      LDR.W    R8,??look_for_lines_to_connect_0+0x1C
   \   0000072C   0x2129             MOVS     R1,#+41
   \   0000072E   0x4640             MOV      R0,R8
   \   00000730   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   00000734   0x210A             MOVS     R1,#+10
   \   00000736   0x4640             MOV      R0,R8
   \   00000738   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \   0000073C   0xF895 0x0040      LDRB     R0,[R5, #+64]
   \   00000740   0x06C0             LSLS     R0,R0,#+27
   \   00000742   0xF57F 0xACA4      BPL.W    ??look_for_lines_to_connect_7
   \   00000746   0x480C             LDR.N    R0,??look_for_lines_to_connect_0+0x20
   \   00000748   0x.... 0x....      BL       _Z29debug_current_and_destinationPKc
   \   0000074C   0xE49F             B.N      ??look_for_lines_to_connect_7
    581                        }
    582                      }
    583                    }
    584                  }
    585                }
    586              }
    587              return false;
   \                     ??look_for_lines_to_connect_3: (+1)
   \   0000074E   0x2000             MOVS     R0,#+0
   \   00000750   0xB007             ADD      SP,SP,#+28
   \   00000752   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \   00000756   0xBF00             Nop      
   \                     ??look_for_lines_to_connect_0:
   \   00000758   0x........         DC32     mksCfg
   \   0000075C   0x........         DC32     g26_retracted
   \   00000760   0x........         DC32     g26_debug_flag
   \   00000764   0x........         DC32     _ZZ25look_for_lines_to_connectvEs_3
   \   00000768   0x........         DC32     _ZZ25look_for_lines_to_connectvEs_0
   \   0000076C   0x........         DC32     _ZZ25look_for_lines_to_connectvEs_1
   \   00000770   0x........         DC32     _ZZ25look_for_lines_to_connectvEs_2
   \   00000774   0x........         DC32     Serial3
   \   00000778   0x........         DC32     _ZZ25look_for_lines_to_connectvEs_4
   \   0000077C   0x........         DC32     bilinear_grid_spacing
   \   00000780   0x........         DC32     bilinear_start
   \   00000784   0xBF800000         DC32     0xbf800000
   \   00000788   0x........         DC32     _ZN17mesh_bed_leveling13index_to_xposE
   \   0000078C   0x........         DC32     _ZN17mesh_bed_leveling13index_to_yposE
   \   00000790   0x........         DC32     _ZZ25look_for_lines_to_connectvEs
    588            }
    589          
    590            /**
    591             * Turn on the bed and nozzle heat and
    592             * wait for them to get up to temperature.
    593             */

   \                                 In section .text, align 4
    594            inline bool turn_on_heaters() {
   \                     _Z15turn_on_heatersv: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    595              millis_t next = millis() + 5000UL;
   \   00000002   0xF241 0x3488      MOVW     R4,#+5000
   \   00000006   0x.... 0x....      BL       HAL_GetTick
   \   0000000A   0x1826             ADDS     R6,R4,R0
    596              //#if HAS_TEMP_BED
    597              if(HAS_TEMP_BED)
   \   0000000C   0x4D2C             LDR.N    R5,??turn_on_heaters_0
   \   0000000E   0x482D             LDR.N    R0,??turn_on_heaters_0+0x4
   \   00000010   0xF890 0x0036      LDRB     R0,[R0, #+54]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD026             BEQ.N    ??turn_on_heaters_1
    598              {
    599                #if ENABLED(ULTRA_LCD)
    600                  if (g26_bed_temp > 25) {
    601                    lcd_setstatusPGM(PSTR("G26 Heating Bed."), 99);
    602                    lcd_quick_feedback();
    603                    lcd_external_control = true;
    604                #endif
    605                    thermalManager.setTargetBed(g26_bed_temp);
   \   00000018   0xF9B5 0x0002      LDRSH    R0,[R5, #+2]
   \   0000001C   0x.... 0x....      BL       __aeabi_i2f
   \   00000020   0x.... 0x....      BL       _ZN11Temperature12setTargetBedEf
   \   00000024   0xE00E             B.N      ??turn_on_heaters_2
    606                    while (abs(thermalManager.degBed() - g26_bed_temp) > 3) {
    607          
    608                      #if ENABLED(NEWPANEL)
    609                        if (is_lcd_clicked()) return exit_from_g26();
    610                      #endif
    611          
    612                      if (ELAPSED(millis(), next)) {
   \                     ??turn_on_heaters_3: (+1)
   \   00000026   0x.... 0x....      BL       HAL_GetTick
   \   0000002A   0x1B80             SUBS     R0,R0,R6
   \   0000002C   0xD408             BMI.N    ??turn_on_heaters_4
    613                        next = millis() + 5000UL;
   \   0000002E   0x.... 0x....      BL       HAL_GetTick
   \   00000032   0x1826             ADDS     R6,R4,R0
    614                        thermalManager.print_heaterstates();
   \   00000034   0x.... 0x....      BL       _ZN11Temperature18print_heaterstatesEv
    615                        SERIAL_EOL();
   \   00000038   0x210A             MOVS     R1,#+10
   \   0000003A   0x4823             LDR.N    R0,??turn_on_heaters_0+0x8
   \   0000003C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    616                      }
    617                      idle();
   \                     ??turn_on_heaters_4: (+1)
   \   00000040   0x.... 0x....      BL       _Z4idlev
    618                    }
   \                     ??turn_on_heaters_2: (+1)
   \   00000044   0x.... 0x....      BL       _ZN11Temperature6degBedEv
   \   00000048   0x4607             MOV      R7,R0
   \   0000004A   0xF9B5 0x0002      LDRSH    R0,[R5, #+2]
   \   0000004E   0x.... 0x....      BL       __aeabi_i2f
   \   00000052   0x4601             MOV      R1,R0
   \   00000054   0x4638             MOV      R0,R7
   \   00000056   0x.... 0x....      BL       __aeabi_fsub
   \   0000005A   0xF020 0x4000      BIC      R0,R0,#0x80000000
   \   0000005E   0x491B             LDR.N    R1,??turn_on_heaters_0+0xC  ;; 0x40400001
   \   00000060   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000064   0xD9DF             BLS.N    ??turn_on_heaters_3
    619                #if ENABLED(ULTRA_LCD)
    620                  }
    621                  lcd_setstatusPGM(PSTR("G26 Heating Nozzle."), 99);
    622                  lcd_quick_feedback();
    623                #endif
    624              }
    625              //#endif
    626          
    627              // Start heating the nozzle and wait for it to reach temperature.
    628              thermalManager.setTargetHotend(g26_hotend_temp, 0);
   \                     ??turn_on_heaters_1: (+1)
   \   00000066   0x2100             MOVS     R1,#+0
   \   00000068   0x460F             MOV      R7,R1
   \   0000006A   0xF9B5 0x0004      LDRSH    R0,[R5, #+4]
   \   0000006E   0x.... 0x....      BL       __aeabi_i2f
   \   00000072   0x4639             MOV      R1,R7
   \   00000074   0x.... 0x....      BL       _ZN11Temperature15setTargetHotendEfh
   \   00000078   0xE00E             B.N      ??turn_on_heaters_5
    629              while (abs(thermalManager.degHotend(0) - g26_hotend_temp) > 3) {
    630          
    631                #if ENABLED(NEWPANEL)
    632                  if (is_lcd_clicked()) return exit_from_g26();
    633                #endif
    634          
    635                if (ELAPSED(millis(), next)) {
   \                     ??turn_on_heaters_6: (+1)
   \   0000007A   0x.... 0x....      BL       HAL_GetTick
   \   0000007E   0x1B80             SUBS     R0,R0,R6
   \   00000080   0xD408             BMI.N    ??turn_on_heaters_7
    636                  next = millis() + 5000UL;
   \   00000082   0x.... 0x....      BL       HAL_GetTick
   \   00000086   0x1826             ADDS     R6,R4,R0
    637                  thermalManager.print_heaterstates();
   \   00000088   0x.... 0x....      BL       _ZN11Temperature18print_heaterstatesEv
    638                  SERIAL_EOL();
   \   0000008C   0x210A             MOVS     R1,#+10
   \   0000008E   0x480E             LDR.N    R0,??turn_on_heaters_0+0x8
   \   00000090   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    639                }
    640                idle();
   \                     ??turn_on_heaters_7: (+1)
   \   00000094   0x.... 0x....      BL       _Z4idlev
    641              }
   \                     ??turn_on_heaters_5: (+1)
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x.... 0x....      BL       _ZN11Temperature9degHotendEh
   \   0000009E   0x4607             MOV      R7,R0
   \   000000A0   0xF9B5 0x0004      LDRSH    R0,[R5, #+4]
   \   000000A4   0x.... 0x....      BL       __aeabi_i2f
   \   000000A8   0x4601             MOV      R1,R0
   \   000000AA   0x4638             MOV      R0,R7
   \   000000AC   0x.... 0x....      BL       __aeabi_fsub
   \   000000B0   0xF020 0x4000      BIC      R0,R0,#0x80000000
   \   000000B4   0x4905             LDR.N    R1,??turn_on_heaters_0+0xC  ;; 0x40400001
   \   000000B6   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000BA   0xD9DE             BLS.N    ??turn_on_heaters_6
    642          
    643              #if ENABLED(ULTRA_LCD)
    644                lcd_reset_status();
    645                lcd_quick_feedback();
    646              #endif
    647          
    648              return G26_OK;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??turn_on_heaters_0:
   \   000000C0   0x........         DC32     g26_retracted
   \   000000C4   0x........         DC32     mksCfg
   \   000000C8   0x........         DC32     Serial3
   \   000000CC   0x40400001         DC32     0x40400001
    649            }
    650          

   \                                 In section .text, align 2, keep-with-next
    651            float valid_trig_angle(float d) {
   \                     _Z16valid_trig_anglef: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xE003             B.N      ??valid_trig_angle_0
    652              while (d > 360.0) d -= 360.0;
   \                     ??valid_trig_angle_1: (+1)
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable24_9  ;; 0xc3b40000
   \   00000008   0x.... 0x....      BL       __aeabi_fadd
   \                     ??valid_trig_angle_0: (+1)
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable24_10  ;; 0x43b40001
   \   00000010   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000014   0xD9F6             BLS.N    ??valid_trig_angle_1
    653              while (d < 0.0) d += 360.0;
   \                     ??valid_trig_angle_2: (+1)
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000001C   0xD204             BCS.N    ??valid_trig_angle_3
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable24_11  ;; 0x43b40000
   \   00000022   0x.... 0x....      BL       __aeabi_fadd
   \   00000026   0xE7F6             B.N      ??valid_trig_angle_2
    654              return d;
   \                     ??valid_trig_angle_3: (+1)
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
    655            }
    656          
    657            /**
    658             * G26: Mesh Validation Pattern generation.
    659             *
    660             * Used to interactively edit the mesh by placing the
    661             * nozzle in a problem area and doing a G29 P4 R command.
    662             */

   \                                 In section .text, align 2, keep-with-next
    663            void gcode_G26() {
   \                     _Z9gcode_G26v: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A9             SUB      SP,SP,#+164
    664              SERIAL_ECHOLNPGM("G26 command started. Waiting for heater(s).");
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "G26 command started. ...">`
   \   0000000A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    665              float tmp, start_angle, end_angle;
    666              int   i, xi, yi;
    667              mesh_index_pair location;
    668          
    669              // Don't allow Mesh Validation without homing first,
    670              // or if the parameter parsing did not go OK, abort
    671              if (axis_unhomed_error()) return;
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x4611             MOV      R1,R2
   \   00000012   0x4608             MOV      R0,R1
   \   00000014   0x.... 0x....      BL       _Z18axis_unhomed_errorbbb
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xF040 0x842E      BNE.W    ??gcode_G26_0
    672          
    673              g26_extrusion_multiplier    = EXTRUSION_MULTIPLIER;
   \   0000001E   0x.... 0x....      LDR.W    R8,??DataTable24_8
   \   00000022   0xF04F 0x507E      MOV      R0,#+1065353216
   \   00000026   0xF8C8 0x0010      STR      R0,[R8, #+16]
    674              g26_retraction_multiplier   = RETRACTION_MULTIPLIER;
   \   0000002A   0xF8C8 0x0014      STR      R0,[R8, #+20]
    675              g26_layer_height            = MESH_TEST_LAYER_HEIGHT;
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable24_12  ;; 0x3e4ccccd
   \   00000032   0xF8C8 0x0018      STR      R0,[R8, #+24]
    676              g26_prime_length            = PRIME_LENGTH;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable24_13  ;; 0x41200000
   \   0000003A   0xF8C8 0x001C      STR      R0,[R8, #+28]
    677              g26_bed_temp                = MESH_TEST_BED_TEMP;
   \   0000003E   0x203C             MOVS     R0,#+60
   \   00000040   0xF8A8 0x0002      STRH     R0,[R8, #+2]
    678              g26_hotend_temp             = MESH_TEST_HOTEND_TEMP;
   \   00000044   0x20CD             MOVS     R0,#+205
   \   00000046   0xF8A8 0x0004      STRH     R0,[R8, #+4]
    679              g26_prime_flag              = 0;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xF888 0x0001      STRB     R0,[R8, #+1]
    680          
    681              float g26_nozzle            = MESH_TEST_NOZZLE_SIZE,
   \   00000050   0x.... 0x....      LDR.W    R6,??DataTable24_14  ;; 0x3ecccccd
    682                    g26_filament_diameter = DEFAULT_NOMINAL_FILAMENT_DIA,
   \   00000054   0x.... 0x....      LDR.W    R7,??DataTable24_15  ;; 0x40400000
    683                    g26_ooze_amount       = parser.linearval('O', OOZE_AMOUNT);
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable24_16  ;; 0x3e99999a
   \   0000005C   0x204F             MOVS     R0,#+79
   \   0000005E   0x.... 0x....      BL       _ZN11GCodeParser9linearvalEcf
   \   00000062   0x900D             STR      R0,[SP, #+52]
    684          
    685              bool g26_continue_with_closest = parser.boolval('C'),
   \   00000064   0x2043             MOVS     R0,#+67
   \   00000066   0x.... 0x....      BL       _ZN11GCodeParser7boolvalEc
   \   0000006A   0x900E             STR      R0,[SP, #+56]
    686                   g26_keep_heaters_on       = parser.boolval('K');
   \   0000006C   0x204B             MOVS     R0,#+75
   \   0000006E   0x.... 0x....      BL       _ZN11GCodeParser7boolvalEc
   \   00000072   0xF88D 0x000A      STRB     R0,[SP, #+10]
    687          
    688              if (parser.seenval('B')) {
   \   00000076   0x2042             MOVS     R0,#+66
   \   00000078   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD00F             BEQ.N    ??gcode_G26_1
    689                g26_bed_temp = parser.value_celsius();
                                    ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00000080   0x.... 0x....      BL       _ZN11GCodeParser13value_celsiusEv
   \   00000084   0x.... 0x....      BL       __aeabi_f2iz
   \   00000088   0xF8A8 0x0002      STRH     R0,[R8, #+2]
    690                if (!WITHIN(g26_bed_temp, 15, 140)) {
   \   0000008C   0xF9B8 0x0002      LDRSH    R0,[R8, #+2]
   \   00000090   0x380F             SUBS     R0,R0,#+15
   \   00000092   0x287E             CMP      R0,#+126
   \   00000094   0xD304             BCC.N    ??gcode_G26_1
    691                  SERIAL_PROTOCOLLNPGM("?Specified bed temperature not plausible.");
   \   00000096   0x.... 0x....      ADR.W    R0,`?<Constant "?Specified bed temper...">`
   \   0000009A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    692                  return;
   \   0000009E   0xE3EC             B.N      ??gcode_G26_0
    693                }
    694              }
    695          
    696              if (parser.seenval('L')) {
   \                     ??gcode_G26_1: (+1)
   \   000000A0   0x204C             MOVS     R0,#+76
   \   000000A2   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD011             BEQ.N    ??gcode_G26_2
    697                g26_layer_height = parser.value_linear_units();
   \   000000AA   0x.... 0x....      BL       _ZN11GCodeParser18value_linear_unitsEv
   \   000000AE   0xF8C8 0x0018      STR      R0,[R8, #+24]
    698                if (!WITHIN(g26_layer_height, 0.0, 2.0)) {
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000B8   0xD804             BHI.N    ??gcode_G26_3
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable24_6  ;; 0x40000001
   \   000000BE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000C2   0xD304             BCC.N    ??gcode_G26_2
    699                  SERIAL_PROTOCOLLNPGM("?Specified layer height not plausible.");
   \                     ??gcode_G26_3: (+1)
   \   000000C4   0x.... 0x....      ADR.W    R0,`?<Constant "?Specified layer heig...">`
   \   000000C8   0x.... 0x....      BL       _Z14serialprintPGMPKc
    700                  return;
   \   000000CC   0xE3D5             B.N      ??gcode_G26_0
    701                }
    702              }
    703          
    704              if (parser.seen('Q')) {
   \                     ??gcode_G26_2: (+1)
   \   000000CE   0x2051             MOVS     R0,#+81
   \   000000D0   0x.... 0x....      BL       _ZN11GCodeParser4seenEc
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD01B             BEQ.N    ??gcode_G26_4
    705                if (parser.has_value()) {
   \   000000D8   0x.... 0x....      BL       _ZN11GCodeParser9has_valueEv
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD012             BEQ.N    ??gcode_G26_5
    706                  g26_retraction_multiplier = parser.value_float();
   \   000000E0   0x.... 0x....      BL       _ZN11GCodeParser11value_floatEv
   \   000000E4   0xF8C8 0x0014      STR      R0,[R8, #+20]
    707                  if (!WITHIN(g26_retraction_multiplier, 0.05, 15.0)) {
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable24_17  ;; 0x3d4ccccd
   \   000000EC   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000F0   0xD804             BHI.N    ??gcode_G26_6
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable24_18  ;; 0x41700001
   \   000000F6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000FA   0xD309             BCC.N    ??gcode_G26_4
    708                    SERIAL_PROTOCOLLNPGM("?Specified Retraction Multiplier not plausible.");
   \                     ??gcode_G26_6: (+1)
   \   000000FC   0x.... 0x....      ADR.W    R0,`?<Constant "?Specified Retraction...">`
   \   00000100   0x.... 0x....      BL       _Z14serialprintPGMPKc
    709                    return;
   \   00000104   0xE3B9             B.N      ??gcode_G26_0
    710                  }
    711                }
    712                else {
    713                  SERIAL_PROTOCOLLNPGM("?Retraction Multiplier must be specified.");
   \                     ??gcode_G26_5: (+1)
   \   00000106   0x.... 0x....      ADR.W    R0,`?<Constant "?Retraction Multiplie...">`
   \   0000010A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    714                  return;
   \   0000010E   0xE3B4             B.N      ??gcode_G26_0
    715                }
    716              }
    717          
    718              if (parser.seenval('S')) {
   \                     ??gcode_G26_4: (+1)
   \   00000110   0x2053             MOVS     R0,#+83
   \   00000112   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   00000116   0x2800             CMP      R0,#+0
   \   00000118   0xD011             BEQ.N    ??gcode_G26_7
    719                g26_nozzle = parser.value_float();
   \   0000011A   0x.... 0x....      BL       _ZN11GCodeParser11value_floatEv
   \   0000011E   0x4606             MOV      R6,R0
    720                if (!WITHIN(g26_nozzle, 0.1, 1.0)) {
   \   00000120   0x.... 0x....      LDR.W    R1,??DataTable24_19  ;; 0x3dcccccd
   \   00000124   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000128   0xD804             BHI.N    ??gcode_G26_8
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable24_20  ;; 0x3f800001
   \   0000012E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000132   0xD304             BCC.N    ??gcode_G26_7
    721                  SERIAL_PROTOCOLLNPGM("?Specified nozzle size not plausible.");
   \                     ??gcode_G26_8: (+1)
   \   00000134   0x.... 0x....      ADR.W    R0,`?<Constant "?Specified nozzle siz...">`
   \   00000138   0x.... 0x....      BL       _Z14serialprintPGMPKc
    722                  return;
   \   0000013C   0xE39D             B.N      ??gcode_G26_0
    723                }
    724              }
    725          
    726              if (parser.seen('P')) {
   \                     ??gcode_G26_7: (+1)
   \   0000013E   0x2050             MOVS     R0,#+80
   \   00000140   0x.... 0x....      BL       _ZN11GCodeParser4seenEc
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD01F             BEQ.N    ??gcode_G26_9
    727                if (!parser.has_value()) {
   \   00000148   0x.... 0x....      BL       _ZN11GCodeParser9has_valueEv
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD104             BNE.N    ??gcode_G26_10
    728                  #if ENABLED(NEWPANEL)
    729                    g26_prime_flag = -1;
    730                  #else
    731                    SERIAL_PROTOCOLLNPGM("?Prime length must be specified when not using an LCD.");
   \   00000150   0x.... 0x....      ADR.W    R0,`?<Constant "?Prime length must be...">`
   \   00000154   0x.... 0x....      BL       _Z14serialprintPGMPKc
    732                    return;
   \   00000158   0xE38F             B.N      ??gcode_G26_0
    733                  #endif
    734                }
    735                else {
    736                  g26_prime_flag++;
   \                     ??gcode_G26_10: (+1)
   \   0000015A   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \   0000015E   0x1C40             ADDS     R0,R0,#+1
   \   00000160   0xF888 0x0001      STRB     R0,[R8, #+1]
    737                  g26_prime_length = parser.value_linear_units();
   \   00000164   0x.... 0x....      BL       _ZN11GCodeParser18value_linear_unitsEv
   \   00000168   0xF8C8 0x001C      STR      R0,[R8, #+28]
    738                  if (!WITHIN(g26_prime_length, 0.0, 25.0)) {
   \   0000016C   0x2100             MOVS     R1,#+0
   \   0000016E   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000172   0xD804             BHI.N    ??gcode_G26_11
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable24_21  ;; 0x41c80001
   \   00000178   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000017C   0xD304             BCC.N    ??gcode_G26_9
    739                    SERIAL_PROTOCOLLNPGM("?Specified prime length not plausible.");
   \                     ??gcode_G26_11: (+1)
   \   0000017E   0x.... 0x....      ADR.W    R0,`?<Constant "?Specified prime leng...">`
   \   00000182   0x.... 0x....      BL       _Z14serialprintPGMPKc
    740                    return;
   \   00000186   0xE378             B.N      ??gcode_G26_0
    741                  }
    742                }
    743              }
    744          
    745              if (parser.seenval('F')) {
   \                     ??gcode_G26_9: (+1)
   \   00000188   0x2046             MOVS     R0,#+70
   \   0000018A   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   0000018E   0x2800             CMP      R0,#+0
   \   00000190   0xD011             BEQ.N    ??gcode_G26_12
    746                g26_filament_diameter = parser.value_linear_units();
   \   00000192   0x.... 0x....      BL       _ZN11GCodeParser18value_linear_unitsEv
   \   00000196   0x4607             MOV      R7,R0
    747                if (!WITHIN(g26_filament_diameter, 1.0, 4.0)) {
   \   00000198   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000019C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000001A0   0xD804             BHI.N    ??gcode_G26_13
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable24_22  ;; 0x40800001
   \   000001A6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001AA   0xD304             BCC.N    ??gcode_G26_12
    748                  SERIAL_PROTOCOLLNPGM("?Specified filament size not plausible.");
   \                     ??gcode_G26_13: (+1)
   \   000001AC   0x.... 0x....      ADR.W    R0,`?<Constant "?Specified filament s...">`
   \   000001B0   0x.... 0x....      BL       _Z14serialprintPGMPKc
    749                  return;
   \   000001B4   0xE361             B.N      ??gcode_G26_0
    750                }
    751              }
    752              g26_extrusion_multiplier *= sq(1.75) / sq(g26_filament_diameter); // If we aren't using 1.75mm filament, we need to
   \                     ??gcode_G26_12: (+1)
   \   000001B6   0xF04F 0x0A00      MOV      R10,#+0
   \   000001BA   0x.... 0x....      LDR.W    R11,??DataTable24_23  ;; 0x3ffc0000
   \   000001BE   0xF04F 0x0902      MOV      R9,#+2
   \   000001C2   0x4654             MOV      R4,R10
   \   000001C4   0x.... 0x....      LDR.W    R5,??DataTable24_24  ;; 0x3ff00000
   \   000001C8   0xE007             B.N      ??gcode_G26_14
   \                     ??gcode_G26_15: (+1)
   \   000001CA   0x4650             MOV      R0,R10
   \   000001CC   0x4659             MOV      R1,R11
   \   000001CE   0x4652             MOV      R2,R10
   \   000001D0   0x465B             MOV      R3,R11
   \   000001D2   0x.... 0x....      BL       __aeabi_dmul
   \   000001D6   0x4682             MOV      R10,R0
   \   000001D8   0x468B             MOV      R11,R1
   \                     ??gcode_G26_14: (+1)
   \   000001DA   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   000001DE   0xD507             BPL.N    ??gcode_G26_16
   \   000001E0   0x4652             MOV      R2,R10
   \   000001E2   0x465B             MOV      R3,R11
   \   000001E4   0x4620             MOV      R0,R4
   \   000001E6   0x4629             MOV      R1,R5
   \   000001E8   0x.... 0x....      BL       __aeabi_dmul
   \   000001EC   0x4604             MOV      R4,R0
   \   000001EE   0x460D             MOV      R5,R1
   \                     ??gcode_G26_16: (+1)
   \   000001F0   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   000001F4   0xD1E9             BNE.N    ??gcode_G26_15
   \   000001F6   0x46BB             MOV      R11,R7
   \   000001F8   0xF04F 0x0A02      MOV      R10,#+2
   \   000001FC   0xF04F 0x597E      MOV      R9,#+1065353216
   \   00000200   0xE004             B.N      ??gcode_G26_17
   \                     ??gcode_G26_18: (+1)
   \   00000202   0x4658             MOV      R0,R11
   \   00000204   0x4659             MOV      R1,R11
   \   00000206   0x.... 0x....      BL       __aeabi_fmul
   \   0000020A   0x4683             MOV      R11,R0
   \                     ??gcode_G26_17: (+1)
   \   0000020C   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   00000210   0xD504             BPL.N    ??gcode_G26_19
   \   00000212   0x4648             MOV      R0,R9
   \   00000214   0x4659             MOV      R1,R11
   \   00000216   0x.... 0x....      BL       __aeabi_fmul
   \   0000021A   0x4681             MOV      R9,R0
   \                     ??gcode_G26_19: (+1)
   \   0000021C   0xEA5F 0x0A5A      LSRS     R10,R10,#+1
   \   00000220   0xD1EF             BNE.N    ??gcode_G26_18
   \   00000222   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   00000226   0x.... 0x....      BL       __aeabi_f2d
   \   0000022A   0x4682             MOV      R10,R0
   \   0000022C   0x468B             MOV      R11,R1
   \   0000022E   0x4648             MOV      R0,R9
   \   00000230   0x.... 0x....      BL       __aeabi_f2d
   \   00000234   0x4602             MOV      R2,R0
   \   00000236   0x460B             MOV      R3,R1
   \   00000238   0x4620             MOV      R0,R4
   \   0000023A   0x4629             MOV      R1,R5
   \   0000023C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000240   0x4652             MOV      R2,R10
   \   00000242   0x465B             MOV      R3,R11
   \   00000244   0x.... 0x....      BL       __aeabi_dmul
   \   00000248   0x.... 0x....      BL       __aeabi_d2f
   \   0000024C   0xF8C8 0x0010      STR      R0,[R8, #+16]
    753                                                                                // scale up or down the length needed to get the
    754                                                                                // same volume of filament
    755          
    756              g26_extrusion_multiplier *= g26_filament_diameter * sq(g26_nozzle) / sq(0.3); // Scale up by nozzle size
   \   00000250   0x4634             MOV      R4,R6
   \   00000252   0x2502             MOVS     R5,#+2
   \   00000254   0xF04F 0x567E      MOV      R6,#+1065353216
   \   00000258   0xE004             B.N      ??gcode_G26_20
   \                     ??gcode_G26_21: (+1)
   \   0000025A   0x4620             MOV      R0,R4
   \   0000025C   0x4621             MOV      R1,R4
   \   0000025E   0x.... 0x....      BL       __aeabi_fmul
   \   00000262   0x4604             MOV      R4,R0
   \                     ??gcode_G26_20: (+1)
   \   00000264   0x07E8             LSLS     R0,R5,#+31
   \   00000266   0xD504             BPL.N    ??gcode_G26_22
   \   00000268   0x4630             MOV      R0,R6
   \   0000026A   0x4621             MOV      R1,R4
   \   0000026C   0x.... 0x....      BL       __aeabi_fmul
   \   00000270   0x4606             MOV      R6,R0
   \                     ??gcode_G26_22: (+1)
   \   00000272   0x086D             LSRS     R5,R5,#+1
   \   00000274   0xD1F1             BNE.N    ??gcode_G26_21
   \   00000276   0xF04F 0x3A33      MOV      R10,#+858993459
   \   0000027A   0x.... 0x....      LDR.W    R11,??DataTable24_25  ;; 0x3fd33333
   \   0000027E   0xF04F 0x0902      MOV      R9,#+2
   \   00000282   0x2400             MOVS     R4,#+0
   \   00000284   0x.... 0x....      LDR.W    R5,??DataTable24_24  ;; 0x3ff00000
   \   00000288   0xE007             B.N      ??gcode_G26_23
   \                     ??gcode_G26_24: (+1)
   \   0000028A   0x4650             MOV      R0,R10
   \   0000028C   0x4659             MOV      R1,R11
   \   0000028E   0x4652             MOV      R2,R10
   \   00000290   0x465B             MOV      R3,R11
   \   00000292   0x.... 0x....      BL       __aeabi_dmul
   \   00000296   0x4682             MOV      R10,R0
   \   00000298   0x468B             MOV      R11,R1
   \                     ??gcode_G26_23: (+1)
   \   0000029A   0xEA5F 0x70C9      LSLS     R0,R9,#+31
   \   0000029E   0xD507             BPL.N    ??gcode_G26_25
   \   000002A0   0x4652             MOV      R2,R10
   \   000002A2   0x465B             MOV      R3,R11
   \   000002A4   0x4620             MOV      R0,R4
   \   000002A6   0x4629             MOV      R1,R5
   \   000002A8   0x.... 0x....      BL       __aeabi_dmul
   \   000002AC   0x4604             MOV      R4,R0
   \   000002AE   0x460D             MOV      R5,R1
   \                     ??gcode_G26_25: (+1)
   \   000002B0   0xEA5F 0x0959      LSRS     R9,R9,#+1
   \   000002B4   0xD1E9             BNE.N    ??gcode_G26_24
   \   000002B6   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   000002BA   0x.... 0x....      BL       __aeabi_f2d
   \   000002BE   0x4682             MOV      R10,R0
   \   000002C0   0x468B             MOV      R11,R1
   \   000002C2   0x4638             MOV      R0,R7
   \   000002C4   0x4631             MOV      R1,R6
   \   000002C6   0x.... 0x....      BL       __aeabi_fmul
   \   000002CA   0x.... 0x....      BL       __aeabi_f2d
   \   000002CE   0x4622             MOV      R2,R4
   \   000002D0   0x462B             MOV      R3,R5
   \   000002D2   0x.... 0x....      BL       __aeabi_ddiv
   \   000002D6   0x4652             MOV      R2,R10
   \   000002D8   0x465B             MOV      R3,R11
   \   000002DA   0x.... 0x....      BL       __aeabi_dmul
   \   000002DE   0x.... 0x....      BL       __aeabi_d2f
   \   000002E2   0xF8C8 0x0010      STR      R0,[R8, #+16]
    757          
    758              if (parser.seenval('H')) {
   \   000002E6   0x2048             MOVS     R0,#+72
   \   000002E8   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   000002EC   0x2800             CMP      R0,#+0
   \   000002EE   0xD00F             BEQ.N    ??gcode_G26_26
    759                g26_hotend_temp = parser.value_celsius();
                                       ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   000002F0   0x.... 0x....      BL       _ZN11GCodeParser13value_celsiusEv
   \   000002F4   0x.... 0x....      BL       __aeabi_f2iz
   \   000002F8   0xF8A8 0x0004      STRH     R0,[R8, #+4]
    760                if (!WITHIN(g26_hotend_temp, 165, 280)) {
   \   000002FC   0xF9B8 0x0004      LDRSH    R0,[R8, #+4]
   \   00000300   0x38A5             SUBS     R0,R0,#+165
   \   00000302   0x2874             CMP      R0,#+116
   \   00000304   0xD304             BCC.N    ??gcode_G26_26
    761                  SERIAL_PROTOCOLLNPGM("?Specified nozzle temperature not plausible.");
   \   00000306   0x.... 0x....      ADR.W    R0,`?<Constant "?Specified nozzle tem...">`
   \   0000030A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    762                  return;
   \   0000030E   0xE2B4             B.N      ??gcode_G26_0
    763                }
    764              }
    765          
    766              if (parser.seen('U')) {
   \                     ??gcode_G26_26: (+1)
   \   00000310   0x2055             MOVS     R0,#+85
   \   00000312   0x.... 0x....      BL       _ZN11GCodeParser4seenEc
   \   00000316   0x2800             CMP      R0,#+0
   \   00000318   0xD00E             BEQ.N    ??gcode_G26_27
    767                //randomSeed(millis());
    768                srand(millis());
   \   0000031A   0x.... 0x....      BL       HAL_GetTick
   \   0000031E   0x.... 0x....      BL       srand
    769                // This setting will persist for the next G26
    770                random_deviation = parser.has_value() ? parser.value_float() : 50.0;
   \   00000322   0x.... 0x....      BL       _ZN11GCodeParser9has_valueEv
   \   00000326   0x2800             CMP      R0,#+0
   \   00000328   0xD002             BEQ.N    ??gcode_G26_28
   \   0000032A   0x.... 0x....      BL       _ZN11GCodeParser11value_floatEv
   \   0000032E   0xE001             B.N      ??gcode_G26_29
   \                     ??gcode_G26_28: (+1)
   \   00000330   0x.... 0x....      LDR.W    R0,??DataTable24_26  ;; 0x42480000
   \                     ??gcode_G26_29: (+1)
   \   00000334   0xF8C8 0x000C      STR      R0,[R8, #+12]
    771              }
    772          
    773              int16_t g26_repeats;
    774              #if ENABLED(NEWPANEL)
    775                g26_repeats = parser.intval('R', GRID_MAX_POINTS + 1);
    776              #else
    777                if (!parser.seen('R')) {
   \                     ??gcode_G26_27: (+1)
   \   00000338   0x2052             MOVS     R0,#+82
   \   0000033A   0x.... 0x....      BL       _ZN11GCodeParser4seenEc
   \   0000033E   0x2800             CMP      R0,#+0
   \   00000340   0xD104             BNE.N    ??gcode_G26_30
    778                  SERIAL_PROTOCOLLNPGM("?(R)epeat must be specified when not using an LCD.");
   \   00000342   0x.... 0x....      ADR.W    R0,`?<Constant "?(R)epeat must be spe...">`
   \   00000346   0x.... 0x....      BL       _Z14serialprintPGMPKc
    779                  return;
   \   0000034A   0xE296             B.N      ??gcode_G26_0
    780                }
    781                else
    782                  g26_repeats = parser.has_value() ? parser.value_int() : GRID_MAX_POINTS + 1;
   \                     ??gcode_G26_30: (+1)
   \   0000034C   0x.... 0x....      BL       _ZN11GCodeParser9has_valueEv
   \   00000350   0x2800             CMP      R0,#+0
   \   00000352   0xD002             BEQ.N    ??gcode_G26_31
   \   00000354   0x.... 0x....      BL       _ZN11GCodeParser9value_intEv
   \   00000358   0xE008             B.N      ??gcode_G26_32
   \                     ??gcode_G26_31: (+1)
   \   0000035A   0x.... 0x....      LDR.W    R10,??DataTable24_27
   \   0000035E   0xF89A 0x0060      LDRB     R0,[R10, #+96]
   \   00000362   0xF10A 0x0160      ADD      R1,R10,#+96
   \   00000366   0x7849             LDRB     R1,[R1, #+1]
   \   00000368   0x4348             MULS     R0,R1,R0
   \   0000036A   0x1C40             ADDS     R0,R0,#+1
   \                     ??gcode_G26_32: (+1)
   \   0000036C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    783              #endif
    784              if (g26_repeats < 1) {
   \   00000370   0xF9BD 0x0008      LDRSH    R0,[SP, #+8]
   \   00000374   0x2801             CMP      R0,#+1
   \   00000376   0xDA04             BGE.N    ??gcode_G26_33
    785                SERIAL_PROTOCOLLNPGM("?(R)epeat value not plausible; must be at least 1.");
   \   00000378   0x.... 0x....      ADR.W    R0,`?<Constant "?(R)epeat value not p...">`
   \   0000037C   0x.... 0x....      BL       _Z14serialprintPGMPKc
    786                return;
   \   00000380   0xE27B             B.N      ??gcode_G26_0
    787              }
    788          
    789              g26_x_pos = parser.seenval('X') ? RAW_X_POSITION(parser.value_linear_units()) : current_position[X_AXIS];
   \                     ??gcode_G26_33: (+1)
   \   00000382   0x2058             MOVS     R0,#+88
   \   00000384   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   00000388   0x2800             CMP      R0,#+0
   \   0000038A   0xD009             BEQ.N    ??gcode_G26_34
   \   0000038C   0x.... 0x....      BL       _ZN11GCodeParser18value_linear_unitsEv
   \   00000390   0x.... 0x....      LDR.W    R1,??DataTable24_28
   \   00000394   0x6809             LDR      R1,[R1, #+0]
   \   00000396   0x.... 0x....      BL       __aeabi_fsub
   \   0000039A   0xF8C8 0x0020      STR      R0,[R8, #+32]
   \   0000039E   0xE004             B.N      ??gcode_G26_35
   \                     ??gcode_G26_34: (+1)
   \   000003A0   0x.... 0x....      LDR.W    R0,??DataTable24_29
   \   000003A4   0x6800             LDR      R0,[R0, #+0]
   \   000003A6   0xF8C8 0x0020      STR      R0,[R8, #+32]
    790              g26_y_pos = parser.seenval('Y') ? RAW_Y_POSITION(parser.value_linear_units()) : current_position[Y_AXIS];
   \                     ??gcode_G26_35: (+1)
   \   000003AA   0x2059             MOVS     R0,#+89
   \   000003AC   0x.... 0x....      BL       _ZN11GCodeParser7seenvalEc
   \   000003B0   0x2800             CMP      R0,#+0
   \   000003B2   0xD009             BEQ.N    ??gcode_G26_36
   \   000003B4   0x.... 0x....      BL       _ZN11GCodeParser18value_linear_unitsEv
   \   000003B8   0x.... 0x....      LDR.W    R1,??DataTable24_28
   \   000003BC   0x6849             LDR      R1,[R1, #+4]
   \   000003BE   0x.... 0x....      BL       __aeabi_fsub
   \   000003C2   0xF8C8 0x0024      STR      R0,[R8, #+36]
   \   000003C6   0xE004             B.N      ??gcode_G26_37
   \                     ??gcode_G26_36: (+1)
   \   000003C8   0x.... 0x....      LDR.W    R0,??DataTable24_29
   \   000003CC   0x6840             LDR      R0,[R0, #+4]
   \   000003CE   0xF8C8 0x0024      STR      R0,[R8, #+36]
    791              if(MACHINETPYE & IS_KINEMATIC)
   \                     ??gcode_G26_37: (+1)
   \   000003D2   0x.... 0x....      LDR.W    R10,??DataTable24_27
   \   000003D6   0xF20A 0x0036      ADDW     R0,R10,#+54
   \   000003DA   0x900A             STR      R0,[SP, #+40]
   \   000003DC   0x8C40             LDRH     R0,[R0, #+34]
   \   000003DE   0xF240 0x3102      MOVW     R1,#+770
   \   000003E2   0x4208             TST      R0,R1
   \   000003E4   0xF108 0x0124      ADD      R1,R8,#+36
   \   000003E8   0xF108 0x0020      ADD      R0,R8,#+32
   \   000003EC   0xD05D             BEQ.N    ??gcode_G26_38
    792              {
    793                  if (!position_is_reachable_IS_KINEMATIC(g26_x_pos, g26_y_pos)) {
   \   000003EE   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   000003F2   0x2800             CMP      R0,#+0
   \   000003F4   0xD05D             BEQ.N    ??gcode_G26_39
    794                    SERIAL_PROTOCOLLNPGM("?Specified X,Y coordinate out of bounds.");
    795                    return;
    796                  }
    797              }
    798              else
    799              {
    800                  if (!position_is_reachable_IS_CARTESIAN(g26_x_pos, g26_y_pos)) {
    801                    SERIAL_PROTOCOLLNPGM("?Specified X,Y coordinate out of bounds.");
    802                    return;
    803                  }        
    804              }
    805          
    806              /**
    807               * Wait until all parameters are verified before altering the state!
    808               */
    809              set_bed_leveling_enabled(!parser.seen('D'));
   \                     ??gcode_G26_40: (+1)
   \   000003F6   0x2044             MOVS     R0,#+68
   \   000003F8   0x.... 0x....      BL       _ZN11GCodeParser4seenEc
   \   000003FC   0xF080 0x0001      EOR      R0,R0,#0x1
   \   00000400   0x.... 0x....      BL       _Z24set_bed_leveling_enabledb
    810          
    811              if (current_position[Z_AXIS] < Z_CLEARANCE_BETWEEN_PROBES) {
   \   00000404   0xF10A 0x0060      ADD      R0,R10,#+96
   \   00000408   0x9009             STR      R0,[SP, #+36]
   \   0000040A   0x.... 0x....      LDR.W    R0,??DataTable24_29
   \   0000040E   0x6880             LDR      R0,[R0, #+8]
   \   00000410   0x9909             LDR      R1,[SP, #+36]
   \   00000412   0x6889             LDR      R1,[R1, #+8]
   \   00000414   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000418   0xD20A             BCS.N    ??gcode_G26_41
    812                do_blocking_move_to_z(Z_CLEARANCE_BETWEEN_PROBES);
   \   0000041A   0x2000             MOVS     R0,#+0
   \   0000041C   0x9000             STR      R0,[SP, #+0]
   \   0000041E   0xA900             ADD      R1,SP,#+0
   \   00000420   0xF10A 0x0068      ADD      R0,R10,#+104
   \   00000424   0x.... 0x....      BL       _Z21do_blocking_move_to_zRKfS0_
    813                stepper.synchronize();
   \   00000428   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
    814                set_current_from_destination();
   \   0000042C   0x.... 0x....      BL       _Z28set_current_from_destinationv
    815              }
    816          
    817              if (turn_on_heaters() != G26_OK) goto LEAVE;
   \                     ??gcode_G26_41: (+1)
   \   00000430   0x.... 0x....      BL       _Z15turn_on_heatersv
   \   00000434   0x2800             CMP      R0,#+0
   \   00000436   0xF040 0x81F2      BNE.W    ??gcode_G26_42
    818          
    819              current_position[E_AXIS] = 0.0;
   \   0000043A   0x2000             MOVS     R0,#+0
   \   0000043C   0x.... 0x....      LDR.W    R1,??DataTable24_29
   \   00000440   0x60C8             STR      R0,[R1, #+12]
    820              sync_plan_position_e();
   \   00000442   0x.... 0x....      BL       _Z20sync_plan_position_ev
    821          
    822              if (g26_prime_flag && prime_nozzle() != G26_OK) goto LEAVE;
   \   00000446   0xF998 0x0001      LDRSB    R0,[R8, #+1]
   \   0000044A   0x2800             CMP      R0,#+0
   \   0000044C   0xD004             BEQ.N    ??gcode_G26_43
   \   0000044E   0x.... 0x....      BL       _Z12prime_nozzlev
   \   00000452   0x2800             CMP      R0,#+0
   \   00000454   0xF040 0x81E3      BNE.W    ??gcode_G26_42
    823          
    824              /**
    825               *  Bed is preheated
    826               *
    827               *  Nozzle is at temperature
    828               *
    829               *  Filament is primed!
    830               *
    831               *  It's  "Show Time" !!!
    832               */
    833          
    834              ZERO(circle_flags);
   \                     ??gcode_G26_43: (+1)
   \   00000458   0x2240             MOVS     R2,#+64
   \   0000045A   0x2100             MOVS     R1,#+0
   \   0000045C   0xF108 0x0028      ADD      R0,R8,#+40
   \   00000460   0x.... 0x....      BL       memset
    835              ZERO(horizontal_mesh_line_flags);
   \   00000464   0x2240             MOVS     R2,#+64
   \   00000466   0x2100             MOVS     R1,#+0
   \   00000468   0xF108 0x0068      ADD      R0,R8,#+104
   \   0000046C   0x.... 0x....      BL       memset
    836              ZERO(vertical_mesh_line_flags);
   \   00000470   0x2240             MOVS     R2,#+64
   \   00000472   0x2100             MOVS     R1,#+0
   \   00000474   0xF108 0x00A8      ADD      R0,R8,#+168
   \   00000478   0x.... 0x....      BL       memset
    837          
    838              // Move nozzle to the specified height for the first layer
    839              set_destination_from_current();
   \   0000047C   0x.... 0x....      BL       _Z28set_destination_from_currentv
    840              destination[Z_AXIS] = g26_layer_height;
   \   00000480   0x.... 0x....      LDR.W    R4,??DataTable24_30
   \   00000484   0xF8D8 0x0018      LDR      R0,[R8, #+24]
   \   00000488   0x60A0             STR      R0,[R4, #+8]
    841              move_to(destination, 0.0);
   \   0000048A   0x2000             MOVS     R0,#+0
   \   0000048C   0x9000             STR      R0,[SP, #+0]
   \   0000048E   0xA900             ADD      R1,SP,#+0
   \   00000490   0x4620             MOV      R0,R4
   \   00000492   0x.... 0x....      BL       _Z7move_toPKfRS_
    842              move_to(destination, g26_ooze_amount);
   \   00000496   0xA90D             ADD      R1,SP,#+52
   \   00000498   0x4620             MOV      R0,R4
   \   0000049A   0x.... 0x....      BL       _Z7move_toPKfRS_
    843          
    844              #if ENABLED(ULTRA_LCD)
    845                lcd_external_control = true;
    846              #endif
    847          
    848              //debug_current_and_destination(PSTR("Starting G26 Mesh Validation Pattern."));
    849          
    850              /**
    851               * Declare and generate a sin() & cos() table to be used during the circle drawing. This will lighten
    852               * the CPU load and make the arc drawing faster and more smooth
    853               */
    854              float sin_table[360 / 30 + 1], cos_table[360 / 30 + 1];
    855              for (i = 0; i <= 360 / 30; i++) {
   \   0000049E   0x2600             MOVS     R6,#+0
   \   000004A0   0x.... 0x....      LDR.W    R4,??DataTable24_31  ;; 0x54442d18
   \   000004A4   0x.... 0x....      LDR.W    R5,??DataTable24_32  ;; 0x400921fb
   \   000004A8   0xE047             B.N      ??gcode_G26_44
   \                     ??gcode_G26_38: (+1)
   \   000004AA   0x.... 0x....      BL       _Z34position_is_reachable_IS_CARTESIANRKfS0_
   \   000004AE   0x2800             CMP      R0,#+0
   \   000004B0   0xD1A1             BNE.N    ??gcode_G26_40
   \                     ??gcode_G26_39: (+1)
   \   000004B2   0x.... 0x....      ADR.W    R0,`?<Constant "?Specified X,Y coordi...">`
   \   000004B6   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   000004BA   0xE1DE             B.N      ??gcode_G26_0
    856                cos_table[i] = SIZE_OF_INTERSECTION_CIRCLES * cos(RADIANS(valid_trig_angle(i * 30.0)));
   \                     ??gcode_G26_45: (+1)
   \   000004BC   0x4630             MOV      R0,R6
   \   000004BE   0x.... 0x....      BL       __aeabi_i2d
   \   000004C2   0x2200             MOVS     R2,#+0
   \   000004C4   0x.... 0x....      LDR.W    R3,??DataTable24_33  ;; 0x403e0000
   \   000004C8   0x.... 0x....      BL       __aeabi_dmul
   \   000004CC   0x.... 0x....      BL       __aeabi_d2f
   \   000004D0   0x4607             MOV      R7,R0
   \   000004D2   0x.... 0x....      BL       _Z16valid_trig_anglef
   \   000004D6   0x.... 0x....      BL       __aeabi_f2d
   \   000004DA   0x4622             MOV      R2,R4
   \   000004DC   0x462B             MOV      R3,R5
   \   000004DE   0x.... 0x....      BL       __aeabi_dmul
   \   000004E2   0x2200             MOVS     R2,#+0
   \   000004E4   0x.... 0x....      LDR.W    R3,??DataTable24_34  ;; 0x40668000
   \   000004E8   0x.... 0x....      BL       __aeabi_ddiv
   \   000004EC   0x.... 0x....      BL       cos
   \   000004F0   0x2200             MOVS     R2,#+0
   \   000004F2   0x.... 0x....      LDR.W    R3,??DataTable24_35  ;; 0x40140000
   \   000004F6   0x.... 0x....      BL       __aeabi_dmul
   \   000004FA   0x.... 0x....      BL       __aeabi_d2f
   \   000004FE   0xA90F             ADD      R1,SP,#+60
   \   00000500   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
    857                sin_table[i] = SIZE_OF_INTERSECTION_CIRCLES * sin(RADIANS(valid_trig_angle(i * 30.0)));
   \   00000504   0x4638             MOV      R0,R7
   \   00000506   0x.... 0x....      BL       _Z16valid_trig_anglef
   \   0000050A   0x.... 0x....      BL       __aeabi_f2d
   \   0000050E   0x4622             MOV      R2,R4
   \   00000510   0x462B             MOV      R3,R5
   \   00000512   0x.... 0x....      BL       __aeabi_dmul
   \   00000516   0x2200             MOVS     R2,#+0
   \   00000518   0x.... 0x....      LDR.W    R3,??DataTable24_34  ;; 0x40668000
   \   0000051C   0x.... 0x....      BL       __aeabi_ddiv
   \   00000520   0x.... 0x....      BL       sin
   \   00000524   0x2200             MOVS     R2,#+0
   \   00000526   0x.... 0x....      LDR.W    R3,??DataTable24_35  ;; 0x40140000
   \   0000052A   0x.... 0x....      BL       __aeabi_dmul
   \   0000052E   0x.... 0x....      BL       __aeabi_d2f
   \   00000532   0xA91C             ADD      R1,SP,#+112
   \   00000534   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
    858              }
   \   00000538   0x1C76             ADDS     R6,R6,#+1
   \                     ??gcode_G26_44: (+1)
   \   0000053A   0x2E0D             CMP      R6,#+13
   \   0000053C   0xDBBE             BLT.N    ??gcode_G26_45
    859          
    860              do {
    861                location = g26_continue_with_closest
    862                  ? find_closest_circle_to_print(current_position[X_AXIS], current_position[Y_AXIS])
    863                  : find_closest_circle_to_print(g26_x_pos, g26_y_pos); // Find the closest Mesh Intersection to where we are now.
   \                     ??gcode_G26_46: (+1)
   \   0000053E   0x980E             LDR      R0,[SP, #+56]
   \   00000540   0x2800             CMP      R0,#+0
   \   00000542   0xD006             BEQ.N    ??gcode_G26_47
   \   00000544   0x....             LDR.N    R2,??DataTable24_7
   \   00000546   0x.... 0x....      LDR.W    R1,??DataTable24_29
   \   0000054A   0xA80B             ADD      R0,SP,#+44
   \   0000054C   0x.... 0x....      BL       _Z28find_closest_circle_to_printRKfS0_
   \   00000550   0xE006             B.N      ??gcode_G26_48
   \                     ??gcode_G26_47: (+1)
   \   00000552   0xF108 0x0224      ADD      R2,R8,#+36
   \   00000556   0xF108 0x0120      ADD      R1,R8,#+32
   \   0000055A   0xA80B             ADD      R0,SP,#+44
   \   0000055C   0x.... 0x....      BL       _Z28find_closest_circle_to_printRKfS0_
    864          
    865                if (location.x_index >= 0 && location.y_index >= 0) {
   \                     ??gcode_G26_48: (+1)
   \   00000560   0xF99D 0x902C      LDRSB    R9,[SP, #+44]
   \   00000564   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000568   0xF100 0x8148      BMI.W    ??gcode_G26_49
   \   0000056C   0xF99D 0x502D      LDRSB    R5,[SP, #+45]
   \   00000570   0x002C             MOVS     R4,R5
   \   00000572   0xF100 0x8143      BMI.W    ??gcode_G26_49
    866                  float circle_x,circle_y;
    867                  if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_BILINEAR)
   \   00000576   0x980A             LDR      R0,[SP, #+40]
   \   00000578   0x7A80             LDRB     R0,[R0, #+10]
   \   0000057A   0x0701             LSLS     R1,R0,#+28
   \   0000057C   0xD510             BPL.N    ??gcode_G26_50
    868                  {
    869                      circle_x = _GET_MESH_X_ABL(location.x_index);
   \   0000057E   0x....             LDR.N    R5,??DataTable24
   \   00000580   0x....             LDR.N    R6,??DataTable24_1
   \   00000582   0x6830             LDR      R0,[R6, #+0]
   \   00000584   0x6829             LDR      R1,[R5, #+0]
   \   00000586   0xFB01 0x0009      MLA      R0,R1,R9,R0
   \   0000058A   0x.... 0x....      BL       __aeabi_i2f
   \   0000058E   0x9004             STR      R0,[SP, #+16]
    870                      circle_y = _GET_MESH_Y_ABL(location.y_index);
   \   00000590   0x6870             LDR      R0,[R6, #+4]
   \   00000592   0x6869             LDR      R1,[R5, #+4]
   \   00000594   0xFB01 0x0004      MLA      R0,R1,R4,R0
   \   00000598   0x.... 0x....      BL       __aeabi_i2f
   \   0000059C   0x9003             STR      R0,[SP, #+12]
   \   0000059E   0xE016             B.N      ??gcode_G26_51
    871                  }
    872                  else if(BED_LEVELING_METHOD & AUTO_BED_LEVELING_UBL)
   \                     ??gcode_G26_50: (+1)
   \   000005A0   0x06C1             LSLS     R1,R0,#+27
   \   000005A2   0xD50A             BPL.N    ??gcode_G26_52
    873                  {
    874                      circle_x = _GET_MESH_X_UBL(location.x_index);
   \   000005A4   0xF89D 0x002C      LDRB     R0,[SP, #+44]
   \   000005A8   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_xposEh
   \   000005AC   0x9004             STR      R0,[SP, #+16]
    875                      circle_y = _GET_MESH_Y_UBL(location.y_index);        
   \   000005AE   0x4628             MOV      R0,R5
   \   000005B0   0xB2C0             UXTB     R0,R0
   \   000005B2   0x.... 0x....      BL       _ZN20unified_bed_leveling18mesh_index_to_yposEh
   \   000005B6   0x9003             STR      R0,[SP, #+12]
   \   000005B8   0xE009             B.N      ??gcode_G26_51
    876                  }
    877                  else if(BED_LEVELING_METHOD & MESH_BED_LEVELING)
   \                     ??gcode_G26_52: (+1)
   \   000005BA   0x0680             LSLS     R0,R0,#+26
   \   000005BC   0xD507             BPL.N    ??gcode_G26_51
    878                  {
    879                      circle_x = _GET_MESH_X_MBL(location.x_index);
   \   000005BE   0x....             LDR.N    R0,??DataTable24_2
   \   000005C0   0xF850 0x0029      LDR      R0,[R0, R9, LSL #+2]
   \   000005C4   0x9004             STR      R0,[SP, #+16]
    880                      circle_y = _GET_MESH_Y_MBL(location.y_index);            
   \   000005C6   0x....             LDR.N    R0,??DataTable24_3
   \   000005C8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000005CC   0x9003             STR      R0,[SP, #+12]
    881                  }
    882          
    883                  // If this mesh location is outside the printable_radius, skip it.
    884                  if(MACHINETPYE & IS_KINEMATIC)
   \                     ??gcode_G26_51: (+1)
   \   000005CE   0x980A             LDR      R0,[SP, #+40]
   \   000005D0   0x8C40             LDRH     R0,[R0, #+34]
   \   000005D2   0xF240 0x3102      MOVW     R1,#+770
   \   000005D6   0x4208             TST      R0,R1
   \   000005D8   0xD00D             BEQ.N    ??gcode_G26_53
    885                      if (!position_is_reachable_IS_KINEMATIC(circle_x, circle_y)) continue;
   \   000005DA   0xA903             ADD      R1,SP,#+12
   \   000005DC   0xA804             ADD      R0,SP,#+16
   \   000005DE   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   000005E2   0x2800             CMP      R0,#+0
   \   000005E4   0xF000 0x810A      BEQ.W    ??gcode_G26_49
    886                  else
    887                      if (!position_is_reachable_IS_CARTESIAN(circle_x, circle_y)) continue;
   \   000005E8   0xA903             ADD      R1,SP,#+12
   \   000005EA   0xA804             ADD      R0,SP,#+16
   \   000005EC   0x.... 0x....      BL       _Z34position_is_reachable_IS_CARTESIANRKfS0_
   \   000005F0   0x2800             CMP      R0,#+0
   \   000005F2   0xF000 0x8103      BEQ.W    ??gcode_G26_49
    888                      
    889                  xi = location.x_index;  // Just to shrink the next few lines and make them easier to understand
   \                     ??gcode_G26_53: (+1)
   \   000005F6   0x464D             MOV      R5,R9
    890                  yi = location.y_index;
    891          
    892                  if (g26_debug_flag) {
   \   000005F8   0x....             LDR.N    R0,??DataTable24_36
   \   000005FA   0x7800             LDRB     R0,[R0, #+0]
   \   000005FC   0x2800             CMP      R0,#+0
   \   000005FE   0xD012             BEQ.N    ??gcode_G26_54
    893                    SERIAL_ECHOPAIR("   Doing circle at: (xi=", xi);
   \   00000600   0x4629             MOV      R1,R5
   \   00000602   0x.... 0x....      ADR.W    R0,`?<Constant "   Doing circle at: (xi=">`
   \   00000606   0x.... 0x....      BL       _Z17serial_echopair_PPKci
    894                    SERIAL_ECHOPAIR(", yi=", yi);
   \   0000060A   0x4621             MOV      R1,R4
   \   0000060C   0x.... 0x....      ADR.W    R0,`?<Constant ", yi=">`
   \   00000610   0x.... 0x....      BL       _Z17serial_echopair_PPKci
    895                    SERIAL_CHAR(')');
   \   00000614   0x....             LDR.N    R6,??DataTable24_37
   \   00000616   0x2129             MOVS     R1,#+41
   \   00000618   0x4630             MOV      R0,R6
   \   0000061A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    896                    SERIAL_EOL();
   \   0000061E   0x210A             MOVS     R1,#+10
   \   00000620   0x4630             MOV      R0,R6
   \   00000622   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    897                  }
    898          
    899                  start_angle = 0.0;    // assume it is going to be a full circle
   \                     ??gcode_G26_54: (+1)
   \   00000626   0x2700             MOVS     R7,#+0
    900                  end_angle   = 360.0;
   \   00000628   0x....             LDR.N    R6,??DataTable24_11  ;; 0x43b40000
    901                  if (xi == 0) {       // Check for bottom edge
   \   0000062A   0x2D00             CMP      R5,#+0
   \   0000062C   0xD10C             BNE.N    ??gcode_G26_55
    902                    start_angle = -90.0;
   \   0000062E   0x....             LDR.N    R7,??DataTable24_38  ;; 0xc2b40000
    903                    end_angle   =  90.0;
   \   00000630   0x....             LDR.N    R6,??DataTable24_39  ;; 0x42b40000
    904                    if (yi == 0)        // it is an edge, check for the two left corners
   \   00000632   0x2C00             CMP      R4,#+0
   \   00000634   0xD101             BNE.N    ??gcode_G26_56
    905                      start_angle = 0.0;
   \   00000636   0x2700             MOVS     R7,#+0
   \   00000638   0xE03B             B.N      ??gcode_G26_57
    906                    else if (yi == GRID_MAX_POINTS_Y - 1)
   \                     ??gcode_G26_56: (+1)
   \   0000063A   0x9809             LDR      R0,[SP, #+36]
   \   0000063C   0x7840             LDRB     R0,[R0, #+1]
   \   0000063E   0x1E40             SUBS     R0,R0,#+1
   \   00000640   0x4284             CMP      R4,R0
   \   00000642   0xD136             BNE.N    ??gcode_G26_57
    907                      end_angle = 0.0;
   \   00000644   0x2600             MOVS     R6,#+0
   \   00000646   0xE034             B.N      ??gcode_G26_57
    908                  }
    909                  else if (xi == GRID_MAX_POINTS_X - 1) { // Check for top edge
   \                     ??gcode_G26_55: (+1)
   \   00000648   0xF89A 0x0060      LDRB     R0,[R10, #+96]
   \   0000064C   0x1E40             SUBS     R0,R0,#+1
   \   0000064E   0x4285             CMP      R5,R0
   \   00000650   0xD10A             BNE.N    ??gcode_G26_58
    910                    start_angle =  90.0;
   \   00000652   0x....             LDR.N    R7,??DataTable24_39  ;; 0x42b40000
    911                    end_angle   = 270.0;
   \   00000654   0x....             LDR.N    R6,??DataTable24_40  ;; 0x43870000
    912                    if (yi == 0)                  // it is an edge, check for the two right corners
   \   00000656   0x2C00             CMP      R4,#+0
   \   00000658   0xD008             BEQ.N    ??gcode_G26_59
    913                      end_angle = 180.0;
    914                    else if (yi == GRID_MAX_POINTS_Y - 1)
   \   0000065A   0x9809             LDR      R0,[SP, #+36]
   \   0000065C   0x7840             LDRB     R0,[R0, #+1]
   \   0000065E   0x1E40             SUBS     R0,R0,#+1
   \   00000660   0x4284             CMP      R4,R0
   \   00000662   0xD126             BNE.N    ??gcode_G26_57
    915                      start_angle = 180.0;
   \   00000664   0x....             LDR.N    R7,??DataTable24_41  ;; 0x43340000
   \   00000666   0xE024             B.N      ??gcode_G26_57
    916                  }
    917                  else if (yi == 0) {
   \                     ??gcode_G26_58: (+1)
   \   00000668   0x2C00             CMP      R4,#+0
   \   0000066A   0xD101             BNE.N    ??gcode_G26_60
    918                    start_angle =   0.0;         // only do the top   side of the cirlce
    919                    end_angle   = 180.0;
   \                     ??gcode_G26_59: (+1)
   \   0000066C   0x....             LDR.N    R6,??DataTable24_41  ;; 0x43340000
   \   0000066E   0xE020             B.N      ??gcode_G26_57
    920                  }
    921                  else if (yi == GRID_MAX_POINTS_Y - 1) {
   \                     ??gcode_G26_60: (+1)
   \   00000670   0x9809             LDR      R0,[SP, #+36]
   \   00000672   0x7840             LDRB     R0,[R0, #+1]
   \   00000674   0x1E40             SUBS     R0,R0,#+1
   \   00000676   0x4284             CMP      R4,R0
   \   00000678   0xD11B             BNE.N    ??gcode_G26_57
    922                    start_angle = 180.0;         // only do the bottom side of the cirlce
   \   0000067A   0x....             LDR.N    R7,??DataTable24_41  ;; 0x43340000
    923                    end_angle   = 360.0;
    924                  }
    925          
    926                  for (tmp = start_angle; tmp < end_angle - 0.1; tmp += 30.0) {
   \   0000067C   0xE019             B.N      ??gcode_G26_57
    927          
    928                    #if ENABLED(NEWPANEL)
    929                      if (user_canceled()) goto LEAVE;              // Check if the user wants to stop the Mesh Validation
    930                    #endif
    931          
    932                    int tmp_div_30 = tmp / 30.0;
                                            ^
Warning[Pa093]: implicit conversion from floating point to integer

    static unsigned int circle_flags[16], horizontal_mesh_line_flags[16], vertical_mesh_line_flags[16], continue_with_closest = 0;
                                                                                                        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\G26_Mesh_Validation_Tool.cpp",144  Warning[Pe177]: 
          variable "continue_with_closest" was declared but never referenced
    933                    if (tmp_div_30 < 0) tmp_div_30 += 360 / 30;
    934                    if (tmp_div_30 > 11) tmp_div_30 -= 360 / 30;
    935          
    936                    float rx = circle_x + cos_table[tmp_div_30],    // for speed, these are now a lookup table entry
    937                          ry = circle_y + sin_table[tmp_div_30],
    938                          xe = circle_x + cos_table[tmp_div_30 + 1],
    939                          ye = circle_y + sin_table[tmp_div_30 + 1];
    940                    //#if IS_KINEMATIC
    941                    if(MACHINETPYE & IS_KINEMATIC)
    942                    {
    943                      	// Check to make sure this segment is entirely on the bed, skip if not.
    944                      	if (!position_is_reachable_IS_KINEMATIC(rx, ry) || !position_is_reachable_IS_KINEMATIC(xe, ye)) continue;
    945                    }
    946          		  else
    947          		  {
    948                    //#else                                               // not, we need to skip
    949                      rx = constrain(rx, X_MIN_POS + 1, X_MAX_POS - 1); // This keeps us from bumping the endstops
    950                      ry = constrain(ry, Y_MIN_POS + 1, Y_MAX_POS - 1);
    951                      xe = constrain(xe, X_MIN_POS + 1, X_MAX_POS - 1);
    952                      ye = constrain(ye, Y_MIN_POS + 1, Y_MAX_POS - 1);
   \                     ??gcode_G26_61: (+1)
   \   0000067E   0x6920             LDR      R0,[R4, #+16]
   \   00000680   0x....             LDR.N    R1,??DataTable24_42  ;; 0xbf800000
   \   00000682   0x.... 0x....      BL       __aeabi_fadd
   \   00000686   0x9908             LDR      R1,[SP, #+32]
   \   00000688   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000068C   0xD200             BCS.N    ??gcode_G26_62
   \   0000068E   0x9008             STR      R0,[SP, #+32]
    953          		  }
    954                    //#endif
    955          
    956                    //if (g26_debug_flag) {
    957                    //  char ccc, *cptr, seg_msg[50], seg_num[10];
    958                    //  strcpy(seg_msg, "   segment: ");
    959                    //  strcpy(seg_num, "    \n");
    960                    //  cptr = (char*) "01234567890ABCDEF????????";
    961                    //  ccc = cptr[tmp_div_30];
    962                    //  seg_num[1] = ccc;
    963                    //  strcat(seg_msg, seg_num);
    964                    //  debug_current_and_destination(seg_msg);
    965                    //}
    966          
    967                    print_line_from_here_to_there(rx, ry, g26_layer_height, xe, ye, g26_layer_height);
   \                     ??gcode_G26_62: (+1)
   \   00000690   0xF108 0x0018      ADD      R0,R8,#+24
   \   00000694   0x9001             STR      R0,[SP, #+4]
   \   00000696   0xA808             ADD      R0,SP,#+32
   \   00000698   0x9000             STR      R0,[SP, #+0]
   \   0000069A   0xAB07             ADD      R3,SP,#+28
   \   0000069C   0xF108 0x0218      ADD      R2,R8,#+24
   \   000006A0   0xA906             ADD      R1,SP,#+24
   \   000006A2   0xA805             ADD      R0,SP,#+20
   \   000006A4   0x.... 0x....      BL       _Z29print_line_from_here_to_thereRKfS0_S0_S0_S0_S0_
   \                     ??gcode_G26_63: (+1)
   \   000006A8   0x....             LDR.N    R0,??DataTable24_43  ;; 0x41f00000
   \   000006AA   0x4639             MOV      R1,R7
   \   000006AC   0x.... 0x....      BL       __aeabi_fadd
   \   000006B0   0x4607             MOV      R7,R0
   \                     ??gcode_G26_57: (+1)
   \   000006B2   0x4638             MOV      R0,R7
   \   000006B4   0x.... 0x....      BL       __aeabi_f2d
   \   000006B8   0x4604             MOV      R4,R0
   \   000006BA   0x460D             MOV      R5,R1
   \   000006BC   0x4630             MOV      R0,R6
   \   000006BE   0x.... 0x....      BL       __aeabi_f2d
   \   000006C2   0x....             LDR.N    R2,??DataTable24_44  ;; 0x9999999a
   \   000006C4   0x....             LDR.N    R3,??DataTable24_45  ;; 0xbfb99999
   \   000006C6   0x.... 0x....      BL       __aeabi_dadd
   \   000006CA   0x4602             MOV      R2,R0
   \   000006CC   0x460B             MOV      R3,R1
   \   000006CE   0x4620             MOV      R0,R4
   \   000006D0   0x4629             MOV      R1,R5
   \   000006D2   0x.... 0x....      BL       __aeabi_cdcmple
   \   000006D6   0xF080 0x808D      BCS.W    ??gcode_G26_64
   \   000006DA   0x2200             MOVS     R2,#+0
   \   000006DC   0x....             LDR.N    R3,??DataTable24_33  ;; 0x403e0000
   \   000006DE   0x.... 0x....      BL       __aeabi_ddiv
   \   000006E2   0x.... 0x....      BL       __aeabi_d2iz
   \   000006E6   0x0004             MOVS     R4,R0
   \   000006E8   0xD500             BPL.N    ??gcode_G26_65
   \   000006EA   0x340C             ADDS     R4,R4,#+12
   \                     ??gcode_G26_65: (+1)
   \   000006EC   0x2C0C             CMP      R4,#+12
   \   000006EE   0xDB00             BLT.N    ??gcode_G26_66
   \   000006F0   0x3C0C             SUBS     R4,R4,#+12
   \                     ??gcode_G26_66: (+1)
   \   000006F2   0x9804             LDR      R0,[SP, #+16]
   \   000006F4   0xA90F             ADD      R1,SP,#+60
   \   000006F6   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000006FA   0x.... 0x....      BL       __aeabi_fadd
   \   000006FE   0x9005             STR      R0,[SP, #+20]
   \   00000700   0x9803             LDR      R0,[SP, #+12]
   \   00000702   0xA91C             ADD      R1,SP,#+112
   \   00000704   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000708   0x.... 0x....      BL       __aeabi_fadd
   \   0000070C   0x9006             STR      R0,[SP, #+24]
   \   0000070E   0x9804             LDR      R0,[SP, #+16]
   \   00000710   0xA90F             ADD      R1,SP,#+60
   \   00000712   0xEB01 0x0184      ADD      R1,R1,R4, LSL #+2
   \   00000716   0x6849             LDR      R1,[R1, #+4]
   \   00000718   0x.... 0x....      BL       __aeabi_fadd
   \   0000071C   0x9007             STR      R0,[SP, #+28]
   \   0000071E   0x9803             LDR      R0,[SP, #+12]
   \   00000720   0xA91C             ADD      R1,SP,#+112
   \   00000722   0xEB01 0x0184      ADD      R1,R1,R4, LSL #+2
   \   00000726   0x6849             LDR      R1,[R1, #+4]
   \   00000728   0x.... 0x....      BL       __aeabi_fadd
   \   0000072C   0x9008             STR      R0,[SP, #+32]
   \   0000072E   0x980A             LDR      R0,[SP, #+40]
   \   00000730   0x8C40             LDRH     R0,[R0, #+34]
   \   00000732   0xF240 0x3102      MOVW     R1,#+770
   \   00000736   0x4208             TST      R0,R1
   \   00000738   0xD00C             BEQ.N    ??gcode_G26_67
   \   0000073A   0xA906             ADD      R1,SP,#+24
   \   0000073C   0xA805             ADD      R0,SP,#+20
   \   0000073E   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   00000742   0x2800             CMP      R0,#+0
   \   00000744   0xD0B0             BEQ.N    ??gcode_G26_63
   \   00000746   0xA908             ADD      R1,SP,#+32
   \   00000748   0xA807             ADD      R0,SP,#+28
   \   0000074A   0x.... 0x....      BL       _Z34position_is_reachable_IS_KINEMATICRKfS0_
   \   0000074E   0x2800             CMP      R0,#+0
   \   00000750   0xD19E             BNE.N    ??gcode_G26_62
   \   00000752   0xE7A9             B.N      ??gcode_G26_63
   \                     ??gcode_G26_67: (+1)
   \   00000754   0xF8DA 0x0008      LDR      R0,[R10, #+8]
   \   00000758   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000075C   0x.... 0x....      BL       __aeabi_fadd
   \   00000760   0x4601             MOV      R1,R0
   \   00000762   0xF10A 0x0408      ADD      R4,R10,#+8
   \   00000766   0x9805             LDR      R0,[SP, #+20]
   \   00000768   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000076C   0xD201             BCS.N    ??gcode_G26_68
   \   0000076E   0x9105             STR      R1,[SP, #+20]
   \   00000770   0xE008             B.N      ??gcode_G26_69
   \                     ??gcode_G26_68: (+1)
   \   00000772   0x68E0             LDR      R0,[R4, #+12]
   \   00000774   0x....             LDR.N    R1,??DataTable24_42  ;; 0xbf800000
   \   00000776   0x.... 0x....      BL       __aeabi_fadd
   \   0000077A   0x9905             LDR      R1,[SP, #+20]
   \   0000077C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000780   0xD200             BCS.N    ??gcode_G26_69
   \   00000782   0x9005             STR      R0,[SP, #+20]
   \                     ??gcode_G26_69: (+1)
   \   00000784   0x6860             LDR      R0,[R4, #+4]
   \   00000786   0xF04F 0x517E      MOV      R1,#+1065353216
   \   0000078A   0x.... 0x....      BL       __aeabi_fadd
   \   0000078E   0x4601             MOV      R1,R0
   \   00000790   0x9806             LDR      R0,[SP, #+24]
   \   00000792   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000796   0xD201             BCS.N    ??gcode_G26_70
   \   00000798   0x9106             STR      R1,[SP, #+24]
   \   0000079A   0xE008             B.N      ??gcode_G26_71
   \                     ??gcode_G26_70: (+1)
   \   0000079C   0x6920             LDR      R0,[R4, #+16]
   \   0000079E   0x....             LDR.N    R1,??DataTable24_42  ;; 0xbf800000
   \   000007A0   0x.... 0x....      BL       __aeabi_fadd
   \   000007A4   0x9906             LDR      R1,[SP, #+24]
   \   000007A6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000007AA   0xD200             BCS.N    ??gcode_G26_71
   \   000007AC   0x9006             STR      R0,[SP, #+24]
   \                     ??gcode_G26_71: (+1)
   \   000007AE   0xF8DA 0x0008      LDR      R0,[R10, #+8]
   \   000007B2   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000007B6   0x.... 0x....      BL       __aeabi_fadd
   \   000007BA   0x4601             MOV      R1,R0
   \   000007BC   0x9807             LDR      R0,[SP, #+28]
   \   000007BE   0x.... 0x....      BL       __aeabi_cfcmple
   \   000007C2   0xD201             BCS.N    ??gcode_G26_72
   \   000007C4   0x9107             STR      R1,[SP, #+28]
   \   000007C6   0xE008             B.N      ??gcode_G26_73
   \                     ??gcode_G26_72: (+1)
   \   000007C8   0x68E0             LDR      R0,[R4, #+12]
   \   000007CA   0x....             LDR.N    R1,??DataTable24_42  ;; 0xbf800000
   \   000007CC   0x.... 0x....      BL       __aeabi_fadd
   \   000007D0   0x9907             LDR      R1,[SP, #+28]
   \   000007D2   0x.... 0x....      BL       __aeabi_cfcmple
   \   000007D6   0xD200             BCS.N    ??gcode_G26_73
   \   000007D8   0x9007             STR      R0,[SP, #+28]
   \                     ??gcode_G26_73: (+1)
   \   000007DA   0x6860             LDR      R0,[R4, #+4]
   \   000007DC   0xF04F 0x517E      MOV      R1,#+1065353216
   \   000007E0   0x.... 0x....      BL       __aeabi_fadd
   \   000007E4   0x4601             MOV      R1,R0
   \   000007E6   0x9808             LDR      R0,[SP, #+32]
   \   000007E8   0x.... 0x....      BL       __aeabi_cfcmple
   \   000007EC   0xF4BF 0xAF47      BCS.W    ??gcode_G26_61
   \   000007F0   0x9108             STR      R1,[SP, #+32]
   \   000007F2   0xE74D             B.N      ??gcode_G26_62
    968          
    969                  }
    970                  if (look_for_lines_to_connect())
   \                     ??gcode_G26_64: (+1)
   \   000007F4   0x.... 0x....      BL       _Z25look_for_lines_to_connectv
   \   000007F8   0x2800             CMP      R0,#+0
   \   000007FA   0xD110             BNE.N    ??gcode_G26_42
    971                    goto LEAVE;
    972                }
    973              } while (--g26_repeats && location.x_index >= 0 && location.y_index >= 0);
   \                     ??gcode_G26_49: (+1)
   \   000007FC   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000800   0x1E40             SUBS     R0,R0,#+1
   \   00000802   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   \   00000806   0xF9BD 0x0008      LDRSH    R0,[SP, #+8]
   \   0000080A   0x2800             CMP      R0,#+0
   \   0000080C   0xD007             BEQ.N    ??gcode_G26_42
   \   0000080E   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000812   0xD404             BMI.N    ??gcode_G26_42
   \   00000814   0xF99D 0x002D      LDRSB    R0,[SP, #+45]
   \   00000818   0x2800             CMP      R0,#+0
   \   0000081A   0xF57F 0xAE90      BPL.W    ??gcode_G26_46
    974          
    975              LEAVE:
    976              lcd_setstatusPGM(PSTR("Leaving G26"), -1);
   \                     ??gcode_G26_42: (+1)
   \   0000081E   0xF04F 0x31FF      MOV      R1,#-1
   \   00000822   0x.... 0x....      ADR.W    R0,`?<Constant "Leaving G26">`
   \   00000826   0x.... 0x....      BL       _Z16lcd_setstatusPGMPKca
    977          
    978              retract_filament(destination);
   \   0000082A   0x....             LDR.N    R4,??DataTable24_30
   \   0000082C   0x4620             MOV      R0,R4
   \   0000082E   0x.... 0x....      BL       _Z16retract_filamentPKf
    979              destination[Z_AXIS] = Z_CLEARANCE_BETWEEN_PROBES;
   \   00000832   0x9809             LDR      R0,[SP, #+36]
   \   00000834   0x6880             LDR      R0,[R0, #+8]
   \   00000836   0x60A0             STR      R0,[R4, #+8]
    980          
    981              //debug_current_and_destination(PSTR("ready to do Z-Raise."));
    982              move_to(destination, 0); // Raise the nozzle
   \   00000838   0x2000             MOVS     R0,#+0
   \   0000083A   0x9001             STR      R0,[SP, #+4]
   \   0000083C   0xA901             ADD      R1,SP,#+4
   \   0000083E   0x4620             MOV      R0,R4
   \   00000840   0x.... 0x....      BL       _Z7move_toPKfRS_
    983              //debug_current_and_destination(PSTR("done doing Z-Raise."));
    984          
    985              destination[X_AXIS] = g26_x_pos;                               // Move back to the starting position
   \   00000844   0xF8D8 0x0020      LDR      R0,[R8, #+32]
   \   00000848   0x6020             STR      R0,[R4, #+0]
    986              destination[Y_AXIS] = g26_y_pos;
   \   0000084A   0xF8D8 0x0024      LDR      R0,[R8, #+36]
   \   0000084E   0x6060             STR      R0,[R4, #+4]
    987              //destination[Z_AXIS] = Z_CLEARANCE_BETWEEN_PROBES;            // Keep the nozzle where it is
    988          
    989              move_to(destination, 0); // Move back to the starting position
   \   00000850   0x2000             MOVS     R0,#+0
   \   00000852   0x9000             STR      R0,[SP, #+0]
   \   00000854   0xA900             ADD      R1,SP,#+0
   \   00000856   0x4620             MOV      R0,R4
   \   00000858   0x.... 0x....      BL       _Z7move_toPKfRS_
    990              //debug_current_and_destination(PSTR("done doing X/Y move."));
    991          
    992              #if ENABLED(ULTRA_LCD)
    993                lcd_external_control = false;     // Give back control of the LCD Panel!
    994              #endif
    995          
    996              if (!g26_keep_heaters_on) {
   \   0000085C   0xF89D 0x000A      LDRB     R0,[SP, #+10]
   \   00000860   0x2800             CMP      R0,#+0
   \   00000862   0xD10A             BNE.N    ??gcode_G26_0
    997                //#if HAS_TEMP_BED
    998                if(HAS_TEMP_BED)
   \   00000864   0xF89A 0x0036      LDRB     R0,[R10, #+54]
   \   00000868   0x2800             CMP      R0,#+0
   \   0000086A   0xD002             BEQ.N    ??gcode_G26_74
    999                  thermalManager.setTargetBed(0);
   \   0000086C   0x2000             MOVS     R0,#+0
   \   0000086E   0x.... 0x....      BL       _ZN11Temperature12setTargetBedEf
   1000                //#endif
   1001                thermalManager.setTargetHotend(0, 0);
   \                     ??gcode_G26_74: (+1)
   \   00000872   0x2100             MOVS     R1,#+0
   \   00000874   0x4608             MOV      R0,R1
   \   00000876   0x.... 0x....      BL       _ZN11Temperature15setTargetHotendEfh
   1002              }
   1003            }
   \                     ??gcode_G26_0: (+1)
   \   0000087A   0xB029             ADD      SP,SP,#+164
   \   0000087C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "in move_to() feed_val...">`:
   \   00000000   0x69 0x6E          DC8 "in move_to() feed_value for XY:"
   \              0x20 0x6D    
   \              0x6F 0x76    
   \              0x65 0x5F    
   \              0x74 0x6F    
   \              0x28 0x29    
   \              0x20 0x66    
   \              0x65 0x65    
   \              0x64 0x5F    
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x58 0x59    
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     feedrate_mm_s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x........         DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     _ZN7Planner17max_feedrate_mm_sE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x........         DC32     ??last_z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   0x........         DC32     destination

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \   00000000   0x........         DC32     g26_debug_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \   00000000   0x........         DC32     g26_retracted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_11:
   \   00000000   0x3FF33333         DC32     0x3ff33333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_12:
   \   00000000   0x47C34FFF         DC32     0x47c34fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_13:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_14:
   \   00000000   0x402E0000         DC32     0x402e0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_15:
   \   00000000   0x3F800001         DC32     0x3f800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x........         DC32     bilinear_grid_spacing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x........         DC32     bilinear_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x........         DC32     _ZN17mesh_bed_leveling13index_to_xposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x........         DC32     _ZN17mesh_bed_leveling13index_to_yposE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x........         DC32     g26_retracted+0x28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \   00000000   0x40A00001         DC32     0x40a00001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \   00000000   0x40000001         DC32     0x40000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \   00000000   0x........         DC32     current_position+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_8:
   \   00000000   0x........         DC32     g26_retracted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_9:
   \   00000000   0xC3B40000         DC32     0xc3b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_10:
   \   00000000   0x43B40001         DC32     0x43b40001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_11:
   \   00000000   0x43B40000         DC32     0x43b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_12:
   \   00000000   0x3E4CCCCD         DC32     0x3e4ccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_13:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_14:
   \   00000000   0x3ECCCCCD         DC32     0x3ecccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_15:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_16:
   \   00000000   0x3E99999A         DC32     0x3e99999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_17:
   \   00000000   0x3D4CCCCD         DC32     0x3d4ccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_18:
   \   00000000   0x41700001         DC32     0x41700001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_19:
   \   00000000   0x3DCCCCCD         DC32     0x3dcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_20:
   \   00000000   0x3F800001         DC32     0x3f800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_21:
   \   00000000   0x41C80001         DC32     0x41c80001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_22:
   \   00000000   0x40800001         DC32     0x40800001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_23:
   \   00000000   0x3FFC0000         DC32     0x3ffc0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_24:
   \   00000000   0x3FF00000         DC32     0x3ff00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_25:
   \   00000000   0x3FD33333         DC32     0x3fd33333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_26:
   \   00000000   0x42480000         DC32     0x42480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_27:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_28:
   \   00000000   0x........         DC32     workspace_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_29:
   \   00000000   0x........         DC32     current_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_30:
   \   00000000   0x........         DC32     destination

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_31:
   \   00000000   0x54442D18         DC32     0x54442d18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_32:
   \   00000000   0x400921FB         DC32     0x400921fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_33:
   \   00000000   0x403E0000         DC32     0x403e0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_34:
   \   00000000   0x40668000         DC32     0x40668000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_35:
   \   00000000   0x40140000         DC32     0x40140000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_36:
   \   00000000   0x........         DC32     g26_debug_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_37:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_38:
   \   00000000   0xC2B40000         DC32     0xc2b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_39:
   \   00000000   0x42B40000         DC32     0x42b40000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_40:
   \   00000000   0x43870000         DC32     0x43870000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_41:
   \   00000000   0x43340000         DC32     0x43340000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_42:
   \   00000000   0xBF800000         DC32     0xbf800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_43:
   \   00000000   0x41F00000         DC32     0x41f00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_44:
   \   00000000   0x9999999A         DC32     0x9999999a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_45:
   \   00000000   0xBFB99999         DC32     0xbfb99999

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "G26 command started. ...">`:
   \   00000000   0x47 0x32          DC8 "G26 command started. Waiting for heater(s).\012"
   \              0x36 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x65    
   \              0x64 0x2E    
   \              0x20 0x57    
   \              0x61 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x74 0x65    
   \              0x72 0x28    
   \              0x73 0x29    
   \              0x2E 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Specified bed temper...">`:
   \   00000000   0x3F 0x53          DC8 "?Specified bed temperature not plausible.\012"
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x62    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x65 0x6D    
   \              0x70 0x65    
   \              0x72 0x61    
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x70    
   \              0x6C 0x61    
   \              0x75 0x73    
   \              0x69 0x62    
   \              0x6C 0x65    
   \              0x2E 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Specified layer heig...">`:
   \   00000000   0x3F 0x53          DC8 "?Specified layer height not plausible.\012"
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x6C    
   \              0x61 0x79    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x70 0x6C    
   \              0x61 0x75    
   \              0x73 0x69    
   \              0x62 0x6C    
   \              0x65 0x2E    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Specified Retraction...">`:
   \   00000000   0x3F 0x53          DC8 "?Specified Retraction Multiplier not plausible.\012"
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x52    
   \              0x65 0x74    
   \              0x72 0x61    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x4D 0x75    
   \              0x6C 0x74    
   \              0x69 0x70    
   \              0x6C 0x69    
   \              0x65 0x72    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x70    
   \              0x6C 0x61    
   \              0x75 0x73    
   \              0x69 0x62    
   \              0x6C 0x65    
   \              0x2E 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Retraction Multiplie...">`:
   \   00000000   0x3F 0x52          DC8 "?Retraction Multiplier must be specified.\012"
   \              0x65 0x74    
   \              0x72 0x61    
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x4D 0x75    
   \              0x6C 0x74    
   \              0x69 0x70    
   \              0x6C 0x69    
   \              0x65 0x72    
   \              0x20 0x6D    
   \              0x75 0x73    
   \              0x74 0x20    
   \              0x62 0x65    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x2E 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Specified nozzle siz...">`:
   \   00000000   0x3F 0x53          DC8 "?Specified nozzle size not plausible.\012"
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x6E    
   \              0x6F 0x7A    
   \              0x7A 0x6C    
   \              0x65 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x70    
   \              0x6C 0x61    
   \              0x75 0x73    
   \              0x69 0x62    
   \              0x6C 0x65    
   \              0x2E 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Prime length must be...">`:
   \   00000000   0x3F 0x50          DC8 3FH, 50H, 72H, 69H, 6DH, 65H, 20H, 6CH
   \              0x72 0x69    
   \              0x6D 0x65    
   \              0x20 0x6C    
   \   00000008   0x65 0x6E          DC8 65H, 6EH, 67H, 74H, 68H, 20H, 6DH, 75H
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x6D 0x75    
   \   00000010   0x73 0x74          DC8 73H, 74H, 20H, 62H, 65H, 20H, 73H, 70H
   \              0x20 0x62    
   \              0x65 0x20    
   \              0x73 0x70    
   \   00000018   0x65 0x63          DC8 65H, 63H, 69H, 66H, 69H, 65H, 64H, 20H
   \              0x69 0x66    
   \              0x69 0x65    
   \              0x64 0x20    
   \   00000020   0x77 0x68          DC8 77H, 68H, 65H, 6EH, 20H, 6EH, 6FH, 74H
   \              0x65 0x6E    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000028   0x20 0x75          DC8 20H, 75H, 73H, 69H, 6EH, 67H, 20H, 61H
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x61    
   \   00000030   0x6E 0x20          DC8 6EH, 20H, 4CH, 43H, 44H, 2EH, 0AH, 0
   \              0x4C 0x43    
   \              0x44 0x2E    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Specified prime leng...">`:
   \   00000000   0x3F 0x53          DC8 "?Specified prime length not plausible.\012"
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x70    
   \              0x72 0x69    
   \              0x6D 0x65    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x70 0x6C    
   \              0x61 0x75    
   \              0x73 0x69    
   \              0x62 0x6C    
   \              0x65 0x2E    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Specified filament s...">`:
   \   00000000   0x3F 0x53          DC8 "?Specified filament size not plausible.\012"
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x66    
   \              0x69 0x6C    
   \              0x61 0x6D    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x70    
   \              0x6C 0x61    
   \              0x75 0x73    
   \              0x69 0x62    
   \              0x6C 0x65    
   \              0x2E 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Specified nozzle tem...">`:
   \   00000000   0x3F 0x53          DC8 "?Specified nozzle temperature not plausible.\012"
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x6E    
   \              0x6F 0x7A    
   \              0x7A 0x6C    
   \              0x65 0x20    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x70 0x6C    
   \              0x61 0x75    
   \              0x73 0x69    
   \              0x62 0x6C    
   \              0x65 0x2E    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?(R)epeat must be spe...">`:
   \   00000000   0x3F 0x28          DC8 3FH, 28H, 52H, 29H, 65H, 70H, 65H, 61H
   \              0x52 0x29    
   \              0x65 0x70    
   \              0x65 0x61    
   \   00000008   0x74 0x20          DC8 74H, 20H, 6DH, 75H, 73H, 74H, 20H, 62H
   \              0x6D 0x75    
   \              0x73 0x74    
   \              0x20 0x62    
   \   00000010   0x65 0x20          DC8 65H, 20H, 73H, 70H, 65H, 63H, 69H, 66H
   \              0x73 0x70    
   \              0x65 0x63    
   \              0x69 0x66    
   \   00000018   0x69 0x65          DC8 69H, 65H, 64H, 20H, 77H, 68H, 65H, 6EH
   \              0x64 0x20    
   \              0x77 0x68    
   \              0x65 0x6E    
   \   00000020   0x20 0x6E          DC8 20H, 6EH, 6FH, 74H, 20H, 75H, 73H, 69H
   \              0x6F 0x74    
   \              0x20 0x75    
   \              0x73 0x69    
   \   00000028   0x6E 0x67          DC8 6EH, 67H, 20H, 61H, 6EH, 20H, 4CH, 43H
   \              0x20 0x61    
   \              0x6E 0x20    
   \              0x4C 0x43    
   \   00000030   0x44 0x2E          DC8 44H, 2EH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?(R)epeat value not p...">`:
   \   00000000   0x3F 0x28          DC8 3FH, 28H, 52H, 29H, 65H, 70H, 65H, 61H
   \              0x52 0x29    
   \              0x65 0x70    
   \              0x65 0x61    
   \   00000008   0x74 0x20          DC8 74H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000010   0x6E 0x6F          DC8 6EH, 6FH, 74H, 20H, 70H, 6CH, 61H, 75H
   \              0x74 0x20    
   \              0x70 0x6C    
   \              0x61 0x75    
   \   00000018   0x73 0x69          DC8 73H, 69H, 62H, 6CH, 65H, 3BH, 20H, 6DH
   \              0x62 0x6C    
   \              0x65 0x3B    
   \              0x20 0x6D    
   \   00000020   0x75 0x73          DC8 75H, 73H, 74H, 20H, 62H, 65H, 20H, 61H
   \              0x74 0x20    
   \              0x62 0x65    
   \              0x20 0x61    
   \   00000028   0x74 0x20          DC8 74H, 20H, 6CH, 65H, 61H, 73H, 74H, 20H
   \              0x6C 0x65    
   \              0x61 0x73    
   \              0x74 0x20    
   \   00000030   0x31 0x2E          DC8 31H, 2EH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "?Specified X,Y coordi...">`:
   \   00000000   0x3F 0x53          DC8 "?Specified X,Y coordinate out of bounds.\012"
   \              0x70 0x65    
   \              0x63 0x69    
   \              0x66 0x69    
   \              0x65 0x64    
   \              0x20 0x58    
   \              0x2C 0x59    
   \              0x20 0x63    
   \              0x6F 0x6F    
   \              0x72 0x64    
   \              0x69 0x6E    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x62    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x73 0x2E    
   \              0x0A 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Doing circle at: (xi=">`:
   \   00000000   0x20 0x20          DC8 "   Doing circle at: (xi="
   \              0x20 0x44    
   \              0x6F 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x69 0x72    
   \              0x63 0x6C    
   \              0x65 0x20    
   \              0x61 0x74    
   \              0x3A 0x20    
   \              0x28 0x78    
   \              0x69 0x3D    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", yi=">`:
   \   00000000   0x2C 0x20          DC8 ", yi="
   \              0x79 0x69    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Leaving G26">`:
   \   00000000   0x4C 0x65          DC8 "Leaving G26"
   \              0x61 0x76    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x47 0x32    
   \              0x36 0x00    
   1004          
   1005          #endif // G26_MESH_VALIDATION

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   G26_line_to_destination(float const &)
        16   -> prepare_move_to_destination()
       8   GCodeParser::boolval(char)
         0   -> GCodeParser::seen(char)
         8   -> GCodeParser::seenval(char)
         0   -> GCodeParser::value_bool()
       0   GCodeParser::has_value()
       8   GCodeParser::linearval(char, float)
         8   -> GCodeParser::seenval(char)
         8   -> GCodeParser::value_linear_units()
       0   GCodeParser::seen(char)
       8   GCodeParser::seenval(char)
         0   -> GCodeParser::has_value()
         8   -> GCodeParser::seen(char)
       8   GCodeParser::value_bool()
         8   -> GCodeParser::has_value()
         8   -> GCodeParser::value_byte()
       8   GCodeParser::value_byte()
         8   -> GCodeParser::value_long()
       0   GCodeParser::value_celsius()
         0   -> GCodeParser::value_float()
      16   GCodeParser::value_float()
         0   -> __aeabi_d2f
        16   -> __aeabi_d2f
        16   -> strtod
       8   GCodeParser::value_int()
         8   -> GCodeParser::value_long()
       0   GCodeParser::value_linear_units()
         0   -> GCodeParser::value_float()
       0   GCodeParser::value_long()
         0   -> strtol
       0   Planner::set_e_position_mm(float const &)
         0   -> Planner::set_position_mm(AxisEnum, float const &)
       0   Temperature::degBed()
       0   Temperature::degHotend(uint8_t)
      16   Temperature::setTargetBed(float)
         0   -> Temperature::start_watching_bed()
        16   -> __aeabi_cfcmple
        16   -> __aeabi_f2iz
        16   -> __aeabi_i2f
       8   Temperature::setTargetHotend(float, uint8_t)
         0   -> Temperature::start_watching_heater(uint8_t)
         8   -> __aeabi_f2iz
       4   bitmap_set(unsigned int *, uint8_t, uint8_t)
       0   debug_current_and_destination(char const *)
      72   find_closest_circle_to_print(float const &, float const &)
        72   -> __aeabi_cfcmple
        72   -> __aeabi_cfrcmple
        72   -> __aeabi_d2f
        72   -> __aeabi_dadd
        72   -> __aeabi_ddiv
        72   -> __aeabi_f2d
        72   -> __aeabi_f2iz
        72   -> __aeabi_fadd
        72   -> __aeabi_fmul
        72   -> __aeabi_fsub
        72   -> __aeabi_i2f
        72   -> bitmap_set(unsigned int *, uint8_t, uint8_t)
        72   -> is_bitmap_set(unsigned int *, uint8_t, uint8_t)
        72   -> rand
        72   -> sqrtf
        72   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        72   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
     200   gcode_G26()
       200   -> GCodeParser::boolval(char)
       200   -> GCodeParser::has_value()
       200   -> GCodeParser::linearval(char, float)
       200   -> GCodeParser::seen(char)
       200   -> GCodeParser::seenval(char)
       200   -> GCodeParser::value_celsius()
       200   -> GCodeParser::value_float()
       200   -> GCodeParser::value_int()
       200   -> GCodeParser::value_linear_units()
       200   -> HAL_GetTick
       200   -> Stepper::synchronize()
       200   -> Temperature::setTargetBed(float)
       200   -> Temperature::setTargetHotend(float, uint8_t)
       200   -> USARTClass::write(uint8_t)
       200   -> __aeabi_cdcmple
       200   -> __aeabi_cfcmple
       200   -> __aeabi_cfrcmple
       200   -> __aeabi_d2f
       200   -> __aeabi_d2iz
       200   -> __aeabi_dadd
       200   -> __aeabi_ddiv
       200   -> __aeabi_dmul
       200   -> __aeabi_f2d
       200   -> __aeabi_f2iz
       200   -> __aeabi_fadd
       200   -> __aeabi_fmul
       200   -> __aeabi_fsub
       200   -> __aeabi_i2d
       200   -> __aeabi_i2f
       200   -> axis_unhomed_error(bool, bool, bool)
       200   -> cos
       200   -> do_blocking_move_to_z(float const &, float const &)
       200   -> find_closest_circle_to_print(float const &, float const &)
       200   -> lcd_setstatusPGM(char const *, int8_t)
       200   -> look_for_lines_to_connect()
       200   -> memset
       200   -> move_to(float const *, float const &)
       200   -> position_is_reachable_IS_CARTESIAN(float const &, float const &)
       200   -> position_is_reachable_IS_KINEMATIC(float const &, float const &)
       200   -> prime_nozzle()
       200   -> print_line_from_here_to_there(float const &, float const &, float const &, float const &, float const &, float const &)
       200   -> retract_filament(float const *)
       200   -> serial_echopair_P(char const *, int)
       200   -> serialprintPGM(char const *)
       200   -> set_bed_leveling_enabled(bool)
       200   -> set_current_from_destination()
       200   -> set_destination_from_current()
       200   -> sin
       200   -> srand
       200   -> sync_plan_position_e()
       200   -> turn_on_heaters()
       200   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
       200   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
       200   -> valid_trig_angle(float)
       0   is_bitmap_set(unsigned int *, uint8_t, uint8_t)
       0   lcd_setstatusPGM(char const *, int8_t)
      64   look_for_lines_to_connect()
        64   -> USARTClass::write(uint8_t)
        64   -> __aeabi_cfcmple
        64   -> __aeabi_fadd
        64   -> __aeabi_i2f
        64   -> bitmap_set(unsigned int *, uint8_t, uint8_t)
        64   -> debug_current_and_destination(char const *)
        64   -> is_bitmap_set(unsigned int *, uint8_t, uint8_t)
        64   -> position_is_reachable_IS_CARTESIAN(float const &, float const &)
        64   -> position_is_reachable_IS_KINEMATIC(float const &, float const &)
        64   -> print_line_from_here_to_there(float const &, float const &, float const &, float const &, float const &, float const &)
        64   -> serial_echopair_P(char const *, float)
        64   -> unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        64   -> unified_bed_leveling::mesh_index_to_ypos(uint8_t)
      48   move_to(float const &, float const &, float const &, float const &)
        48   -> G26_line_to_destination(float const &)
        48   -> Stepper::synchronize()
        48   -> USARTClass::write(uint8_t)
        48   -> __aeabi_cfcmpeq
        48   -> __aeabi_cfcmple
        48   -> __aeabi_fadd
        48   -> __aeabi_fdiv
        48   -> serial_echopair_P(char const *, float)
        48   -> set_destination_from_current()
       0   move_to(float const *, float const &)
         0   -> move_to(float const &, float const &, float const &, float const &)
      40   position_is_reachable_IS_CARTESIAN(float const &, float const &)
        40   -> __aeabi_cdrcmple
        40   -> __aeabi_dadd
        40   -> __aeabi_f2d
      32   position_is_reachable_IS_KINEMATIC(float const &, float const &)
        32   -> __aeabi_cfrcmple
        32   -> __aeabi_fadd
        32   -> __aeabi_fmul
      16   prime_nozzle()
        16   -> G26_line_to_destination(float const &)
        16   -> Stepper::synchronize()
        16   -> __aeabi_fadd
        16   -> __aeabi_fdiv
        16   -> retract_filament(float const *)
        16   -> set_destination_from_current()
      64   print_line_from_here_to_there(float const &, float const &, float const &, float const &, float const &, float const &)
        64   -> __aeabi_cfcmple
        64   -> __aeabi_cfrcmple
        64   -> __aeabi_fadd
        64   -> __aeabi_fmul
        64   -> __aeabi_fsub
        64   -> move_to(float const &, float const &, float const &, float const &)
        64   -> print_line_from_here_to_there(float const &, float const &, float const &, float const &, float const &, float const &)
        64   -> recover_filament(float const *)
        64   -> retract_filament(float const *)
        64   -> sqrtf
      16   recover_filament(float const *)
        16   -> __aeabi_d2f
        16   -> __aeabi_dmul
        16   -> __aeabi_f2d
        16   -> move_to(float const *, float const &)
      16   retract_filament(float const *)
        16   -> __aeabi_fmul
        16   -> move_to(float const *, float const &)
       8   serialprintPGM(char const *)
         8   -> USARTClass::write(uint8_t)
       0   set_current_from_destination()
         0   -> memcpy
       0   set_destination_from_current()
         0   -> memcpy
       0   sync_plan_position_e()
         0   -> Planner::set_e_position_mm(float const &)
      24   turn_on_heaters()
        24   -> HAL_GetTick
        24   -> Temperature::degBed()
        24   -> Temperature::degHotend(uint8_t)
        24   -> Temperature::print_heaterstates()
        24   -> Temperature::setTargetBed(float)
        24   -> Temperature::setTargetHotend(float, uint8_t)
        24   -> USARTClass::write(uint8_t)
        24   -> __aeabi_cfrcmple
        24   -> __aeabi_fsub
        24   -> __aeabi_i2f
        24   -> idle()
      40   unified_bed_leveling::mesh_index_to_xpos(uint8_t)
        40   -> __aeabi_cfcmple
         0   -> __aeabi_fadd
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
      40   unified_bed_leveling::mesh_index_to_ypos(uint8_t)
        40   -> __aeabi_cfcmple
         0   -> __aeabi_fadd
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
       8   valid_trig_angle(float)
         8   -> __aeabi_cfcmple
         8   -> __aeabi_cfrcmple
         8   -> __aeabi_fadd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "   Doing circle at: (xi=">
       8  ?<Constant ", yi=">
      52  ?<Constant "?(R)epeat must be spe...">
      52  ?<Constant "?(R)epeat value not p...">
      56  ?<Constant "?Prime length must be...">
      44  ?<Constant "?Retraction Multiplie...">
      52  ?<Constant "?Specified Retraction...">
      44  ?<Constant "?Specified X,Y coordi...">
      44  ?<Constant "?Specified bed temper...">
      44  ?<Constant "?Specified filament s...">
      40  ?<Constant "?Specified layer heig...">
      40  ?<Constant "?Specified nozzle siz...">
      48  ?<Constant "?Specified nozzle tem...">
      40  ?<Constant "?Specified prime leng...">
      48  ?<Constant "G26 command started. ...">
      12  ?<Constant "Leaving G26">
      32  ?<Constant "in move_to() feed_val...">
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_10
       4  ??DataTable23_11
       4  ??DataTable23_12
       4  ??DataTable23_13
       4  ??DataTable23_14
       4  ??DataTable23_15
       4  ??DataTable23_2
       4  ??DataTable23_3
       4  ??DataTable23_4
       4  ??DataTable23_5
       4  ??DataTable23_6
       4  ??DataTable23_7
       4  ??DataTable23_8
       4  ??DataTable23_9
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_13
       4  ??DataTable24_14
       4  ??DataTable24_15
       4  ??DataTable24_16
       4  ??DataTable24_17
       4  ??DataTable24_18
       4  ??DataTable24_19
       4  ??DataTable24_2
       4  ??DataTable24_20
       4  ??DataTable24_21
       4  ??DataTable24_22
       4  ??DataTable24_23
       4  ??DataTable24_24
       4  ??DataTable24_25
       4  ??DataTable24_26
       4  ??DataTable24_27
       4  ??DataTable24_28
       4  ??DataTable24_29
       4  ??DataTable24_3
       4  ??DataTable24_30
       4  ??DataTable24_31
       4  ??DataTable24_32
       4  ??DataTable24_33
       4  ??DataTable24_34
       4  ??DataTable24_35
       4  ??DataTable24_36
       4  ??DataTable24_37
       4  ??DataTable24_38
       4  ??DataTable24_39
       4  ??DataTable24_4
       4  ??DataTable24_40
       4  ??DataTable24_41
       4  ??DataTable24_42
       4  ??DataTable24_43
       4  ??DataTable24_44
       4  ??DataTable24_45
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
      20  G26_line_to_destination(float const &)
      30  GCodeParser::boolval(char)
      20  GCodeParser::has_value()
      22  GCodeParser::linearval(char, float)
      76  GCodeParser::seen(char)
      22  GCodeParser::seenval(char)
      28  GCodeParser::value_bool()
      34  GCodeParser::value_byte()
       4  GCodeParser::value_celsius()
      80  GCodeParser::value_float()
      10  GCodeParser::value_int()
       4  GCodeParser::value_linear_units()
      24  GCodeParser::value_long()
       8  Planner::set_e_position_mm(float const &)
      12  Temperature::degBed()
      12  Temperature::degHotend(uint8_t)
      52  Temperature::setTargetBed(float)
      28  Temperature::setTargetHotend(float, uint8_t)
      22  bitmap_set(unsigned int *, uint8_t, uint8_t)
       2  debug_current_and_destination(char const *)
     580  find_closest_circle_to_print(float const &, float const &)
     232  g26_retracted
          g26_prime_flag
          g26_bed_temp
          g26_hotend_temp
          g26_e_axis_feedrate
          random_deviation
          g26_extrusion_multiplier
          g26_retraction_multiplier
          g26_layer_height
          g26_prime_length
          g26_x_pos
          g26_y_pos
          circle_flags
          horizontal_mesh_line_flags
          vertical_mesh_line_flags
    2176  gcode_G26()
      12  is_bitmap_set(unsigned int *, uint8_t, uint8_t)
       4  last_z
       2  lcd_setstatusPGM(char const *, int8_t)
    1940  look_for_lines_to_connect()
     256  move_to(float const &, float const &, float const &, float const &)
      12  move_to(float const *, float const &)
     184  position_is_reachable_IS_CARTESIAN(float const &, float const &)
     388  position_is_reachable_IS_KINEMATIC(float const &, float const &)
      76  prime_nozzle()
     552  print_line_from_here_to_there(float const &, float const &, float const &, float const &, float const &, float const &)
      52  recover_filament(float const *)
      42  retract_filament(float const *)
      28  serialprintPGM(char const *)
      20  set_current_from_destination()
      20  set_destination_from_current()
      12  sync_plan_position_e()
     208  turn_on_heaters()
     316  unified_bed_leveling::mesh_index_to_xpos(uint8_t)
     312  unified_bed_leveling::mesh_index_to_ypos(uint8_t)
      42  valid_trig_angle(float)
     133  -- Other

 
   236 bytes in section .data
   133 bytes in section .rodata
 8 672 bytes in section .text
 
 4 652 bytes of CODE  memory (+ 4 020 bytes shared)
     0 bytes of CONST memory (+   133 bytes shared)
   236 bytes of DATA  memory

Errors: none
Warnings: 36
