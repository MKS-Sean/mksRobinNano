###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:05:00
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Src\adc.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Src\adc.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\adc.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\adc.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Src\adc.c
      1          /**
      2            ******************************************************************************
      3            * File Name          : ADC.c
      4            * Description        : This file provides code for the configuration
      5            *                      of the ADC instances.
      6            ******************************************************************************
      7            *
      8            * Copyright (c) 2018 STMicroelectronics International N.V. 
      9            * All rights reserved.
     10            *
     11            * Redistribution and use in source and binary forms, with or without 
     12            * modification, are permitted, provided that the following conditions are met:
     13            *
     14            * 1. Redistribution of source code must retain the above copyright notice, 
     15            *    this list of conditions and the following disclaimer.
     16            * 2. Redistributions in binary form must reproduce the above copyright notice,
     17            *    this list of conditions and the following disclaimer in the documentation
     18            *    and/or other materials provided with the distribution.
     19            * 3. Neither the name of STMicroelectronics nor the names of other 
     20            *    contributors to this software may be used to endorse or promote products 
     21            *    derived from this software without specific written permission.
     22            * 4. This software, including modifications and/or derivative works of this 
     23            *    software, must execute solely and exclusively on microcontroller or
     24            *    microprocessor devices manufactured by or for STMicroelectronics.
     25            * 5. Redistribution and use of this software other than as permitted under 
     26            *    this license is void and will automatically terminate your rights under 
     27            *    this license. 
     28            *
     29            * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
     30            * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
     31            * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
     32            * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
     33            * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
     34            * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     35            * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     36            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
     37            * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
     38            * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
     39            * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     40            * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     41            *
     42            ******************************************************************************
     43            */
     44          
     45          /* Includes ------------------------------------------------------------------*/
     46          #include "adc.h"
     47          
     48          #include "gpio.h"
     49          #include "dma.h"
     50          
     51          /* USER CODE BEGIN 0 */

   \                                 In section .bss, align 4
     52          uint16_t uhADCxConvertedValue[3];
   \                     uhADCxConvertedValue:
   \   00000000                      DS8 8
     53          /* USER CODE END 0 */
     54          

   \                                 In section .bss, align 4
     55          ADC_HandleTypeDef hadc1;
   \                     hadc1:
   \   00000000                      DS8 48

   \                                 In section .bss, align 4
     56          DMA_HandleTypeDef hdma_adc1;
   \                     hdma_adc1:
   \   00000000                      DS8 56
     57          
     58          /* ADC1 init function */

   \                                 In section .text, align 2, keep-with-next
     59          void MX_ADC1_Init(void)
     60          {
   \                     MX_ADC1_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     61            ADC_ChannelConfTypeDef sConfig;
     62          
     63              /**Common config 
     64              */
     65            hadc1.Instance = ADC1;
   \   00000004   0x....             LDR.N    R4,??DataTable2
   \   00000006   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40012400
   \   00000008   0x6020             STR      R0,[R4, #+0]
     66            hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
   \   0000000A   0xF44F 0x7080      MOV      R0,#+256
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
     67            hadc1.Init.ContinuousConvMode = ENABLE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x60E0             STR      R0,[R4, #+12]
     68            hadc1.Init.DiscontinuousConvMode = DISABLE;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x6160             STR      R0,[R4, #+20]
     69            hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
   \   00000018   0xF44F 0x2060      MOV      R0,#+917504
   \   0000001C   0x61E0             STR      R0,[R4, #+28]
     70            hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x6060             STR      R0,[R4, #+4]
     71            hadc1.Init.NbrOfConversion = 3;
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0x6120             STR      R0,[R4, #+16]
     72            if (HAL_ADC_Init(&hadc1) != HAL_OK)
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       HAL_ADC_Init
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD001             BEQ.N    ??MX_ADC1_Init_0
     73            {
     74              Error_Handler();
   \   00000030   0x.... 0x....      BL       Error_Handler
     75            }
     76          
     77              /**Configure Regular Channel 
     78              */
     79            sConfig.Channel = ADC_CHANNEL_10;
   \                     ??MX_ADC1_Init_0: (+1)
   \   00000034   0x200A             MOVS     R0,#+10
   \   00000036   0x9000             STR      R0,[SP, #+0]
     80            sConfig.Rank = 1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9001             STR      R0,[SP, #+4]
     81            sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x9002             STR      R0,[SP, #+8]
     82            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       HAL_ADC_ConfigChannel
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD001             BEQ.N    ??MX_ADC1_Init_1
     83            {
     84              Error_Handler();
   \   0000004C   0x.... 0x....      BL       Error_Handler
     85            }
     86          
     87              /**Configure Regular Channel 
     88              */
     89          #if defined(MKS_ROBINPRO)		
     90            sConfig.Channel = ADC_CHANNEL_12;
     91          #elif defined(MKS_ROBIN) || defined(MKS_ROBIN2)||defined(MKS_ROBIN_NANO)
     92            sConfig.Channel = ADC_CHANNEL_11;
   \                     ??MX_ADC1_Init_1: (+1)
   \   00000050   0x200B             MOVS     R0,#+11
   \   00000052   0x9000             STR      R0,[SP, #+0]
     93          #endif
     94            sConfig.Rank = 2;
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0x9001             STR      R0,[SP, #+4]
     95            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
   \   00000058   0xA900             ADD      R1,SP,#+0
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       HAL_ADC_ConfigChannel
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD001             BEQ.N    ??MX_ADC1_Init_2
     96            {
     97              Error_Handler();
   \   00000064   0x.... 0x....      BL       Error_Handler
     98            }
     99          
    100              /**Configure Regular Channel 
    101              */
    102          #if defined(MKS_ROBINPRO)		
    103            sConfig.Channel = ADC_CHANNEL_13;
    104          #elif defined(MKS_ROBIN) || defined(MKS_ROBIN2)|| defined(MKS_ROBIN_NANO)
    105            sConfig.Channel = ADC_CHANNEL_12;
   \                     ??MX_ADC1_Init_2: (+1)
   \   00000068   0x200C             MOVS     R0,#+12
   \   0000006A   0x9000             STR      R0,[SP, #+0]
    106          #endif  
    107            sConfig.Rank = 3;
   \   0000006C   0x2003             MOVS     R0,#+3
   \   0000006E   0x9001             STR      R0,[SP, #+4]
    108            if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
   \   00000070   0xA900             ADD      R1,SP,#+0
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       HAL_ADC_ConfigChannel
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD001             BEQ.N    ??MX_ADC1_Init_3
    109            {
    110              Error_Handler();
   \   0000007C   0x.... 0x....      BL       Error_Handler
    111            }
    112          
    113          }
   \                     ??MX_ADC1_Init_3: (+1)
   \   00000080   0xBD1F             POP      {R0-R4,PC}       ;; return
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
    116          {
   \                     HAL_ADC_MspInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
    117          
    118            GPIO_InitTypeDef GPIO_InitStruct;
    119            if(adcHandle->Instance==ADC1)
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40012400
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD134             BNE.N    ??HAL_ADC_MspInit_0
    120            {
    121            /* USER CODE BEGIN ADC1_MspInit 0 */
    122          
    123            /* USER CODE END ADC1_MspInit 0 */
    124              /* Peripheral clock enable */
    125              __HAL_RCC_ADC1_CLK_ENABLE();
   \   0000000E   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40021018
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0xF441 0x7100      ORR      R1,R1,#0x200
   \   00000016   0x6001             STR      R1,[R0, #+0]
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF400 0x7000      AND      R0,R0,#0x200
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x9800             LDR      R0,[SP, #+0]
    126            
    127              /**ADC1 GPIO Configuration    
    128              PC0     ------> ADC1_IN10
    129              PC1     ------> ADC1_IN11 
    130              */
    131              GPIO_InitStruct.Pin = TB_Pin|TH1_Pin|TH2_Pin;
   \   00000022   0x2007             MOVS     R0,#+7
   \   00000024   0x9001             STR      R0,[SP, #+4]
    132              GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
   \   00000026   0x2003             MOVS     R0,#+3
   \   00000028   0x9002             STR      R0,[SP, #+8]
    133              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   0000002A   0xA901             ADD      R1,SP,#+4
   \   0000002C   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40011000
   \   0000002E   0x.... 0x....      BL       HAL_GPIO_Init
    134          
    135              /* Peripheral DMA init*/
    136            
    137              hdma_adc1.Instance = DMA1_Channel1;
   \   00000032   0x....             LDR.N    R5,??DataTable2_4
   \   00000034   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40020008
   \   00000036   0x6028             STR      R0,[R5, #+0]
    138              hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x6068             STR      R0,[R5, #+4]
    139              hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
   \   0000003C   0x60A8             STR      R0,[R5, #+8]
    140              hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
   \   0000003E   0x2080             MOVS     R0,#+128
   \   00000040   0x60E8             STR      R0,[R5, #+12]
    141              hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \   00000042   0xF44F 0x7080      MOV      R0,#+256
   \   00000046   0x6128             STR      R0,[R5, #+16]
    142              hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   \   00000048   0xF44F 0x6080      MOV      R0,#+1024
   \   0000004C   0x6168             STR      R0,[R5, #+20]
    143              hdma_adc1.Init.Mode = DMA_CIRCULAR;
   \   0000004E   0x2020             MOVS     R0,#+32
   \   00000050   0x61A8             STR      R0,[R5, #+24]
    144              hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x61E8             STR      R0,[R5, #+28]
    145              if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       HAL_DMA_Init
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD001             BEQ.N    ??HAL_ADC_MspInit_1
    146              {
    147                Error_Handler();
   \   00000060   0x.... 0x....      BL       Error_Handler
    148              }
    149          
    150              __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
   \                     ??HAL_ADC_MspInit_1: (+1)
   \   00000064   0x6225             STR      R5,[R4, #+32]
   \   00000066   0x626C             STR      R4,[R5, #+36]
    151          
    152              /* Peripheral interrupt init */
    153              HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
   \   00000068   0x2200             MOVS     R2,#+0
   \   0000006A   0x2103             MOVS     R1,#+3
   \   0000006C   0x2012             MOVS     R0,#+18
   \   0000006E   0x.... 0x....      BL       HAL_NVIC_SetPriority
    154              HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
   \   00000072   0x2012             MOVS     R0,#+18
   \   00000074   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    155            /* USER CODE BEGIN ADC1_MspInit 1 */
    156          
    157            /* USER CODE END ADC1_MspInit 1 */
    158            }
    159          }
   \                     ??HAL_ADC_MspInit_0: (+1)
   \   00000078   0xB005             ADD      SP,SP,#+20
   \   0000007A   0xBD30             POP      {R4,R5,PC}       ;; return
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
    162          {
   \                     HAL_ADC_MspDeInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    163          
    164            if(adcHandle->Instance==ADC1)
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40012400
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD110             BNE.N    ??HAL_ADC_MspDeInit_0
    165            {
    166            /* USER CODE BEGIN ADC1_MspDeInit 0 */
    167          
    168            /* USER CODE END ADC1_MspDeInit 0 */
    169              /* Peripheral clock disable */
    170              __HAL_RCC_ADC1_CLK_DISABLE();
   \   0000000C   0x....             LDR.N    R0,??DataTable2_2  ;; 0x40021018
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0xF421 0x7100      BIC      R1,R1,#0x200
   \   00000014   0x6001             STR      R1,[R0, #+0]
    171            
    172              /**ADC1 GPIO Configuration    
    173              PC0     ------> ADC1_IN10
    174              PC1     ------> ADC1_IN11 
    175              */
    176              HAL_GPIO_DeInit(GPIOC, TB_Pin|TH1_Pin);
   \   00000016   0x2103             MOVS     R1,#+3
   \   00000018   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40011000
   \   0000001A   0x.... 0x....      BL       HAL_GPIO_DeInit
    177          
    178              /* Peripheral DMA DeInit*/
    179              HAL_DMA_DeInit(adcHandle->DMA_Handle);
   \   0000001E   0x6A20             LDR      R0,[R4, #+32]
   \   00000020   0x.... 0x....      BL       HAL_DMA_DeInit
    180          
    181              /* Peripheral interrupt Deinit*/
    182              HAL_NVIC_DisableIRQ(ADC1_2_IRQn);
   \   00000024   0x2012             MOVS     R0,#+18
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x.... 0x....      B.W      HAL_NVIC_DisableIRQ
    183          
    184            }
    185            /* USER CODE BEGIN ADC1_MspDeInit 1 */
    186          
    187            /* USER CODE END ADC1_MspDeInit 1 */
    188          } 
   \                     ??HAL_ADC_MspDeInit_0: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     hadc1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     hdma_adc1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40020008         DC32     0x40020008
    189          
    190          /* USER CODE BEGIN 1 */
    191          
    192          /* USER CODE END 1 */
    193          
    194          /**
    195            * @}
    196            */
    197          
    198          /**
    199            * @}
    200            */
    201          
    202          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_ADC_MspDeInit
         8   -> HAL_DMA_DeInit
         8   -> HAL_GPIO_DeInit
         0   -> HAL_NVIC_DisableIRQ
      32   HAL_ADC_MspInit
        32   -> Error_Handler
        32   -> HAL_DMA_Init
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
      24   MX_ADC1_Init
        24   -> Error_Handler
        24   -> HAL_ADC_ConfigChannel
        24   -> HAL_ADC_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
      48  HAL_ADC_MspDeInit
     124  HAL_ADC_MspInit
     130  MX_ADC1_Init
      48  hadc1
      56  hdma_adc1
       8  uhADCxConvertedValue

 
 112 bytes in section .bss
 326 bytes in section .text
 
 326 bytes of CODE memory
 112 bytes of DATA memory

Errors: none
Warnings: none
