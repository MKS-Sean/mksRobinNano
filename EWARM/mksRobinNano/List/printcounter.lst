###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:05:48
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\printcounter.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\printcounter.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\printcounter.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\printcounter.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\printcounter.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          #include "Marlin.h"

  #define UNUSED(x) ((void)(x))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Inc\mks_cfg.h",613  Warning[Pe083]: 
          type qualifier specified more than once

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4
          _source\Middlewares\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xE003             B.N      ??serialprintPGM_0
   \                     ??serialprintPGM_1: (+1)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x4803             LDR.N    R0,??serialprintPGM_2
   \   0000000A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serialprintPGM_0: (+1)
   \   0000000E   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0xD1F7             BNE.N    ??serialprintPGM_1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   \                     ??serialprintPGM_2:
   \   00000018   0x........         DC32     Serial3

    }
    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\Marlin.h",537  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
     24          #include "printcounter.h"

      const uint16_t address = 0x32;
                             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\printcounter.h",54  Warning[Pe382]: 
          in-class initializer for nonstatic member is nonstandard

      const uint16_t updateInterval = 10;
                                    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\printcounter.h",64  Warning[Pe382]: 
          in-class initializer for nonstatic member is nonstandard

      const uint16_t saveInterval = 3600;
                                  ^
"E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\Third_Party\Marlin\printcounter.h",72  Warning[Pe382]: 
          in-class initializer for nonstatic member is nonstandard
     25          #include "duration_t.h"

   \                                 In section .text, align 2
   \   __code __interwork __softfp duration_t::duration_t(uint32_t const &)
   \                     _ZN10duration_tC1ERKj: (+1)
   \   00000000   0x6809             LDR      R1,[R1, #+0]
   \   00000002   0x6001             STR      R1,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp uint8_t duration_t::year() const
   \                     _ZNK10duration_t4yearEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZNK10duration_t3dayEv
   \   00000006   0xF240 0x116D      MOVW     R1,#+365
   \   0000000A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000000E   0xB2C0             UXTB     R0,R0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp uint16_t duration_t::day() const
   \                     _ZNK10duration_t3dayEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZNK10duration_t4hourEv
   \   00000006   0x2118             MOVS     R1,#+24
   \   00000008   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000000C   0xB280             UXTH     R0,R0
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp uint32_t duration_t::hour() const
   \                     _ZNK10duration_t4hourEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZNK10duration_t6minuteEv
   \   00000006   0x213C             MOVS     R1,#+60
   \   00000008   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp uint32_t duration_t::minute() const
   \                     _ZNK10duration_t6minuteEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZNK10duration_t6secondEv
   \   00000006   0x213C             MOVS     R1,#+60
   \   00000008   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp uint32_t duration_t::second() const
   \                     _ZNK10duration_t6secondEv: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void duration_t::toString(char *) const
   \                     _ZNK10duration_t8toStringEPc: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4607             MOV      R7,R0
   \   00000008   0x460C             MOV      R4,R1
   \   0000000A   0x.... 0x....      BL       _ZNK10duration_t4yearEv
   \   0000000E   0x4605             MOV      R5,R0
   \   00000010   0x4638             MOV      R0,R7
   \   00000012   0x.... 0x....      BL       _ZNK10duration_t3dayEv
   \   00000016   0xF240 0x116D      MOVW     R1,#+365
   \   0000001A   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   0000001E   0xF240 0x126D      MOVW     R2,#+365
   \   00000022   0xFB02 0x0611      MLS      R6,R2,R1,R0
   \   00000026   0x4638             MOV      R0,R7
   \   00000028   0x.... 0x....      BL       _ZNK10duration_t4hourEv
   \   0000002C   0x2118             MOVS     R1,#+24
   \   0000002E   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000032   0xEB01 0x0241      ADD      R2,R1,R1, LSL #+1
   \   00000036   0xEBA0 0x08C2      SUB      R8,R0,R2, LSL #+3
   \   0000003A   0x4638             MOV      R0,R7
   \   0000003C   0x.... 0x....      BL       _ZNK10duration_t6minuteEv
   \   00000040   0xF04F 0x093C      MOV      R9,#+60
   \   00000044   0x4649             MOV      R1,R9
   \   00000046   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   0000004A   0xFB09 0x0A11      MLS      R10,R9,R1,R0
   \   0000004E   0x4638             MOV      R0,R7
   \   00000050   0x.... 0x....      BL       _ZNK10duration_t6secondEv
   \   00000054   0x4649             MOV      R1,R9
   \   00000056   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   0000005A   0xFB09 0x0211      MLS      R2,R9,R1,R0
   \   0000005E   0x2D00             CMP      R5,#+0
   \   00000060   0xD00B             BEQ.N    ??toString_0
   \   00000062   0x9202             STR      R2,[SP, #+8]
   \   00000064   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \   00000068   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   0000006C   0x4633             MOV      R3,R6
   \   0000006E   0x462A             MOV      R2,R5
   \   00000070   0x4918             LDR.N    R1,??toString_1
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       sprintf
   \   00000078   0xE029             B.N      ??toString_2
   \                     ??toString_0: (+1)
   \   0000007A   0x2E00             CMP      R6,#+0
   \   0000007C   0xD009             BEQ.N    ??toString_3
   \   0000007E   0x9201             STR      R2,[SP, #+4]
   \   00000080   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000084   0x4643             MOV      R3,R8
   \   00000086   0x4632             MOV      R2,R6
   \   00000088   0x4913             LDR.N    R1,??toString_1+0x4
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       sprintf
   \   00000090   0xE01D             B.N      ??toString_2
   \                     ??toString_3: (+1)
   \   00000092   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000096   0xD007             BEQ.N    ??toString_4
   \   00000098   0x9200             STR      R2,[SP, #+0]
   \   0000009A   0x4653             MOV      R3,R10
   \   0000009C   0x4642             MOV      R2,R8
   \   0000009E   0x490F             LDR.N    R1,??toString_1+0x8
   \   000000A0   0x4620             MOV      R0,R4
   \   000000A2   0x.... 0x....      BL       sprintf
   \   000000A6   0xE012             B.N      ??toString_2
   \                     ??toString_4: (+1)
   \   000000A8   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000AC   0xD008             BEQ.N    ??toString_5
   \   000000AE   0x4613             MOV      R3,R2
   \   000000B0   0x4652             MOV      R2,R10
   \   000000B2   0x490B             LDR.N    R1,??toString_1+0xC
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0xB004             ADD      SP,SP,#+16
   \   000000B8   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   000000BC   0x.... 0x....      B.W      sprintf
   \                     ??toString_5: (+1)
   \   000000C0   0x4908             LDR.N    R1,??toString_1+0x10
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0xB004             ADD      SP,SP,#+16
   \   000000C6   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   000000CA   0x.... 0x....      B.W      sprintf
   \                     ??toString_2: (+1)
   \   000000CE   0xE8BD 0x87FF      POP      {R0-R10,PC}      ;; return
   \   000000D2   0xBF00             Nop      
   \                     ??toString_1:
   \   000000D4   0x........         DC32     _ZZNK10duration_t8toStringEPcEs
   \   000000D8   0x........         DC32     _ZZNK10duration_t8toStringEPcEs_0
   \   000000DC   0x........         DC32     _ZZNK10duration_t8toStringEPcEs_1
   \   000000E0   0x........         DC32     _ZZNK10duration_t8toStringEPcEs_2
   \   000000E4   0x........         DC32     _ZZNK10duration_t8toStringEPcEs_3
     26          

   \                                 In section .text, align 2, keep-with-next
     27          PrintCounter::PrintCounter(): super() {
   \                     _ZN12PrintCounterC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       _ZN9StopwatchC2Ev
     28            this->loadStats();
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN12PrintCounter9loadStatsEv
     29          }
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     30          

   \                                 In section .text, align 2, keep-with-next
     31          millis_t PrintCounter::deltaDuration() {
   \                     _ZN12PrintCounter13deltaDurationEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     32            #if ENABLED(DEBUG_PRINTCOUNTER)
     33              PrintCounter::debug(PSTR("deltaDuration"));
     34            #endif
     35          
     36            millis_t tmp = this->lastDuration;
   \   00000004   0x6AA5             LDR      R5,[R4, #+40]
     37            this->lastDuration = this->duration();
   \   00000006   0x.... 0x....      BL       _ZN9Stopwatch8durationEv
   \   0000000A   0x62A0             STR      R0,[R4, #+40]
     38            return this->lastDuration - tmp;
   \   0000000C   0x1B40             SUBS     R0,R0,R5
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     39          }
     40          

   \                                 In section .text, align 2, keep-with-next
     41          bool PrintCounter::isLoaded() {
     42            return this->loaded;
   \                     _ZN12PrintCounter8isLoadedEv: (+1)
   \   00000000   0xF890 0x002C      LDRB     R0,[R0, #+44]
   \   00000004   0x4770             BX       LR               ;; return
     43          }
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void PrintCounter::incFilamentUsed(double const &amount) {
   \                     _ZN12PrintCounter15incFilamentUsedERKd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     46            #if ENABLED(DEBUG_PRINTCOUNTER)
     47              PrintCounter::debug(PSTR("incFilamentUsed"));
     48            #endif
     49          
     50            // Refuses to update data if object is not loaded
     51            if (!this->isLoaded()) return;
   \   00000006   0x.... 0x....      BL       _ZN12PrintCounter8isLoadedEv
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD007             BEQ.N    ??incFilamentUsed_0
     52          
     53            this->data.filamentUsed += amount; // mm
   \   0000000E   0xE9D4 0x2308      LDRD     R2,R3,[R4, #+32]
   \   00000012   0xE9D5 0x0100      LDRD     R0,R1,[R5, #+0]
   \   00000016   0x.... 0x....      BL       __aeabi_dadd
   \   0000001A   0xE9C4 0x0108      STRD     R0,R1,[R4, #+32]
     54          }
   \                     ??incFilamentUsed_0: (+1)
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     55          
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void PrintCounter::initStats() {
   \                     _ZN12PrintCounter9initStatsEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     58            #if ENABLED(DEBUG_PRINTCOUNTER)
     59              PrintCounter::debug(PSTR("initStats"));
     60            #endif
     61          
     62            this->loaded = true;
   \   00000002   0xF100 0x0110      ADD      R1,R0,#+16
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x770A             STRB     R2,[R1, #+28]
     63            //  this->data = { 0, 0, 0, 0, 0.0 };	/*--mks--*/
     64          	this->data.totalPrints=0;
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x8202             STRH     R2,[R0, #+16]
     65          	this->data.finishedPrints=0;
   \   0000000E   0x804A             STRH     R2,[R1, #+2]
     66          	this->data.printTime=0;
   \   00000010   0x604A             STR      R2,[R1, #+4]
     67          	this->data.longestPrint=0;
   \   00000012   0x608A             STR      R2,[R1, #+8]
     68          	this->data.filamentUsed=0.0;
   \   00000014   0x4613             MOV      R3,R2
   \   00000016   0xE9C1 0x2304      STRD     R2,R3,[R1, #+16]
     69          
     70            this->saveStats();
   \   0000001A   0x.... 0x....      BL       _ZN12PrintCounter9saveStatsEv
     71            //eeprom_write_byte((uint8_t *) this->address, 0x16);
     72            uint8_t eppr_w=0x16;
   \   0000001E   0x2016             MOVS     R0,#+22
   \   00000020   0xF88D 0x0000      STRB     R0,[SP, #+0]
     73            AT24CXX_Write((uint16_t ) this->address,&eppr_w,1); 
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0xA900             ADD      R1,SP,#+0
   \   00000028   0x2032             MOVS     R0,#+50
   \   0000002A   0x.... 0x....      BL       AT24CXX_Write
     74          }
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void PrintCounter::loadStats() {
   \                     _ZN12PrintCounter9loadStatsEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
     77            #if ENABLED(DEBUG_PRINTCOUNTER)
     78              PrintCounter::debug(PSTR("loadStats"));
     79            #endif
     80          
     81            // Checks if the EEPROM block is initialized
     82            /*
     83            if (eeprom_read_byte((uint8_t *) this->address) != 0x16) this->initStats();
     84            else eeprom_read_block(&this->data,
     85              (void *)(this->address + sizeof(uint8_t)), sizeof(printStatistics));
     86              */ /*--mks--*/
     87              uint8_t eppr_r;
     88              AT24CXX_Read((uint16_t )this->address,&eppr_r,1);
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x2032             MOVS     R0,#+50
   \   0000000C   0x.... 0x....      BL       AT24CXX_Read
     89              if(eppr_r != 0x16) this->initStats();
   \   00000010   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000014   0x2816             CMP      R0,#+22
   \   00000016   0xD003             BEQ.N    ??loadStats_0
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN12PrintCounter9initStatsEv
   \   0000001E   0xE005             B.N      ??loadStats_1
     90          	else 
     91          	{
     92          	  int BufferSize=sizeof(printStatistics);	  //sizeof(printStatistics) = 24 ???
     93          	  uint16_t MemAddress =this->address + sizeof(uint8_t);
     94          	  uint16_t* pBuffer = &(this->data.totalPrints); //????§??data??§?é11|¨??|¨??§2?§??????§oy?Y
     95          	  AT24CXX_Read(MemAddress,(uint8_t*)pBuffer,BufferSize);
   \                     ??loadStats_0: (+1)
   \   00000020   0x2218             MOVS     R2,#+24
   \   00000022   0xF104 0x0110      ADD      R1,R4,#+16
   \   00000026   0x2033             MOVS     R0,#+51
   \   00000028   0x.... 0x....      BL       AT24CXX_Read
     96          	}
     97          
     98            this->loaded = true;
   \                     ??loadStats_1: (+1)
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xF884 0x002C      STRB     R0,[R4, #+44]
     99          }
   \   00000032   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void PrintCounter::saveStats() {
   \                     _ZN12PrintCounter9saveStatsEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    102            #if ENABLED(DEBUG_PRINTCOUNTER)
    103              PrintCounter::debug(PSTR("saveStats"));
    104            #endif
    105          
    106            // Refuses to save data if object is not loaded
    107            if (!this->isLoaded()) return;
   \   00000004   0x.... 0x....      BL       _ZN12PrintCounter8isLoadedEv
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD007             BEQ.N    ??saveStats_0
    108          
    109            // Saves the struct to EEPROM
    110            //eeprom_update_block(&this->data,
    111            //  (void *)(this->address + sizeof(uint8_t)), sizeof(printStatistics));
    112          	int BufferSize=sizeof(printStatistics); 	//sizeof(printStatistics) = 24 ???
    113          	uint16_t MemAddress =this->address + sizeof(uint8_t);
    114          	uint16_t* pBuffer = &(this->data.totalPrints); //????§??data??§?é11|¨??|¨??§2?§??????§oy?Y
    115          	AT24CXX_Write(MemAddress,(uint8_t*)pBuffer,BufferSize);  
   \   0000000C   0x2218             MOVS     R2,#+24
   \   0000000E   0xF104 0x0110      ADD      R1,R4,#+16
   \   00000012   0x2033             MOVS     R0,#+51
   \   00000014   0xE8BD 0x4010      POP      {R4,LR}
   \   00000018   0x.... 0x....      B.W      AT24CXX_Write
   \                     ??saveStats_0: (+1)
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    116          }
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void PrintCounter::showStats() {
   \                     _ZN12PrintCounter9showStatsEv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x4605             MOV      R5,R0
    119            char buffer[21];
    120            duration_t elapsed;
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x.... 0x....      BL       _ZN10duration_tC1Ev
    121          
    122            SERIAL_PROTOCOLPGM(MSG_STATS);
   \   0000000C   0x.... 0x....      ADR.W    R6,`?<Constant "Stats: ">`
   \   00000010   0x4630             MOV      R0,R6
   \   00000012   0x.... 0x....      BL       _Z14serialprintPGMPKc
    123          
    124            SERIAL_ECHOPGM("Prints: ");
   \   00000016   0x.... 0x....      ADR.W    R0,`?<Constant "Prints: ">`
   \   0000001A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    125            SERIAL_ECHO(this->data.totalPrints);
   \   0000001E   0x....             LDR.N    R4,??DataTable9_1
   \   00000020   0x220A             MOVS     R2,#+10
   \   00000022   0x8A29             LDRH     R1,[R5, #+16]
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       _ZN5Print5printEii
    126          
    127            SERIAL_ECHOPGM(", Finished: ");
   \   0000002A   0x.... 0x....      ADR.W    R0,`?<Constant ", Finished: ">`
   \   0000002E   0x.... 0x....      BL       _Z14serialprintPGMPKc
    128            SERIAL_ECHO(this->data.finishedPrints);
   \   00000032   0x220A             MOVS     R2,#+10
   \   00000034   0x8A69             LDRH     R1,[R5, #+18]
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       _ZN5Print5printEii
    129          
    130            SERIAL_ECHOPGM(", Failed: "); // Note: Removes 1 from failures with an active counter
   \   0000003C   0x.... 0x....      ADR.W    R0,`?<Constant ", Failed: ">`
   \   00000040   0x.... 0x....      BL       _Z14serialprintPGMPKc
    131            SERIAL_ECHO(this->data.totalPrints - this->data.finishedPrints
    132              - ((this->isRunning() || this->isPaused()) ? 1 : 0));
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD103             BNE.N    ??showStats_0
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0x.... 0x....      BL       _ZN9Stopwatch8isPausedEv
   \   00000054   0xE000             B.N      ??showStats_1
   \                     ??showStats_0: (+1)
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??showStats_1: (+1)
   \   00000058   0x220A             MOVS     R2,#+10
   \   0000005A   0x8A29             LDRH     R1,[R5, #+16]
   \   0000005C   0x8A6B             LDRH     R3,[R5, #+18]
   \   0000005E   0x1AC9             SUBS     R1,R1,R3
   \   00000060   0x1A09             SUBS     R1,R1,R0
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       _ZN5Print5printEii
    133          
    134            SERIAL_EOL();
   \   00000068   0x210A             MOVS     R1,#+10
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    135            SERIAL_PROTOCOLPGM(MSG_STATS);
   \   00000070   0x4630             MOV      R0,R6
   \   00000072   0x.... 0x....      BL       _Z14serialprintPGMPKc
    136          
    137            elapsed = this->data.printTime;
   \   00000076   0xF105 0x0114      ADD      R1,R5,#+20
   \   0000007A   0xA800             ADD      R0,SP,#+0
   \   0000007C   0x.... 0x....      BL       _ZN10duration_tC1ERKj
   \   00000080   0x9800             LDR      R0,[SP, #+0]
   \   00000082   0x9001             STR      R0,[SP, #+4]
    138            elapsed.toString(buffer);
   \   00000084   0xA902             ADD      R1,SP,#+8
   \   00000086   0xA801             ADD      R0,SP,#+4
   \   00000088   0x.... 0x....      BL       _ZNK10duration_t8toStringEPc
    139          
    140            SERIAL_ECHOPGM("Total time: ");
   \   0000008C   0x.... 0x....      ADR.W    R0,`?<Constant "Total time: ">`
   \   00000090   0x.... 0x....      BL       _Z14serialprintPGMPKc
    141            SERIAL_ECHO(buffer);
   \   00000094   0xA902             ADD      R1,SP,#+8
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0x.... 0x....      BL       _ZN5Print5printEPKc
    142          
    143            #if ENABLED(DEBUG_PRINTCOUNTER)
    144              SERIAL_ECHOPGM(" (");
    145              SERIAL_ECHO(this->data.printTime);
    146              SERIAL_CHAR(')');
    147            #endif
    148          
    149            elapsed = this->data.longestPrint;
   \   0000009C   0xF105 0x0118      ADD      R1,R5,#+24
   \   000000A0   0xA800             ADD      R0,SP,#+0
   \   000000A2   0x.... 0x....      BL       _ZN10duration_tC1ERKj
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x9001             STR      R0,[SP, #+4]
    150            elapsed.toString(buffer);
   \   000000AA   0xA902             ADD      R1,SP,#+8
   \   000000AC   0xA801             ADD      R0,SP,#+4
   \   000000AE   0x.... 0x....      BL       _ZNK10duration_t8toStringEPc
    151          
    152            SERIAL_ECHOPGM(", Longest job: ");
   \   000000B2   0x.... 0x....      ADR.W    R0,`?<Constant ", Longest job: ">`
   \   000000B6   0x.... 0x....      BL       _Z14serialprintPGMPKc
    153            SERIAL_ECHO(buffer);
   \   000000BA   0xA902             ADD      R1,SP,#+8
   \   000000BC   0x4620             MOV      R0,R4
   \   000000BE   0x.... 0x....      BL       _ZN5Print5printEPKc
    154          
    155            #if ENABLED(DEBUG_PRINTCOUNTER)
    156              SERIAL_ECHOPGM(" (");
    157              SERIAL_ECHO(this->data.longestPrint);
    158              SERIAL_CHAR(')');
    159            #endif
    160          
    161            SERIAL_EOL();
   \   000000C2   0x210A             MOVS     R1,#+10
   \   000000C4   0x4620             MOV      R0,R4
   \   000000C6   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    162            SERIAL_PROTOCOLPGM(MSG_STATS);
   \   000000CA   0x4630             MOV      R0,R6
   \   000000CC   0x.... 0x....      BL       _Z14serialprintPGMPKc
    163          
    164            SERIAL_ECHOPGM("Filament used: ");
   \   000000D0   0x.... 0x....      ADR.W    R0,`?<Constant "Filament used: ">`
   \   000000D4   0x.... 0x....      BL       _Z14serialprintPGMPKc
    165            SERIAL_ECHO(this->data.filamentUsed / 1000);
   \   000000D8   0x2002             MOVS     R0,#+2
   \   000000DA   0x9000             STR      R0,[SP, #+0]
   \   000000DC   0xE9D5 0x0108      LDRD     R0,R1,[R5, #+32]
   \   000000E0   0x2200             MOVS     R2,#+0
   \   000000E2   0x....             LDR.N    R3,??DataTable9_2  ;; 0x408f4000
   \   000000E4   0x.... 0x....      BL       __aeabi_ddiv
   \   000000E8   0x4602             MOV      R2,R0
   \   000000EA   0x460B             MOV      R3,R1
   \   000000EC   0x4620             MOV      R0,R4
   \   000000EE   0x.... 0x....      BL       _ZN5Print5printEdi
    166            SERIAL_ECHOPGM("m");
   \   000000F2   0x....             ADR.N    R0,??DataTable9  ;; "m"
   \   000000F4   0x.... 0x....      BL       _Z14serialprintPGMPKc
    167          
    168            SERIAL_EOL();
   \   000000F8   0x210A             MOVS     R1,#+10
   \   000000FA   0x4620             MOV      R0,R4
   \   000000FC   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    169          }
   \   00000100   0xB008             ADD      SP,SP,#+32
   \   00000102   0xBD70             POP      {R4-R6,PC}       ;; return
    170          

   \                                 In section .text, align 2, keep-with-next
    171          void PrintCounter::tick() {
   \                     _ZN12PrintCounter4tickEv: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    172            if (!this->isRunning()) return;
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch9isRunningEv
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD038             BEQ.N    ??tick_0
   \   0000000C   0x....             LDR.N    R5,??DataTable9_3
   \   0000000E   0x7828             LDRB     R0,[R5, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD104             BNE.N    ??tick_1
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7028             STRB     R0,[R5, #+0]
    173          
    174            static uint32_t update_last = millis(),
   \   00000018   0x.... 0x....      BL       HAL_GetTick
   \   0000001C   0x60A8             STR      R0,[R5, #+8]
   \                     ??tick_1: (+1)
   \   0000001E   0x7868             LDRB     R0,[R5, #+1]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD104             BNE.N    ??tick_2
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x7068             STRB     R0,[R5, #+1]
    175                            eeprom_last = millis();
   \   00000028   0x.... 0x....      BL       HAL_GetTick
   \   0000002C   0x60E8             STR      R0,[R5, #+12]
    176          
    177            millis_t now = millis();
   \                     ??tick_2: (+1)
   \   0000002E   0x.... 0x....      BL       HAL_GetTick
   \   00000032   0x4606             MOV      R6,R0
   \   00000034   0x78A8             LDRB     R0,[R5, #+2]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD104             BNE.N    ??tick_3
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x70A8             STRB     R0,[R5, #+2]
    178          
    179            // Trying to get the amount of calculations down to the bare min
    180            const static uint16_t i = this->updateInterval * 1000;
   \   0000003E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000042   0x80A8             STRH     R0,[R5, #+4]
    181          
    182            if (now - update_last >= i) {
   \                     ??tick_3: (+1)
   \   00000044   0x68A8             LDR      R0,[R5, #+8]
   \   00000046   0x1A30             SUBS     R0,R6,R0
   \   00000048   0x88A9             LDRH     R1,[R5, #+4]
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xD306             BCC.N    ??tick_4
    183              #if ENABLED(DEBUG_PRINTCOUNTER)
    184                PrintCounter::debug(PSTR("tick"));
    185              #endif
    186          
    187              this->data.printTime += this->deltaDuration();
   \   0000004E   0x6967             LDR      R7,[R4, #+20]
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       _ZN12PrintCounter13deltaDurationEv
   \   00000056   0x19C0             ADDS     R0,R0,R7
   \   00000058   0x6160             STR      R0,[R4, #+20]
    188              update_last = now;
   \   0000005A   0x60AE             STR      R6,[R5, #+8]
   \                     ??tick_4: (+1)
   \   0000005C   0x78E8             LDRB     R0,[R5, #+3]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD103             BNE.N    ??tick_5
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x70E8             STRB     R0,[R5, #+3]
    189            }
    190          
    191            // Trying to get the amount of calculations down to the bare min
    192            const static millis_t j = this->saveInterval * 1000;
   \   00000066   0x....             LDR.N    R0,??DataTable9_4  ;; 0x36ee80
   \   00000068   0x6128             STR      R0,[R5, #+16]
    193            if (now - eeprom_last >= j) {
   \                     ??tick_5: (+1)
   \   0000006A   0x68E8             LDR      R0,[R5, #+12]
   \   0000006C   0x1A30             SUBS     R0,R6,R0
   \   0000006E   0x6929             LDR      R1,[R5, #+16]
   \   00000070   0x4288             CMP      R0,R1
   \   00000072   0xD304             BCC.N    ??tick_0
    194              eeprom_last = now;
   \   00000074   0x60EE             STR      R6,[R5, #+12]
    195              this->saveStats();
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   0000007C   0x....             B.N      _ZN12PrintCounter9saveStatsEv
    196            }
    197          }
   \                     ??tick_0: (+1)
   \   0000007E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .bss, align 4
   \   __absolute unsigned char PrintCounter::tick()::_ZGVupdate_last
   \                     ??_ZGVupdate_last:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \   00000008                      DS8 4
   \   0000000C                      DS8 4
   \   00000010                      DS8 4
    198          
    199          // @Override

   \                                 In section .text, align 2, keep-with-next
    200          bool PrintCounter::start() {
   \                     _ZN12PrintCounter5startEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    201            #if ENABLED(DEBUG_PRINTCOUNTER)
    202              PrintCounter::debug(PSTR("start"));
    203            #endif
    204          
    205            bool paused = this->isPaused();
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch8isPausedEv
   \   00000008   0x4605             MOV      R5,R0
    206          
    207            if (super::start()) {
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN9Stopwatch5startEv
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD008             BEQ.N    ??start_0
    208              if (!paused) {
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD104             BNE.N    ??start_1
    209                this->data.totalPrints++;
   \   00000018   0x8A20             LDRH     R0,[R4, #+16]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x8220             STRH     R0,[R4, #+16]
    210                this->lastDuration = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x62A0             STR      R0,[R4, #+40]
    211              }
    212              return true;
   \                     ??start_1: (+1)
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}
    213            }
    214          
    215            return false;
   \                     ??start_0: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    216          }
    217          
    218          // @Override

   \                                 In section .text, align 2, keep-with-next
    219          bool PrintCounter::stop() {
   \                     _ZN12PrintCounter4stopEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    220            #if ENABLED(DEBUG_PRINTCOUNTER)
    221              PrintCounter::debug(PSTR("stop"));
    222            #endif
    223          
    224            if (super::stop()) {
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch4stopEv
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD017             BEQ.N    ??stop_0
    225              this->data.finishedPrints++;
   \   0000000C   0x8A60             LDRH     R0,[R4, #+18]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x8260             STRH     R0,[R4, #+18]
    226              this->data.printTime += this->deltaDuration();
   \   00000012   0x6965             LDR      R5,[R4, #+20]
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       _ZN12PrintCounter13deltaDurationEv
   \   0000001A   0x1940             ADDS     R0,R0,R5
   \   0000001C   0x6160             STR      R0,[R4, #+20]
    227          
    228              if (this->duration() > this->data.longestPrint)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       _ZN9Stopwatch8durationEv
   \   00000024   0x69A1             LDR      R1,[R4, #+24]
   \   00000026   0x4281             CMP      R1,R0
   \   00000028   0xD203             BCS.N    ??stop_1
    229                this->data.longestPrint = this->duration();
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       _ZN9Stopwatch8durationEv
   \   00000030   0x61A0             STR      R0,[R4, #+24]
    230          
    231              this->saveStats();
   \                     ??stop_1: (+1)
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       _ZN12PrintCounter9saveStatsEv
    232              return true;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xBD32             POP      {R1,R4,R5,PC}
    233            }
    234            else return false;
   \                     ??stop_0: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    235          }
    236          
    237          // @Override

   \                                 In section .text, align 2, keep-with-next
    238          void PrintCounter::reset() {
   \                     _ZN12PrintCounter5resetEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    239            #if ENABLED(DEBUG_PRINTCOUNTER)
    240              PrintCounter::debug(PSTR("stop"));
    241            #endif
    242          
    243            super::reset();
   \   00000004   0x.... 0x....      BL       _ZN9Stopwatch5resetEv
    244            this->lastDuration = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x62A0             STR      R0,[R4, #+40]
    245          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "m">`:
   \   00000000   0x6D 0x00          DC8 "m"

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp PrintCounter::subobject PrintCounter()
   \                     _ZN12PrintCounterC2Ev: (+1)
   \   00000000   0xBF00             Nop      
   \   00000002                      REQUIRE _ZN12PrintCounterC1Ev
   \   00000002                      ;; // Fall through to label PrintCounter::PrintCounter()

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x6D 0x00          DC8      "m",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x408F4000         DC32     0x408f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     ??_ZGVupdate_last

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x0036EE80         DC32     0x36ee80

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Stats: ">`:
   \   00000000   0x53 0x74          DC8 "Stats: "
   \              0x61 0x74    
   \              0x73 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Prints: ">`:
   \   00000000   0x50 0x72          DC8 "Prints: "
   \              0x69 0x6E    
   \              0x74 0x73    
   \              0x3A 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", Finished: ">`:
   \   00000000   0x2C 0x20          DC8 ", Finished: "
   \              0x46 0x69    
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", Failed: ">`:
   \   00000000   0x2C 0x20          DC8 ", Failed: "
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Total time: ">`:
   \   00000000   0x54 0x6F          DC8 "Total time: "
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", Longest job: ">`:
   \   00000000   0x2C 0x20          DC8 ", Longest job: "
   \              0x4C 0x6F    
   \              0x6E 0x67    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x6A 0x6F    
   \              0x62 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Filament used: ">`:
   \   00000000   0x46 0x69          DC8 "Filament used: "
   \              0x6C 0x61    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
    246          
    247          #if ENABLED(DEBUG_PRINTCOUNTER)
    248          
    249            void PrintCounter::debug(const char func[]) {
    250              if (DEBUGGING(INFO)) {
    251                SERIAL_ECHOPGM("PrintCounter::");
    252                serialprintPGM(func);
    253                SERIAL_ECHOLNPGM("()");
    254              }
    255            }
    256          
    257          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PrintCounter::PrintCounter()
         8   -> PrintCounter::loadStats()
         8   -> Stopwatch::subobject Stopwatch()
      16   PrintCounter::deltaDuration()
        16   -> Stopwatch::duration()
      16   PrintCounter::incFilamentUsed(double const &)
        16   -> PrintCounter::isLoaded()
        16   -> __aeabi_dadd
       8   PrintCounter::initStats()
         8   -> AT24CXX_Write
         8   -> PrintCounter::saveStats()
       0   PrintCounter::isLoaded()
      16   PrintCounter::loadStats()
        16   -> AT24CXX_Read
        16   -> PrintCounter::initStats()
       8   PrintCounter::reset()
         8   -> Stopwatch::reset()
       8   PrintCounter::saveStats()
         0   -> AT24CXX_Write
         8   -> PrintCounter::isLoaded()
      48   PrintCounter::showStats()
        48   -> Print::print(char const *)
        48   -> Print::print(double, int)
        48   -> Print::print(int, int)
        48   -> Stopwatch::isPaused()
        48   -> Stopwatch::isRunning()
        48   -> USARTClass::write(uint8_t)
        48   -> __aeabi_ddiv
        48   -> duration_t::duration_t()
        48   -> duration_t::duration_t(uint32_t const &)
        48   -> duration_t::toString(char *) const
        48   -> serialprintPGM(char const *)
      16   PrintCounter::start()
        16   -> Stopwatch::isPaused()
        16   -> Stopwatch::start()
      16   PrintCounter::stop()
        16   -> PrintCounter::deltaDuration()
        16   -> PrintCounter::saveStats()
        16   -> Stopwatch::duration()
        16   -> Stopwatch::stop()
       0   PrintCounter::subobject PrintCounter()
         0   -> PrintCounter::PrintCounter()
      24   PrintCounter::tick()
        24   -> HAL_GetTick
        24   -> PrintCounter::deltaDuration()
         0   -> PrintCounter::saveStats()
        24   -> Stopwatch::isRunning()
       8   duration_t::day() const
         8   -> duration_t::hour() const
       0   duration_t::duration_t(uint32_t const &)
       8   duration_t::hour() const
         8   -> duration_t::minute() const
       8   duration_t::minute() const
         8   -> duration_t::second() const
       0   duration_t::second() const
      48   duration_t::toString(char *) const
        48   -> duration_t::day() const
        48   -> duration_t::hour() const
        48   -> duration_t::minute() const
        48   -> duration_t::second() const
        48   -> duration_t::year() const
         0   -> sprintf
        48   -> sprintf
       8   duration_t::year() const
         8   -> duration_t::day() const
       8   serialprintPGM(char const *)
         8   -> USARTClass::write(uint8_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant ", Failed: ">
      16  ?<Constant ", Finished: ">
      16  ?<Constant ", Longest job: ">
      16  ?<Constant "Filament used: ">
      12  ?<Constant "Prints: ">
       8  ?<Constant "Stats: ">
      16  ?<Constant "Total time: ">
       2  ?<Constant "m">
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
      18  PrintCounter::PrintCounter()
      16  PrintCounter::deltaDuration()
      32  PrintCounter::incFilamentUsed(double const &)
      48  PrintCounter::initStats()
       6  PrintCounter::isLoaded()
      52  PrintCounter::loadStats()
      14  PrintCounter::reset()
      30  PrintCounter::saveStats()
     260  PrintCounter::showStats()
      42  PrintCounter::start()
      64  PrintCounter::stop()
       2  PrintCounter::subobject PrintCounter()
     128  PrintCounter::tick()
      20  _ZGVupdate_last
          _ZGVeeprom_last
          _ZGVi
          _ZGVj
          i
          update_last
          eeprom_last
          j
      16  duration_t::day() const
       6  duration_t::duration_t(uint32_t const &)
      14  duration_t::hour() const
      14  duration_t::minute() const
       4  duration_t::second() const
     232  duration_t::toString(char *) const
      18  duration_t::year() const
      28  serialprintPGM(char const *)
      61  -- Other

 
    20 bytes in section .bss
    63 bytes in section .rodata
 1 160 bytes in section .text
 
 828 bytes of CODE  memory (+ 332 bytes shared)
   2 bytes of CONST memory (+  61 bytes shared)
  20 bytes of DATA  memory

Errors: none
Warnings: 10
