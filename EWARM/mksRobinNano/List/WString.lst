###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:06:24
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\WString.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\WString.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\WString.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\WString.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\Middlewares\arduino\stm32\cores\arduino\WString.cpp
      1          /*
      2            WString.cpp - String library for Wiring & Arduino
      3            ...mostly rewritten by Paul Stoffregen...
      4            Copyright (c) 2009-10 Hernando Barragan.  All rights reserved.
      5            Copyright 2011, Paul Stoffregen, paul@pjrc.com
      6          
      7            This library is free software; you can redistribute it and/or
      8            modify it under the terms of the GNU Lesser General Public
      9            License as published by the Free Software Foundation; either
     10            version 2.1 of the License, or (at your option) any later version.
     11          
     12            This library is distributed in the hope that it will be useful,
     13            but WITHOUT ANY WARRANTY; without even the implied warranty of
     14            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     15            Lesser General Public License for more details.
     16          
     17            You should have received a copy of the GNU Lesser General Public
     18            License along with this library; if not, write to the Free Software
     19            Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     20          */
     21          
     22          #include "WString.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp char *strchr(char *, int)
   \                     _Z6strchrPci: (+1)
   \   00000000   0x.... 0x....      B.W      __iar_Strchr

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp char *strrchr(char *, int)
   \                     _Z7strrchrPci: (+1)
   \   00000000   0x.... 0x....      B.W      __iar_Strrchr

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp char *strstr(char *, char const *)
   \                     _Z6strstrPcPKc: (+1)
   \   00000000   0x.... 0x....      B.W      __iar_Strstr
     23          #include "itoa.h"
     24          #include "avr/dtostrf.h"
     25          
     26          /*********************************************/
     27          /*  Constructors                             */
     28          /*********************************************/
     29          

   \                                 In section .text, align 2, keep-with-next
     30          String::String(const char *cstr)
     31          {
   \                     _ZN6StringC1EPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     32          	init();
   \   00000006   0x.... 0x....      BL       _ZN6String4initEv
     33          	if (cstr) copy(cstr, strlen(cstr));
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD007             BEQ.N    ??String_0
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      BL       strlen
   \   00000014   0x4602             MOV      R2,R0
   \   00000016   0x4629             MOV      R1,R5
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN6String4copyEPKcj
     34          }
   \                     ??String_0: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          String::String(const String &value)
     37          {
   \                     _ZN6StringC1ERKS_: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     38          	init();
   \   00000006   0x.... 0x....      BL       _ZN6String4initEv
     39          	*this = value;
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6StringaSERKS_
     40          }
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     41          

   \                                 In section .text, align 2, keep-with-next
     42          String::String(const __FlashStringHelper *pstr)
     43          {
   \                     _ZN6StringC1EPK19__FlashStringHelper: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     44          	init();
   \   00000006   0x.... 0x....      BL       _ZN6String4initEv
     45          	*this = pstr;
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6StringaSEPK19__FlashStringHelper
     46          }
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     47          
     48          #ifdef __GXX_EXPERIMENTAL_CXX0X__
     49          String::String(String &&rval)
     50          {
     51          	init();
     52          	move(rval);
     53          }
     54          String::String(StringSumHelper &&rval)
     55          {
     56          	init();
     57          	move(rval);
     58          }
     59          #endif
     60          

   \                                 In section .text, align 2, keep-with-next
     61          String::String(char c)
     62          {
   \                     _ZN6StringC1Ec: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     63          	init();
   \   00000006   0x.... 0x....      BL       _ZN6String4initEv
     64          	char buf[2];
     65          	buf[0] = c;
   \   0000000A   0xF88D 0x5000      STRB     R5,[SP, #+0]
     66          	buf[1] = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0001      STRB     R0,[SP, #+1]
     67          	*this = buf;
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       _ZN6StringaSEPKc
     68          }
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     69          

   \                                 In section .text, align 2, keep-with-next
     70          String::String(unsigned char value, unsigned char base)
     71          {
   \                     _ZN6StringC1Ehh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
     72          	init();
   \   0000000A   0x.... 0x....      BL       _ZN6String4initEv
     73          	char buf[9];
     74          	utoa(value, buf, base);
   \   0000000E   0x4632             MOV      R2,R6
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       utoa
     75          	*this = buf;
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6StringaSEPKc
     76          }
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xB004             ADD      SP,SP,#+16
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          String::String(int value, unsigned char base)
     79          {
   \                     _ZN6StringC1Eih: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
     80          	init();
   \   0000000A   0x.... 0x....      BL       _ZN6String4initEv
     81          	char buf[18];
     82          	itoa(value, buf, base);
   \   0000000E   0x4632             MOV      R2,R6
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       itoa
     83          	*this = buf;
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6StringaSEPKc
     84          }
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xB006             ADD      SP,SP,#+24
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
     85          

   \                                 In section .text, align 2, keep-with-next
     86          String::String(unsigned int value, unsigned char base)
     87          {
   \                     _ZN6StringC1Ejh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
     88          	init();
   \   0000000A   0x.... 0x....      BL       _ZN6String4initEv
     89          	char buf[17];
     90          	utoa(value, buf, base);
   \   0000000E   0x4632             MOV      R2,R6
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       utoa
     91          	*this = buf;
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6StringaSEPKc
     92          }
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xB006             ADD      SP,SP,#+24
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
     93          

   \                                 In section .text, align 2, keep-with-next
     94          String::String(long value, unsigned char base)
     95          {
   \                     _ZN6StringC1Elh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
     96          	init();
   \   0000000A   0x.... 0x....      BL       _ZN6String4initEv
     97          	char buf[34];
     98          	ltoa(value, buf, base);
   \   0000000E   0x4632             MOV      R2,R6
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       ltoa
     99          	*this = buf;
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6StringaSEPKc
    100          }
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xB00A             ADD      SP,SP,#+40
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
    101          

   \                                 In section .text, align 2, keep-with-next
    102          String::String(unsigned long value, unsigned char base)
    103          {
   \                     _ZN6StringC1Emh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    104          	init();
   \   0000000A   0x.... 0x....      BL       _ZN6String4initEv
    105          	char buf[33];
    106          	ultoa(value, buf, base);
   \   0000000E   0x4632             MOV      R2,R6
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       ultoa
    107          	*this = buf;
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6StringaSEPKc
    108          }
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xB00A             ADD      SP,SP,#+40
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
    109          

   \                                 In section .text, align 2, keep-with-next
    110          String::String(float value, unsigned char decimalPlaces)
    111          {
   \                     _ZN6StringC1Efh: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    112          	init();
   \   0000000A   0x.... 0x....      BL       _ZN6String4initEv
    113          	char buf[33];
    114          	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x4633             MOV      R3,R6
   \   00000014   0x1CB2             ADDS     R2,R6,#+2
   \   00000016   0xB252             SXTB     R2,R2
   \   00000018   0x4616             MOV      R6,R2
   \   0000001A   0x461F             MOV      R7,R3
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       __aeabi_f2d
   \   00000022   0x463B             MOV      R3,R7
   \   00000024   0x4632             MOV      R2,R6
   \   00000026   0x.... 0x....      BL       dtostrf
   \   0000002A   0x4601             MOV      R1,R0
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       _ZN6StringaSEPKc
    115          }
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0xB00B             ADD      SP,SP,#+44
   \   00000036   0xBDF0             POP      {R4-R7,PC}       ;; return
    116          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(double, unsigned char)
   \                     _ZN6StringC2Edh: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x9902             LDR      R1,[SP, #+8]
   \   00000004   0x9100             STR      R1,[SP, #+0]
   \   00000006   0x.... 0x....      BL       _ZN6StringC1Edh
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    117          String::String(double value, unsigned char decimalPlaces)
    118          {
   \                     _ZN6StringC1Edh: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x4614             MOV      R4,R2
   \   00000008   0x461D             MOV      R5,R3
    119          	init();
   \   0000000A   0x.... 0x....      BL       _ZN6String4initEv
   \   0000000E   0x9B0E             LDR      R3,[SP, #+56]
    120          	char buf[33];
    121          	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
   \   00000010   0xA801             ADD      R0,SP,#+4
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x1C9A             ADDS     R2,R3,#+2
   \   00000016   0xB252             SXTB     R2,R2
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x4629             MOV      R1,R5
   \   0000001C   0x.... 0x....      BL       dtostrf
   \   00000020   0x4601             MOV      R1,R0
   \   00000022   0x4630             MOV      R0,R6
   \   00000024   0x.... 0x....      BL       _ZN6StringaSEPKc
    122          }
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0xB00A             ADD      SP,SP,#+40
   \   0000002C   0xBD70             POP      {R4-R6,PC}       ;; return
    123          

   \                                 In section .text, align 2, keep-with-next
    124          String::~String()
    125          {
   \                     _ZN6StringD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    126          	free(buffer);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       free
    127          }
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
    128          
    129          /*********************************************/
    130          /*  Memory Management                        */
    131          /*********************************************/
    132          

   \                                 In section .text, align 2
    133          inline void String::init(void)
    134          {
    135          	buffer = NULL;
   \                     _ZN6String4initEv: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
    136          	capacity = 0;
   \   00000004   0x6041             STR      R1,[R0, #+4]
    137          	len = 0;
   \   00000006   0x6081             STR      R1,[R0, #+8]
    138          }
   \   00000008   0x4770             BX       LR               ;; return
    139          

   \                                 In section .text, align 2, keep-with-next
    140          void String::invalidate(void)
    141          {
   \                     _ZN6String10invalidateEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    142          	if (buffer) free(buffer);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD001             BEQ.N    ??invalidate_0
   \   0000000A   0x.... 0x....      BL       free
    143          	buffer = NULL;
   \                     ??invalidate_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x6020             STR      R0,[R4, #+0]
    144          	capacity = len = 0;
   \   00000012   0x60A0             STR      R0,[R4, #+8]
   \   00000014   0x6060             STR      R0,[R4, #+4]
    145          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    146          

   \                                 In section .text, align 2, keep-with-next
    147          unsigned char String::reserve(unsigned int size)
    148          {
   \                     _ZN6String7reserveEj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    149          	if (buffer && capacity >= size) return 1;
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD002             BEQ.N    ??reserve_0
   \   0000000A   0x6860             LDR      R0,[R4, #+4]
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD20A             BCS.N    ??reserve_1
    150          	if (changeBuffer(size)) {
   \                     ??reserve_0: (+1)
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       _ZN6String12changeBufferEj
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD007             BEQ.N    ??reserve_2
    151          		if (len == 0) buffer[0] = 0;
   \   0000001A   0x68A0             LDR      R0,[R4, #+8]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD102             BNE.N    ??reserve_1
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    152          		return 1;
   \                     ??reserve_1: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xBD10             POP      {R4,PC}
    153          	}
    154          	return 0;
   \                     ??reserve_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    155          }
    156          

   \                                 In section .text, align 2, keep-with-next
    157          unsigned char String::changeBuffer(unsigned int maxStrLen)
    158          {
   \                     _ZN6String12changeBufferEj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    159          	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   \   00000006   0x1C69             ADDS     R1,R5,#+1
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x.... 0x....      BL       realloc
    160          	if (newbuffer) {
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD003             BEQ.N    ??changeBuffer_0
    161          		buffer = newbuffer;
   \   00000012   0x6020             STR      R0,[R4, #+0]
    162          		capacity = maxStrLen;
   \   00000014   0x6065             STR      R5,[R4, #+4]
    163          		return 1;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}
    164          	}
    165          	return 0;
   \                     ??changeBuffer_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    166          }
    167          
    168          /*********************************************/
    169          /*  Copy and Move                            */
    170          /*********************************************/
    171          

   \                                 In section .text, align 2, keep-with-next
    172          String & String::copy(const char *cstr, unsigned int length)
    173          {
   \                     _ZN6String4copyEPKcj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    174          	if (!reserve(length)) {
   \   00000008   0x4631             MOV      R1,R6
   \   0000000A   0x.... 0x....      BL       _ZN6String7reserveEj
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD104             BNE.N    ??copy_0
    175          		invalidate();
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String10invalidateEv
    176          		return *this;
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0xBD70             POP      {R4-R6,PC}
    177          	}
    178          	len = length;
   \                     ??copy_0: (+1)
   \   0000001C   0x60A6             STR      R6,[R4, #+8]
    179          	strcpy(buffer, cstr);
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x.... 0x....      BL       strcpy
    180          	return *this;
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
    181          }
    182          

   \                                 In section .text, align 2, keep-with-next
    183          String & String::copy(const __FlashStringHelper *pstr, unsigned int length)
    184          {
   \                     _ZN6String4copyEPK19__FlashStringHelperj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    185          	if (!reserve(length)) {
   \   00000008   0x4631             MOV      R1,R6
   \   0000000A   0x.... 0x....      BL       _ZN6String7reserveEj
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD104             BNE.N    ??copy_1
    186          		invalidate();
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String10invalidateEv
    187          		return *this;
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0xBD70             POP      {R4-R6,PC}
    188          	}
    189          	len = length;
   \                     ??copy_1: (+1)
   \   0000001C   0x60A6             STR      R6,[R4, #+8]
    190          	strcpy_P(buffer, (const prog_char *)pstr);
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x.... 0x....      BL       strcpy
    191          	return *this;
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0xBD70             POP      {R4-R6,PC}       ;; return
    192          }
    193          
    194          #ifdef __GXX_EXPERIMENTAL_CXX0X__
    195          void String::move(String &rhs)
    196          {
    197          	if (buffer) {
    198          		if (capacity >= rhs.len) {
    199          			strcpy(buffer, rhs.buffer);
    200          			len = rhs.len;
    201          			rhs.len = 0;
    202          			return;
    203          		} else {
    204          			free(buffer);
    205          		}
    206          	}
    207          	buffer = rhs.buffer;
    208          	capacity = rhs.capacity;
    209          	len = rhs.len;
    210          	rhs.buffer = NULL;
    211          	rhs.capacity = 0;
    212          	rhs.len = 0;
    213          }
    214          #endif
    215          

   \                                 In section .text, align 2, keep-with-next
    216          String & String::operator = (const String &rhs)
    217          {
   \                     _ZN6StringaSERKS_: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    218          	if (this == &rhs) return *this;
   \   00000004   0x428C             CMP      R4,R1
   \   00000006   0xD00B             BEQ.N    `??operator=_0`
    219          	
    220          	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   \   00000008   0x6808             LDR      R0,[R1, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD005             BEQ.N    `??operator=_1`
   \   0000000E   0x688A             LDR      R2,[R1, #+8]
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String4copyEPKcj
   \   00000018   0xE002             B.N      `??operator=_0`
    221          	else invalidate();
   \                     `??operator=_1`: (+1)
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String10invalidateEv
    222          	
    223          	return *this;
   \                     `??operator=_0`: (+1)
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    224          }
    225          
    226          #ifdef __GXX_EXPERIMENTAL_CXX0X__
    227          String & String::operator = (String &&rval)
    228          {
    229          	if (this != &rval) move(rval);
    230          	return *this;
    231          }
    232          
    233          String & String::operator = (StringSumHelper &&rval)
    234          {
    235          	if (this != &rval) move(rval);
    236          	return *this;
    237          }
    238          #endif
    239          

   \                                 In section .text, align 2, keep-with-next
    240          String & String::operator = (const char *cstr)
    241          {
   \                     _ZN6StringaSEPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    242          	if (cstr) copy(cstr, strlen(cstr));
   \   00000006   0xD008             BEQ.N    `??operator=_2`
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       strlen
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String4copyEPKcj
   \   00000018   0xE001             B.N      `??operator=_3`
    243          	else invalidate();
   \                     `??operator=_2`: (+1)
   \   0000001A   0x.... 0x....      BL       _ZN6String10invalidateEv
    244          	
    245          	return *this;
   \                     `??operator=_3`: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    246          }
    247          

   \                                 In section .text, align 2, keep-with-next
    248          String & String::operator = (const __FlashStringHelper *pstr)
    249          {
   \                     _ZN6StringaSEPK19__FlashStringHelper: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    250          	if (pstr) copy(pstr, strlen_P((const prog_char *)pstr));
   \   00000006   0xD008             BEQ.N    `??operator=_4`
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       strlen
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String4copyEPK19__FlashStringHelperj
   \   00000018   0xE001             B.N      `??operator=_5`
    251          	else invalidate();
   \                     `??operator=_4`: (+1)
   \   0000001A   0x.... 0x....      BL       _ZN6String10invalidateEv
    252          
    253          	return *this;
   \                     `??operator=_5`: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    254          }
    255          
    256          /*********************************************/
    257          /*  concat                                   */
    258          /*********************************************/
    259          

   \                                 In section .text, align 2, keep-with-next
    260          unsigned char String::concat(const String &s)
    261          {
    262          	return concat(s.buffer, s.len);
   \                     _ZN6String6concatERKS_: (+1)
   \   00000000   0x688A             LDR      R2,[R1, #+8]
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004                      REQUIRE _ZN6String6concatEPKcj
   \   00000004                      ;; // Fall through to label String::concat(char const *, unsigned int)
    263          }
    264          

   \                                 In section .text, align 2, keep-with-next
    265          unsigned char String::concat(const char *cstr, unsigned int length)
    266          {
   \                     _ZN6String6concatEPKcj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    267          	unsigned int newlen = len + length;
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x1816             ADDS     R6,R2,R0
    268          	if (!cstr) return 0;
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD101             BNE.N    ??concat_0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD70             POP      {R4-R6,PC}
    269          	if (length == 0) return 1;
   \                     ??concat_0: (+1)
   \   00000012   0x2A00             CMP      R2,#+0
   \   00000014   0xD101             BNE.N    ??concat_1
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xBD70             POP      {R4-R6,PC}
    270          	if (!reserve(newlen)) return 0;
   \                     ??concat_1: (+1)
   \   0000001A   0x4631             MOV      R1,R6
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       _ZN6String7reserveEj
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD101             BNE.N    ??concat_2
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xBD70             POP      {R4-R6,PC}
    271          	strcpy(buffer + len, cstr);
   \                     ??concat_2: (+1)
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x68A0             LDR      R0,[R4, #+8]
   \   0000002E   0x6822             LDR      R2,[R4, #+0]
   \   00000030   0x1880             ADDS     R0,R0,R2
   \   00000032   0x.... 0x....      BL       strcpy
    272          	len = newlen;
   \   00000036   0x60A6             STR      R6,[R4, #+8]
    273          	return 1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    274          }
    275          

   \                                 In section .text, align 2, keep-with-next
    276          unsigned char String::concat(const char *cstr)
    277          {
   \                     _ZN6String6concatEPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    278          	if (!cstr) return 0;
   \   00000006   0xD101             BNE.N    ??concat_3
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD32             POP      {R1,R4,R5,PC}
    279          	return concat(cstr, strlen(cstr));
   \                     ??concat_3: (+1)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       strlen
   \   00000012   0x4602             MOV      R2,R0
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   0000001C   0x....             B.N      _ZN6String6concatEPKcj
    280          }
    281          

   \                                 In section .text, align 2, keep-with-next
    282          unsigned char String::concat(char c)
    283          {
   \                     _ZN6String6concatEc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    284          	char buf[2];
    285          	buf[0] = c;
   \   00000002   0xF88D 0x1000      STRB     R1,[SP, #+0]
    286          	buf[1] = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xF88D 0x1001      STRB     R1,[SP, #+1]
    287          	return concat(buf, 1);
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    288          }
    289          

   \                                 In section .text, align 2, keep-with-next
    290          unsigned char String::concat(unsigned char num)
    291          {
   \                     _ZN6String6concatEh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4608             MOV      R0,R1
    292          	char buf[4];
    293          	itoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       itoa
    294          	return concat(buf, strlen(buf));
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    295          }
    296          

   \                                 In section .text, align 2, keep-with-next
    297          unsigned char String::concat(int num)
    298          {
   \                     _ZN6String6concatEi: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4608             MOV      R0,R1
    299          	char buf[12];
    300          	itoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       itoa
    301          	return concat(buf, strlen(buf));
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000020   0xB004             ADD      SP,SP,#+16
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    302          }
    303          

   \                                 In section .text, align 2, keep-with-next
    304          unsigned char String::concat(unsigned int num)
    305          {
   \                     _ZN6String6concatEj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4608             MOV      R0,R1
    306          	char buf[11];
    307          	utoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       utoa
    308          	return concat(buf, strlen(buf));
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000020   0xB004             ADD      SP,SP,#+16
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    309          }
    310          

   \                                 In section .text, align 2, keep-with-next
    311          unsigned char String::concat(long num)
    312          {
   \                     _ZN6String6concatEl: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4608             MOV      R0,R1
    313          	char buf[12];
    314          	ltoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       ltoa
    315          	return concat(buf, strlen(buf));
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000020   0xB004             ADD      SP,SP,#+16
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    316          }
    317          

   \                                 In section .text, align 2, keep-with-next
    318          unsigned char String::concat(unsigned long num)
    319          {
   \                     _ZN6String6concatEm: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4608             MOV      R0,R1
    320          	char buf[11];
    321          	ultoa(num, buf, 10);
   \   00000008   0x220A             MOVS     R2,#+10
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       ultoa
    322          	return concat(buf, strlen(buf));
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       strlen
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000020   0xB004             ADD      SP,SP,#+16
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    323          }
    324          

   \                                 In section .text, align 2, keep-with-next
    325          unsigned char String::concat(float num)
    326          {
   \                     _ZN6String6concatEf: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4608             MOV      R0,R1
    327          	char buf[20];
    328          	char* string = dtostrf(num, 4, 2, buf);
   \   00000008   0xA901             ADD      R1,SP,#+4
   \   0000000A   0x9100             STR      R1,[SP, #+0]
   \   0000000C   0x2302             MOVS     R3,#+2
   \   0000000E   0x2204             MOVS     R2,#+4
   \   00000010   0x4615             MOV      R5,R2
   \   00000012   0x461E             MOV      R6,R3
   \   00000014   0x.... 0x....      BL       __aeabi_f2d
   \   00000018   0x4633             MOV      R3,R6
   \   0000001A   0x462A             MOV      R2,R5
   \   0000001C   0x.... 0x....      BL       dtostrf
   \   00000020   0x4605             MOV      R5,R0
    329          	return concat(string, strlen(string));
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x4602             MOV      R2,R0
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000030   0xB006             ADD      SP,SP,#+24
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
    330          }
    331          

   \                                 In section .text, align 2, keep-with-next
    332          unsigned char String::concat(double num)
    333          {
   \                     _ZN6String6concatEd: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4610             MOV      R0,R2
   \   00000008   0x4619             MOV      R1,R3
    334          	char buf[20];
    335          	char* string = dtostrf(num, 4, 2, buf);
   \   0000000A   0xAA01             ADD      R2,SP,#+4
   \   0000000C   0x9200             STR      R2,[SP, #+0]
   \   0000000E   0x2302             MOVS     R3,#+2
   \   00000010   0x2204             MOVS     R2,#+4
   \   00000012   0x.... 0x....      BL       dtostrf
   \   00000016   0x4605             MOV      R5,R0
    336          	return concat(string, strlen(string));
   \   00000018   0x.... 0x....      BL       strlen
   \   0000001C   0x4602             MOV      R2,R0
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000026   0xB007             ADD      SP,SP,#+28
   \   00000028   0xBD30             POP      {R4,R5,PC}       ;; return
    337          }
    338          

   \                                 In section .text, align 2, keep-with-next
    339          unsigned char String::concat(const __FlashStringHelper * str)
    340          {
   \                     _ZN6String6concatEPK19__FlashStringHelper: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    341          	if (!str) return 0;
   \   00000006   0xD101             BNE.N    ??concat_4
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD70             POP      {R4-R6,PC}
    342          	int length = strlen_P((const char *) str);
   \                     ??concat_4: (+1)
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       strlen
    343          	if (length == 0) return 1;
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD101             BNE.N    ??concat_5
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xBD70             POP      {R4-R6,PC}
    344          	unsigned int newlen = len + length;
   \                     ??concat_5: (+1)
   \   0000001A   0x68A1             LDR      R1,[R4, #+8]
   \   0000001C   0x1846             ADDS     R6,R0,R1
    345          	if (!reserve(newlen)) return 0;
   \   0000001E   0x4631             MOV      R1,R6
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       _ZN6String7reserveEj
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE.N    ??concat_6
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xBD70             POP      {R4-R6,PC}
    346          	strcpy_P(buffer + len, (const char *) str);
   \                     ??concat_6: (+1)
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x68A0             LDR      R0,[R4, #+8]
   \   00000032   0x6822             LDR      R2,[R4, #+0]
   \   00000034   0x1880             ADDS     R0,R0,R2
   \   00000036   0x.... 0x....      BL       strcpy
    347          	len = newlen;
   \   0000003A   0x60A6             STR      R6,[R4, #+8]
    348          	return 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return
    349          }
    350          
    351          /*********************************************/
    352          /*  Concatenate                              */
    353          /*********************************************/
    354          

   \                                 In section .text, align 2, keep-with-next
    355          StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    356          {
   \                     _ZplRK15StringSumHelperRK6String: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    357          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    358          	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   \   00000004   0x688A             LDR      R2,[R1, #+8]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD102             BNE.N    `??operator+_0`
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       _ZN6String10invalidateEv
    359          	return a;
   \                     `??operator+_0`: (+1)
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    360          }
    361          

   \                                 In section .text, align 2, keep-with-next
    362          StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
    363          {
   \                     _ZplRK15StringSumHelperPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    364          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    365          	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   \   00000006   0xD009             BEQ.N    `??operator+_1`
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       strlen
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       _ZN6String6concatEPKcj
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD102             BNE.N    `??operator+_2`
   \                     `??operator+_1`: (+1)
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       _ZN6String10invalidateEv
    366          	return a;
   \                     `??operator+_2`: (+1)
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    367          }
    368          

   \                                 In section .text, align 2, keep-with-next
    369          StringSumHelper & operator + (const StringSumHelper &lhs, char c)
    370          {
   \                     _ZplRK15StringSumHelperc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    371          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    372          	if (!a.concat(c)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEc
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_3`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    373          	return a;
   \                     `??operator+_3`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    374          }
    375          

   \                                 In section .text, align 2, keep-with-next
    376          StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
    377          {
   \                     _ZplRK15StringSumHelperh: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    378          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    379          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEh
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_4`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    380          	return a;
   \                     `??operator+_4`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    381          }
    382          

   \                                 In section .text, align 2, keep-with-next
    383          StringSumHelper & operator + (const StringSumHelper &lhs, int num)
    384          {
   \                     _ZplRK15StringSumHelperi: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    385          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    386          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEi
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_5`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    387          	return a;
   \                     `??operator+_5`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    388          }
    389          

   \                                 In section .text, align 2, keep-with-next
    390          StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
    391          {
   \                     _ZplRK15StringSumHelperj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    392          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    393          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEj
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_6`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    394          	return a;
   \                     `??operator+_6`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    395          }
    396          

   \                                 In section .text, align 2, keep-with-next
    397          StringSumHelper & operator + (const StringSumHelper &lhs, long num)
    398          {
   \                     _ZplRK15StringSumHelperl: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    399          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    400          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEl
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_7`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    401          	return a;
   \                     `??operator+_7`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    402          }
    403          

   \                                 In section .text, align 2, keep-with-next
    404          StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
    405          {
   \                     _ZplRK15StringSumHelperm: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    406          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    407          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEm
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_8`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    408          	return a;
   \                     `??operator+_8`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    409          }
    410          

   \                                 In section .text, align 2, keep-with-next
    411          StringSumHelper & operator + (const StringSumHelper &lhs, float num)
    412          {
   \                     _ZplRK15StringSumHelperf: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    413          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    414          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEf
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_9`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    415          	return a;
   \                     `??operator+_9`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    416          }
    417          

   \                                 In section .text, align 2, keep-with-next
    418          StringSumHelper & operator + (const StringSumHelper &lhs, double num)
    419          {
   \                     _ZplRK15StringSumHelperd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    420          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    421          	if (!a.concat(num)) a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEd
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_10`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    422          	return a;
   \                     `??operator+_10`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    423          }
    424          

   \                                 In section .text, align 2, keep-with-next
    425          StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs)
    426          {
   \                     _ZplRK15StringSumHelperPK19__FlashStringHelper: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    427          	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    428          	if (!a.concat(rhs))	a.invalidate();
   \   00000004   0x.... 0x....      BL       _ZN6String6concatEPK19__FlashStringHelper
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD102             BNE.N    `??operator+_11`
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       _ZN6String10invalidateEv
    429          	return a;
   \                     `??operator+_11`: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    430          }
    431          
    432          /*********************************************/
    433          /*  Comparison                               */
    434          /*********************************************/
    435          

   \                                 In section .text, align 2, keep-with-next
    436          int String::compareTo(const String &s) const
    437          {
    438          	if (!buffer || !s.buffer) {
   \                     _ZNK6String9compareToERKS_: (+1)
   \   00000000   0x680B             LDR      R3,[R1, #+0]
   \   00000002   0x6802             LDR      R2,[R0, #+0]
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD001             BEQ.N    ??compareTo_0
   \   00000008   0x2B00             CMP      R3,#+0
   \   0000000A   0xD110             BNE.N    ??compareTo_1
    439          		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   \                     ??compareTo_0: (+1)
   \   0000000C   0x2B00             CMP      R3,#+0
   \   0000000E   0xD005             BEQ.N    ??compareTo_2
   \   00000010   0x6889             LDR      R1,[R1, #+8]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD002             BEQ.N    ??compareTo_2
   \   00000016   0x7818             LDRB     R0,[R3, #+0]
   \   00000018   0x4240             RSBS     R0,R0,#+0
   \   0000001A   0x4770             BX       LR
    440          		if (buffer && len > 0) return *(unsigned char *)buffer;
   \                     ??compareTo_2: (+1)
   \   0000001C   0x2A00             CMP      R2,#+0
   \   0000001E   0xD004             BEQ.N    ??compareTo_3
   \   00000020   0x6880             LDR      R0,[R0, #+8]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD001             BEQ.N    ??compareTo_3
   \   00000026   0x7810             LDRB     R0,[R2, #+0]
   \   00000028   0x4770             BX       LR
    441          		return 0;
   \                     ??compareTo_3: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x4770             BX       LR
    442          	}
    443          	return strcmp(buffer, s.buffer);
   \                     ??compareTo_1: (+1)
   \   0000002E   0x4619             MOV      R1,R3
   \   00000030   0x4610             MOV      R0,R2
   \   00000032   0x.... 0x....      B.W      strcmp
    444          }
    445          

   \                                 In section .text, align 2, keep-with-next
    446          unsigned char String::equals(const String &s2) const
    447          {
   \                     _ZNK6String6equalsERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    448          	return (len == s2.len && compareTo(s2) == 0);
   \   00000002   0x6882             LDR      R2,[R0, #+8]
   \   00000004   0x688B             LDR      R3,[R1, #+8]
   \   00000006   0x429A             CMP      R2,R3
   \   00000008   0xD105             BNE.N    ??equals_0
   \   0000000A   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x4180             SBCS     R0,R0,R0
   \   00000012   0x0FC0             LSRS     R0,R0,#+31
   \   00000014   0xBD02             POP      {R1,PC}
   \                     ??equals_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    449          }
    450          

   \                                 In section .text, align 2, keep-with-next
    451          unsigned char String::equals(const char *cstr) const
    452          {
   \                     _ZNK6String6equalsEPKc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    453          	if (len == 0) return (cstr == NULL || *cstr == 0);
   \   00000002   0x6882             LDR      R2,[R0, #+8]
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD109             BNE.N    ??equals_1
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD005             BEQ.N    ??equals_2
   \   0000000C   0xF991 0x1000      LDRSB    R1,[R1, #+0]
   \   00000010   0x1E48             SUBS     R0,R1,#+1
   \   00000012   0x4180             SBCS     R0,R0,R0
   \   00000014   0x0FC0             LSRS     R0,R0,#+31
   \   00000016   0xBD02             POP      {R1,PC}
   \                     ??equals_2: (+1)
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD02             POP      {R1,PC}
    454          	if (cstr == NULL) return buffer[0] == 0;
   \                     ??equals_1: (+1)
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD105             BNE.N    ??equals_3
   \   00000022   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \   00000026   0x1E48             SUBS     R0,R1,#+1
   \   00000028   0x4180             SBCS     R0,R0,R0
   \   0000002A   0x0FC0             LSRS     R0,R0,#+31
   \   0000002C   0xBD02             POP      {R1,PC}
    455          	return strcmp(buffer, cstr) == 0;
   \                     ??equals_3: (+1)
   \   0000002E   0x.... 0x....      BL       strcmp
   \   00000032   0x1E40             SUBS     R0,R0,#+1
   \   00000034   0x4180             SBCS     R0,R0,R0
   \   00000036   0x0FC0             LSRS     R0,R0,#+31
   \   00000038   0xBD02             POP      {R1,PC}          ;; return
    456          }
    457          

   \                                 In section .text, align 2, keep-with-next
    458          unsigned char String::operator<(const String &rhs) const
    459          {
   \                     _ZNK6StringltERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    460          	return compareTo(rhs) < 0;
   \   00000002   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   00000006   0x0FC0             LSRS     R0,R0,#+31
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    461          }
    462          

   \                                 In section .text, align 2, keep-with-next
    463          unsigned char String::operator>(const String &rhs) const
    464          {
   \                     _ZNK6StringgtERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    465          	return compareTo(rhs) > 0;
   \   00000002   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xDB01             BLT.N    `??operator>_0`
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xBD02             POP      {R1,PC}
   \                     `??operator>_0`: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    466          }
    467          

   \                                 In section .text, align 2, keep-with-next
    468          unsigned char String::operator<=(const String &rhs) const
    469          {
   \                     _ZNK6StringleERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    470          	return compareTo(rhs) <= 0;
   \   00000002   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xDA01             BGE.N    `??operator<=_0`
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xBD02             POP      {R1,PC}
   \                     `??operator<=_0`: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    471          }
    472          

   \                                 In section .text, align 2, keep-with-next
    473          unsigned char String::operator>=(const String &rhs) const
    474          {
   \                     _ZNK6StringgeERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    475          	return compareTo(rhs) >= 0;
   \   00000002   0x.... 0x....      BL       _ZNK6String9compareToERKS_
   \   00000006   0x43C0             MVNS     R0,R0
   \   00000008   0x0FC0             LSRS     R0,R0,#+31
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    476          }
    477          

   \                                 In section .text, align 2, keep-with-next
    478          unsigned char String::equalsIgnoreCase( const String &s2 ) const
    479          {
   \                     _ZNK6String16equalsIgnoreCaseERKS_: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    480          	if (this == &s2) return 1;
   \   00000002   0x4288             CMP      R0,R1
   \   00000004   0xD018             BEQ.N    ??equalsIgnoreCase_0
    481          	if (len != s2.len) return 0;
   \   00000006   0x6882             LDR      R2,[R0, #+8]
   \   00000008   0x688B             LDR      R3,[R1, #+8]
   \   0000000A   0x429A             CMP      R2,R3
   \   0000000C   0xD112             BNE.N    ??equalsIgnoreCase_1
    482          	if (len == 0) return 1;
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD012             BEQ.N    ??equalsIgnoreCase_0
    483          	const char *p1 = buffer;
   \   00000012   0x6804             LDR      R4,[R0, #+0]
    484          	const char *p2 = s2.buffer;
   \   00000014   0x680D             LDR      R5,[R1, #+0]
    485          	while (*p1) {
   \                     ??equalsIgnoreCase_2: (+1)
   \   00000016   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00C             BEQ.N    ??equalsIgnoreCase_0
    486          		if (tolower(*p1++) != tolower(*p2++)) return 0;
   \   0000001E   0xF914 0x0B01      LDRSB    R0,[R4], #+1
   \   00000022   0x.... 0x....      BL       tolower
   \   00000026   0x4606             MOV      R6,R0
   \   00000028   0xF915 0x0B01      LDRSB    R0,[R5], #+1
   \   0000002C   0x.... 0x....      BL       tolower
   \   00000030   0x4286             CMP      R6,R0
   \   00000032   0xD0F0             BEQ.N    ??equalsIgnoreCase_2
   \                     ??equalsIgnoreCase_1: (+1)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xBD70             POP      {R4-R6,PC}
    487          	} 
    488          	return 1;
   \                     ??equalsIgnoreCase_0: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
    489          }
    490          

   \                                 In section .text, align 2, keep-with-next
    491          unsigned char String::startsWith( const String &s2 ) const
    492          {
    493          	if (len < s2.len) return 0;
   \                     _ZNK6String10startsWithERKS_: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x688B             LDR      R3,[R1, #+8]
   \   00000004   0x429A             CMP      R2,R3
   \   00000006   0xD201             BCS.N    ??startsWith_0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR
    494          	return startsWith(s2, 0);
   \                     ??startsWith_0: (+1)
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E                      REQUIRE _ZNK6String10startsWithERKS_j
   \   0000000E                      ;; // Fall through to label String::startsWith(String const &, unsigned int) const
    495          }
    496          

   \                                 In section .text, align 2, keep-with-next
    497          unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    498          {
   \                     _ZNK6String10startsWithERKS_j: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4613             MOV      R3,R2
    499          	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   \   00000004   0x688A             LDR      R2,[R1, #+8]
   \   00000006   0x6884             LDR      R4,[R0, #+8]
   \   00000008   0x1AA4             SUBS     R4,R4,R2
   \   0000000A   0x429C             CMP      R4,R3
   \   0000000C   0xD305             BCC.N    ??startsWith_1
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD002             BEQ.N    ??startsWith_1
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD101             BNE.N    ??startsWith_2
   \                     ??startsWith_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD10             POP      {R4,PC}
    500          	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   \                     ??startsWith_2: (+1)
   \   0000001E   0x1818             ADDS     R0,R3,R0
   \   00000020   0x.... 0x....      BL       strncmp
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x4180             SBCS     R0,R0,R0
   \   00000028   0x0FC0             LSRS     R0,R0,#+31
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    501          }
    502          

   \                                 In section .text, align 2, keep-with-next
    503          unsigned char String::endsWith( const String &s2 ) const
    504          {
   \                     _ZNK6String8endsWithERKS_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    505          	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   \   00000002   0x688A             LDR      R2,[R1, #+8]
   \   00000004   0x6883             LDR      R3,[R0, #+8]
   \   00000006   0x4293             CMP      R3,R2
   \   00000008   0xD305             BCC.N    ??endsWith_0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD002             BEQ.N    ??endsWith_0
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD101             BNE.N    ??endsWith_1
   \                     ??endsWith_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}
    506          	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   \                     ??endsWith_1: (+1)
   \   0000001A   0x1A9A             SUBS     R2,R3,R2
   \   0000001C   0x1810             ADDS     R0,R2,R0
   \   0000001E   0x.... 0x....      BL       strcmp
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \   00000024   0x4180             SBCS     R0,R0,R0
   \   00000026   0x0FC0             LSRS     R0,R0,#+31
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
    507          }
    508          
    509          /*********************************************/
    510          /*  Character Access                         */
    511          /*********************************************/
    512          

   \                                 In section .text, align 2, keep-with-next
    513          char String::charAt(unsigned int loc) const
    514          {
    515          	return operator[](loc);
   \                     _ZNK6String6charAtEj: (+1)
   \   00000000   0x....             B.N      _ZNK6StringixEj
    516          }
    517          

   \                                 In section .text, align 2, keep-with-next
    518          void String::setCharAt(unsigned int loc, char c) 
    519          {
    520          	if (loc < len) buffer[loc] = c;
   \                     _ZN6String9setCharAtEjc: (+1)
   \   00000000   0x6883             LDR      R3,[R0, #+8]
   \   00000002   0x4299             CMP      R1,R3
   \   00000004   0xD201             BCS.N    ??setCharAt_0
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x540A             STRB     R2,[R1, R0]
    521          }
   \                     ??setCharAt_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return
    522          

   \                                 In section .text, align 2, keep-with-next
    523          char & String::operator[](unsigned int index)
    524          {
    525          	static char dummy_writable_char;
    526          	if (index >= len || !buffer) {
   \                     _ZN6StringixEj: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD202             BCS.N    `??operator[]_0`
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD103             BNE.N    `??operator[]_1`
    527          		dummy_writable_char = 0;
   \                     `??operator[]_0`: (+1)
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    528          		return dummy_writable_char;
   \   00000012   0x4770             BX       LR
    529          	}
    530          	return buffer[index];
   \                     `??operator[]_1`: (+1)
   \   00000014   0x1808             ADDS     R0,R1,R0
   \   00000016   0x4770             BX       LR               ;; return
    531          }

   \                                 In section .bss, align 1
   \                     ??dummy_writable_char:
   \   00000000                      DS8 1
    532          

   \                                 In section .text, align 2, keep-with-next
    533          char String::operator[]( unsigned int index ) const
    534          {
    535          	if (index >= len || !buffer) return 0;
   \                     _ZNK6StringixEj: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD202             BCS.N    `??operator[]_2`
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE.N    `??operator[]_3`
   \                     `??operator[]_2`: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4770             BX       LR
    536          	return buffer[index];
   \                     `??operator[]_3`: (+1)
   \   00000010   0x5608             LDRSB    R0,[R1, R0]
   \   00000012   0x4770             BX       LR               ;; return
    537          }
    538          

   \                                 In section .text, align 2, keep-with-next
    539          void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
    540          {
   \                     _ZNK6String8getBytesEPhjj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
    541          	if (!bufsize || !buf) return;
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD014             BEQ.N    ??getBytes_0
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD012             BEQ.N    ??getBytes_0
    542          	if (index >= len) {
   \   0000000C   0x6881             LDR      R1,[R0, #+8]
   \   0000000E   0x428B             CMP      R3,R1
   \   00000010   0xD302             BCC.N    ??getBytes_1
    543          		buf[0] = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x7020             STRB     R0,[R4, #+0]
    544          		return;
   \   00000016   0xBD31             POP      {R0,R4,R5,PC}
    545          	}
    546          	unsigned int n = bufsize - 1;
   \                     ??getBytes_1: (+1)
   \   00000018   0x1E55             SUBS     R5,R2,#+1
    547          	if (n > len - index) n = len - index;
   \   0000001A   0x1AC9             SUBS     R1,R1,R3
   \   0000001C   0x42A9             CMP      R1,R5
   \   0000001E   0xD200             BCS.N    ??getBytes_2
   \   00000020   0x460D             MOV      R5,R1
    548          	strncpy((char *)buf, buffer + index, n);
   \                     ??getBytes_2: (+1)
   \   00000022   0x462A             MOV      R2,R5
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x1819             ADDS     R1,R3,R0
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       strncpy
    549          	buf[n] = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x5528             STRB     R0,[R5, R4]
    550          }
   \                     ??getBytes_0: (+1)
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    551          
    552          /*********************************************/
    553          /*  Search                                   */
    554          /*********************************************/
    555          

   \                                 In section .text, align 2, keep-with-next
    556          int String::indexOf(char c) const
    557          {
    558          	return indexOf(c, 0);
   \                     _ZNK6String7indexOfEc: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002                      REQUIRE _ZNK6String7indexOfEcj
   \   00000002                      ;; // Fall through to label String::indexOf(char, unsigned int) const
    559          }
    560          

   \                                 In section .text, align 2, keep-with-next
    561          int String::indexOf( char ch, unsigned int fromIndex ) const
    562          {
   \                     _ZNK6String7indexOfEcj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    563          	if (fromIndex >= len) return -1;
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0xD302             BCC.N    ??indexOf_0
   \   0000000A   0xF04F 0x30FF      MOV      R0,#-1
   \   0000000E   0xBD10             POP      {R4,PC}
    564          	const char* temp = strchr(buffer + fromIndex, ch);
   \                     ??indexOf_0: (+1)
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x1810             ADDS     R0,R2,R0
   \   00000014   0x.... 0x....      BL       _Z6strchrPci
    565          	if (temp == NULL) return -1;
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD102             BNE.N    ??indexOf_1
   \   0000001C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000020   0xBD10             POP      {R4,PC}
    566          	return temp - buffer;
   \                     ??indexOf_1: (+1)
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x1A40             SUBS     R0,R0,R1
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    567          }
    568          

   \                                 In section .text, align 2, keep-with-next
    569          int String::indexOf(const String &s2) const
    570          {
    571          	return indexOf(s2, 0);
   \                     _ZNK6String7indexOfERKS_: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002                      REQUIRE _ZNK6String7indexOfERKS_j
   \   00000002                      ;; // Fall through to label String::indexOf(String const &, unsigned int) const
    572          }
    573          

   \                                 In section .text, align 2, keep-with-next
    574          int String::indexOf(const String &s2, unsigned int fromIndex) const
    575          {
   \                     _ZNK6String7indexOfERKS_j: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    576          	if (fromIndex >= len) return -1;
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0xD302             BCC.N    ??indexOf_2
   \   0000000A   0xF04F 0x30FF      MOV      R0,#-1
   \   0000000E   0xBD10             POP      {R4,PC}
    577          	const char *found = strstr(buffer + fromIndex, s2.buffer);
   \                     ??indexOf_2: (+1)
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x1810             ADDS     R0,R2,R0
   \   00000016   0x.... 0x....      BL       _Z6strstrPcPKc
    578          	if (found == NULL) return -1;
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD102             BNE.N    ??indexOf_3
   \   0000001E   0xF04F 0x30FF      MOV      R0,#-1
   \   00000022   0xBD10             POP      {R4,PC}
    579          	return found - buffer;
   \                     ??indexOf_3: (+1)
   \   00000024   0x6821             LDR      R1,[R4, #+0]
   \   00000026   0x1A40             SUBS     R0,R0,R1
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    580          }
    581          

   \                                 In section .text, align 2, keep-with-next
    582          int String::lastIndexOf( char theChar ) const
    583          {
    584          	return lastIndexOf(theChar, len - 1);
   \                     _ZNK6String11lastIndexOfEc: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x1E52             SUBS     R2,R2,#+1
   \   00000004                      REQUIRE _ZNK6String11lastIndexOfEcj
   \   00000004                      ;; // Fall through to label String::lastIndexOf(char, unsigned int) const
    585          }
    586          

   \                                 In section .text, align 2, keep-with-next
    587          int String::lastIndexOf(char ch, unsigned int fromIndex) const
    588          {
   \                     _ZNK6String11lastIndexOfEcj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4615             MOV      R5,R2
    589          	if (fromIndex >= len) return -1;
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x4285             CMP      R5,R0
   \   0000000A   0xD302             BCC.N    ??lastIndexOf_0
   \   0000000C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000010   0xBD70             POP      {R4-R6,PC}
    590          	char tempchar = buffer[fromIndex + 1];
   \                     ??lastIndexOf_0: (+1)
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x1828             ADDS     R0,R5,R0
   \   00000016   0xF990 0x6001      LDRSB    R6,[R0, #+1]
    591          	buffer[fromIndex + 1] = '\0';
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0x7042             STRB     R2,[R0, #+1]
    592          	char* temp = strrchr( buffer, ch );
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0x.... 0x....      BL       _Z7strrchrPci
    593          	buffer[fromIndex + 1] = tempchar;
   \   00000024   0x6821             LDR      R1,[R4, #+0]
   \   00000026   0x1869             ADDS     R1,R5,R1
   \   00000028   0x704E             STRB     R6,[R1, #+1]
    594          	if (temp == NULL) return -1;
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD102             BNE.N    ??lastIndexOf_1
   \   0000002E   0xF04F 0x30FF      MOV      R0,#-1
   \   00000032   0xBD70             POP      {R4-R6,PC}
    595          	return temp - buffer;
   \                     ??lastIndexOf_1: (+1)
   \   00000034   0x6821             LDR      R1,[R4, #+0]
   \   00000036   0x1A40             SUBS     R0,R0,R1
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    596          }
    597          

   \                                 In section .text, align 2, keep-with-next
    598          int String::lastIndexOf(const String &s2) const
    599          {
    600          	return lastIndexOf(s2, len - s2.len);
   \                     _ZNK6String11lastIndexOfERKS_: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x688B             LDR      R3,[R1, #+8]
   \   00000004   0x1AD2             SUBS     R2,R2,R3
   \   00000006                      REQUIRE _ZNK6String11lastIndexOfERKS_j
   \   00000006                      ;; // Fall through to label String::lastIndexOf(String const &, unsigned int) const
    601          }
    602          

   \                                 In section .text, align 2, keep-with-next
    603          int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
    604          {
   \                     _ZNK6String11lastIndexOfERKS_j: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    605            	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   \   00000008   0x68A8             LDR      R0,[R5, #+8]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD004             BEQ.N    ??lastIndexOf_2
   \   0000000E   0x68A1             LDR      R1,[R4, #+8]
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD001             BEQ.N    ??lastIndexOf_2
   \   00000014   0x4281             CMP      R1,R0
   \   00000016   0xD202             BCS.N    ??lastIndexOf_3
   \                     ??lastIndexOf_2: (+1)
   \   00000018   0xF04F 0x30FF      MOV      R0,#-1
   \   0000001C   0xBDF2             POP      {R1,R4-R7,PC}
    606          	if (fromIndex >= len) fromIndex = len - 1;
   \                     ??lastIndexOf_3: (+1)
   \   0000001E   0x428E             CMP      R6,R1
   \   00000020   0xD300             BCC.N    ??lastIndexOf_4
   \   00000022   0x1E4E             SUBS     R6,R1,#+1
    607          	int found = -1;
   \                     ??lastIndexOf_4: (+1)
   \   00000024   0xF04F 0x37FF      MOV      R7,#-1
    608          	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   \   00000028   0x6820             LDR      R0,[R4, #+0]
   \   0000002A   0xE005             B.N      ??lastIndexOf_5
    609          		p = strstr(p, s2.buffer);
    610          		if (!p) break;
    611          		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   \                     ??lastIndexOf_6: (+1)
   \   0000002C   0x6821             LDR      R1,[R4, #+0]
   \   0000002E   0x1A41             SUBS     R1,R0,R1
   \   00000030   0x428E             CMP      R6,R1
   \   00000032   0xD300             BCC.N    ??lastIndexOf_7
   \   00000034   0x460F             MOV      R7,R1
   \                     ??lastIndexOf_7: (+1)
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \                     ??lastIndexOf_5: (+1)
   \   00000038   0x6821             LDR      R1,[R4, #+0]
   \   0000003A   0x1871             ADDS     R1,R6,R1
   \   0000003C   0x4281             CMP      R1,R0
   \   0000003E   0xD304             BCC.N    ??lastIndexOf_8
   \   00000040   0x6829             LDR      R1,[R5, #+0]
   \   00000042   0x.... 0x....      BL       _Z6strstrPcPKc
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1F0             BNE.N    ??lastIndexOf_6
    612          	}
    613          	return found;
   \                     ??lastIndexOf_8: (+1)
   \   0000004A   0x4638             MOV      R0,R7
   \   0000004C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    614          }
    615          

   \                                 In section .text, align 2, keep-with-next
    616          String String::substring(unsigned int left, unsigned int right) const
    617          {
   \                     _ZNK6String9substringEjj: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    618          	if (left > right) {
   \   0000000C   0x42B7             CMP      R7,R6
   \   0000000E   0xD202             BCS.N    ??substring_0
    619          		unsigned int temp = right;
   \   00000010   0x4638             MOV      R0,R7
    620          		right = left;
   \   00000012   0x4637             MOV      R7,R6
    621          		left = temp;
   \   00000014   0x4606             MOV      R6,R0
    622          	}
    623          	String out;
   \                     ??substring_0: (+1)
   \   00000016   0x....             ADR.N    R1,??DataTable2  ;; ""
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN6StringC1EPKc
    624          	if (left > len) return out;
   \   0000001E   0x68A8             LDR      R0,[R5, #+8]
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xD30F             BCC.N    ??substring_1
    625          	if (right > len) right = len;
   \   00000024   0x42B8             CMP      R0,R7
   \   00000026   0xD800             BHI.N    ??substring_2
   \   00000028   0x4607             MOV      R7,R0
    626          	char temp = buffer[right];  // save the replaced character
   \                     ??substring_2: (+1)
   \   0000002A   0x6828             LDR      R0,[R5, #+0]
   \   0000002C   0xF917 0x8000      LDRSB    R8,[R7, R0]
    627          	buffer[right] = '\0';	
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x5439             STRB     R1,[R7, R0]
    628          	out = buffer + left;  // pointer arithmetic
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x1831             ADDS     R1,R6,R0
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       _ZN6StringaSEPKc
    629          	buffer[right] = temp;  //restore character
   \   0000003E   0x6828             LDR      R0,[R5, #+0]
   \   00000040   0xF807 0x8000      STRB     R8,[R7, R0]
    630          	return out;
   \                     ??substring_1: (+1)
   \   00000044   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    631          }
    632          
    633          /*********************************************/
    634          /*  Modification                             */
    635          /*********************************************/
    636          

   \                                 In section .text, align 2, keep-with-next
    637          void String::replace(char find, char replace)
    638          {
    639          	if (!buffer) return;
   \                     _ZN6String7replaceEcc: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD104             BNE.N    ??replace_0
   \   00000006   0x4770             BX       LR
    640          	for (char *p = buffer; *p; p++) {
    641          		if (*p == find) *p = replace;
   \                     ??replace_1: (+1)
   \   00000008   0x428B             CMP      R3,R1
   \   0000000A   0xD100             BNE.N    ??replace_2
   \   0000000C   0x7002             STRB     R2,[R0, #+0]
    642          	}
   \                     ??replace_2: (+1)
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??replace_0: (+1)
   \   00000010   0xF990 0x3000      LDRSB    R3,[R0, #+0]
   \   00000014   0x2B00             CMP      R3,#+0
   \   00000016   0xD1F7             BNE.N    ??replace_1
    643          }
   \   00000018   0x4770             BX       LR               ;; return
    644          

   \                                 In section .text, align 2, keep-with-next
    645          void String::replace(const String& find, const String& replace)
    646          {
   \                     _ZN6String7replaceERKS_S1_: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    647          	if (len == 0 || find.len == 0) return;
   \   0000000A   0xF8D4 0x9008      LDR      R9,[R4, #+8]
   \   0000000E   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000012   0xF000 0x8085      BEQ.W    ??replace_3
   \   00000016   0x68A8             LDR      R0,[R5, #+8]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xF000 0x8081      BEQ.W    ??replace_3
    648          	int diff = replace.len - find.len;
   \   0000001E   0x68B1             LDR      R1,[R6, #+8]
   \   00000020   0x1A0F             SUBS     R7,R1,R0
    649          	char *readFrom = buffer;
   \   00000022   0xF8D4 0xA000      LDR      R10,[R4, #+0]
   \   00000026   0x46D0             MOV      R8,R10
    650          	char *foundAt;
    651          	if (diff == 0) {
   \   00000028   0xD10F             BNE.N    ??replace_4
    652          		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   \                     ??replace_5: (+1)
   \   0000002A   0x6829             LDR      R1,[R5, #+0]
   \   0000002C   0x4640             MOV      R0,R8
   \   0000002E   0x.... 0x....      BL       _Z6strstrPcPKc
   \   00000032   0x4683             MOV      R11,R0
   \   00000034   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000038   0xD072             BEQ.N    ??replace_3
    653          			memcpy(foundAt, replace.buffer, replace.len);
   \   0000003A   0x68B2             LDR      R2,[R6, #+8]
   \   0000003C   0x6831             LDR      R1,[R6, #+0]
   \   0000003E   0x.... 0x....      BL       memcpy
    654          			readFrom = foundAt + replace.len;
   \   00000042   0x68B0             LDR      R0,[R6, #+8]
   \   00000044   0xEB00 0x080B      ADD      R8,R0,R11
   \   00000048   0xE7EF             B.N      ??replace_5
    655          		}
    656          	} else if (diff < 0) {
   \                     ??replace_4: (+1)
   \   0000004A   0xD529             BPL.N    ??replace_6
    657          		char *writeTo = buffer;
   \   0000004C   0xE016             B.N      ??replace_7
    658          		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    659          			unsigned int n = foundAt - readFrom;
   \                     ??replace_8: (+1)
   \   0000004E   0xEBAB 0x0908      SUB      R9,R11,R8
    660          			memcpy(writeTo, readFrom, n);
   \   00000052   0x464A             MOV      R2,R9
   \   00000054   0x4641             MOV      R1,R8
   \   00000056   0x4650             MOV      R0,R10
   \   00000058   0x.... 0x....      BL       memcpy
    661          			writeTo += n;
   \   0000005C   0xEB09 0x080A      ADD      R8,R9,R10
    662          			memcpy(writeTo, replace.buffer, replace.len);
   \   00000060   0x68B2             LDR      R2,[R6, #+8]
   \   00000062   0x6831             LDR      R1,[R6, #+0]
   \   00000064   0x4640             MOV      R0,R8
   \   00000066   0x.... 0x....      BL       memcpy
    663          			writeTo += replace.len;
   \   0000006A   0x68B0             LDR      R0,[R6, #+8]
   \   0000006C   0xEB00 0x0A08      ADD      R10,R0,R8
    664          			readFrom = foundAt + find.len;
   \   00000070   0x68A8             LDR      R0,[R5, #+8]
   \   00000072   0xEB00 0x080B      ADD      R8,R0,R11
    665          			len += diff;
   \   00000076   0x68A0             LDR      R0,[R4, #+8]
   \   00000078   0x1838             ADDS     R0,R7,R0
   \   0000007A   0x60A0             STR      R0,[R4, #+8]
    666          		}
   \                     ??replace_7: (+1)
   \   0000007C   0x6829             LDR      R1,[R5, #+0]
   \   0000007E   0x4640             MOV      R0,R8
   \   00000080   0x.... 0x....      BL       _Z6strstrPcPKc
   \   00000084   0x4683             MOV      R11,R0
   \   00000086   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000008A   0xD1E0             BNE.N    ??replace_8
    667          		strcpy(writeTo, readFrom);
   \   0000008C   0x4641             MOV      R1,R8
   \   0000008E   0x4650             MOV      R0,R10
   \   00000090   0xE8BD 0x4FF4      POP      {R2,R4-R11,LR}
   \   00000094   0x.... 0x....      B.W      strcpy
    668          	} else {
    669          		unsigned int size = len; // compute size needed for result
    670          		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    671          			readFrom = foundAt + find.len;
   \                     ??replace_9: (+1)
   \   00000098   0x68A8             LDR      R0,[R5, #+8]
   \   0000009A   0xEB00 0x080B      ADD      R8,R0,R11
    672          			size += diff;
   \   0000009E   0x44B9             ADD      R9,R7,R9
    673          		}
   \                     ??replace_6: (+1)
   \   000000A0   0x6829             LDR      R1,[R5, #+0]
   \   000000A2   0x4640             MOV      R0,R8
   \   000000A4   0x.... 0x....      BL       _Z6strstrPcPKc
   \   000000A8   0x4683             MOV      R11,R0
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD1F4             BNE.N    ??replace_9
    674          		if (size == len) return;
   \   000000AE   0x68A0             LDR      R0,[R4, #+8]
   \   000000B0   0x4581             CMP      R9,R0
   \   000000B2   0xD035             BEQ.N    ??replace_3
    675          		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
   \   000000B4   0x6860             LDR      R0,[R4, #+4]
   \   000000B6   0x4548             CMP      R0,R9
   \   000000B8   0xD205             BCS.N    ??replace_10
   \   000000BA   0x4649             MOV      R1,R9
   \   000000BC   0x4620             MOV      R0,R4
   \   000000BE   0x.... 0x....      BL       _ZN6String12changeBufferEj
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD02C             BEQ.N    ??replace_3
    676          		int index = len - 1;
   \                     ??replace_10: (+1)
   \   000000C6   0x68A0             LDR      R0,[R4, #+8]
   \   000000C8   0xF1A0 0x0901      SUB      R9,R0,#+1
   \   000000CC   0xE01C             B.N      ??replace_11
    677          		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    678          			readFrom = buffer + index + find.len;
   \                     ??replace_12: (+1)
   \   000000CE   0x6820             LDR      R0,[R4, #+0]
   \   000000D0   0x68A9             LDR      R1,[R5, #+8]
   \   000000D2   0xEB09 0x0200      ADD      R2,R9,R0
   \   000000D6   0xEB01 0x0802      ADD      R8,R1,R2
    679          			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
   \   000000DA   0x68A1             LDR      R1,[R4, #+8]
   \   000000DC   0xEBA1 0x0108      SUB      R1,R1,R8
   \   000000E0   0x1842             ADDS     R2,R0,R1
   \   000000E2   0x4641             MOV      R1,R8
   \   000000E4   0xEB07 0x0008      ADD      R0,R7,R8
   \   000000E8   0x.... 0x....      BL       memmove
    680          			len += diff;
   \   000000EC   0x68A0             LDR      R0,[R4, #+8]
   \   000000EE   0x1838             ADDS     R0,R7,R0
   \   000000F0   0x60A0             STR      R0,[R4, #+8]
    681          			buffer[len] = 0;
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x6822             LDR      R2,[R4, #+0]
   \   000000F6   0x5481             STRB     R1,[R0, R2]
    682          			memcpy(buffer + index, replace.buffer, replace.len);
   \   000000F8   0x68B2             LDR      R2,[R6, #+8]
   \   000000FA   0x6831             LDR      R1,[R6, #+0]
   \   000000FC   0x6820             LDR      R0,[R4, #+0]
   \   000000FE   0x4448             ADD      R0,R9,R0
   \   00000100   0x.... 0x....      BL       memcpy
    683          			index--;
   \   00000104   0xF1A9 0x0901      SUB      R9,R9,#+1
    684          		}
   \                     ??replace_11: (+1)
   \   00000108   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000010C   0xD408             BMI.N    ??replace_3
   \   0000010E   0x464A             MOV      R2,R9
   \   00000110   0x4629             MOV      R1,R5
   \   00000112   0x4620             MOV      R0,R4
   \   00000114   0x.... 0x....      BL       _ZNK6String11lastIndexOfERKS_j
   \   00000118   0x4681             MOV      R9,R0
   \   0000011A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000011E   0xD5D6             BPL.N    ??replace_12
    685          	}
    686          }
   \                     ??replace_3: (+1)
   \   00000120   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    687          

   \                                 In section .text, align 2, keep-with-next
    688          void String::remove(unsigned int index){
    689          	if (index >= len) { return; }
   \                     _ZN6String6removeEj: (+1)
   \   00000000   0x6882             LDR      R2,[R0, #+8]
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD201             BCS.N    ??remove_0
    690          	int count = len - index;
    691          	remove(index, count);
   \   00000006   0x1A52             SUBS     R2,R2,R1
   \   00000008   0x....             B.N      _ZN6String6removeEjj
   \                     ??remove_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return
    692          }
    693          

   \                                 In section .text, align 2, keep-with-next
    694          void String::remove(unsigned int index, unsigned int count){
   \                     _ZN6String6removeEjj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4613             MOV      R3,R2
    695          	if (index >= len) { return; }
   \   00000006   0x68A2             LDR      R2,[R4, #+8]
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xD213             BCS.N    ??remove_1
    696          	if (count <= 0) { return; }
   \   0000000C   0x2B00             CMP      R3,#+0
   \   0000000E   0xD011             BEQ.N    ??remove_1
    697          	if (index + count > len) { count = len - index; }
   \   00000010   0x1858             ADDS     R0,R3,R1
   \   00000012   0x4282             CMP      R2,R0
   \   00000014   0xD200             BCS.N    ??remove_2
   \   00000016   0x1A53             SUBS     R3,R2,R1
    698          	char *writeTo = buffer + index;
   \                     ??remove_2: (+1)
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0x1808             ADDS     R0,R1,R0
    699          	len = len - count;
   \   0000001C   0x1AD2             SUBS     R2,R2,R3
   \   0000001E   0x60A2             STR      R2,[R4, #+8]
    700          	strncpy(writeTo, buffer + index + count,len - index);
   \   00000020   0x1A52             SUBS     R2,R2,R1
   \   00000022   0x6825             LDR      R5,[R4, #+0]
   \   00000024   0x1949             ADDS     R1,R1,R5
   \   00000026   0x1859             ADDS     R1,R3,R1
   \   00000028   0x.... 0x....      BL       strncpy
    701          	buffer[len] = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x68A1             LDR      R1,[R4, #+8]
   \   00000030   0x6822             LDR      R2,[R4, #+0]
   \   00000032   0x5488             STRB     R0,[R1, R2]
    702          }
   \                     ??remove_1: (+1)
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    703          

   \                                 In section .text, align 2, keep-with-next
    704          void String::toLowerCase(void)
    705          {
   \                     _ZN6String11toLowerCaseEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    706          	if (!buffer) return;
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD104             BNE.N    ??toLowerCase_0
   \   00000008   0xBD10             POP      {R4,PC}
    707          	for (char *p = buffer; *p; p++) {
    708          		*p = tolower(*p);
   \                     ??toLowerCase_1: (+1)
   \   0000000A   0x.... 0x....      BL       tolower
   \   0000000E   0xF804 0x0B01      STRB     R0,[R4], #+1
    709          	}
   \                     ??toLowerCase_0: (+1)
   \   00000012   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD1F7             BNE.N    ??toLowerCase_1
    710          }
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    711          

   \                                 In section .text, align 2, keep-with-next
    712          void String::toUpperCase(void)
    713          {
   \                     _ZN6String11toUpperCaseEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    714          	if (!buffer) return;
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD104             BNE.N    ??toUpperCase_0
   \   00000008   0xBD10             POP      {R4,PC}
    715          	for (char *p = buffer; *p; p++) {
    716          		*p = toupper(*p);
   \                     ??toUpperCase_1: (+1)
   \   0000000A   0x.... 0x....      BL       toupper
   \   0000000E   0xF804 0x0B01      STRB     R0,[R4], #+1
    717          	}
   \                     ??toUpperCase_0: (+1)
   \   00000012   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD1F7             BNE.N    ??toUpperCase_1
    718          }
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    719          

   \                                 In section .text, align 2, keep-with-next
    720          void String::trim(void)
    721          {
   \                     _ZN6String4trimEv: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    722          	if (!buffer || len == 0) return;
   \   00000004   0x6825             LDR      R5,[R4, #+0]
   \   00000006   0x2D00             CMP      R5,#+0
   \   00000008   0xD026             BEQ.N    ??trim_0
   \   0000000A   0x68A0             LDR      R0,[R4, #+8]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??trim_1
   \   00000010   0xBDF1             POP      {R0,R4-R7,PC}
    723          	char *begin = buffer;
    724          	while (isspace(*begin)) begin++;
   \                     ??trim_2: (+1)
   \   00000012   0x1C6D             ADDS     R5,R5,#+1
   \                     ??trim_1: (+1)
   \   00000014   0xF995 0x0000      LDRSB    R0,[R5, #+0]
   \   00000018   0x.... 0x....      BL       isspace
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD1F8             BNE.N    ??trim_2
    725          	char *end = buffer + len - 1;
   \   00000020   0x68A0             LDR      R0,[R4, #+8]
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x1840             ADDS     R0,R0,R1
   \   00000026   0x1E46             SUBS     R6,R0,#+1
   \   00000028   0x462F             MOV      R7,R5
   \   0000002A   0xE000             B.N      ??trim_3
    726          	while (isspace(*end) && end >= begin) end--;
   \                     ??trim_4: (+1)
   \   0000002C   0x1E76             SUBS     R6,R6,#+1
   \                     ??trim_3: (+1)
   \   0000002E   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   00000032   0x.... 0x....      BL       isspace
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD001             BEQ.N    ??trim_5
   \   0000003A   0x42BE             CMP      R6,R7
   \   0000003C   0xD2F6             BCS.N    ??trim_4
    727          	len = end + 1 - begin;
   \                     ??trim_5: (+1)
   \   0000003E   0x1C70             ADDS     R0,R6,#+1
   \   00000040   0x1BC2             SUBS     R2,R0,R7
   \   00000042   0x60A2             STR      R2,[R4, #+8]
    728          	if (begin > buffer) memcpy(buffer, begin, len);
   \   00000044   0x6820             LDR      R0,[R4, #+0]
   \   00000046   0x42B8             CMP      R0,R7
   \   00000048   0xD202             BCS.N    ??trim_6
   \   0000004A   0x4629             MOV      R1,R5
   \   0000004C   0x.... 0x....      BL       memcpy
    729          	buffer[len] = 0;
   \                     ??trim_6: (+1)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x68A1             LDR      R1,[R4, #+8]
   \   00000054   0x6822             LDR      R2,[R4, #+0]
   \   00000056   0x5488             STRB     R0,[R1, R2]
    730          }
   \                     ??trim_0: (+1)
   \   00000058   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    731          
    732          /*********************************************/
    733          /*  Parsing / Conversion                     */
    734          /*********************************************/
    735          

   \                                 In section .text, align 2, keep-with-next
    736          long String::toInt(void) const
    737          {
    738          	if (buffer) return atol(buffer);
   \                     _ZNK6String5toIntEv: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD001             BEQ.N    ??toInt_0
   \   00000006   0x.... 0x....      B.W      atol
    739          	return 0;
   \                     ??toInt_0: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4770             BX       LR               ;; return
    740          }
    741          

   \                                 In section .text, align 2, keep-with-next
    742          float String::toFloat(void) const
    743          {
   \                     _ZNK6String7toFloatEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    744          	if (buffer) return float(atof(buffer));
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD005             BEQ.N    ??toFloat_0
   \   00000008   0x.... 0x....      BL       atof
   \   0000000C   0xE8BD 0x4004      POP      {R2,LR}
   \   00000010   0x.... 0x....      B.W      __aeabi_d2f
    745          	return 0;
   \                     ??toFloat_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    746          }

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(char const *)
   \                     _ZN6StringC2EPKc: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1EPKc

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(String const &)
   \                     _ZN6StringC2ERKS_: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1ERKS_

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(__FlashStringHelper const *)
   \                     _ZN6StringC2EPK19__FlashStringHelper: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1EPK19__FlashStringHelper

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(char)
   \                     _ZN6StringC2Ec: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Ec

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(unsigned char, unsigned char)
   \                     _ZN6StringC2Ehh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Ehh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(int, unsigned char)
   \                     _ZN6StringC2Eih: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Eih

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(unsigned int, unsigned char)
   \                     _ZN6StringC2Ejh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Ejh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(long, unsigned char)
   \                     _ZN6StringC2Elh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Elh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(unsigned long, unsigned char)
   \                     _ZN6StringC2Emh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Emh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject String(float, unsigned char)
   \                     _ZN6StringC2Efh: (+1)
   \   00000000   0x....             B.N      _ZN6StringC1Efh

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp String::subobject ~String()
   \                     _ZN6StringD2Ev: (+1)
   \   00000000   0x....             B.N      _ZN6StringD1Ev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ??dummy_writable_char

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   String::String(String const &)
        16   -> String::init()
        16   -> String::operator=(String const &)
      16   String::String(__FlashStringHelper const *)
        16   -> String::init()
        16   -> String::operator=(__FlashStringHelper const *)
      16   String::String(char const *)
        16   -> String::copy(char const *, unsigned int)
        16   -> String::init()
        16   -> strlen
      16   String::String(char)
        16   -> String::init()
        16   -> String::operator=(char const *)
      56   String::String(double, unsigned char)
        56   -> String::init()
        56   -> String::operator=(char const *)
        56   -> dtostrf
      64   String::String(float, unsigned char)
        64   -> String::init()
        64   -> String::operator=(char const *)
        64   -> __aeabi_f2d
        64   -> dtostrf
      40   String::String(int, unsigned char)
        40   -> String::init()
        40   -> String::operator=(char const *)
        40   -> itoa
      56   String::String(long, unsigned char)
        56   -> String::init()
        56   -> String::operator=(char const *)
        56   -> ltoa
      32   String::String(unsigned char, unsigned char)
        32   -> String::init()
        32   -> String::operator=(char const *)
        32   -> utoa
      40   String::String(unsigned int, unsigned char)
        40   -> String::init()
        40   -> String::operator=(char const *)
        40   -> utoa
      56   String::String(unsigned long, unsigned char)
        56   -> String::init()
        56   -> String::operator=(char const *)
        56   -> ultoa
      16   String::changeBuffer(unsigned int)
        16   -> realloc
       0   String::charAt(unsigned int) const
         0   -> String::operator[](unsigned int) const
       0   String::compareTo(String const &) const
         0   -> strcmp
       0   String::concat(String const &)
         0   -> String::concat(char const *, unsigned int)
      16   String::concat(__FlashStringHelper const *)
        16   -> String::reserve(unsigned int)
        16   -> strcpy
        16   -> strlen
      16   String::concat(char const *)
         0   -> String::concat(char const *, unsigned int)
        16   -> strlen
      16   String::concat(char const *, unsigned int)
        16   -> String::reserve(unsigned int)
        16   -> strcpy
       8   String::concat(char)
         8   -> String::concat(char const *, unsigned int)
      40   String::concat(double)
        40   -> String::concat(char const *, unsigned int)
        40   -> dtostrf
        40   -> strlen
      40   String::concat(float)
        40   -> String::concat(char const *, unsigned int)
        40   -> __aeabi_f2d
        40   -> dtostrf
        40   -> strlen
      24   String::concat(int)
        24   -> String::concat(char const *, unsigned int)
        24   -> itoa
        24   -> strlen
      24   String::concat(long)
        24   -> String::concat(char const *, unsigned int)
        24   -> ltoa
        24   -> strlen
      16   String::concat(unsigned char)
        16   -> String::concat(char const *, unsigned int)
        16   -> itoa
        16   -> strlen
      24   String::concat(unsigned int)
        24   -> String::concat(char const *, unsigned int)
        24   -> strlen
        24   -> utoa
      24   String::concat(unsigned long)
        24   -> String::concat(char const *, unsigned int)
        24   -> strlen
        24   -> ultoa
      16   String::copy(__FlashStringHelper const *, unsigned int)
        16   -> String::invalidate()
        16   -> String::reserve(unsigned int)
        16   -> strcpy
      16   String::copy(char const *, unsigned int)
        16   -> String::invalidate()
        16   -> String::reserve(unsigned int)
        16   -> strcpy
       8   String::endsWith(String const &) const
         8   -> strcmp
       8   String::equals(String const &) const
         8   -> String::compareTo(String const &) const
       8   String::equals(char const *) const
         8   -> strcmp
      16   String::equalsIgnoreCase(String const &) const
        16   -> tolower
      16   String::getBytes(unsigned char *, unsigned int, unsigned int) const
        16   -> strncpy
       0   String::indexOf(String const &) const
         0   -> String::indexOf(String const &, unsigned int) const
       8   String::indexOf(String const &, unsigned int) const
         8   -> strstr(char *, char const *)
       0   String::indexOf(char) const
         0   -> String::indexOf(char, unsigned int) const
       8   String::indexOf(char, unsigned int) const
         8   -> strchr(char *, int)
       0   String::init()
       8   String::invalidate()
         8   -> free
       0   String::lastIndexOf(String const &) const
         0   -> String::lastIndexOf(String const &, unsigned int) const
      24   String::lastIndexOf(String const &, unsigned int) const
        24   -> strstr(char *, char const *)
       0   String::lastIndexOf(char) const
         0   -> String::lastIndexOf(char, unsigned int) const
      16   String::lastIndexOf(char, unsigned int) const
        16   -> strrchr(char *, int)
       8   String::operator<(String const &) const
         8   -> String::compareTo(String const &) const
       8   String::operator<=(String const &) const
         8   -> String::compareTo(String const &) const
       8   String::operator=(String const &)
         8   -> String::copy(char const *, unsigned int)
         8   -> String::invalidate()
      16   String::operator=(__FlashStringHelper const *)
        16   -> String::copy(__FlashStringHelper const *, unsigned int)
        16   -> String::invalidate()
        16   -> strlen
      16   String::operator=(char const *)
        16   -> String::copy(char const *, unsigned int)
        16   -> String::invalidate()
        16   -> strlen
       8   String::operator>(String const &) const
         8   -> String::compareTo(String const &) const
       8   String::operator>=(String const &) const
         8   -> String::compareTo(String const &) const
       0   String::operator[](unsigned int)
       0   String::operator[](unsigned int) const
       0   String::remove(unsigned int)
         0   -> String::remove(unsigned int, unsigned int)
      16   String::remove(unsigned int, unsigned int)
        16   -> strncpy
      40   String::replace(String const &, String const &)
        40   -> String::changeBuffer(unsigned int)
        40   -> String::lastIndexOf(String const &, unsigned int) const
        40   -> memcpy
        40   -> memmove
         0   -> strcpy
        40   -> strstr(char *, char const *)
       0   String::replace(char, char)
       8   String::reserve(unsigned int)
         8   -> String::changeBuffer(unsigned int)
       0   String::setCharAt(unsigned int, char)
       0   String::startsWith(String const &) const
         0   -> String::startsWith(String const &, unsigned int) const
       8   String::startsWith(String const &, unsigned int) const
         8   -> strncmp
       0   String::subobject String(String const &)
         0   -> String::String(String const &)
       0   String::subobject String(__FlashStringHelper const *)
         0   -> String::String(__FlashStringHelper const *)
       0   String::subobject String(char const *)
         0   -> String::String(char const *)
       0   String::subobject String(char)
         0   -> String::String(char)
       8   String::subobject String(double, unsigned char)
         8   -> String::String(double, unsigned char)
       0   String::subobject String(float, unsigned char)
         0   -> String::String(float, unsigned char)
       0   String::subobject String(int, unsigned char)
         0   -> String::String(int, unsigned char)
       0   String::subobject String(long, unsigned char)
         0   -> String::String(long, unsigned char)
       0   String::subobject String(unsigned char, unsigned char)
         0   -> String::String(unsigned char, unsigned char)
       0   String::subobject String(unsigned int, unsigned char)
         0   -> String::String(unsigned int, unsigned char)
       0   String::subobject String(unsigned long, unsigned char)
         0   -> String::String(unsigned long, unsigned char)
       0   String::subobject ~String()
         0   -> String::~String()
      24   String::substring(unsigned int, unsigned int) const
        24   -> String::String(char const *)
        24   -> String::operator=(char const *)
       8   String::toFloat() const
         0   -> __aeabi_d2f
         8   -> atof
       0   String::toInt() const
         0   -> atol
       8   String::toLowerCase()
         8   -> tolower
       8   String::toUpperCase()
         8   -> toupper
      24   String::trim()
        24   -> isspace
        24   -> memcpy
       8   String::~String()
         8   -> free
       8   operator+(StringSumHelper const &, String const &)
         8   -> String::concat(char const *, unsigned int)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, __FlashStringHelper const *)
         8   -> String::concat(__FlashStringHelper const *)
         8   -> String::invalidate()
      16   operator+(StringSumHelper const &, char const *)
        16   -> String::concat(char const *, unsigned int)
        16   -> String::invalidate()
        16   -> strlen
       8   operator+(StringSumHelper const &, char)
         8   -> String::concat(char)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, double)
         8   -> String::concat(double)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, float)
         8   -> String::concat(float)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, int)
         8   -> String::concat(int)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, long)
         8   -> String::concat(long)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, unsigned char)
         8   -> String::concat(unsigned char)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, unsigned int)
         8   -> String::concat(unsigned int)
         8   -> String::invalidate()
       8   operator+(StringSumHelper const &, unsigned long)
         8   -> String::concat(unsigned long)
         8   -> String::invalidate()
       0   strchr(char *, int)
         0   -> __iar_Strchr
       0   strrchr(char *, int)
         0   -> __iar_Strrchr
       0   strstr(char *, char const *)
         0   -> __iar_Strstr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       4  ??DataTable2
       4  ??DataTable2_1
      22  String::String(String const &)
      22  String::String(__FlashStringHelper const *)
      34  String::String(char const *)
      32  String::String(char)
      46  String::String(double, unsigned char)
      56  String::String(float, unsigned char)
      38  String::String(int, unsigned char)
      38  String::String(long, unsigned char)
      38  String::String(unsigned char, unsigned char)
      38  String::String(unsigned int, unsigned char)
      38  String::String(unsigned long, unsigned char)
      30  String::changeBuffer(unsigned int)
       2  String::charAt(unsigned int) const
      54  String::compareTo(String const &) const
       4  String::concat(String const &)
      64  String::concat(__FlashStringHelper const *)
      30  String::concat(char const *)
      60  String::concat(char const *, unsigned int)
      22  String::concat(char)
      42  String::concat(double)
      52  String::concat(float)
      36  String::concat(int)
      36  String::concat(long)
      34  String::concat(unsigned char)
      36  String::concat(unsigned int)
      36  String::concat(unsigned long)
      42  String::copy(__FlashStringHelper const *, unsigned int)
      42  String::copy(char const *, unsigned int)
      42  String::endsWith(String const &) const
      26  String::equals(String const &) const
      58  String::equals(char const *) const
      60  String::equalsIgnoreCase(String const &) const
      52  String::getBytes(unsigned char *, unsigned int, unsigned int) const
       2  String::indexOf(String const &) const
      42  String::indexOf(String const &, unsigned int) const
       2  String::indexOf(char) const
      40  String::indexOf(char, unsigned int) const
      10  String::init()
      24  String::invalidate()
       6  String::lastIndexOf(String const &) const
      78  String::lastIndexOf(String const &, unsigned int) const
       4  String::lastIndexOf(char) const
      58  String::lastIndexOf(char, unsigned int) const
      10  String::operator<(String const &) const
      18  String::operator<=(String const &) const
      36  String::operator=(String const &)
      34  String::operator=(__FlashStringHelper const *)
      34  String::operator=(char const *)
      18  String::operator>(String const &) const
      12  String::operator>=(String const &) const
      24  String::operator[](unsigned int)
      20  String::operator[](unsigned int) const
      12  String::remove(unsigned int)
      54  String::remove(unsigned int, unsigned int)
     292  String::replace(String const &, String const &)
      26  String::replace(char, char)
      46  String::reserve(unsigned int)
      12  String::setCharAt(unsigned int, char)
      14  String::startsWith(String const &) const
      44  String::startsWith(String const &, unsigned int) const
       2  String::subobject String(String const &)
       2  String::subobject String(__FlashStringHelper const *)
       2  String::subobject String(char const *)
       2  String::subobject String(char)
      12  String::subobject String(double, unsigned char)
       2  String::subobject String(float, unsigned char)
       2  String::subobject String(int, unsigned char)
       2  String::subobject String(long, unsigned char)
       2  String::subobject String(unsigned char, unsigned char)
       2  String::subobject String(unsigned int, unsigned char)
       2  String::subobject String(unsigned long, unsigned char)
       2  String::subobject ~String()
      72  String::substring(unsigned int, unsigned int) const
      24  String::toFloat() const
      14  String::toInt() const
      28  String::toLowerCase()
      28  String::toUpperCase()
      90  String::trim()
      14  String::~String()
       1  dummy_writable_char
      26  operator+(StringSumHelper const &, String const &)
      22  operator+(StringSumHelper const &, __FlashStringHelper const *)
      38  operator+(StringSumHelper const &, char const *)
      22  operator+(StringSumHelper const &, char)
      22  operator+(StringSumHelper const &, double)
      22  operator+(StringSumHelper const &, float)
      22  operator+(StringSumHelper const &, int)
      22  operator+(StringSumHelper const &, long)
      22  operator+(StringSumHelper const &, unsigned char)
      22  operator+(StringSumHelper const &, unsigned int)
      22  operator+(StringSumHelper const &, unsigned long)
       4  strchr(char *, int)
       4  strrchr(char *, int)
       4  strstr(char *, char const *)

 
     1 byte  in section .bss
     1 byte  in section .rodata
 2 820 bytes in section .text
 
 2 798 bytes of CODE  memory (+ 22 bytes shared)
     1 byte  of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: none
