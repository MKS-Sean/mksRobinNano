###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        14/Feb/2020  17:05:51
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\User\ui\QRENCODE\qrspec.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\User\ui\QRENCODE\qrspec.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\GUI\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\..\Middlewares\Third_Party\Marlin\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/List\qrspec.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\EWARM\mksRobinNano/Obj\qrspec.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano35源码\robin_nano35_v1.0.4_source\User\ui\QRENCODE\qrspec.c
      1          /*
      2           * qrencode - QR Code encoder
      3           *
      4           * QR Code specification in convenient format. 
      5           * Copyright (C) 2006-2011 Kentaro Fukuchi <kentaro@fukuchi.org>
      6           *
      7           * The following data / specifications are taken from
      8           * "Two dimensional symbol -- QR-code -- Basic Specification" (JIS X0510:2004)
      9           *  or
     10           * "Automatic identification and data capture techniques -- 
     11           *  QR Code 2005 bar code symbology specification" (ISO/IEC 18004:2006)
     12           *
     13           * This library is free software; you can redistribute it and/or
     14           * modify it under the terms of the GNU Lesser General Public
     15           * License as published by the Free Software Foundation; either
     16           * version 2.1 of the License, or any later version.
     17           *
     18           * This library is distributed in the hope that it will be useful,
     19           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     20           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
     21           * Lesser General Public License for more details.
     22           *
     23           * You should have received a copy of the GNU Lesser General Public
     24           * License along with this library; if not, write to the Free Software
     25           * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
     26           */
     27          
     28          #if HAVE_CONFIG_H
     29          # include "config.h"
     30          #endif
     31          #include <stdio.h>
     32          #include <stdlib.h>
     33          #include <string.h>
     34          #include <errno.h>
     35          #ifdef HAVE_LIBPTHREAD
     36          #include <pthread.h>
     37          #endif
     38          
     39          #include "qrspec.h"
     40          #include "qrinput.h"
     41          
     42          /******************************************************************************
     43           * Version and capacity
     44           *****************************************************************************/
     45          
     46          typedef struct {
     47          	int width; //< Edge length of the symbol
     48          	int words;  //< Data capacity (bytes)
     49          	int remainder; //< Remainder bit (bits)
     50          	int ec[4];  //< Number of ECC code (bytes)
     51          } QRspec_Capacity;
     52          
     53          /**
     54           * Table of the capacity of symbols
     55           * See Table 1 (pp.13) and Table 12-16 (pp.30-36), JIS X0510:2004.
     56           */

   \                                 In section .text, align 4, keep-with-next
     57          static const QRspec_Capacity qrspecCapacity[QRSPEC_VERSION_MAX + 1] = {
   \                     qrspecCapacity:
   \   00000000   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0, 21, 26, 0, 7, 10, 13, 17, 25, 44, 7, 10, 16
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000015   
   \              0x0000001A   
   \              0x00000000   
   \              0x00000007   
   \              0x0000000A   
   \              0x0000000D   
   \              0x00000011   
   \              0x00000019   
   \              0x0000002C   
   \              0x00000007   
   \              0x0000000A   
   \              0x00000010   
   \   0000004C   0x00000016         DC32 22, 28, 29, 70, 7, 15, 26, 36, 44, 33, 100, 7, 20, 36, 52, 64, 37
   \              0x0000001C   
   \              0x0000001D   
   \              0x00000046   
   \              0x00000007   
   \              0x0000000F   
   \              0x0000001A   
   \              0x00000024   
   \              0x0000002C   
   \              0x00000021   
   \              0x00000064   
   \              0x00000007   
   \              0x00000014   
   \              0x00000024   
   \              0x00000034   
   \              0x00000040   
   \              0x00000025   
   \   00000090   0x00000086         DC32 134, 7, 26, 48, 72, 88, 41, 172, 7, 36, 64, 96, 112, 45, 196, 0
   \              0x00000007   
   \              0x0000001A   
   \              0x00000030   
   \              0x00000048   
   \              0x00000058   
   \              0x00000029   
   \              0x000000AC   
   \              0x00000007   
   \              0x00000024   
   \              0x00000040   
   \              0x00000060   
   \              0x00000070   
   \              0x0000002D   
   \              0x000000C4   
   \              0x00000000   
   \   000000D0   0x00000028         DC32 40, 72, 108, 130, 49, 242, 0, 48, 88, 132, 156, 53, 292, 0, 60
   \              0x00000048   
   \              0x0000006C   
   \              0x00000082   
   \              0x00000031   
   \              0x000000F2   
   \              0x00000000   
   \              0x00000030   
   \              0x00000058   
   \              0x00000084   
   \              0x0000009C   
   \              0x00000035   
   \              0x00000124   
   \              0x00000000   
   \              0x0000003C   
   \   0000010C   0x0000006E         DC32 110, 160, 192, 57, 346, 0, 72, 130, 192, 224, 61, 404, 0, 80, 150
   \              0x000000A0   
   \              0x000000C0   
   \              0x00000039   
   \              0x0000015A   
   \              0x00000000   
   \              0x00000048   
   \              0x00000082   
   \              0x000000C0   
   \              0x000000E0   
   \              0x0000003D   
   \              0x00000194   
   \              0x00000000   
   \              0x00000050   
   \              0x00000096   
   \   00000148   0x000000E0         DC32 224, 264, 65, 466, 0, 96, 176, 260, 308, 69, 532, 0, 104, 198, 288
   \              0x00000108   
   \              0x00000041   
   \              0x000001D2   
   \              0x00000000   
   \              0x00000060   
   \              0x000000B0   
   \              0x00000104   
   \              0x00000134   
   \              0x00000045   
   \              0x00000214   
   \              0x00000000   
   \              0x00000068   
   \              0x000000C6   
   \              0x00000120   
   \   00000184   0x00000160         DC32 352, 73, 581, 3, 120, 216, 320, 384, 77, 655, 3, 132, 240, 360
   \              0x00000049   
   \              0x00000245   
   \              0x00000003   
   \              0x00000078   
   \              0x000000D8   
   \              0x00000140   
   \              0x00000180   
   \              0x0000004D   
   \              0x0000028F   
   \              0x00000003   
   \              0x00000084   
   \              0x000000F0   
   \              0x00000168   
   \   000001BC   0x000001B0         DC32 432, 81, 733, 3, 144, 280, 408, 480, 85, 815, 3, 168, 308, 448
   \              0x00000051   
   \              0x000002DD   
   \              0x00000003   
   \              0x00000090   
   \              0x00000118   
   \              0x00000198   
   \              0x000001E0   
   \              0x00000055   
   \              0x0000032F   
   \              0x00000003   
   \              0x000000A8   
   \              0x00000134   
   \              0x000001C0   
   \   000001F4   0x00000214         DC32 532, 89, 901, 3, 180, 338, 504, 588, 93, 991, 3, 196, 364, 546
   \              0x00000059   
   \              0x00000385   
   \              0x00000003   
   \              0x000000B4   
   \              0x00000152   
   \              0x000001F8   
   \              0x0000024C   
   \              0x0000005D   
   \              0x000003DF   
   \              0x00000003   
   \              0x000000C4   
   \              0x0000016C   
   \              0x00000222   
   \   0000022C   0x0000028A         DC32 650, 97, 1085, 3, 224, 416, 600, 700, 101, 1156, 4, 224, 442, 644
   \              0x00000061   
   \              0x0000043D   
   \              0x00000003   
   \              0x000000E0   
   \              0x000001A0   
   \              0x00000258   
   \              0x000002BC   
   \              0x00000065   
   \              0x00000484   
   \              0x00000004   
   \              0x000000E0   
   \              0x000001BA   
   \              0x00000284   
   \   00000264   0x000002EE         DC32 750, 105, 1258, 4, 252, 476, 690, 816, 109, 1364, 4, 270, 504, 750
   \              0x00000069   
   \              0x000004EA   
   \              0x00000004   
   \              0x000000FC   
   \              0x000001DC   
   \              0x000002B2   
   \              0x00000330   
   \              0x0000006D   
   \              0x00000554   
   \              0x00000004   
   \              0x0000010E   
   \              0x000001F8   
   \              0x000002EE   
   \   0000029C   0x00000384         DC32 900, 113, 1474, 4, 300, 560, 810, 960, 117, 1588, 4, 312, 588, 870
   \              0x00000071   
   \              0x000005C2   
   \              0x00000004   
   \              0x0000012C   
   \              0x00000230   
   \              0x0000032A   
   \              0x000003C0   
   \              0x00000075   
   \              0x00000634   
   \              0x00000004   
   \              0x00000138   
   \              0x0000024C   
   \              0x00000366   
   \   000002D4   0x0000041A         DC32 1050, 121, 1706, 4, 336, 644, 952, 1110, 125, 1828, 4, 360, 700
   \              0x00000079   
   \              0x000006AA   
   \              0x00000004   
   \              0x00000150   
   \              0x00000284   
   \              0x000003B8   
   \              0x00000456   
   \              0x0000007D   
   \              0x00000724   
   \              0x00000004   
   \              0x00000168   
   \              0x000002BC   
   \   00000308   0x000003FC         DC32 1020, 1200, 129, 1921, 3, 390, 728, 1050, 1260, 133, 2051, 3, 420
   \              0x000004B0   
   \              0x00000081   
   \              0x00000781   
   \              0x00000003   
   \              0x00000186   
   \              0x000002D8   
   \              0x0000041A   
   \              0x000004EC   
   \              0x00000085   
   \              0x00000803   
   \              0x00000003   
   \              0x000001A4   
   \   0000033C   0x00000310         DC32 784, 1140, 1350, 137, 2185, 3, 450, 812, 1200, 1440, 141, 2323, 3
   \              0x00000474   
   \              0x00000546   
   \              0x00000089   
   \              0x00000889   
   \              0x00000003   
   \              0x000001C2   
   \              0x0000032C   
   \              0x000004B0   
   \              0x000005A0   
   \              0x0000008D   
   \              0x00000913   
   \              0x00000003   
   \   00000370   0x000001E0         DC32 480, 868, 1290, 1530, 145, 2465, 3, 510, 924, 1350, 1620, 149
   \              0x00000364   
   \              0x0000050A   
   \              0x000005FA   
   \              0x00000091   
   \              0x000009A1   
   \              0x00000003   
   \              0x000001FE   
   \              0x0000039C   
   \              0x00000546   
   \              0x00000654   
   \              0x00000095   
   \   000003A0   0x00000A33         DC32 2611, 3, 540, 980, 1440, 1710, 153, 2761, 3, 570, 1036, 1530, 1800
   \              0x00000003   
   \              0x0000021C   
   \              0x000003D4   
   \              0x000005A0   
   \              0x000006AE   
   \              0x00000099   
   \              0x00000AC9   
   \              0x00000003   
   \              0x0000023A   
   \              0x0000040C   
   \              0x000005FA   
   \              0x00000708   
   \   000003D4   0x0000009D         DC32 157, 2876, 0, 570, 1064, 1590, 1890, 161, 3034, 0, 600, 1120, 1680
   \              0x00000B3C   
   \              0x00000000   
   \              0x0000023A   
   \              0x00000428   
   \              0x00000636   
   \              0x00000762   
   \              0x000000A1   
   \              0x00000BDA   
   \              0x00000000   
   \              0x00000258   
   \              0x00000460   
   \              0x00000690   
   \   00000408   0x000007BC         DC32 1980, 165, 3196, 0, 630, 1204, 1770, 2100, 169, 3362, 0, 660, 1260
   \              0x000000A5   
   \              0x00000C7C   
   \              0x00000000   
   \              0x00000276   
   \              0x000004B4   
   \              0x000006EA   
   \              0x00000834   
   \              0x000000A9   
   \              0x00000D22   
   \              0x00000000   
   \              0x00000294   
   \              0x000004EC   
   \   0000043C   0x00000744         DC32 1860, 2220, 173, 3532, 0, 720, 1316, 1950, 2310, 177, 3706, 0, 750
   \              0x000008AC   
   \              0x000000AD   
   \              0x00000DCC   
   \              0x00000000   
   \              0x000002D0   
   \              0x00000524   
   \              0x0000079E   
   \              0x00000906   
   \              0x000000B1   
   \              0x00000E7A   
   \              0x00000000   
   \              0x000002EE   
   \   00000470   0x0000055C         DC32 1372, 2040, 2430
   \              0x000007F8   
   \              0x0000097E   
     58          	{  0,    0, 0, {   0,    0,    0,    0}},
     59          	{ 21,   26, 0, {   7,   10,   13,   17}}, // 1
     60          	{ 25,   44, 7, {  10,   16,   22,   28}},
     61          	{ 29,   70, 7, {  15,   26,   36,   44}},
     62          	{ 33,  100, 7, {  20,   36,   52,   64}},
     63          	{ 37,  134, 7, {  26,   48,   72,   88}}, // 5
     64          	{ 41,  172, 7, {  36,   64,   96,  112}},
     65          	{ 45,  196, 0, {  40,   72,  108,  130}},
     66          	{ 49,  242, 0, {  48,   88,  132,  156}},
     67          	{ 53,  292, 0, {  60,  110,  160,  192}},
     68          	{ 57,  346, 0, {  72,  130,  192,  224}}, //10
     69          	{ 61,  404, 0, {  80,  150,  224,  264}},
     70          	{ 65,  466, 0, {  96,  176,  260,  308}},
     71          	{ 69,  532, 0, { 104,  198,  288,  352}},
     72          	{ 73,  581, 3, { 120,  216,  320,  384}},
     73          	{ 77,  655, 3, { 132,  240,  360,  432}}, //15
     74          	{ 81,  733, 3, { 144,  280,  408,  480}},
     75          	{ 85,  815, 3, { 168,  308,  448,  532}},
     76          	{ 89,  901, 3, { 180,  338,  504,  588}},
     77          	{ 93,  991, 3, { 196,  364,  546,  650}},
     78          	{ 97, 1085, 3, { 224,  416,  600,  700}}, //20
     79          	{101, 1156, 4, { 224,  442,  644,  750}},
     80          	{105, 1258, 4, { 252,  476,  690,  816}},
     81          	{109, 1364, 4, { 270,  504,  750,  900}},
     82          	{113, 1474, 4, { 300,  560,  810,  960}},
     83          	{117, 1588, 4, { 312,  588,  870, 1050}}, //25
     84          	{121, 1706, 4, { 336,  644,  952, 1110}},
     85          	{125, 1828, 4, { 360,  700, 1020, 1200}},
     86          	{129, 1921, 3, { 390,  728, 1050, 1260}},
     87          	{133, 2051, 3, { 420,  784, 1140, 1350}},
     88          	{137, 2185, 3, { 450,  812, 1200, 1440}}, //30
     89          	{141, 2323, 3, { 480,  868, 1290, 1530}},
     90          	{145, 2465, 3, { 510,  924, 1350, 1620}},
     91          	{149, 2611, 3, { 540,  980, 1440, 1710}},
     92          	{153, 2761, 3, { 570, 1036, 1530, 1800}},
     93          	{157, 2876, 0, { 570, 1064, 1590, 1890}}, //35
     94          	{161, 3034, 0, { 600, 1120, 1680, 1980}},
     95          	{165, 3196, 0, { 630, 1204, 1770, 2100}},
     96          	{169, 3362, 0, { 660, 1260, 1860, 2220}},
     97          	{173, 3532, 0, { 720, 1316, 1950, 2310}},
     98          	{177, 3706, 0, { 750, 1372, 2040, 2430}} //40
     99          };
    100          

   \                                 In section .text, align 2, keep-with-next
    101          int QRspec_getDataLength(int version, QRecLevel level)
    102          {
    103          	return qrspecCapacity[version].words - qrspecCapacity[version].ec[level];
   \                     QRspec_getDataLength: (+1)
   \   00000000   0xEBC0 0x02C0      RSB      R2,R0,R0, LSL #+3
   \   00000004   0x.... 0x....      ADR.W    R0,qrspecCapacity
   \   00000008   0xEB00 0x0082      ADD      R0,R0,R2, LSL #+2
   \   0000000C   0x6842             LDR      R2,[R0, #+4]
   \   0000000E   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   00000012   0x68C0             LDR      R0,[R0, #+12]
   \   00000014   0x1A10             SUBS     R0,R2,R0
   \   00000016   0x4770             BX       LR               ;; return
    104          }
    105          

   \                                 In section .text, align 2, keep-with-next
    106          int QRspec_getECCLength(int version, QRecLevel level)
    107          {
    108          	return qrspecCapacity[version].ec[level];
   \                     QRspec_getECCLength: (+1)
   \   00000000   0xEBC0 0x02C0      RSB      R2,R0,R0, LSL #+3
   \   00000004   0x.... 0x....      ADR.W    R0,qrspecCapacity
   \   00000008   0xEB00 0x0082      ADD      R0,R0,R2, LSL #+2
   \   0000000C   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   00000010   0x68C0             LDR      R0,[R0, #+12]
   \   00000012   0x4770             BX       LR               ;; return
    109          }
    110          

   \                                 In section .text, align 2, keep-with-next
    111          int QRspec_getMinimumVersion(int size, QRecLevel level)
    112          {
   \                     QRspec_getMinimumVersion: (+1)
   \   00000000   0xB410             PUSH     {R4}
    113          	int i;
    114          	int words;
    115          
    116          	for(i=1; i<= QRSPEC_VERSION_MAX; i++) {
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0xE000             B.N      ??QRspec_getMinimumVersion_0
   \                     ??QRspec_getMinimumVersion_1: (+1)
   \   00000006   0x1C52             ADDS     R2,R2,#+1
   \                     ??QRspec_getMinimumVersion_0: (+1)
   \   00000008   0x2A29             CMP      R2,#+41
   \   0000000A   0xDA0E             BGE.N    ??QRspec_getMinimumVersion_2
    117          		words  = qrspecCapacity[i].words - qrspecCapacity[i].ec[level];
    118          		if(words >= size) return i;
   \   0000000C   0xEBC2 0x03C2      RSB      R3,R2,R2, LSL #+3
   \   00000010   0x.... 0x....      ADR.W    R4,qrspecCapacity
   \   00000014   0xEB04 0x0383      ADD      R3,R4,R3, LSL #+2
   \   00000018   0x685C             LDR      R4,[R3, #+4]
   \   0000001A   0xEB03 0x0381      ADD      R3,R3,R1, LSL #+2
   \   0000001E   0x68DB             LDR      R3,[R3, #+12]
   \   00000020   0x1AE3             SUBS     R3,R4,R3
   \   00000022   0x4283             CMP      R3,R0
   \   00000024   0xDBEF             BLT.N    ??QRspec_getMinimumVersion_1
   \   00000026   0x4610             MOV      R0,R2
   \   00000028   0xE001             B.N      ??QRspec_getMinimumVersion_3
    119          	}
    120          
    121          	return -1;
   \                     ??QRspec_getMinimumVersion_2: (+1)
   \   0000002A   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??QRspec_getMinimumVersion_3: (+1)
   \   0000002E   0xBC10             POP      {R4}
   \   00000030   0x4770             BX       LR               ;; return
    122          }
    123          

   \                                 In section .text, align 2, keep-with-next
    124          int QRspec_getWidth(int version)
    125          {
    126          	return qrspecCapacity[version].width;
   \                     QRspec_getWidth: (+1)
   \   00000000   0xEBC0 0x01C0      RSB      R1,R0,R0, LSL #+3
   \   00000004   0x0088             LSLS     R0,R1,#+2
   \   00000006   0x.... 0x....      ADR.W    R1,qrspecCapacity
   \   0000000A   0x5840             LDR      R0,[R0, R1]
   \   0000000C   0x4770             BX       LR               ;; return
    127          }
    128          

   \                                 In section .text, align 2, keep-with-next
    129          int QRspec_getRemainder(int version)
    130          {
    131          	return qrspecCapacity[version].remainder;
   \                     QRspec_getRemainder: (+1)
   \   00000000   0xEBC0 0x01C0      RSB      R1,R0,R0, LSL #+3
   \   00000004   0x.... 0x....      ADR.W    R0,qrspecCapacity
   \   00000008   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   0000000C   0x6880             LDR      R0,[R0, #+8]
   \   0000000E   0x4770             BX       LR               ;; return
    132          }
    133          
    134          /******************************************************************************
    135           * Length indicator
    136           *****************************************************************************/
    137          

   \                                 In section .text, align 4, keep-with-next
    138          static const int lengthTableBits[4][3] = {
   \                     lengthTableBits:
   \   00000000   0x0000000A         DC32 10, 12, 14, 9, 11, 13, 8, 16, 16, 8, 10, 12
   \              0x0000000C   
   \              0x0000000E   
   \              0x00000009   
   \              0x0000000B   
   \              0x0000000D   
   \              0x00000008   
   \              0x00000010   
   \              0x00000010   
   \              0x00000008   
   \              0x0000000A   
   \              0x0000000C   
    139          	{10, 12, 14},
    140          	{ 9, 11, 13},
    141          	{ 8, 16, 16},
    142          	{ 8, 10, 12}
    143          };
    144          

   \                                 In section .text, align 2, keep-with-next
    145          int QRspec_lengthIndicator(QRencodeMode mode, int version)
    146          {
   \                     QRspec_lengthIndicator: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    147          	int l;
    148          
    149          	if(!QRinput_isSplittableMode(mode)) return 0;
   \   00000006   0x.... 0x....      BL       QRinput_isSplittableMode
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??QRspec_lengthIndicator_0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}
    150          	if(version <= 9) {
   \                     ??QRspec_lengthIndicator_0: (+1)
   \   00000012   0x2D0A             CMP      R5,#+10
   \   00000014   0xDA01             BGE.N    ??QRspec_lengthIndicator_1
    151          		l = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE004             B.N      ??QRspec_lengthIndicator_2
    152          	} else if(version <= 26) {
   \                     ??QRspec_lengthIndicator_1: (+1)
   \   0000001A   0x2D1B             CMP      R5,#+27
   \   0000001C   0xDA01             BGE.N    ??QRspec_lengthIndicator_3
    153          		l = 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE000             B.N      ??QRspec_lengthIndicator_2
    154          	} else {
    155          		l = 2;
   \                     ??QRspec_lengthIndicator_3: (+1)
   \   00000022   0x2002             MOVS     R0,#+2
    156          	}
    157          
    158          	return lengthTableBits[mode][l];
   \                     ??QRspec_lengthIndicator_2: (+1)
   \   00000024   0xEB04 0x0144      ADD      R1,R4,R4, LSL #+1
   \   00000028   0x.... 0x....      ADR.W    R2,lengthTableBits
   \   0000002C   0xEB02 0x0181      ADD      R1,R2,R1, LSL #+2
   \   00000030   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    159          }
    160          

   \                                 In section .text, align 2, keep-with-next
    161          int QRspec_maximumWords(QRencodeMode mode, int version)
    162          {
   \                     QRspec_maximumWords: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    163          	int l;
    164          	int bits;
    165          	int words;
    166          
    167          	if(!QRinput_isSplittableMode(mode)) return 0;
   \   00000006   0x.... 0x....      BL       QRinput_isSplittableMode
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??QRspec_maximumWords_0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}
    168          	if(version <= 9) {
   \                     ??QRspec_maximumWords_0: (+1)
   \   00000012   0x2D0A             CMP      R5,#+10
   \   00000014   0xDA01             BGE.N    ??QRspec_maximumWords_1
    169          		l = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE004             B.N      ??QRspec_maximumWords_2
    170          	} else if(version <= 26) {
   \                     ??QRspec_maximumWords_1: (+1)
   \   0000001A   0x2D1B             CMP      R5,#+27
   \   0000001C   0xDA01             BGE.N    ??QRspec_maximumWords_3
    171          		l = 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE000             B.N      ??QRspec_maximumWords_2
    172          	} else {
    173          		l = 2;
   \                     ??QRspec_maximumWords_3: (+1)
   \   00000022   0x2002             MOVS     R0,#+2
    174          	}
    175          
    176          	bits = lengthTableBits[mode][l];
    177          	words = (1 << bits) - 1;
   \                     ??QRspec_maximumWords_2: (+1)
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0xEB04 0x0244      ADD      R2,R4,R4, LSL #+1
   \   0000002A   0x.... 0x....      ADR.W    R3,lengthTableBits
   \   0000002E   0xEB03 0x0282      ADD      R2,R3,R2, LSL #+2
   \   00000032   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000036   0xFA01 0xF000      LSL      R0,R1,R0
   \   0000003A   0x1E40             SUBS     R0,R0,#+1
    178          	if(mode == QR_MODE_KANJI) {
   \   0000003C   0x2C03             CMP      R4,#+3
   \   0000003E   0xD100             BNE.N    ??QRspec_maximumWords_4
    179          		words *= 2; // the number of bytes is required
   \   00000040   0x0040             LSLS     R0,R0,#+1
    180          	}
    181          
    182          	return words;
   \                     ??QRspec_maximumWords_4: (+1)
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    183          }
    184          
    185          /******************************************************************************
    186           * Error correction code
    187           *****************************************************************************/
    188          
    189          /**
    190           * Table of the error correction code (Reed-Solomon block)
    191           * See Table 12-16 (pp.30-36), JIS X0510:2004.
    192           */

   \                                 In section .text, align 4, keep-with-next
    193          static const int eccTable[QRSPEC_VERSION_MAX+1][4][2] = {
   \                     eccTable:
   \   00000000   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \   00000058   0x00000001         DC32 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 1, 0, 2, 0, 2, 0, 4, 0, 1, 0, 2, 0
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000002   
   \              0x00000000   
   \              0x00000002   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000002   
   \              0x00000000   
   \              0x00000002   
   \              0x00000000   
   \              0x00000004   
   \              0x00000000   
   \              0x00000001   
   \              0x00000000   
   \              0x00000002   
   \              0x00000000   
   \   000000B0   0x00000002         DC32 2, 2, 2, 2, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 4, 0, 2, 4, 4, 1, 2, 0
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000002   
   \              0x00000000   
   \              0x00000004   
   \              0x00000000   
   \              0x00000004   
   \              0x00000000   
   \              0x00000004   
   \              0x00000000   
   \              0x00000002   
   \              0x00000000   
   \              0x00000004   
   \              0x00000000   
   \              0x00000002   
   \              0x00000004   
   \              0x00000004   
   \              0x00000001   
   \              0x00000002   
   \              0x00000000   
   \   00000108   0x00000002         DC32 2, 2, 4, 2, 4, 2, 2, 0, 3, 2, 4, 4, 4, 4, 2, 2, 4, 1, 6, 2, 6, 2
   \              0x00000002   
   \              0x00000004   
   \              0x00000002   
   \              0x00000004   
   \              0x00000002   
   \              0x00000002   
   \              0x00000000   
   \              0x00000003   
   \              0x00000002   
   \              0x00000004   
   \              0x00000004   
   \              0x00000004   
   \              0x00000004   
   \              0x00000002   
   \              0x00000002   
   \              0x00000004   
   \              0x00000001   
   \              0x00000006   
   \              0x00000002   
   \              0x00000006   
   \              0x00000002   
   \   00000160   0x00000004         DC32 4, 0, 1, 4, 4, 4, 3, 8, 2, 2, 6, 2, 4, 6, 7, 4, 4, 0, 8, 1, 8, 4
   \              0x00000000   
   \              0x00000001   
   \              0x00000004   
   \              0x00000004   
   \              0x00000004   
   \              0x00000003   
   \              0x00000008   
   \              0x00000002   
   \              0x00000002   
   \              0x00000006   
   \              0x00000002   
   \              0x00000004   
   \              0x00000006   
   \              0x00000007   
   \              0x00000004   
   \              0x00000004   
   \              0x00000000   
   \              0x00000008   
   \              0x00000001   
   \              0x00000008   
   \              0x00000004   
   \   000001B8   0x0000000C         DC32 12, 4, 3, 1, 4, 5, 11, 5, 11, 5, 5, 1, 5, 5, 5, 7, 11, 7, 5, 1, 7
   \              0x00000004   
   \              0x00000003   
   \              0x00000001   
   \              0x00000004   
   \              0x00000005   
   \              0x0000000B   
   \              0x00000005   
   \              0x0000000B   
   \              0x00000005   
   \              0x00000005   
   \              0x00000001   
   \              0x00000005   
   \              0x00000005   
   \              0x00000005   
   \              0x00000007   
   \              0x0000000B   
   \              0x00000007   
   \              0x00000005   
   \              0x00000001   
   \              0x00000007   
   \   0000020C   0x00000003         DC32 3, 15, 2, 3, 13, 1, 5, 10, 1, 1, 15, 2, 17, 5, 1, 9, 4, 17, 1, 2
   \              0x0000000F   
   \              0x00000002   
   \              0x00000003   
   \              0x0000000D   
   \              0x00000001   
   \              0x00000005   
   \              0x0000000A   
   \              0x00000001   
   \              0x00000001   
   \              0x0000000F   
   \              0x00000002   
   \              0x00000011   
   \              0x00000005   
   \              0x00000001   
   \              0x00000009   
   \              0x00000004   
   \              0x00000011   
   \              0x00000001   
   \              0x00000002   
   \   0000025C   0x00000013         DC32 19, 3, 4, 3, 11, 17, 4, 9, 16, 3, 5, 3, 13, 15, 5, 15, 10, 4, 4
   \              0x00000003   
   \              0x00000004   
   \              0x00000003   
   \              0x0000000B   
   \              0x00000011   
   \              0x00000004   
   \              0x00000009   
   \              0x00000010   
   \              0x00000003   
   \              0x00000005   
   \              0x00000003   
   \              0x0000000D   
   \              0x0000000F   
   \              0x00000005   
   \              0x0000000F   
   \              0x0000000A   
   \              0x00000004   
   \              0x00000004   
   \   000002A8   0x00000011         DC32 17, 0, 17, 6, 19, 6, 2, 7, 17, 0, 7, 16, 34, 0, 4, 5, 4, 14, 11
   \              0x00000000   
   \              0x00000011   
   \              0x00000006   
   \              0x00000013   
   \              0x00000006   
   \              0x00000002   
   \              0x00000007   
   \              0x00000011   
   \              0x00000000   
   \              0x00000007   
   \              0x00000010   
   \              0x00000022   
   \              0x00000000   
   \              0x00000004   
   \              0x00000005   
   \              0x00000004   
   \              0x0000000E   
   \              0x0000000B   
   \   000002F4   0x0000000E         DC32 14, 16, 14, 6, 4, 6, 14, 11, 16, 30, 2, 8, 4, 8, 13, 7, 22, 22, 13
   \              0x00000010   
   \              0x0000000E   
   \              0x00000006   
   \              0x00000004   
   \              0x00000006   
   \              0x0000000E   
   \              0x0000000B   
   \              0x00000010   
   \              0x0000001E   
   \              0x00000002   
   \              0x00000008   
   \              0x00000004   
   \              0x00000008   
   \              0x0000000D   
   \              0x00000007   
   \              0x00000016   
   \              0x00000016   
   \              0x0000000D   
   \   00000340   0x0000000A         DC32 10, 2, 19, 4, 28, 6, 33, 4, 8, 4, 22, 3, 8, 26, 12, 28, 3, 10, 3
   \              0x00000002   
   \              0x00000013   
   \              0x00000004   
   \              0x0000001C   
   \              0x00000006   
   \              0x00000021   
   \              0x00000004   
   \              0x00000008   
   \              0x00000004   
   \              0x00000016   
   \              0x00000003   
   \              0x00000008   
   \              0x0000001A   
   \              0x0000000C   
   \              0x0000001C   
   \              0x00000003   
   \              0x0000000A   
   \              0x00000003   
   \   0000038C   0x00000017         DC32 23, 4, 31, 11, 31, 7, 7, 21, 7, 1, 37, 19, 26, 5, 10, 19, 10, 15
   \              0x00000004   
   \              0x0000001F   
   \              0x0000000B   
   \              0x0000001F   
   \              0x00000007   
   \              0x00000007   
   \              0x00000015   
   \              0x00000007   
   \              0x00000001   
   \              0x00000025   
   \              0x00000013   
   \              0x0000001A   
   \              0x00000005   
   \              0x0000000A   
   \              0x00000013   
   \              0x0000000A   
   \              0x0000000F   
   \   000003D4   0x00000019         DC32 25, 23, 25, 13, 3, 2, 29, 42, 1, 23, 28, 17, 0, 10, 23, 10, 35, 19
   \              0x00000017   
   \              0x00000019   
   \              0x0000000D   
   \              0x00000003   
   \              0x00000002   
   \              0x0000001D   
   \              0x0000002A   
   \              0x00000001   
   \              0x00000017   
   \              0x0000001C   
   \              0x00000011   
   \              0x00000000   
   \              0x0000000A   
   \              0x00000017   
   \              0x0000000A   
   \              0x00000023   
   \              0x00000013   
   \   0000041C   0x00000023         DC32 35, 17, 1, 14, 21, 29, 19, 11, 46, 13, 6, 14, 23, 44, 7, 59, 1, 12
   \              0x00000011   
   \              0x00000001   
   \              0x0000000E   
   \              0x00000015   
   \              0x0000001D   
   \              0x00000013   
   \              0x0000000B   
   \              0x0000002E   
   \              0x0000000D   
   \              0x00000006   
   \              0x0000000E   
   \              0x00000017   
   \              0x0000002C   
   \              0x00000007   
   \              0x0000003B   
   \              0x00000001   
   \              0x0000000C   
   \   00000464   0x00000007         DC32 7, 12, 26, 39, 14, 22, 41, 6, 14, 6, 34, 46, 10, 2, 64, 17, 4, 29
   \              0x0000000C   
   \              0x0000001A   
   \              0x00000027   
   \              0x0000000E   
   \              0x00000016   
   \              0x00000029   
   \              0x00000006   
   \              0x0000000E   
   \              0x00000006   
   \              0x00000022   
   \              0x0000002E   
   \              0x0000000A   
   \              0x00000002   
   \              0x00000040   
   \              0x00000011   
   \              0x00000004   
   \              0x0000001D   
   \   000004AC   0x0000000E         DC32 14, 49, 10, 24, 46, 4, 18, 13, 32, 48, 14, 42, 32, 20, 4, 40, 7
   \              0x00000031   
   \              0x0000000A   
   \              0x00000018   
   \              0x0000002E   
   \              0x00000004   
   \              0x00000012   
   \              0x0000000D   
   \              0x00000020   
   \              0x00000030   
   \              0x0000000E   
   \              0x0000002A   
   \              0x00000020   
   \              0x00000014   
   \              0x00000004   
   \              0x00000028   
   \              0x00000007   
   \   000004F0   0x0000002B         DC32 43, 22, 10, 67, 19, 6, 18, 31, 34, 34, 20, 61
   \              0x00000016   
   \              0x0000000A   
   \              0x00000043   
   \              0x00000013   
   \              0x00000006   
   \              0x00000012   
   \              0x0000001F   
   \              0x00000022   
   \              0x00000022   
   \              0x00000014   
   \              0x0000003D   
    194          	{{ 0,  0}, { 0,  0}, { 0,  0}, { 0,  0}},
    195          	{{ 1,  0}, { 1,  0}, { 1,  0}, { 1,  0}}, // 1
    196          	{{ 1,  0}, { 1,  0}, { 1,  0}, { 1,  0}},
    197          	{{ 1,  0}, { 1,  0}, { 2,  0}, { 2,  0}},
    198          	{{ 1,  0}, { 2,  0}, { 2,  0}, { 4,  0}},
    199          	{{ 1,  0}, { 2,  0}, { 2,  2}, { 2,  2}}, // 5
    200          	{{ 2,  0}, { 4,  0}, { 4,  0}, { 4,  0}},
    201          	{{ 2,  0}, { 4,  0}, { 2,  4}, { 4,  1}},
    202          	{{ 2,  0}, { 2,  2}, { 4,  2}, { 4,  2}},
    203          	{{ 2,  0}, { 3,  2}, { 4,  4}, { 4,  4}},
    204          	{{ 2,  2}, { 4,  1}, { 6,  2}, { 6,  2}}, //10
    205          	{{ 4,  0}, { 1,  4}, { 4,  4}, { 3,  8}},
    206          	{{ 2,  2}, { 6,  2}, { 4,  6}, { 7,  4}},
    207          	{{ 4,  0}, { 8,  1}, { 8,  4}, {12,  4}},
    208          	{{ 3,  1}, { 4,  5}, {11,  5}, {11,  5}},
    209          	{{ 5,  1}, { 5,  5}, { 5,  7}, {11,  7}}, //15
    210          	{{ 5,  1}, { 7,  3}, {15,  2}, { 3, 13}},
    211          	{{ 1,  5}, {10,  1}, { 1, 15}, { 2, 17}},
    212          	{{ 5,  1}, { 9,  4}, {17,  1}, { 2, 19}},
    213          	{{ 3,  4}, { 3, 11}, {17,  4}, { 9, 16}},
    214          	{{ 3,  5}, { 3, 13}, {15,  5}, {15, 10}}, //20
    215          	{{ 4,  4}, {17,  0}, {17,  6}, {19,  6}},
    216          	{{ 2,  7}, {17,  0}, { 7, 16}, {34,  0}},
    217          	{{ 4,  5}, { 4, 14}, {11, 14}, {16, 14}},
    218          	{{ 6,  4}, { 6, 14}, {11, 16}, {30,  2}},
    219          	{{ 8,  4}, { 8, 13}, { 7, 22}, {22, 13}}, //25
    220          	{{10,  2}, {19,  4}, {28,  6}, {33,  4}},
    221          	{{ 8,  4}, {22,  3}, { 8, 26}, {12, 28}},
    222          	{{ 3, 10}, { 3, 23}, { 4, 31}, {11, 31}},
    223          	{{ 7,  7}, {21,  7}, { 1, 37}, {19, 26}},
    224          	{{ 5, 10}, {19, 10}, {15, 25}, {23, 25}}, //30
    225          	{{13,  3}, { 2, 29}, {42,  1}, {23, 28}},
    226          	{{17,  0}, {10, 23}, {10, 35}, {19, 35}},
    227          	{{17,  1}, {14, 21}, {29, 19}, {11, 46}},
    228          	{{13,  6}, {14, 23}, {44,  7}, {59,  1}},
    229          	{{12,  7}, {12, 26}, {39, 14}, {22, 41}}, //35
    230          	{{ 6, 14}, { 6, 34}, {46, 10}, { 2, 64}},
    231          	{{17,  4}, {29, 14}, {49, 10}, {24, 46}},
    232          	{{ 4, 18}, {13, 32}, {48, 14}, {42, 32}},
    233          	{{20,  4}, {40,  7}, {43, 22}, {10, 67}},
    234          	{{19,  6}, {18, 31}, {34, 34}, {20, 61}},//40
    235          };
    236          

   \                                 In section .text, align 2, keep-with-next
    237          void QRspec_getEccSpec(int version, QRecLevel level, int spec[5])
    238          {
   \                     QRspec_getEccSpec: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4614             MOV      R4,R2
    239          	int b1, b2;
    240          	int data, ecc;
    241          
    242          	b1 = eccTable[version][level][0];
   \   0000000A   0x.... 0x....      ADR.W    R0,eccTable
   \   0000000E   0xEB00 0x1045      ADD      R0,R0,R5, LSL #+5
   \   00000012   0xF850 0x7036      LDR      R7,[R0, R6, LSL #+3]
    243          	b2 = eccTable[version][level][1];
   \   00000016   0xEB00 0x00C6      ADD      R0,R0,R6, LSL #+3
   \   0000001A   0xF8D0 0x8004      LDR      R8,[R0, #+4]
    244          	data = QRspec_getDataLength(version, level);
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       QRspec_getDataLength
   \   00000024   0x4681             MOV      R9,R0
    245          	ecc  = QRspec_getECCLength(version, level);
   \   00000026   0x4631             MOV      R1,R6
   \   00000028   0x4628             MOV      R0,R5
   \   0000002A   0x.... 0x....      BL       QRspec_getECCLength
    246          
    247          	if(b2 == 0) {
   \   0000002E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000032   0x6027             STR      R7,[R4, #+0]
   \   00000034   0xD109             BNE.N    ??QRspec_getEccSpec_0
    248          		spec[0] = b1;
    249          		spec[1] = data / b1;
   \   00000036   0xFB99 0xF1F7      SDIV     R1,R9,R7
   \   0000003A   0x6061             STR      R1,[R4, #+4]
    250          		spec[2] = ecc / b1;
   \   0000003C   0xFB90 0xF0F7      SDIV     R0,R0,R7
   \   00000040   0x60A0             STR      R0,[R4, #+8]
    251          		spec[3] = spec[4] = 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x6120             STR      R0,[R4, #+16]
   \   00000046   0x60E0             STR      R0,[R4, #+12]
   \   00000048   0xE00C             B.N      ??QRspec_getEccSpec_1
    252          	} else {
    253          		spec[0] = b1;
    254          		spec[1] = data / (b1 + b2);
   \                     ??QRspec_getEccSpec_0: (+1)
   \   0000004A   0xEB08 0x0107      ADD      R1,R8,R7
   \   0000004E   0xFB99 0xF2F1      SDIV     R2,R9,R1
   \   00000052   0x6062             STR      R2,[R4, #+4]
    255          		spec[2] = ecc  / (b1 + b2);
   \   00000054   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000058   0x60A0             STR      R0,[R4, #+8]
    256          		spec[3] = b2;
   \   0000005A   0xF8C4 0x800C      STR      R8,[R4, #+12]
    257          		spec[4] = spec[1] + 1;
   \   0000005E   0x6860             LDR      R0,[R4, #+4]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0x6120             STR      R0,[R4, #+16]
    258          	}
    259          }
   \                     ??QRspec_getEccSpec_1: (+1)
   \   00000064   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    260          
    261          /******************************************************************************
    262           * Alignment pattern
    263           *****************************************************************************/
    264          
    265          /**
    266           * Positions of alignment patterns.
    267           * This array includes only the second and the third position of the alignment
    268           * patterns. Rest of them can be calculated from the distance between them.
    269           *
    270           * See Table 1 in Appendix E (pp.71) of JIS X0510:2004.
    271           */

   \                                 In section .text, align 4, keep-with-next
    272          static const int alignmentPattern[QRSPEC_VERSION_MAX+1][2] = {
   \                     alignmentPattern:
   \   00000000   0x00000000         DC32 0, 0, 0, 0, 18, 0, 22, 0, 26, 0, 30, 0, 34, 0, 22, 38, 24, 42, 26
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000012   
   \              0x00000000   
   \              0x00000016   
   \              0x00000000   
   \              0x0000001A   
   \              0x00000000   
   \              0x0000001E   
   \              0x00000000   
   \              0x00000022   
   \              0x00000000   
   \              0x00000016   
   \              0x00000026   
   \              0x00000018   
   \              0x0000002A   
   \              0x0000001A   
   \   0000004C   0x0000002E         DC32 46, 28, 50, 30, 54, 32, 58, 34, 62, 26, 46, 26, 48, 26, 50, 30, 54
   \              0x0000001C   
   \              0x00000032   
   \              0x0000001E   
   \              0x00000036   
   \              0x00000020   
   \              0x0000003A   
   \              0x00000022   
   \              0x0000003E   
   \              0x0000001A   
   \              0x0000002E   
   \              0x0000001A   
   \              0x00000030   
   \              0x0000001A   
   \              0x00000032   
   \              0x0000001E   
   \              0x00000036   
   \   00000090   0x0000001E         DC32 30, 56, 30, 58, 34, 62, 28, 50, 26, 50, 30, 54, 28, 54, 32, 58, 30
   \              0x00000038   
   \              0x0000001E   
   \              0x0000003A   
   \              0x00000022   
   \              0x0000003E   
   \              0x0000001C   
   \              0x00000032   
   \              0x0000001A   
   \              0x00000032   
   \              0x0000001E   
   \              0x00000036   
   \              0x0000001C   
   \              0x00000036   
   \              0x00000020   
   \              0x0000003A   
   \              0x0000001E   
   \   000000D4   0x0000003A         DC32 58, 34, 62, 26, 50, 30, 54, 26, 52, 30, 56, 34, 60, 30, 58, 34, 62
   \              0x00000022   
   \              0x0000003E   
   \              0x0000001A   
   \              0x00000032   
   \              0x0000001E   
   \              0x00000036   
   \              0x0000001A   
   \              0x00000034   
   \              0x0000001E   
   \              0x00000038   
   \              0x00000022   
   \              0x0000003C   
   \              0x0000001E   
   \              0x0000003A   
   \              0x00000022   
   \              0x0000003E   
   \   00000118   0x0000001E         DC32 30, 54, 24, 50, 28, 54, 32, 58, 26, 54, 30, 58
   \              0x00000036   
   \              0x00000018   
   \              0x00000032   
   \              0x0000001C   
   \              0x00000036   
   \              0x00000020   
   \              0x0000003A   
   \              0x0000001A   
   \              0x00000036   
   \              0x0000001E   
   \              0x0000003A   
    273          	{ 0,  0},
    274          	{ 0,  0}, {18,  0}, {22,  0}, {26,  0}, {30,  0}, // 1- 5
    275          	{34,  0}, {22, 38}, {24, 42}, {26, 46}, {28, 50}, // 6-10
    276          	{30, 54}, {32, 58}, {34, 62}, {26, 46}, {26, 48}, //11-15
    277          	{26, 50}, {30, 54}, {30, 56}, {30, 58}, {34, 62}, //16-20
    278          	{28, 50}, {26, 50}, {30, 54}, {28, 54}, {32, 58}, //21-25
    279          	{30, 58}, {34, 62}, {26, 50}, {30, 54}, {26, 52}, //26-30
    280          	{30, 56}, {34, 60}, {30, 58}, {34, 62}, {30, 54}, //31-35
    281          	{24, 50}, {28, 54}, {32, 58}, {26, 54}, {30, 58}, //35-40
    282          };
    283          
    284          /**
    285           * Put an alignment marker.
    286           * @param frame
    287           * @param width
    288           * @param ox,oy center coordinate of the pattern
    289           */

   \                                 In section .text, align 2, keep-with-next
    290          static void QRspec_putAlignmentMarker(unsigned char *frame, int width, int ox, int oy)
    291          {
   \                     QRspec_putAlignmentMarker: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    292          	static const unsigned char finder[] = {
    293          		0xa1, 0xa1, 0xa1, 0xa1, 0xa1,
    294          		0xa1, 0xa0, 0xa0, 0xa0, 0xa1,
    295          		0xa1, 0xa0, 0xa1, 0xa0, 0xa1,
    296          		0xa1, 0xa0, 0xa0, 0xa0, 0xa1,
    297          		0xa1, 0xa1, 0xa1, 0xa1, 0xa1,
    298          	};
    299          	int x, y;
    300          	const unsigned char *s;
    301          
    302          	frame += (oy - 2) * width + ox - 2;
   \   00000002   0x1E9B             SUBS     R3,R3,#+2
   \   00000004   0xFB01 0x2203      MLA      R2,R1,R3,R2
   \   00000008   0x1810             ADDS     R0,R2,R0
   \   0000000A   0x1E80             SUBS     R0,R0,#+2
    303          	s = finder;
   \   0000000C   0x.... 0x....      ADR.W    R2,??finder
    304          	for(y=0; y<5; y++) {
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0xE008             B.N      ??QRspec_putAlignmentMarker_0
    305          		for(x=0; x<5; x++) {
    306          			frame[x] = s[x];
   \                     ??QRspec_putAlignmentMarker_1: (+1)
   \   00000014   0x5CA5             LDRB     R5,[R4, R2]
   \   00000016   0x5425             STRB     R5,[R4, R0]
    307          		}
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \                     ??QRspec_putAlignmentMarker_2: (+1)
   \   0000001A   0x2C05             CMP      R4,#+5
   \   0000001C   0xDBFA             BLT.N    ??QRspec_putAlignmentMarker_1
    308          		frame += width;
   \   0000001E   0x1808             ADDS     R0,R1,R0
    309          		s += 5;
   \   00000020   0xF202 0x0205      ADDW     R2,R2,#+5
   \   00000024   0x1C5B             ADDS     R3,R3,#+1
   \                     ??QRspec_putAlignmentMarker_0: (+1)
   \   00000026   0x2B05             CMP      R3,#+5
   \   00000028   0xDA01             BGE.N    ??QRspec_putAlignmentMarker_3
   \   0000002A   0x2400             MOVS     R4,#+0
   \   0000002C   0xE7F5             B.N      ??QRspec_putAlignmentMarker_2
    310          	}
    311          }
   \                     ??QRspec_putAlignmentMarker_3: (+1)
   \   0000002E   0xBC30             POP      {R4,R5}
   \   00000030   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??finder:
   \   00000000   0xA1 0xA1          DC8 161, 161, 161, 161, 161, 161, 160, 160, 160, 161, 161, 160, 161
   \              0xA1 0xA1    
   \              0xA1 0xA1    
   \              0xA0 0xA0    
   \              0xA0 0xA1    
   \              0xA1 0xA0    
   \              0xA1         
   \   0000000D   0xA0 0xA1          DC8 160, 161, 161, 160, 160, 160, 161, 161, 161, 161, 161, 161, 0, 0, 0
   \              0xA1 0xA0    
   \              0xA0 0xA0    
   \              0xA1 0xA1    
   \              0xA1 0xA1    
   \              0xA1 0xA1    
   \              0x00 0x00    
   \              0x00         
    312          

   \                                 In section .text, align 2, keep-with-next
    313          static void QRspec_putAlignmentPattern(int version, unsigned char *frame, int width)
    314          {
   \                     QRspec_putAlignmentPattern: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4615             MOV      R5,R2
    315          	int d, w, x, y, cx, cy;
    316          
    317          	if(version < 2) return;
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xDB50             BLT.N    ??QRspec_putAlignmentPattern_0
    318          
    319          	d = alignmentPattern[version][1] - alignmentPattern[version][0];
   \   0000000C   0x.... 0x....      ADR.W    R1,alignmentPattern
   \   00000010   0xF851 0x2030      LDR      R2,[R1, R0, LSL #+3]
   \   00000014   0x9200             STR      R2,[SP, #+0]
   \   00000016   0xEB01 0x00C0      ADD      R0,R1,R0, LSL #+3
   \   0000001A   0x6840             LDR      R0,[R0, #+4]
   \   0000001C   0x4611             MOV      R1,R2
   \   0000001E   0x1A46             SUBS     R6,R0,R1
    320          	if(d < 0) {
   \   00000020   0xD502             BPL.N    ??QRspec_putAlignmentPattern_1
    321          		w = 2;
   \   00000022   0xF04F 0x0A02      MOV      R10,#+2
   \   00000026   0xE005             B.N      ??QRspec_putAlignmentPattern_2
    322          	} else {
    323          		w = (width - alignmentPattern[version][0]) / d + 2;
   \                     ??QRspec_putAlignmentPattern_1: (+1)
   \   00000028   0x4608             MOV      R0,R1
   \   0000002A   0x1A28             SUBS     R0,R5,R0
   \   0000002C   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   00000030   0xF100 0x0A02      ADD      R10,R0,#+2
    324          	}
    325          
    326          	if(w * w - 3 == 1) {
   \                     ??QRspec_putAlignmentPattern_2: (+1)
   \   00000034   0xFB0A 0xF00A      MUL      R0,R10,R10
   \   00000038   0x1EC0             SUBS     R0,R0,#+3
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD106             BNE.N    ??QRspec_putAlignmentPattern_3
    327          		x = alignmentPattern[version][0];
    328          		y = alignmentPattern[version][0];
    329          		QRspec_putAlignmentMarker(frame, width, x, y);
   \   0000003E   0x460B             MOV      R3,R1
   \   00000040   0x4629             MOV      R1,R5
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0xB001             ADD      SP,SP,#+4
   \   00000046   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   0000004A   0x....             B.N      QRspec_putAlignmentMarker
    330          		return;
    331          	}
    332          
    333          	cx = alignmentPattern[version][0];
   \                     ??QRspec_putAlignmentPattern_3: (+1)
   \   0000004C   0x4688             MOV      R8,R1
    334          	for(x=1; x<w - 1; x++) {
   \   0000004E   0xF04F 0x0901      MOV      R9,#+1
   \   00000052   0xF1AA 0x0701      SUB      R7,R10,#+1
   \   00000056   0xE00E             B.N      ??QRspec_putAlignmentPattern_4
    335          		QRspec_putAlignmentMarker(frame, width,  6, cx);
   \                     ??QRspec_putAlignmentPattern_5: (+1)
   \   00000058   0x4643             MOV      R3,R8
   \   0000005A   0x2206             MOVS     R2,#+6
   \   0000005C   0x4629             MOV      R1,R5
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       QRspec_putAlignmentMarker
    336          		QRspec_putAlignmentMarker(frame, width, cx,  6);
   \   00000064   0x2306             MOVS     R3,#+6
   \   00000066   0x4642             MOV      R2,R8
   \   00000068   0x4629             MOV      R1,R5
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       QRspec_putAlignmentMarker
    337          		cx += d;
   \   00000070   0x44B0             ADD      R8,R6,R8
    338          	}
   \   00000072   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??QRspec_putAlignmentPattern_4: (+1)
   \   00000076   0x45B9             CMP      R9,R7
   \   00000078   0xDBEE             BLT.N    ??QRspec_putAlignmentPattern_5
    339          
    340          	cy = alignmentPattern[version][0];
   \   0000007A   0xF8DD 0xA000      LDR      R10,[SP, #+0]
    341          	for(y=0; y<w-1; y++) {
   \   0000007E   0xF04F 0x0B00      MOV      R11,#+0
   \   00000082   0xE00D             B.N      ??QRspec_putAlignmentPattern_6
    342          		cx = alignmentPattern[version][0];
    343          		for(x=0; x<w-1; x++) {
    344          			QRspec_putAlignmentMarker(frame, width, cx, cy);
   \                     ??QRspec_putAlignmentPattern_7: (+1)
   \   00000084   0x4653             MOV      R3,R10
   \   00000086   0x4642             MOV      R2,R8
   \   00000088   0x4629             MOV      R1,R5
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       QRspec_putAlignmentMarker
    345          			cx += d;
   \   00000090   0x44B0             ADD      R8,R6,R8
    346          		}
   \   00000092   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??QRspec_putAlignmentPattern_8: (+1)
   \   00000096   0x45B9             CMP      R9,R7
   \   00000098   0xDBF4             BLT.N    ??QRspec_putAlignmentPattern_7
    347          		cy += d;
   \   0000009A   0x44B2             ADD      R10,R6,R10
   \   0000009C   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??QRspec_putAlignmentPattern_6: (+1)
   \   000000A0   0x45BB             CMP      R11,R7
   \   000000A2   0xDA04             BGE.N    ??QRspec_putAlignmentPattern_0
   \   000000A4   0xF8DD 0x8000      LDR      R8,[SP, #+0]
   \   000000A8   0xF04F 0x0900      MOV      R9,#+0
   \   000000AC   0xE7F3             B.N      ??QRspec_putAlignmentPattern_8
    348          	}
    349          }
   \                     ??QRspec_putAlignmentPattern_0: (+1)
   \   000000AE   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    350          
    351          /******************************************************************************
    352           * Version information pattern
    353           *****************************************************************************/
    354          
    355          /**
    356           * Version information pattern (BCH coded).
    357           * See Table 1 in Appendix D (pp.68) of JIS X0510:2004.
    358           */

   \                                 In section .text, align 4, keep-with-next
    359          static const unsigned int versionPattern[QRSPEC_VERSION_MAX - 6] = {
   \                     versionPattern:
   \   00000000   0x00007C94         DC32 31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784
   \              0x000085BC   
   \              0x00009A99   
   \              0x0000A4D3   
   \              0x0000BBF6   
   \              0x0000C762   
   \              0x0000D847   
   \              0x0000E60D   
   \              0x0000F928   
   \   00000024   0x00010B78         DC32 68472, 70749, 76311, 79154, 84390, 87683, 92361, 96236, 102084
   \              0x0001145D   
   \              0x00012A17   
   \              0x00013532   
   \              0x000149A6   
   \              0x00015683   
   \              0x000168C9   
   \              0x000177EC   
   \              0x00018EC4   
   \   00000048   0x000191E1         DC32 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589
   \              0x0001AFAB   
   \              0x0001B08E   
   \              0x0001CC1A   
   \              0x0001D33F   
   \              0x0001ED75   
   \              0x0001F250   
   \              0x000209D5   
   \   00000068   0x000216F0         DC32 136944, 141498, 145311, 150283, 152622, 158308, 161089, 167017
   \              0x000228BA   
   \              0x0002379F   
   \              0x00024B0B   
   \              0x0002542E   
   \              0x00026A64   
   \              0x00027541   
   \              0x00028C69   
    360          	0x07c94, 0x085bc, 0x09a99, 0x0a4d3, 0x0bbf6, 0x0c762, 0x0d847, 0x0e60d,
    361          	0x0f928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9,
    362          	0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75,
    363          	0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64,
    364          	0x27541, 0x28c69
    365          };
    366          

   \                                 In section .text, align 2, keep-with-next
    367          unsigned int QRspec_getVersionPattern(int version)
    368          {
    369          	if(version < 7 || version > QRSPEC_VERSION_MAX) return 0;
   \                     QRspec_getVersionPattern: (+1)
   \   00000000   0x1FC1             SUBS     R1,R0,#+7
   \   00000002   0x2922             CMP      R1,#+34
   \   00000004   0xD301             BCC.N    ??QRspec_getVersionPattern_0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4770             BX       LR
    370          
    371          	return versionPattern[version - 7];
   \                     ??QRspec_getVersionPattern_0: (+1)
   \   0000000A   0x.... 0x....      ADR.W    R1,versionPattern
   \   0000000E   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   00000012   0xF850 0x0C1C      LDR      R0,[R0, #-28]
   \   00000016   0x4770             BX       LR               ;; return
    372          }
    373          
    374          /******************************************************************************
    375           * Format information
    376           *****************************************************************************/
    377          
    378          /* See calcFormatInfo in tests/test_qrspec.c */

   \                                 In section .text, align 4, keep-with-next
    379          static const unsigned int formatInfo[4][8] = {
   \                     formatInfo:
   \   00000000   0x000077C4         DC32 30660, 29427, 32170, 30877, 26159, 25368, 27713, 26998, 21522
   \              0x000072F3   
   \              0x00007DAA   
   \              0x0000789D   
   \              0x0000662F   
   \              0x00006318   
   \              0x00006C41   
   \              0x00006976   
   \              0x00005412   
   \   00000024   0x00005125         DC32 20773, 24188, 23371, 17913, 16590, 20375, 19104, 13663, 12392
   \              0x00005E7C   
   \              0x00005B4B   
   \              0x000045F9   
   \              0x000040CE   
   \              0x00004F97   
   \              0x00004AA0   
   \              0x0000355F   
   \              0x00003068   
   \   00000048   0x00003F31         DC32 16177, 14854, 9396, 8579, 11994, 11245, 5769, 5054, 7399, 6608
   \              0x00003A06   
   \              0x000024B4   
   \              0x00002183   
   \              0x00002EDA   
   \              0x00002BED   
   \              0x00001689   
   \              0x000013BE   
   \              0x00001CE7   
   \              0x000019D0   
   \   00000070   0x00000762         DC32 1890, 597, 3340, 2107
   \              0x00000255   
   \              0x00000D0C   
   \              0x0000083B   
    380          	{0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976},
    381          	{0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0},
    382          	{0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed},
    383          	{0x1689, 0x13be, 0x1ce7, 0x19d0, 0x0762, 0x0255, 0x0d0c, 0x083b}
    384          };
    385          

   \                                 In section .text, align 2, keep-with-next
    386          unsigned int QRspec_getFormatInfo(int mask, QRecLevel level)
    387          {
    388          	if(mask < 0 || mask > 7) return 0;
   \                     QRspec_getFormatInfo: (+1)
   \   00000000   0x2808             CMP      R0,#+8
   \   00000002   0xD301             BCC.N    ??QRspec_getFormatInfo_0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x4770             BX       LR
    389          
    390          	return formatInfo[level][mask];
   \                     ??QRspec_getFormatInfo_0: (+1)
   \   00000008   0x.... 0x....      ADR.W    R2,formatInfo
   \   0000000C   0xEB02 0x1141      ADD      R1,R2,R1, LSL #+5
   \   00000010   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
    391          }
    392          
    393          /******************************************************************************
    394           * Frame
    395           *****************************************************************************/
    396          
    397          /**
    398           * Cache of initial frames.
    399           */
    400          /* C99 says that static storage shall be initialized to a null pointer
    401           * by compiler. */

   \                                 In section .bss, align 4
    402          static unsigned char *frames[QRSPEC_VERSION_MAX + 1];
   \                     frames:
   \   00000000                      DS8 164
    403          #ifdef HAVE_LIBPTHREAD
    404          static pthread_mutex_t frames_mutex = PTHREAD_MUTEX_INITIALIZER;
    405          #endif
    406          
    407          /**
    408           * Put a finder pattern.
    409           * @param frame
    410           * @param width
    411           * @param ox,oy upper-left coordinate of the pattern
    412           */

   \                                 In section .text, align 2, keep-with-next
    413          static void putFinderPattern(unsigned char *frame, int width, int ox, int oy)
    414          {
   \                     putFinderPattern: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    415          	static const unsigned char finder[] = {
    416          		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
    417          		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
    418          		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
    419          		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
    420          		0xc1, 0xc0, 0xc1, 0xc1, 0xc1, 0xc0, 0xc1,
    421          		0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1,
    422          		0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1, 0xc1,
    423          	};
    424          	int x, y;
    425          	const unsigned char *s;
    426          
    427          	frame += oy * width + ox;
   \   00000002   0xFB01 0x2203      MLA      R2,R1,R3,R2
   \   00000006   0x1810             ADDS     R0,R2,R0
    428          	s = finder;
   \   00000008   0x.... 0x....      ADR.W    R2,??finder_1
    429          	for(y=0; y<7; y++) {
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0xE008             B.N      ??putFinderPattern_0
    430          		for(x=0; x<7; x++) {
    431          			frame[x] = s[x];
   \                     ??putFinderPattern_1: (+1)
   \   00000010   0x5CA5             LDRB     R5,[R4, R2]
   \   00000012   0x5425             STRB     R5,[R4, R0]
    432          		}
   \   00000014   0x1C64             ADDS     R4,R4,#+1
   \                     ??putFinderPattern_2: (+1)
   \   00000016   0x2C07             CMP      R4,#+7
   \   00000018   0xDBFA             BLT.N    ??putFinderPattern_1
    433          		frame += width;
   \   0000001A   0x1808             ADDS     R0,R1,R0
    434          		s += 7;
   \   0000001C   0xF202 0x0207      ADDW     R2,R2,#+7
   \   00000020   0x1C5B             ADDS     R3,R3,#+1
   \                     ??putFinderPattern_0: (+1)
   \   00000022   0x2B07             CMP      R3,#+7
   \   00000024   0xDA01             BGE.N    ??putFinderPattern_3
   \   00000026   0x2400             MOVS     R4,#+0
   \   00000028   0xE7F5             B.N      ??putFinderPattern_2
    435          	}
    436          }
   \                     ??putFinderPattern_3: (+1)
   \   0000002A   0xBC30             POP      {R4,R5}
   \   0000002C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??finder_1:
   \   00000000   0xC1 0xC1          DC8 193, 193, 193, 193, 193, 193, 193, 193, 192, 192, 192, 192, 192
   \              0xC1 0xC1    
   \              0xC1 0xC1    
   \              0xC1 0xC1    
   \              0xC0 0xC0    
   \              0xC0 0xC0    
   \              0xC0         
   \   0000000D   0xC1 0xC1          DC8 193, 193, 192, 193, 193, 193, 192, 193, 193, 192, 193, 193, 193
   \              0xC0 0xC1    
   \              0xC1 0xC1    
   \              0xC0 0xC1    
   \              0xC1 0xC0    
   \              0xC1 0xC1    
   \              0xC1         
   \   0000001A   0xC0 0xC1          DC8 192, 193, 193, 192, 193, 193, 193, 192, 193, 193, 192, 192, 192
   \              0xC1 0xC0    
   \              0xC1 0xC1    
   \              0xC1 0xC0    
   \              0xC1 0xC1    
   \              0xC0 0xC0    
   \              0xC0         
   \   00000027   0xC0 0xC0          DC8 192, 192, 193, 193, 193, 193, 193, 193, 193, 193, 0, 0, 0
   \              0xC1 0xC1    
   \              0xC1 0xC1    
   \              0xC1 0xC1    
   \              0xC1 0xC1    
   \              0x00 0x00    
   \              0x00         
    437          
    438          

   \                                 In section .text, align 2, keep-with-next
    439          static unsigned char *QRspec_createFrame(int version)
    440          {
   \                     QRspec_createFrame: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4607             MOV      R7,R0
    441          	unsigned char *frame, *p, *q;
    442          	int width;
    443          	int x, y;
    444          	unsigned int verinfo, v;
    445          
    446          	width = qrspecCapacity[version].width;
   \   00000006   0xEBC7 0x00C7      RSB      R0,R7,R7, LSL #+3
   \   0000000A   0x0080             LSLS     R0,R0,#+2
   \   0000000C   0x.... 0x....      ADR.W    R1,qrspecCapacity
   \   00000010   0x5844             LDR      R4,[R0, R1]
    447          	frame = (unsigned char *)malloc(width * width);
   \   00000012   0xFB04 0xF604      MUL      R6,R4,R4
   \   00000016   0x4630             MOV      R0,R6
   \   00000018   0x.... 0x....      BL       malloc
   \   0000001C   0x0005             MOVS     R5,R0
    448          	if(frame == NULL) return NULL;
   \   0000001E   0xD101             BNE.N    ??QRspec_createFrame_0
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE0B0             B.N      ??QRspec_createFrame_1
    449          
    450          	memset(frame, 0, width * width);
   \                     ??QRspec_createFrame_0: (+1)
   \   00000024   0x4632             MOV      R2,R6
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x.... 0x....      BL       memset
    451          	/* Finder pattern */
    452          	putFinderPattern(frame, width, 0, 0);
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0x461A             MOV      R2,R3
   \   00000030   0x4621             MOV      R1,R4
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       putFinderPattern
    453          	putFinderPattern(frame, width, width - 7, 0);
   \   00000038   0x1FE6             SUBS     R6,R4,#+7
   \   0000003A   0x2300             MOVS     R3,#+0
   \   0000003C   0x4632             MOV      R2,R6
   \   0000003E   0x4621             MOV      R1,R4
   \   00000040   0x4628             MOV      R0,R5
   \   00000042   0x.... 0x....      BL       putFinderPattern
    454          	putFinderPattern(frame, width, 0, width - 7);
   \   00000046   0x4633             MOV      R3,R6
   \   00000048   0x2200             MOVS     R2,#+0
   \   0000004A   0x4621             MOV      R1,R4
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x.... 0x....      BL       putFinderPattern
    455          	/* Separator */
    456          	p = frame;
   \   00000052   0x4628             MOV      R0,R5
    457          	q = frame + width * (width - 7);
   \   00000054   0xFB06 0x5804      MLA      R8,R6,R4,R5
   \   00000058   0x4641             MOV      R1,R8
    458          	for(y=0; y<7; y++) {
   \   0000005A   0x2200             MOVS     R2,#+0
   \   0000005C   0x23C0             MOVS     R3,#+192
   \   0000005E   0xE007             B.N      ??QRspec_createFrame_2
    459          		p[7] = 0xc0;
   \                     ??QRspec_createFrame_3: (+1)
   \   00000060   0x71C3             STRB     R3,[R0, #+7]
    460          		p[width - 8] = 0xc0;
   \   00000062   0x1826             ADDS     R6,R4,R0
   \   00000064   0xF806 0x3C08      STRB     R3,[R6, #-8]
    461          		q[7] = 0xc0;
   \   00000068   0x71CB             STRB     R3,[R1, #+7]
    462          		p += width;
   \   0000006A   0x1820             ADDS     R0,R4,R0
    463          		q += width;
   \   0000006C   0x1861             ADDS     R1,R4,R1
    464          	}
   \   0000006E   0x1C52             ADDS     R2,R2,#+1
   \                     ??QRspec_createFrame_2: (+1)
   \   00000070   0x2A07             CMP      R2,#+7
   \   00000072   0xDBF5             BLT.N    ??QRspec_createFrame_3
    465          	memset(frame + width * 7, 0xc0, 8);
   \   00000074   0x2208             MOVS     R2,#+8
   \   00000076   0x4619             MOV      R1,R3
   \   00000078   0xEBC4 0x00C4      RSB      R0,R4,R4, LSL #+3
   \   0000007C   0x1940             ADDS     R0,R0,R5
   \   0000007E   0x.... 0x....      BL       memset
    466          	memset(frame + width * 8 - 8, 0xc0, 8);
   \   00000082   0xEB05 0x09C4      ADD      R9,R5,R4, LSL #+3
   \   00000086   0x2208             MOVS     R2,#+8
   \   00000088   0x21C0             MOVS     R1,#+192
   \   0000008A   0xF1A9 0x0008      SUB      R0,R9,#+8
   \   0000008E   0x.... 0x....      BL       memset
    467          	memset(frame + width * (width - 8), 0xc0, 8);
   \   00000092   0xF1A4 0x0008      SUB      R0,R4,#+8
   \   00000096   0xFB00 0x5604      MLA      R6,R0,R4,R5
   \   0000009A   0x2208             MOVS     R2,#+8
   \   0000009C   0x21C0             MOVS     R1,#+192
   \   0000009E   0x4630             MOV      R0,R6
   \   000000A0   0x.... 0x....      BL       memset
    468          	/* Mask format information area */
    469          	memset(frame + width * 8, 0x84, 9);
   \   000000A4   0x2209             MOVS     R2,#+9
   \   000000A6   0x2184             MOVS     R1,#+132
   \   000000A8   0x4648             MOV      R0,R9
   \   000000AA   0x.... 0x....      BL       memset
    470          	memset(frame + width * 9 - 8, 0x84, 8);
   \   000000AE   0x2208             MOVS     R2,#+8
   \   000000B0   0x2184             MOVS     R1,#+132
   \   000000B2   0xEB04 0x00C4      ADD      R0,R4,R4, LSL #+3
   \   000000B6   0x1940             ADDS     R0,R0,R5
   \   000000B8   0x3808             SUBS     R0,R0,#+8
   \   000000BA   0x.... 0x....      BL       memset
    471          	p = frame + 8;
   \   000000BE   0xF105 0x0008      ADD      R0,R5,#+8
    472          	for(y=0; y<8; y++) {
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x2284             MOVS     R2,#+132
   \   000000C6   0xE002             B.N      ??QRspec_createFrame_4
    473          		*p = 0x84;
   \                     ??QRspec_createFrame_5: (+1)
   \   000000C8   0x7002             STRB     R2,[R0, #+0]
    474          		p += width;
   \   000000CA   0x1820             ADDS     R0,R4,R0
    475          	}
   \   000000CC   0x1C49             ADDS     R1,R1,#+1
   \                     ??QRspec_createFrame_4: (+1)
   \   000000CE   0x2908             CMP      R1,#+8
   \   000000D0   0xDBFA             BLT.N    ??QRspec_createFrame_5
    476          	p = frame + width * (width - 7) + 8;
   \   000000D2   0xF108 0x0008      ADD      R0,R8,#+8
    477          	for(y=0; y<7; y++) {
   \   000000D6   0x2200             MOVS     R2,#+0
   \   000000D8   0x2184             MOVS     R1,#+132
   \   000000DA   0xE002             B.N      ??QRspec_createFrame_6
    478          		*p = 0x84;
   \                     ??QRspec_createFrame_7: (+1)
   \   000000DC   0x7001             STRB     R1,[R0, #+0]
    479          		p += width;
   \   000000DE   0x1820             ADDS     R0,R4,R0
    480          	}
   \   000000E0   0x1C52             ADDS     R2,R2,#+1
   \                     ??QRspec_createFrame_6: (+1)
   \   000000E2   0x2A07             CMP      R2,#+7
   \   000000E4   0xDBFA             BLT.N    ??QRspec_createFrame_7
    481          	/* Timing pattern */
    482          	p = frame + width * 6 + 8;
   \   000000E6   0xEB04 0x0044      ADD      R0,R4,R4, LSL #+1
   \   000000EA   0xEB05 0x0040      ADD      R0,R5,R0, LSL #+1
   \   000000EE   0xF100 0x0308      ADD      R3,R0,#+8
    483          	q = frame + width * 8 + 6;
   \   000000F2   0xF209 0x0006      ADDW     R0,R9,#+6
    484          	for(x=1; x<width-15; x++) {
   \   000000F6   0x2101             MOVS     R1,#+1
   \   000000F8   0xE008             B.N      ??QRspec_createFrame_8
    485          		*p =  0x90 | (x & 1);
   \                     ??QRspec_createFrame_9: (+1)
   \   000000FA   0xF001 0x0201      AND      R2,R1,#0x1
   \   000000FE   0xF042 0x0290      ORR      R2,R2,#0x90
   \   00000102   0xF803 0x2B01      STRB     R2,[R3], #+1
    486          		*q =  0x90 | (x & 1);
   \   00000106   0x7002             STRB     R2,[R0, #+0]
    487          		p++;
    488          		q += width;
   \   00000108   0x1820             ADDS     R0,R4,R0
    489          	}
   \   0000010A   0x1C49             ADDS     R1,R1,#+1
   \                     ??QRspec_createFrame_8: (+1)
   \   0000010C   0xF1A4 0x020F      SUB      R2,R4,#+15
   \   00000110   0x4291             CMP      R1,R2
   \   00000112   0xDBF2             BLT.N    ??QRspec_createFrame_9
    490          	/* Alignment pattern */
    491          	QRspec_putAlignmentPattern(version, frame, width);
   \   00000114   0x4622             MOV      R2,R4
   \   00000116   0x4629             MOV      R1,R5
   \   00000118   0x4638             MOV      R0,R7
   \   0000011A   0x.... 0x....      BL       QRspec_putAlignmentPattern
    492          
    493          	/* Version information */
    494          	if(version >= 7) {
   \   0000011E   0x2F07             CMP      R7,#+7
   \   00000120   0xDB2E             BLT.N    ??QRspec_createFrame_10
    495          		verinfo = QRspec_getVersionPattern(version);
   \   00000122   0x4638             MOV      R0,R7
   \   00000124   0x.... 0x....      BL       QRspec_getVersionPattern
    496          
    497          		p = frame + width * (width - 11);
   \   00000128   0xF1A4 0x010B      SUB      R1,R4,#+11
   \   0000012C   0xFB01 0x5304      MLA      R3,R1,R4,R5
    498          		v = verinfo;
   \   00000130   0x4607             MOV      R7,R0
    499          		for(x=0; x<6; x++) {
   \   00000132   0x2100             MOVS     R1,#+0
   \   00000134   0xE00C             B.N      ??QRspec_createFrame_11
    500          			for(y=0; y<3; y++) {
    501          				p[width * y + x] = 0x88 | (v & 1);
   \                     ??QRspec_createFrame_12: (+1)
   \   00000136   0xFB02 0x1C04      MLA      R12,R2,R4,R1
   \   0000013A   0xF007 0x0E01      AND      LR,R7,#0x1
   \   0000013E   0xF04E 0x0E88      ORR      LR,LR,#0x88
   \   00000142   0xF80C 0xE003      STRB     LR,[R12, R3]
    502          				v = v >> 1;
   \   00000146   0x087F             LSRS     R7,R7,#+1
    503          			}
   \   00000148   0x1C52             ADDS     R2,R2,#+1
   \                     ??QRspec_createFrame_13: (+1)
   \   0000014A   0x2A03             CMP      R2,#+3
   \   0000014C   0xDBF3             BLT.N    ??QRspec_createFrame_12
   \   0000014E   0x1C49             ADDS     R1,R1,#+1
   \                     ??QRspec_createFrame_11: (+1)
   \   00000150   0x2906             CMP      R1,#+6
   \   00000152   0xDA01             BGE.N    ??QRspec_createFrame_14
   \   00000154   0x2200             MOVS     R2,#+0
   \   00000156   0xE7F8             B.N      ??QRspec_createFrame_13
    504          		}
    505          
    506          		p = frame + width - 11;
   \                     ??QRspec_createFrame_14: (+1)
   \   00000158   0x1961             ADDS     R1,R4,R5
   \   0000015A   0xF1A1 0x030B      SUB      R3,R1,#+11
    507          		v = verinfo;
    508          		for(y=0; y<6; y++) {
   \   0000015E   0x2200             MOVS     R2,#+0
   \   00000160   0xE00A             B.N      ??QRspec_createFrame_15
    509          			for(x=0; x<3; x++) {
    510          				p[x] = 0x88 | (v & 1);
   \                     ??QRspec_createFrame_16: (+1)
   \   00000162   0xF000 0x0701      AND      R7,R0,#0x1
   \   00000166   0xF047 0x0788      ORR      R7,R7,#0x88
   \   0000016A   0x54CF             STRB     R7,[R1, R3]
    511          				v = v >> 1;
   \   0000016C   0x0840             LSRS     R0,R0,#+1
    512          			}
   \   0000016E   0x1C49             ADDS     R1,R1,#+1
   \                     ??QRspec_createFrame_17: (+1)
   \   00000170   0x2903             CMP      R1,#+3
   \   00000172   0xDBF6             BLT.N    ??QRspec_createFrame_16
    513          			p += width;
   \   00000174   0x18E3             ADDS     R3,R4,R3
   \   00000176   0x1C52             ADDS     R2,R2,#+1
   \                     ??QRspec_createFrame_15: (+1)
   \   00000178   0x2A06             CMP      R2,#+6
   \   0000017A   0xDA01             BGE.N    ??QRspec_createFrame_10
   \   0000017C   0x2100             MOVS     R1,#+0
   \   0000017E   0xE7F7             B.N      ??QRspec_createFrame_17
    514          		}
    515          	}
    516          	/* and a little bit... */
    517          	frame[width * (width - 8) + 8] = 0x81;
   \                     ??QRspec_createFrame_10: (+1)
   \   00000180   0x2081             MOVS     R0,#+129
   \   00000182   0x7230             STRB     R0,[R6, #+8]
    518          
    519          	return frame;
   \   00000184   0x4628             MOV      R0,R5
   \                     ??QRspec_createFrame_1: (+1)
   \   00000186   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    520          }
    521          

   \                                 In section .text, align 2, keep-with-next
    522          unsigned char *QRspec_newFrame(int version)
    523          {
   \                     QRspec_newFrame: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    524          	unsigned char *frame;
    525          	int width;
    526          
    527          	if(version < 1 || version > QRSPEC_VERSION_MAX) return NULL;
   \   00000004   0x1E60             SUBS     R0,R4,#+1
   \   00000006   0x2828             CMP      R0,#+40
   \   00000008   0xD301             BCC.N    ??QRspec_newFrame_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBDF2             POP      {R1,R4-R7,PC}
    528          
    529          #ifdef HAVE_LIBPTHREAD
    530          	pthread_mutex_lock(&frames_mutex);
    531          #endif
    532          	if(frames[version] == NULL) {
   \                     ??QRspec_newFrame_0: (+1)
   \   0000000E   0x....             LDR.N    R5,??DataTable9
   \   00000010   0xF855 0x0024      LDR      R0,[R5, R4, LSL #+2]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD104             BNE.N    ??QRspec_newFrame_1
    533          		frames[version] = QRspec_createFrame(version);
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       QRspec_createFrame
   \   0000001E   0xF845 0x0024      STR      R0,[R5, R4, LSL #+2]
    534          	}
    535          #ifdef HAVE_LIBPTHREAD
    536          	pthread_mutex_unlock(&frames_mutex);
    537          #endif
    538          	if(frames[version] == NULL) return NULL;
   \                     ??QRspec_newFrame_1: (+1)
   \   00000022   0xF855 0x0024      LDR      R0,[R5, R4, LSL #+2]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE.N    ??QRspec_newFrame_2
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xBDF2             POP      {R1,R4-R7,PC}
    539          
    540          	width = qrspecCapacity[version].width;
   \                     ??QRspec_newFrame_2: (+1)
   \   0000002E   0xEBC4 0x00C4      RSB      R0,R4,R4, LSL #+3
   \   00000032   0x0080             LSLS     R0,R0,#+2
   \   00000034   0x.... 0x....      ADR.W    R1,qrspecCapacity
   \   00000038   0x5840             LDR      R0,[R0, R1]
    541          	frame = (unsigned char *)malloc(width * width);
   \   0000003A   0xFB00 0xF600      MUL      R6,R0,R0
   \   0000003E   0x4630             MOV      R0,R6
   \   00000040   0x.... 0x....      BL       malloc
   \   00000044   0x0007             MOVS     R7,R0
    542          	if(frame == NULL) return NULL;
   \   00000046   0xD101             BNE.N    ??QRspec_newFrame_3
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xBDF2             POP      {R1,R4-R7,PC}
    543          	memcpy(frame, frames[version], width * width);
   \                     ??QRspec_newFrame_3: (+1)
   \   0000004C   0x4632             MOV      R2,R6
   \   0000004E   0xF855 0x1024      LDR      R1,[R5, R4, LSL #+2]
   \   00000052   0x.... 0x....      BL       memcpy
    544          
    545          	return frame;
   \   00000056   0x4638             MOV      R0,R7
   \   00000058   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    546          }
    547          

   \                                 In section .text, align 2, keep-with-next
    548          void QRspec_clearCache(void)
    549          {
   \                     QRspec_clearCache: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    550          	int i;
    551          
    552          #ifdef HAVE_LIBPTHREAD
    553          	pthread_mutex_lock(&frames_mutex);
    554          #endif
    555          	for(i=1; i<=QRSPEC_VERSION_MAX; i++) {
   \   00000002   0x2401             MOVS     R4,#+1
   \   00000004   0x....             LDR.N    R5,??DataTable9
   \   00000006   0xE007             B.N      ??QRspec_clearCache_0
    556          		free(frames[i]);
   \                     ??QRspec_clearCache_1: (+1)
   \   00000008   0xF855 0x0024      LDR      R0,[R5, R4, LSL #+2]
   \   0000000C   0x.... 0x....      BL       free
    557          		frames[i] = NULL;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF845 0x0024      STR      R0,[R5, R4, LSL #+2]
    558          	}
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \                     ??QRspec_clearCache_0: (+1)
   \   00000018   0x2C29             CMP      R4,#+41
   \   0000001A   0xDBF5             BLT.N    ??QRspec_clearCache_1
    559          #ifdef HAVE_LIBPTHREAD
    560          	pthread_mutex_unlock(&frames_mutex);
    561          #endif
    562          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     frames

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   QRspec_clearCache
        16   -> free
      32   QRspec_createFrame
        32   -> QRspec_getVersionPattern
        32   -> QRspec_putAlignmentPattern
        32   -> malloc
        32   -> memset
        32   -> putFinderPattern
       0   QRspec_getDataLength
       0   QRspec_getECCLength
      32   QRspec_getEccSpec
        32   -> QRspec_getDataLength
        32   -> QRspec_getECCLength
       0   QRspec_getFormatInfo
       4   QRspec_getMinimumVersion
       0   QRspec_getRemainder
       0   QRspec_getVersionPattern
       0   QRspec_getWidth
      16   QRspec_lengthIndicator
        16   -> QRinput_isSplittableMode
      16   QRspec_maximumWords
        16   -> QRinput_isSplittableMode
      24   QRspec_newFrame
        24   -> QRspec_createFrame
        24   -> malloc
        24   -> memcpy
       8   QRspec_putAlignmentMarker
      40   QRspec_putAlignmentPattern
         0   -> QRspec_putAlignmentMarker
        40   -> QRspec_putAlignmentMarker
       8   putFinderPattern


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
      30  QRspec_clearCache
     394  QRspec_createFrame
      24  QRspec_getDataLength
      20  QRspec_getECCLength
     104  QRspec_getEccSpec
      22  QRspec_getFormatInfo
      50  QRspec_getMinimumVersion
      16  QRspec_getRemainder
      24  QRspec_getVersionPattern
      14  QRspec_getWidth
      54  QRspec_lengthIndicator
      68  QRspec_maximumWords
      90  QRspec_newFrame
      50  QRspec_putAlignmentMarker
     178  QRspec_putAlignmentPattern
     328  alignmentPattern
    1312  eccTable
      28  finder
      52  finder
     128  formatInfo
     164  frames
      48  lengthTableBits
      46  putFinderPattern
    1148  qrspecCapacity
     136  versionPattern

 
   164 bytes in section .bss
 4 368 bytes in section .text
 
 4 368 bytes of CODE memory
   164 bytes of DATA memory

Errors: none
Warnings: none
